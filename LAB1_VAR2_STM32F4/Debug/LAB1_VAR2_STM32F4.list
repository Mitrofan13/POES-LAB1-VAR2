
LAB1_VAR2_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008670  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  08008820  08008820  00018820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b6c  08008b6c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008b6c  08008b6c  00018b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b74  08008b74  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b74  08008b74  00018b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b78  08008b78  00018b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00005734  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200057ac  200057ac  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018936  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b1f  00000000  00000000  000389de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  0003c500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001280  00000000  00000000  0003d918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000270dd  00000000  00000000  0003eb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017f2e  00000000  00000000  00065c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4c03  00000000  00000000  0007dba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001627a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d18  00000000  00000000  001627f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008808 	.word	0x08008808

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08008808 	.word	0x08008808

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <MX_DMA_Init+0x4c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a0f      	ldr	r2, [pc, #60]	; (80005f0 <MX_DMA_Init+0x4c>)
 80005b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <MX_DMA_Init+0x4c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2105      	movs	r1, #5
 80005ca:	200c      	movs	r0, #12
 80005cc:	f001 f82a 	bl	8001624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80005d0:	200c      	movs	r0, #12
 80005d2:	f001 f843 	bl	800165c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2105      	movs	r1, #5
 80005da:	200e      	movs	r0, #14
 80005dc:	f001 f822 	bl	8001624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80005e0:	200e      	movs	r0, #14
 80005e2:	f001 f83b 	bl	800165c <HAL_NVIC_EnableIRQ>

}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800

080005f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4a07      	ldr	r2, [pc, #28]	; (8000620 <vApplicationGetIdleTaskMemory+0x2c>)
 8000604:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <vApplicationGetIdleTaskMemory+0x30>)
 800060a:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	200011f8 	.word	0x200011f8
 8000624:	2000124c 	.word	0x2000124c

08000628 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000628:	b5b0      	push	{r4, r5, r7, lr}
 800062a:	b0a0      	sub	sp, #128	; 0x80
 800062c:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myDataQueue */
  osMessageQDef(myDataQueue, 1, QUEUE_t);
 800062e:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <MX_FREERTOS_Init+0xc0>)
 8000630:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000634:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000636:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myDataQueueHandle = osMessageCreate(osMessageQ(myDataQueue), NULL);
 800063a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f004 fc2c 	bl	8004e9e <osMessageCreate>
 8000646:	4603      	mov	r3, r0
 8000648:	4a28      	ldr	r2, [pc, #160]	; (80006ec <MX_FREERTOS_Init+0xc4>)
 800064a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 800064c:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <MX_FREERTOS_Init+0xc8>)
 800064e:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000652:	461d      	mov	r5, r3
 8000654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000658:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000660:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f004 fbb9 	bl	8004dde <osThreadCreate>
 800066c:	4603      	mov	r3, r0
 800066e:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <MX_FREERTOS_Init+0xcc>)
 8000670:	6013      	str	r3, [r2, #0]

  /* definition and creation of LedStateTask */
  osThreadStaticDef(LedStateTask, StartLedStateTask, osPriorityLow, 0, 256, LedStateTaskBuffer, &LedStateTaskControlBlock);
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <MX_FREERTOS_Init+0xd0>)
 8000674:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000678:	461d      	mov	r5, r3
 800067a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000682:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LedStateTaskHandle = osThreadCreate(osThread(LedStateTask), NULL);
 8000686:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f004 fba6 	bl	8004dde <osThreadCreate>
 8000692:	4603      	mov	r3, r0
 8000694:	4a19      	ldr	r2, [pc, #100]	; (80006fc <MX_FREERTOS_Init+0xd4>)
 8000696:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadBtnTask */
  osThreadStaticDef(ReadBtnTask, StartReadBtnTask, osPriorityLow, 0, 128, ReadBtnTaskBuffer, &ReadBtnTaskControlBlock);
 8000698:	4b19      	ldr	r3, [pc, #100]	; (8000700 <MX_FREERTOS_Init+0xd8>)
 800069a:	f107 041c 	add.w	r4, r7, #28
 800069e:	461d      	mov	r5, r3
 80006a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadBtnTaskHandle = osThreadCreate(osThread(ReadBtnTask), NULL);
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f004 fb93 	bl	8004dde <osThreadCreate>
 80006b8:	4603      	mov	r3, r0
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <MX_FREERTOS_Init+0xdc>)
 80006bc:	6013      	str	r3, [r2, #0]

  /* definition and creation of USART_Task */
  osThreadStaticDef(USART_Task, StartUSART_Task, osPriorityLow, 0, 512, USART_TaskBuffer, &USART_TaskControlBlock);
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_FREERTOS_Init+0xe0>)
 80006c0:	463c      	mov	r4, r7
 80006c2:	461d      	mov	r5, r3
 80006c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USART_TaskHandle = osThreadCreate(osThread(USART_Task), NULL);
 80006d0:	463b      	mov	r3, r7
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f004 fb82 	bl	8004dde <osThreadCreate>
 80006da:	4603      	mov	r3, r0
 80006dc:	4a0b      	ldr	r2, [pc, #44]	; (800070c <MX_FREERTOS_Init+0xe4>)
 80006de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80006e0:	bf00      	nop
 80006e2:	3780      	adds	r7, #128	; 0x80
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bdb0      	pop	{r4, r5, r7, pc}
 80006e8:	08008854 	.word	0x08008854
 80006ec:	200011f4 	.word	0x200011f4
 80006f0:	08008864 	.word	0x08008864
 80006f4:	20000094 	.word	0x20000094
 80006f8:	08008880 	.word	0x08008880
 80006fc:	200002ec 	.word	0x200002ec
 8000700:	0800889c 	.word	0x0800889c
 8000704:	20000744 	.word	0x20000744
 8000708:	080088b8 	.word	0x080088b8
 800070c:	2000099c 	.word	0x2000099c

08000710 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000718:	2001      	movs	r0, #1
 800071a:	f004 fbac 	bl	8004e76 <osDelay>
 800071e:	e7fb      	b.n	8000718 <StartDefaultTask+0x8>

08000720 <StartLedStateTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLedStateTask */
void StartLedStateTask(void const * argument)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		//		btn_cur = HAL_GPIO_ReadPin(BUTTON_EXTI_GPIO_Port, BUTTON_EXTI_Pin);
//		if(xQueueReceive(myDataQueueHandle, &brightnes, 1) == pdTRUE)
//		{
			switch (count)
 8000728:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <StartLedStateTask+0x90>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b03      	cmp	r3, #3
 800072e:	d837      	bhi.n	80007a0 <StartLedStateTask+0x80>
 8000730:	a201      	add	r2, pc, #4	; (adr r2, 8000738 <StartLedStateTask+0x18>)
 8000732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000736:	bf00      	nop
 8000738:	08000749 	.word	0x08000749
 800073c:	0800075f 	.word	0x0800075f
 8000740:	08000775 	.word	0x08000775
 8000744:	0800078b 	.word	0x0800078b
			{
			case 0:
			{
				TIM2->CCR1 = off_brightness;
 8000748:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <StartLedStateTask+0x94>)
 800074a:	781a      	ldrb	r2, [r3, #0]
 800074c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000750:	635a      	str	r2, [r3, #52]	; 0x34
				TIM2->CCR2 = off_brightness;
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <StartLedStateTask+0x94>)
 8000754:	781a      	ldrb	r2, [r3, #0]
 8000756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800075a:	639a      	str	r2, [r3, #56]	; 0x38
			}
			break;
 800075c:	e020      	b.n	80007a0 <StartLedStateTask+0x80>
			case 1:
			{
				TIM2->CCR1 = active_brightness;
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <StartLedStateTask+0x98>)
 8000760:	781a      	ldrb	r2, [r3, #0]
 8000762:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000766:	635a      	str	r2, [r3, #52]	; 0x34
				TIM2->CCR2 = off_brightness;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <StartLedStateTask+0x94>)
 800076a:	781a      	ldrb	r2, [r3, #0]
 800076c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000770:	639a      	str	r2, [r3, #56]	; 0x38

			}
			break;
 8000772:	e015      	b.n	80007a0 <StartLedStateTask+0x80>
			case 2:
			{
				TIM2->CCR1 = off_brightness;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <StartLedStateTask+0x94>)
 8000776:	781a      	ldrb	r2, [r3, #0]
 8000778:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800077c:	635a      	str	r2, [r3, #52]	; 0x34
				TIM2->CCR2 = active_brightness;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <StartLedStateTask+0x98>)
 8000780:	781a      	ldrb	r2, [r3, #0]
 8000782:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000786:	639a      	str	r2, [r3, #56]	; 0x38
			}
			break;
 8000788:	e00a      	b.n	80007a0 <StartLedStateTask+0x80>
			case 3:
			{
				TIM2->CCR1 = active_brightness;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <StartLedStateTask+0x98>)
 800078c:	781a      	ldrb	r2, [r3, #0]
 800078e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000792:	635a      	str	r2, [r3, #52]	; 0x34
				TIM2->CCR2 = active_brightness;
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <StartLedStateTask+0x98>)
 8000796:	781a      	ldrb	r2, [r3, #0]
 8000798:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800079c:	639a      	str	r2, [r3, #56]	; 0x38
			}
			break;
 800079e:	bf00      	nop
			}
			osDelay(5);
 80007a0:	2005      	movs	r0, #5
 80007a2:	f004 fb68 	bl	8004e76 <osDelay>
			btn_prev = btn_cur;
 80007a6:	4b05      	ldr	r3, [pc, #20]	; (80007bc <StartLedStateTask+0x9c>)
 80007a8:	781a      	ldrb	r2, [r3, #0]
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <StartLedStateTask+0xa0>)
 80007ac:	701a      	strb	r2, [r3, #0]
			switch (count)
 80007ae:	e7bb      	b.n	8000728 <StartLedStateTask+0x8>
 80007b0:	2000144c 	.word	0x2000144c
 80007b4:	2000144f 	.word	0x2000144f
 80007b8:	20000000 	.word	0x20000000
 80007bc:	2000144d 	.word	0x2000144d
 80007c0:	2000144e 	.word	0x2000144e

080007c4 <StartReadBtnTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReadBtnTask */
void StartReadBtnTask(void const * argument)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadBtnTask */
	/* Infinite loop */
	for(;;)
	{
		btn_cur = HAL_GPIO_ReadPin(BUTTON_EXTI_GPIO_Port, BUTTON_EXTI_Pin);
 80007cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d0:	4811      	ldr	r0, [pc, #68]	; (8000818 <StartReadBtnTask+0x54>)
 80007d2:	f001 fc79 	bl	80020c8 <HAL_GPIO_ReadPin>
 80007d6:	4603      	mov	r3, r0
 80007d8:	461a      	mov	r2, r3
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <StartReadBtnTask+0x58>)
 80007dc:	701a      	strb	r2, [r3, #0]
		if((btn_prev == 0) && (btn_cur != 0))
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <StartReadBtnTask+0x5c>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d110      	bne.n	8000808 <StartReadBtnTask+0x44>
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <StartReadBtnTask+0x58>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d00c      	beq.n	8000808 <StartReadBtnTask+0x44>
		{
			count++;
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <StartReadBtnTask+0x60>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	3301      	adds	r3, #1
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <StartReadBtnTask+0x60>)
 80007f8:	701a      	strb	r2, [r3, #0]
			if(count == 4)
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <StartReadBtnTask+0x60>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b04      	cmp	r3, #4
 8000800:	d102      	bne.n	8000808 <StartReadBtnTask+0x44>
			{
				count = 0;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <StartReadBtnTask+0x60>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
			}
		}
		btn_prev = btn_cur;
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <StartReadBtnTask+0x58>)
 800080a:	781a      	ldrb	r2, [r3, #0]
 800080c:	4b04      	ldr	r3, [pc, #16]	; (8000820 <StartReadBtnTask+0x5c>)
 800080e:	701a      	strb	r2, [r3, #0]
		osDelay(50);
 8000810:	2032      	movs	r0, #50	; 0x32
 8000812:	f004 fb30 	bl	8004e76 <osDelay>
		btn_cur = HAL_GPIO_ReadPin(BUTTON_EXTI_GPIO_Port, BUTTON_EXTI_Pin);
 8000816:	e7d9      	b.n	80007cc <StartReadBtnTask+0x8>
 8000818:	40020800 	.word	0x40020800
 800081c:	2000144d 	.word	0x2000144d
 8000820:	2000144e 	.word	0x2000144e
 8000824:	2000144c 	.word	0x2000144c

08000828 <StartUSART_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUSART_Task */
void StartUSART_Task(void const * argument)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
//				xQueueSend(myDataQueueHandle, &brightnes, 1);
//				HAL_UART_Transmit_IT(&huart3,tstring,strlen((char*)tstring));
//			}


				if (flag == 1)
 8000830:	4b19      	ldr	r3, [pc, #100]	; (8000898 <StartUSART_Task+0x70>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b01      	cmp	r3, #1
 8000838:	d129      	bne.n	800088e <StartUSART_Task+0x66>
				{
					sscanf(&buff[0], "%d", &str[0]);
 800083a:	4a18      	ldr	r2, [pc, #96]	; (800089c <StartUSART_Task+0x74>)
 800083c:	4918      	ldr	r1, [pc, #96]	; (80008a0 <StartUSART_Task+0x78>)
 800083e:	4819      	ldr	r0, [pc, #100]	; (80008a4 <StartUSART_Task+0x7c>)
 8000840:	f006 fb70 	bl	8006f24 <siscanf>
					if ((str[0] > 100) || (str[0] < 0))
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <StartUSART_Task+0x74>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b64      	cmp	r3, #100	; 0x64
 800084a:	dc03      	bgt.n	8000854 <StartUSART_Task+0x2c>
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <StartUSART_Task+0x74>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	da03      	bge.n	800085c <StartUSART_Task+0x34>
					{
						printf("Error. Please enter correct value!\r\n");
 8000854:	4814      	ldr	r0, [pc, #80]	; (80008a8 <StartUSART_Task+0x80>)
 8000856:	f006 fa97 	bl	8006d88 <puts>
 800085a:	e00d      	b.n	8000878 <StartUSART_Task+0x50>
					}
					else
					{
						active_brightness = str[0];
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <StartUSART_Task+0x74>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <StartUSART_Task+0x84>)
 8000864:	701a      	strb	r2, [r3, #0]
						printf("You enter %d value\r\n", active_brightness);
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <StartUSART_Task+0x84>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	4619      	mov	r1, r3
 800086c:	4810      	ldr	r0, [pc, #64]	; (80008b0 <StartUSART_Task+0x88>)
 800086e:	f006 fa05 	bl	8006c7c <iprintf>
						printf("PRINT BRIGHTNESS FOR LED In range from 0 to 100->>>>!\r\n");
 8000872:	4810      	ldr	r0, [pc, #64]	; (80008b4 <StartUSART_Task+0x8c>)
 8000874:	f006 fa88 	bl	8006d88 <puts>
					}
					flag = 0;
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <StartUSART_Task+0x70>)
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
					xQueueSend(myDataQueueHandle, &brightnes, 1);
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <StartUSART_Task+0x90>)
 8000880:	6818      	ldr	r0, [r3, #0]
 8000882:	f107 010c 	add.w	r1, r7, #12
 8000886:	2300      	movs	r3, #0
 8000888:	2201      	movs	r2, #1
 800088a:	f004 fd1f 	bl	80052cc <xQueueGenericSend>
				}
		osDelay(5);
 800088e:	2005      	movs	r0, #5
 8000890:	f004 faf1 	bl	8004e76 <osDelay>
				if (flag == 1)
 8000894:	e7cc      	b.n	8000830 <StartUSART_Task+0x8>
 8000896:	bf00      	nop
 8000898:	20001465 	.word	0x20001465
 800089c:	20001468 	.word	0x20001468
 80008a0:	080088d4 	.word	0x080088d4
 80008a4:	20001454 	.word	0x20001454
 80008a8:	080088d8 	.word	0x080088d8
 80008ac:	20000000 	.word	0x20000000
 80008b0:	080088fc 	.word	0x080088fc
 80008b4:	08008914 	.word	0x08008914
 80008b8:	200011f4 	.word	0x200011f4

080008bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	4b35      	ldr	r3, [pc, #212]	; (80009ac <MX_GPIO_Init+0xf0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a34      	ldr	r2, [pc, #208]	; (80009ac <MX_GPIO_Init+0xf0>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b32      	ldr	r3, [pc, #200]	; (80009ac <MX_GPIO_Init+0xf0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b2e      	ldr	r3, [pc, #184]	; (80009ac <MX_GPIO_Init+0xf0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a2d      	ldr	r2, [pc, #180]	; (80009ac <MX_GPIO_Init+0xf0>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <MX_GPIO_Init+0xf0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	4b27      	ldr	r3, [pc, #156]	; (80009ac <MX_GPIO_Init+0xf0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a26      	ldr	r2, [pc, #152]	; (80009ac <MX_GPIO_Init+0xf0>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b24      	ldr	r3, [pc, #144]	; (80009ac <MX_GPIO_Init+0xf0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b20      	ldr	r3, [pc, #128]	; (80009ac <MX_GPIO_Init+0xf0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a1f      	ldr	r2, [pc, #124]	; (80009ac <MX_GPIO_Init+0xf0>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <MX_GPIO_Init+0xf0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <MX_GPIO_Init+0xf0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a18      	ldr	r2, [pc, #96]	; (80009ac <MX_GPIO_Init+0xf0>)
 800094c:	f043 0308 	orr.w	r3, r3, #8
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <MX_GPIO_Init+0xf0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0308 	and.w	r3, r3, #8
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_EXTI_Pin;
 800095e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000964:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800096a:	2302      	movs	r3, #2
 800096c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	480e      	ldr	r0, [pc, #56]	; (80009b0 <MX_GPIO_Init+0xf4>)
 8000976:	f001 f9fb 	bl	8001d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800097a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800097e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000984:	2302      	movs	r3, #2
 8000986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	4809      	ldr	r0, [pc, #36]	; (80009b4 <MX_GPIO_Init+0xf8>)
 8000990:	f001 f9ee 	bl	8001d70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	2105      	movs	r1, #5
 8000998:	2028      	movs	r0, #40	; 0x28
 800099a:	f000 fe43 	bl	8001624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800099e:	2028      	movs	r0, #40	; 0x28
 80009a0:	f000 fe5c 	bl	800165c <HAL_NVIC_EnableIRQ>

}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	; 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020800 	.word	0x40020800
 80009b4:	40020400 	.word	0x40020400

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009bc:	f000 fd38 	bl	8001430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c0:	f000 f832 	bl	8000a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c4:	f7ff ff7a 	bl	80008bc <MX_GPIO_Init>
  MX_DMA_Init();
 80009c8:	f7ff fdec 	bl	80005a4 <MX_DMA_Init>
  MX_TIM1_Init();
 80009cc:	f000 fa6c 	bl	8000ea8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009d0:	f000 fabc 	bl	8000f4c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80009d4:	f000 fbb6 	bl	8001144 <MX_USART3_UART_Init>
  //ring_init(&uart_ring, buff, sizeof(buff) / sizeof(buff[0]) ); // Initialize UART receiver ring buffer.
 // sprintf((char*)tstring,"PRINT BRIGHTNESS FOR LED In range from 0 to 100->>>>!\r\n");
  //HAL_UART_Transmit_IT(&huart3,tstring,strlen((char*)tstring));
 // HAL_UART_Receive_IT(&huart3,uart_ring.buffer,1);						 // Start UART receiver in the non blocking mode

	setvbuf(stdin, NULL, _IONBF, 0); // определение нулевого буфера
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <main+0x5c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	6858      	ldr	r0, [r3, #4]
 80009de:	2300      	movs	r3, #0
 80009e0:	2202      	movs	r2, #2
 80009e2:	2100      	movs	r1, #0
 80009e4:	f006 f9d8 	bl	8006d98 <setvbuf>
	printf("PRINT BRIGHTNESS FOR LED In range from 0 to 100->>>>!\r\n");
 80009e8:	480b      	ldr	r0, [pc, #44]	; (8000a18 <main+0x60>)
 80009ea:	f006 f9cd 	bl	8006d88 <puts>
	HAL_UART_Receive_IT(&huart3, &value, 1); //запу�?каем UART по прерыванию
 80009ee:	2201      	movs	r2, #1
 80009f0:	490a      	ldr	r1, [pc, #40]	; (8000a1c <main+0x64>)
 80009f2:	480b      	ldr	r0, [pc, #44]	; (8000a20 <main+0x68>)
 80009f4:	f003 fa3b 	bl	8003e6e <HAL_UART_Receive_IT>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80009f8:	2100      	movs	r1, #0
 80009fa:	480a      	ldr	r0, [pc, #40]	; (8000a24 <main+0x6c>)
 80009fc:	f002 f994 	bl	8002d28 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000a00:	2104      	movs	r1, #4
 8000a02:	4808      	ldr	r0, [pc, #32]	; (8000a24 <main+0x6c>)
 8000a04:	f002 f990 	bl	8002d28 <HAL_TIM_PWM_Start>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000a08:	f7ff fe0e 	bl	8000628 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a0c:	f004 f9e0 	bl	8004dd0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000a10:	e7fe      	b.n	8000a10 <main+0x58>
 8000a12:	bf00      	nop
 8000a14:	20000014 	.word	0x20000014
 8000a18:	0800894c 	.word	0x0800894c
 8000a1c:	20001464 	.word	0x20001464
 8000a20:	20001940 	.word	0x20001940
 8000a24:	200018f8 	.word	0x200018f8

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b094      	sub	sp, #80	; 0x50
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 0320 	add.w	r3, r7, #32
 8000a32:	2230      	movs	r2, #48	; 0x30
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f006 f918 	bl	8006c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	4b2b      	ldr	r3, [pc, #172]	; (8000b00 <SystemClock_Config+0xd8>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	4a2a      	ldr	r2, [pc, #168]	; (8000b00 <SystemClock_Config+0xd8>)
 8000a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5c:	4b28      	ldr	r3, [pc, #160]	; (8000b00 <SystemClock_Config+0xd8>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a68:	2300      	movs	r3, #0
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	4b25      	ldr	r3, [pc, #148]	; (8000b04 <SystemClock_Config+0xdc>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a24      	ldr	r2, [pc, #144]	; (8000b04 <SystemClock_Config+0xdc>)
 8000a72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a76:	6013      	str	r3, [r2, #0]
 8000a78:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <SystemClock_Config+0xdc>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a84:	2302      	movs	r3, #2
 8000a86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a8c:	2310      	movs	r3, #16
 8000a8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a90:	2302      	movs	r3, #2
 8000a92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a94:	2300      	movs	r3, #0
 8000a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a98:	2308      	movs	r3, #8
 8000a9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000a9c:	23b4      	movs	r3, #180	; 0xb4
 8000a9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa8:	f107 0320 	add.w	r3, r7, #32
 8000aac:	4618      	mov	r0, r3
 8000aae:	f001 fb97 	bl	80021e0 <HAL_RCC_OscConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ab8:	f000 f838 	bl	8000b2c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000abc:	f001 fb40 	bl	8002140 <HAL_PWREx_EnableOverDrive>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000ac6:	f000 f831 	bl	8000b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aca:	230f      	movs	r3, #15
 8000acc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ad6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ada:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	2105      	movs	r1, #5
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f001 fdf1 	bl	80026d0 <HAL_RCC_ClockConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000af4:	f000 f81a 	bl	8000b2c <Error_Handler>
  }
}
 8000af8:	bf00      	nop
 8000afa:	3750      	adds	r7, #80	; 0x50
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40007000 	.word	0x40007000

08000b08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d101      	bne.n	8000b1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b1a:	f000 fcab 	bl	8001474 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40001000 	.word	0x40001000

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b34:	e7fe      	b.n	8000b34 <Error_Handler+0x8>
	...

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_MspInit+0x54>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a11      	ldr	r2, [pc, #68]	; (8000b8c <HAL_MspInit+0x54>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_MspInit+0x54>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_MspInit+0x54>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <HAL_MspInit+0x54>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_MspInit+0x54>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	210f      	movs	r1, #15
 8000b7a:	f06f 0001 	mvn.w	r0, #1
 8000b7e:	f000 fd51 	bl	8001624 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800

08000b90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08e      	sub	sp, #56	; 0x38
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <HAL_InitTick+0xe4>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	4a32      	ldr	r2, [pc, #200]	; (8000c74 <HAL_InitTick+0xe4>)
 8000baa:	f043 0310 	orr.w	r3, r3, #16
 8000bae:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb0:	4b30      	ldr	r3, [pc, #192]	; (8000c74 <HAL_InitTick+0xe4>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	f003 0310 	and.w	r3, r3, #16
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bbc:	f107 0210 	add.w	r2, r7, #16
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f001 ff62 	bl	8002a90 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bcc:	6a3b      	ldr	r3, [r7, #32]
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d103      	bne.n	8000bde <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bd6:	f001 ff33 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
 8000bda:	6378      	str	r0, [r7, #52]	; 0x34
 8000bdc:	e004      	b.n	8000be8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bde:	f001 ff2f 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
 8000be2:	4603      	mov	r3, r0
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bea:	4a23      	ldr	r2, [pc, #140]	; (8000c78 <HAL_InitTick+0xe8>)
 8000bec:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf0:	0c9b      	lsrs	r3, r3, #18
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <HAL_InitTick+0xec>)
 8000bf8:	4a21      	ldr	r2, [pc, #132]	; (8000c80 <HAL_InitTick+0xf0>)
 8000bfa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <HAL_InitTick+0xec>)
 8000bfe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c02:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c04:	4a1d      	ldr	r2, [pc, #116]	; (8000c7c <HAL_InitTick+0xec>)
 8000c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c08:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <HAL_InitTick+0xec>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c10:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <HAL_InitTick+0xec>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <HAL_InitTick+0xec>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c1c:	4817      	ldr	r0, [pc, #92]	; (8000c7c <HAL_InitTick+0xec>)
 8000c1e:	f001 ff69 	bl	8002af4 <HAL_TIM_Base_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d11b      	bne.n	8000c68 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c30:	4812      	ldr	r0, [pc, #72]	; (8000c7c <HAL_InitTick+0xec>)
 8000c32:	f001 ffaf 	bl	8002b94 <HAL_TIM_Base_Start_IT>
 8000c36:	4603      	mov	r3, r0
 8000c38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d111      	bne.n	8000c68 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c44:	2036      	movs	r0, #54	; 0x36
 8000c46:	f000 fd09 	bl	800165c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b0f      	cmp	r3, #15
 8000c4e:	d808      	bhi.n	8000c62 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c50:	2200      	movs	r2, #0
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	2036      	movs	r0, #54	; 0x36
 8000c56:	f000 fce5 	bl	8001624 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <HAL_InitTick+0xf4>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6013      	str	r3, [r2, #0]
 8000c60:	e002      	b.n	8000c68 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3738      	adds	r7, #56	; 0x38
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800
 8000c78:	431bde83 	.word	0x431bde83
 8000c7c:	20001864 	.word	0x20001864
 8000c80:	40001000 	.word	0x40001000
 8000c84:	20000008 	.word	0x20000008

08000c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <NMI_Handler+0x4>

08000c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <HardFault_Handler+0x4>

08000c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <MemManage_Handler+0x4>

08000c9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <DMA1_Stream1_IRQHandler+0x10>)
 8000cba:	f000 fe1d 	bl	80018f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200019e4 	.word	0x200019e4

08000cc8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <DMA1_Stream3_IRQHandler+0x10>)
 8000cce:	f000 fe13 	bl	80018f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20001984 	.word	0x20001984

08000cdc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ce2:	f002 f8e9 	bl	8002eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200018b0 	.word	0x200018b0

08000cf0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <TIM2_IRQHandler+0x10>)
 8000cf6:	f002 f8df 	bl	8002eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200018f8 	.word	0x200018f8

08000d04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <USART3_IRQHandler+0x10>)
 8000d0a:	f003 f8e1 	bl	8003ed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20001940 	.word	0x20001940

08000d18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI_Pin);
 8000d1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d20:	f001 f9ea 	bl	80020f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <TIM6_DAC_IRQHandler+0x10>)
 8000d2e:	f002 f8c3 	bl	8002eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20001864 	.word	0x20001864

08000d3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	e00a      	b.n	8000d64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d4e:	f000 faeb 	bl	8001328 <__io_getchar>
 8000d52:	4601      	mov	r1, r0
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	1c5a      	adds	r2, r3, #1
 8000d58:	60ba      	str	r2, [r7, #8]
 8000d5a:	b2ca      	uxtb	r2, r1
 8000d5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dbf0      	blt.n	8000d4e <_read+0x12>
	}

return len;
 8000d6c:	687b      	ldr	r3, [r7, #4]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b086      	sub	sp, #24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	60f8      	str	r0, [r7, #12]
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	e009      	b.n	8000d9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	60ba      	str	r2, [r7, #8]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 fab7 	bl	8001304 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	dbf1      	blt.n	8000d88 <_write+0x12>
	}
	return len;
 8000da4:	687b      	ldr	r3, [r7, #4]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <_close>:

int _close(int file)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
	return -1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dd6:	605a      	str	r2, [r3, #4]
	return 0;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <_isatty>:

int _isatty(int file)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
	return 1;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
	return 0;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <_sbrk+0x5c>)
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <_sbrk+0x60>)
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <_sbrk+0x64>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <_sbrk+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d207      	bcs.n	8000e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e48:	f005 fed8 	bl	8006bfc <__errno>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	220c      	movs	r2, #12
 8000e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	e009      	b.n	8000e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <_sbrk+0x64>)
 8000e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20030000 	.word	0x20030000
 8000e78:	00000400 	.word	0x00000400
 8000e7c:	200018ac 	.word	0x200018ac
 8000e80:	200057b0 	.word	0x200057b0

08000e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <SystemInit+0x20>)
 8000e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <SystemInit+0x20>)
 8000e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eae:	f107 0308 	add.w	r3, r7, #8
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <MX_TIM1_Init+0x9c>)
 8000ec6:	4a20      	ldr	r2, [pc, #128]	; (8000f48 <MX_TIM1_Init+0xa0>)
 8000ec8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 900-1;
 8000eca:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <MX_TIM1_Init+0x9c>)
 8000ecc:	f240 3283 	movw	r2, #899	; 0x383
 8000ed0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <MX_TIM1_Init+0x9c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <MX_TIM1_Init+0x9c>)
 8000eda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ede:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_TIM1_Init+0x9c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <MX_TIM1_Init+0x9c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <MX_TIM1_Init+0x9c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ef2:	4814      	ldr	r0, [pc, #80]	; (8000f44 <MX_TIM1_Init+0x9c>)
 8000ef4:	f001 fdfe 	bl	8002af4 <HAL_TIM_Base_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000efe:	f7ff fe15 	bl	8000b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f08:	f107 0308 	add.w	r3, r7, #8
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	480d      	ldr	r0, [pc, #52]	; (8000f44 <MX_TIM1_Init+0x9c>)
 8000f10:	f002 f99c 	bl	800324c <HAL_TIM_ConfigClockSource>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000f1a:	f7ff fe07 	bl	8000b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f26:	463b      	mov	r3, r7
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4806      	ldr	r0, [pc, #24]	; (8000f44 <MX_TIM1_Init+0x9c>)
 8000f2c:	f002 fd8e 	bl	8003a4c <HAL_TIMEx_MasterConfigSynchronization>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000f36:	f7ff fdf9 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200018b0 	.word	0x200018b0
 8000f48:	40010000 	.word	0x40010000

08000f4c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08e      	sub	sp, #56	; 0x38
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f60:	f107 0320 	add.w	r3, r7, #32
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
 8000f78:	615a      	str	r2, [r3, #20]
 8000f7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f7c:	4b32      	ldr	r3, [pc, #200]	; (8001048 <MX_TIM2_Init+0xfc>)
 8000f7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 18000-1;
 8000f84:	4b30      	ldr	r3, [pc, #192]	; (8001048 <MX_TIM2_Init+0xfc>)
 8000f86:	f244 624f 	movw	r2, #17999	; 0x464f
 8000f8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8c:	4b2e      	ldr	r3, [pc, #184]	; (8001048 <MX_TIM2_Init+0xfc>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000f92:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <MX_TIM2_Init+0xfc>)
 8000f94:	2263      	movs	r2, #99	; 0x63
 8000f96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f98:	4b2b      	ldr	r3, [pc, #172]	; (8001048 <MX_TIM2_Init+0xfc>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9e:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <MX_TIM2_Init+0xfc>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fa4:	4828      	ldr	r0, [pc, #160]	; (8001048 <MX_TIM2_Init+0xfc>)
 8000fa6:	f001 fda5 	bl	8002af4 <HAL_TIM_Base_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000fb0:	f7ff fdbc 	bl	8000b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4821      	ldr	r0, [pc, #132]	; (8001048 <MX_TIM2_Init+0xfc>)
 8000fc2:	f002 f943 	bl	800324c <HAL_TIM_ConfigClockSource>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000fcc:	f7ff fdae 	bl	8000b2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fd0:	481d      	ldr	r0, [pc, #116]	; (8001048 <MX_TIM2_Init+0xfc>)
 8000fd2:	f001 fe4f 	bl	8002c74 <HAL_TIM_PWM_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000fdc:	f7ff fda6 	bl	8000b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe8:	f107 0320 	add.w	r3, r7, #32
 8000fec:	4619      	mov	r1, r3
 8000fee:	4816      	ldr	r0, [pc, #88]	; (8001048 <MX_TIM2_Init+0xfc>)
 8000ff0:	f002 fd2c 	bl	8003a4c <HAL_TIMEx_MasterConfigSynchronization>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000ffa:	f7ff fd97 	bl	8000b2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ffe:	2360      	movs	r3, #96	; 0x60
 8001000:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2200      	movs	r2, #0
 8001012:	4619      	mov	r1, r3
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <MX_TIM2_Init+0xfc>)
 8001016:	f002 f857 	bl	80030c8 <HAL_TIM_PWM_ConfigChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001020:	f7ff fd84 	bl	8000b2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	2204      	movs	r2, #4
 8001028:	4619      	mov	r1, r3
 800102a:	4807      	ldr	r0, [pc, #28]	; (8001048 <MX_TIM2_Init+0xfc>)
 800102c:	f002 f84c 	bl	80030c8 <HAL_TIM_PWM_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001036:	f7ff fd79 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800103a:	4803      	ldr	r0, [pc, #12]	; (8001048 <MX_TIM2_Init+0xfc>)
 800103c:	f000 f84a 	bl	80010d4 <HAL_TIM_MspPostInit>

}
 8001040:	bf00      	nop
 8001042:	3738      	adds	r7, #56	; 0x38
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200018f8 	.word	0x200018f8

0800104c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <HAL_TIM_Base_MspInit+0x80>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d116      	bne.n	800108c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <HAL_TIM_Base_MspInit+0x84>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	4a1a      	ldr	r2, [pc, #104]	; (80010d0 <HAL_TIM_Base_MspInit+0x84>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6453      	str	r3, [r2, #68]	; 0x44
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <HAL_TIM_Base_MspInit+0x84>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2105      	movs	r1, #5
 800107e:	2019      	movs	r0, #25
 8001080:	f000 fad0 	bl	8001624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001084:	2019      	movs	r0, #25
 8001086:	f000 fae9 	bl	800165c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800108a:	e01a      	b.n	80010c2 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM2)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001094:	d115      	bne.n	80010c2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <HAL_TIM_Base_MspInit+0x84>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	4a0c      	ldr	r2, [pc, #48]	; (80010d0 <HAL_TIM_Base_MspInit+0x84>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6413      	str	r3, [r2, #64]	; 0x40
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <HAL_TIM_Base_MspInit+0x84>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2105      	movs	r1, #5
 80010b6:	201c      	movs	r0, #28
 80010b8:	f000 fab4 	bl	8001624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010bc:	201c      	movs	r0, #28
 80010be:	f000 facd 	bl	800165c <HAL_NVIC_EnableIRQ>
}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40010000 	.word	0x40010000
 80010d0:	40023800 	.word	0x40023800

080010d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f4:	d11d      	bne.n	8001132 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <HAL_TIM_MspPostInit+0x68>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a0f      	ldr	r2, [pc, #60]	; (800113c <HAL_TIM_MspPostInit+0x68>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <HAL_TIM_MspPostInit+0x68>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001112:	2303      	movs	r3, #3
 8001114:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001122:	2301      	movs	r3, #1
 8001124:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	4619      	mov	r1, r3
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <HAL_TIM_MspPostInit+0x6c>)
 800112e:	f000 fe1f 	bl	8001d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001132:	bf00      	nop
 8001134:	3720      	adds	r7, #32
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40020000 	.word	0x40020000

08001144 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_USART3_UART_Init+0x4c>)
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <MX_USART3_UART_Init+0x50>)
 800114c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <MX_USART3_UART_Init+0x4c>)
 8001150:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001154:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_USART3_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_USART3_UART_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_USART3_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_USART3_UART_Init+0x4c>)
 800116a:	220c      	movs	r2, #12
 800116c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_USART3_UART_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_USART3_UART_Init+0x4c>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_USART3_UART_Init+0x4c>)
 800117c:	f002 fcf6 	bl	8003b6c <HAL_UART_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001186:	f7ff fcd1 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20001940 	.word	0x20001940
 8001194:	40004800 	.word	0x40004800

08001198 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a4c      	ldr	r2, [pc, #304]	; (80012e8 <HAL_UART_MspInit+0x150>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	f040 8091 	bne.w	80012de <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	4b4a      	ldr	r3, [pc, #296]	; (80012ec <HAL_UART_MspInit+0x154>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	4a49      	ldr	r2, [pc, #292]	; (80012ec <HAL_UART_MspInit+0x154>)
 80011c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ca:	6413      	str	r3, [r2, #64]	; 0x40
 80011cc:	4b47      	ldr	r3, [pc, #284]	; (80012ec <HAL_UART_MspInit+0x154>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	4b43      	ldr	r3, [pc, #268]	; (80012ec <HAL_UART_MspInit+0x154>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e0:	4a42      	ldr	r2, [pc, #264]	; (80012ec <HAL_UART_MspInit+0x154>)
 80011e2:	f043 0308 	orr.w	r3, r3, #8
 80011e6:	6313      	str	r3, [r2, #48]	; 0x30
 80011e8:	4b40      	ldr	r3, [pc, #256]	; (80012ec <HAL_UART_MspInit+0x154>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001206:	2307      	movs	r3, #7
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	4837      	ldr	r0, [pc, #220]	; (80012f0 <HAL_UART_MspInit+0x158>)
 8001212:	f000 fdad 	bl	8001d70 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001216:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <HAL_UART_MspInit+0x15c>)
 8001218:	4a37      	ldr	r2, [pc, #220]	; (80012f8 <HAL_UART_MspInit+0x160>)
 800121a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800121c:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <HAL_UART_MspInit+0x15c>)
 800121e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001222:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001224:	4b33      	ldr	r3, [pc, #204]	; (80012f4 <HAL_UART_MspInit+0x15c>)
 8001226:	2240      	movs	r2, #64	; 0x40
 8001228:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800122a:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <HAL_UART_MspInit+0x15c>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001230:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <HAL_UART_MspInit+0x15c>)
 8001232:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001236:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001238:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <HAL_UART_MspInit+0x15c>)
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800123e:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <HAL_UART_MspInit+0x15c>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001244:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <HAL_UART_MspInit+0x15c>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800124a:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <HAL_UART_MspInit+0x15c>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001250:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <HAL_UART_MspInit+0x15c>)
 8001252:	2200      	movs	r2, #0
 8001254:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001256:	4827      	ldr	r0, [pc, #156]	; (80012f4 <HAL_UART_MspInit+0x15c>)
 8001258:	f000 fa0e 	bl	8001678 <HAL_DMA_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001262:	f7ff fc63 	bl	8000b2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a22      	ldr	r2, [pc, #136]	; (80012f4 <HAL_UART_MspInit+0x15c>)
 800126a:	635a      	str	r2, [r3, #52]	; 0x34
 800126c:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <HAL_UART_MspInit+0x15c>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001272:	4b22      	ldr	r3, [pc, #136]	; (80012fc <HAL_UART_MspInit+0x164>)
 8001274:	4a22      	ldr	r2, [pc, #136]	; (8001300 <HAL_UART_MspInit+0x168>)
 8001276:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001278:	4b20      	ldr	r3, [pc, #128]	; (80012fc <HAL_UART_MspInit+0x164>)
 800127a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800127e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <HAL_UART_MspInit+0x164>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001286:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <HAL_UART_MspInit+0x164>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <HAL_UART_MspInit+0x164>)
 800128e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001292:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <HAL_UART_MspInit+0x164>)
 8001296:	2200      	movs	r2, #0
 8001298:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <HAL_UART_MspInit+0x164>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <HAL_UART_MspInit+0x164>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_UART_MspInit+0x164>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <HAL_UART_MspInit+0x164>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80012b2:	4812      	ldr	r0, [pc, #72]	; (80012fc <HAL_UART_MspInit+0x164>)
 80012b4:	f000 f9e0 	bl	8001678 <HAL_DMA_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80012be:	f7ff fc35 	bl	8000b2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <HAL_UART_MspInit+0x164>)
 80012c6:	639a      	str	r2, [r3, #56]	; 0x38
 80012c8:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <HAL_UART_MspInit+0x164>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2105      	movs	r1, #5
 80012d2:	2027      	movs	r0, #39	; 0x27
 80012d4:	f000 f9a6 	bl	8001624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012d8:	2027      	movs	r0, #39	; 0x27
 80012da:	f000 f9bf 	bl	800165c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012de:	bf00      	nop
 80012e0:	3728      	adds	r7, #40	; 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40004800 	.word	0x40004800
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020c00 	.word	0x40020c00
 80012f4:	20001984 	.word	0x20001984
 80012f8:	40026058 	.word	0x40026058
 80012fc:	200019e4 	.word	0x200019e4
 8001300:	40026028 	.word	0x40026028

08001304 <__io_putchar>:
extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_tx;
extern DMA_HandleTypeDef hdma_usart3_rx;

int __io_putchar(int ch)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 800130c:	1d39      	adds	r1, r7, #4
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	2201      	movs	r2, #1
 8001314:	4803      	ldr	r0, [pc, #12]	; (8001324 <__io_putchar+0x20>)
 8001316:	f002 fc76 	bl	8003c06 <HAL_UART_Transmit>
	return 0;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20001940 	.word	0x20001940

08001328 <__io_getchar>:
//Receive one char in blocking mode
int __io_getchar(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
	uint8_t result;
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800132e:	2300      	movs	r3, #0
 8001330:	603b      	str	r3, [r7, #0]
 8001332:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <__io_getchar+0x40>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	603b      	str	r3, [r7, #0]
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <__io_getchar+0x40>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
	HAL_UART_Receive(&huart3, &result, 1, HAL_MAX_DELAY);
 8001344:	1df9      	adds	r1, r7, #7
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	2201      	movs	r2, #1
 800134c:	4806      	ldr	r0, [pc, #24]	; (8001368 <__io_getchar+0x40>)
 800134e:	f002 fcec 	bl	8003d2a <HAL_UART_Receive>
	if (result == '\r')
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	2b0d      	cmp	r3, #13
 8001356:	d101      	bne.n	800135c <__io_getchar+0x34>
		result = '\n'; // Dirty hack. Replace "return" character with "new line" character
 8001358:	230a      	movs	r3, #10
 800135a:	71fb      	strb	r3, [r7, #7]
	return (int) result;
 800135c:	79fb      	ldrb	r3, [r7, #7]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20001940 	.word	0x20001940

0800136c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <HAL_UART_RxCpltCallback+0x5c>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d120      	bne.n	80013be <HAL_UART_RxCpltCallback+0x52>
	{
		HAL_UART_Receive_IT(&huart3, &value, 1);
 800137c:	2201      	movs	r2, #1
 800137e:	4913      	ldr	r1, [pc, #76]	; (80013cc <HAL_UART_RxCpltCallback+0x60>)
 8001380:	4811      	ldr	r0, [pc, #68]	; (80013c8 <HAL_UART_RxCpltCallback+0x5c>)
 8001382:	f002 fd74 	bl	8003e6e <HAL_UART_Receive_IT>
		//	sscanf(value,"%d",&buff[counter]);
		buff[counter] = value;
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_UART_RxCpltCallback+0x64>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	461a      	mov	r2, r3
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <HAL_UART_RxCpltCallback+0x60>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b2d9      	uxtb	r1, r3
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <HAL_UART_RxCpltCallback+0x68>)
 8001396:	5499      	strb	r1, [r3, r2]

		if (value == '\r')
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <HAL_UART_RxCpltCallback+0x60>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b0d      	cmp	r3, #13
 80013a0:	d106      	bne.n	80013b0 <HAL_UART_RxCpltCallback+0x44>
		{
			counter = 0;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <HAL_UART_RxCpltCallback+0x64>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
			flag = 1;
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_UART_RxCpltCallback+0x6c>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
		}
		else
			counter++;
	}
}
 80013ae:	e006      	b.n	80013be <HAL_UART_RxCpltCallback+0x52>
			counter++;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <HAL_UART_RxCpltCallback+0x64>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	3301      	adds	r3, #1
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_UART_RxCpltCallback+0x64>)
 80013bc:	701a      	strb	r2, [r3, #0]
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20001940 	.word	0x20001940
 80013cc:	20001464 	.word	0x20001464
 80013d0:	20001450 	.word	0x20001450
 80013d4:	20001454 	.word	0x20001454
 80013d8:	20001465 	.word	0x20001465

080013dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80013dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001414 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013e0:	480d      	ldr	r0, [pc, #52]	; (8001418 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013e2:	490e      	ldr	r1, [pc, #56]	; (800141c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013e4:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e8:	e002      	b.n	80013f0 <LoopCopyDataInit>

080013ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ee:	3304      	adds	r3, #4

080013f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f4:	d3f9      	bcc.n	80013ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013f8:	4c0b      	ldr	r4, [pc, #44]	; (8001428 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013fc:	e001      	b.n	8001402 <LoopFillZerobss>

080013fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001400:	3204      	adds	r2, #4

08001402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001404:	d3fb      	bcc.n	80013fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001406:	f7ff fd3d 	bl	8000e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800140a:	f005 fbfd 	bl	8006c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140e:	f7ff fad3 	bl	80009b8 <main>
  bx  lr    
 8001412:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001414:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800141c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001420:	08008b7c 	.word	0x08008b7c
  ldr r2, =_sbss
 8001424:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001428:	200057ac 	.word	0x200057ac

0800142c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC_IRQHandler>
	...

08001430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <HAL_Init+0x40>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <HAL_Init+0x40>)
 800143a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800143e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_Init+0x40>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <HAL_Init+0x40>)
 8001446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800144a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <HAL_Init+0x40>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a07      	ldr	r2, [pc, #28]	; (8001470 <HAL_Init+0x40>)
 8001452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001456:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001458:	2003      	movs	r0, #3
 800145a:	f000 f8d8 	bl	800160e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800145e:	200f      	movs	r0, #15
 8001460:	f7ff fb96 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001464:	f7ff fb68 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40023c00 	.word	0x40023c00

08001474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_IncTick+0x20>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_IncTick+0x24>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4413      	add	r3, r2
 8001484:	4a04      	ldr	r2, [pc, #16]	; (8001498 <HAL_IncTick+0x24>)
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	2000000c 	.word	0x2000000c
 8001498:	20001a44 	.word	0x20001a44

0800149c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return uwTick;
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <HAL_GetTick+0x14>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20001a44 	.word	0x20001a44

080014b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d0:	4013      	ands	r3, r2
 80014d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e6:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	60d3      	str	r3, [r2, #12]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <__NVIC_GetPriorityGrouping+0x18>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	f003 0307 	and.w	r3, r3, #7
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	2b00      	cmp	r3, #0
 8001528:	db0b      	blt.n	8001542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	f003 021f 	and.w	r2, r3, #31
 8001530:	4907      	ldr	r1, [pc, #28]	; (8001550 <__NVIC_EnableIRQ+0x38>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	095b      	lsrs	r3, r3, #5
 8001538:	2001      	movs	r0, #1
 800153a:	fa00 f202 	lsl.w	r2, r0, r2
 800153e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000e100 	.word	0xe000e100

08001554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	6039      	str	r1, [r7, #0]
 800155e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	2b00      	cmp	r3, #0
 8001566:	db0a      	blt.n	800157e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	b2da      	uxtb	r2, r3
 800156c:	490c      	ldr	r1, [pc, #48]	; (80015a0 <__NVIC_SetPriority+0x4c>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	0112      	lsls	r2, r2, #4
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	440b      	add	r3, r1
 8001578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800157c:	e00a      	b.n	8001594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4908      	ldr	r1, [pc, #32]	; (80015a4 <__NVIC_SetPriority+0x50>)
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	3b04      	subs	r3, #4
 800158c:	0112      	lsls	r2, r2, #4
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	440b      	add	r3, r1
 8001592:	761a      	strb	r2, [r3, #24]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000e100 	.word	0xe000e100
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f1c3 0307 	rsb	r3, r3, #7
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	bf28      	it	cs
 80015c6:	2304      	movcs	r3, #4
 80015c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3304      	adds	r3, #4
 80015ce:	2b06      	cmp	r3, #6
 80015d0:	d902      	bls.n	80015d8 <NVIC_EncodePriority+0x30>
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3b03      	subs	r3, #3
 80015d6:	e000      	b.n	80015da <NVIC_EncodePriority+0x32>
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	f04f 32ff 	mov.w	r2, #4294967295
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43da      	mvns	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	401a      	ands	r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f0:	f04f 31ff 	mov.w	r1, #4294967295
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fa01 f303 	lsl.w	r3, r1, r3
 80015fa:	43d9      	mvns	r1, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	4313      	orrs	r3, r2
         );
}
 8001602:	4618      	mov	r0, r3
 8001604:	3724      	adds	r7, #36	; 0x24
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ff4c 	bl	80014b4 <__NVIC_SetPriorityGrouping>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001636:	f7ff ff61 	bl	80014fc <__NVIC_GetPriorityGrouping>
 800163a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	68b9      	ldr	r1, [r7, #8]
 8001640:	6978      	ldr	r0, [r7, #20]
 8001642:	f7ff ffb1 	bl	80015a8 <NVIC_EncodePriority>
 8001646:	4602      	mov	r2, r0
 8001648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164c:	4611      	mov	r1, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff80 	bl	8001554 <__NVIC_SetPriority>
}
 8001654:	bf00      	nop
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ff54 	bl	8001518 <__NVIC_EnableIRQ>
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff ff0a 	bl	800149c <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e099      	b.n	80017c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2202      	movs	r2, #2
 8001698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0201 	bic.w	r2, r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016b4:	e00f      	b.n	80016d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016b6:	f7ff fef1 	bl	800149c <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b05      	cmp	r3, #5
 80016c2:	d908      	bls.n	80016d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2220      	movs	r2, #32
 80016c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2203      	movs	r2, #3
 80016ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e078      	b.n	80017c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1e8      	bne.n	80016b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	4b38      	ldr	r3, [pc, #224]	; (80017d0 <HAL_DMA_Init+0x158>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001702:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800170e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800171a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4313      	orrs	r3, r2
 8001726:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	2b04      	cmp	r3, #4
 800172e:	d107      	bne.n	8001740 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	4313      	orrs	r3, r2
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	4313      	orrs	r3, r2
 800173e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f023 0307 	bic.w	r3, r3, #7
 8001756:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	4313      	orrs	r3, r2
 8001760:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	2b04      	cmp	r3, #4
 8001768:	d117      	bne.n	800179a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	4313      	orrs	r3, r2
 8001772:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00e      	beq.n	800179a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 fa7b 	bl	8001c78 <DMA_CheckFifoParam>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2240      	movs	r2, #64	; 0x40
 800178c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001796:	2301      	movs	r3, #1
 8001798:	e016      	b.n	80017c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 fa32 	bl	8001c0c <DMA_CalcBaseAndBitshift>
 80017a8:	4603      	mov	r3, r0
 80017aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b0:	223f      	movs	r2, #63	; 0x3f
 80017b2:	409a      	lsls	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	f010803f 	.word	0xf010803f

080017d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017e2:	f7ff fe5b 	bl	800149c <HAL_GetTick>
 80017e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d008      	beq.n	8001806 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2280      	movs	r2, #128	; 0x80
 80017f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e052      	b.n	80018ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 0216 	bic.w	r2, r2, #22
 8001814:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	695a      	ldr	r2, [r3, #20]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001824:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	2b00      	cmp	r3, #0
 800182c:	d103      	bne.n	8001836 <HAL_DMA_Abort+0x62>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001832:	2b00      	cmp	r3, #0
 8001834:	d007      	beq.n	8001846 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0208 	bic.w	r2, r2, #8
 8001844:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 0201 	bic.w	r2, r2, #1
 8001854:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001856:	e013      	b.n	8001880 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001858:	f7ff fe20 	bl	800149c <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b05      	cmp	r3, #5
 8001864:	d90c      	bls.n	8001880 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2220      	movs	r2, #32
 800186a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2203      	movs	r2, #3
 8001870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e015      	b.n	80018ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1e4      	bne.n	8001858 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001892:	223f      	movs	r2, #63	; 0x3f
 8001894:	409a      	lsls	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d004      	beq.n	80018d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2280      	movs	r2, #128	; 0x80
 80018cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00c      	b.n	80018ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2205      	movs	r2, #5
 80018d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0201 	bic.w	r2, r2, #1
 80018e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001904:	4b8e      	ldr	r3, [pc, #568]	; (8001b40 <HAL_DMA_IRQHandler+0x248>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a8e      	ldr	r2, [pc, #568]	; (8001b44 <HAL_DMA_IRQHandler+0x24c>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	0a9b      	lsrs	r3, r3, #10
 8001910:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001916:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001922:	2208      	movs	r2, #8
 8001924:	409a      	lsls	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4013      	ands	r3, r2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d01a      	beq.n	8001964 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d013      	beq.n	8001964 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0204 	bic.w	r2, r2, #4
 800194a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001950:	2208      	movs	r2, #8
 8001952:	409a      	lsls	r2, r3
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195c:	f043 0201 	orr.w	r2, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001968:	2201      	movs	r2, #1
 800196a:	409a      	lsls	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d012      	beq.n	800199a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00b      	beq.n	800199a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001986:	2201      	movs	r2, #1
 8001988:	409a      	lsls	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001992:	f043 0202 	orr.w	r2, r3, #2
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199e:	2204      	movs	r2, #4
 80019a0:	409a      	lsls	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d012      	beq.n	80019d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00b      	beq.n	80019d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019bc:	2204      	movs	r2, #4
 80019be:	409a      	lsls	r2, r3
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c8:	f043 0204 	orr.w	r2, r3, #4
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d4:	2210      	movs	r2, #16
 80019d6:	409a      	lsls	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d043      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d03c      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f2:	2210      	movs	r2, #16
 80019f4:	409a      	lsls	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d018      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d108      	bne.n	8001a28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d024      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	4798      	blx	r3
 8001a26:	e01f      	b.n	8001a68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d01b      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	4798      	blx	r3
 8001a38:	e016      	b.n	8001a68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d107      	bne.n	8001a58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0208 	bic.w	r2, r2, #8
 8001a56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 808f 	beq.w	8001b98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 8087 	beq.w	8001b98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8e:	2220      	movs	r2, #32
 8001a90:	409a      	lsls	r2, r3
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b05      	cmp	r3, #5
 8001aa0:	d136      	bne.n	8001b10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0216 	bic.w	r2, r2, #22
 8001ab0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ac0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d103      	bne.n	8001ad2 <HAL_DMA_IRQHandler+0x1da>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0208 	bic.w	r2, r2, #8
 8001ae0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae6:	223f      	movs	r2, #63	; 0x3f
 8001ae8:	409a      	lsls	r2, r3
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d07e      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	4798      	blx	r3
        }
        return;
 8001b0e:	e079      	b.n	8001c04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d01d      	beq.n	8001b5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10d      	bne.n	8001b48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d031      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	4798      	blx	r3
 8001b3c:	e02c      	b.n	8001b98 <HAL_DMA_IRQHandler+0x2a0>
 8001b3e:	bf00      	nop
 8001b40:	20000004 	.word	0x20000004
 8001b44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d023      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	4798      	blx	r3
 8001b58:	e01e      	b.n	8001b98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10f      	bne.n	8001b88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0210 	bic.w	r2, r2, #16
 8001b76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d032      	beq.n	8001c06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d022      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2205      	movs	r2, #5
 8001bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d307      	bcc.n	8001be0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f2      	bne.n	8001bc4 <HAL_DMA_IRQHandler+0x2cc>
 8001bde:	e000      	b.n	8001be2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001be0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d005      	beq.n	8001c06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	4798      	blx	r3
 8001c02:	e000      	b.n	8001c06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c04:	bf00      	nop
    }
  }
}
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	3b10      	subs	r3, #16
 8001c1c:	4a14      	ldr	r2, [pc, #80]	; (8001c70 <DMA_CalcBaseAndBitshift+0x64>)
 8001c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c22:	091b      	lsrs	r3, r3, #4
 8001c24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c26:	4a13      	ldr	r2, [pc, #76]	; (8001c74 <DMA_CalcBaseAndBitshift+0x68>)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d909      	bls.n	8001c4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c42:	f023 0303 	bic.w	r3, r3, #3
 8001c46:	1d1a      	adds	r2, r3, #4
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	659a      	str	r2, [r3, #88]	; 0x58
 8001c4c:	e007      	b.n	8001c5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c56:	f023 0303 	bic.w	r3, r3, #3
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	aaaaaaab 	.word	0xaaaaaaab
 8001c74:	080089b0 	.word	0x080089b0

08001c78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d11f      	bne.n	8001cd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d856      	bhi.n	8001d46 <DMA_CheckFifoParam+0xce>
 8001c98:	a201      	add	r2, pc, #4	; (adr r2, 8001ca0 <DMA_CheckFifoParam+0x28>)
 8001c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c9e:	bf00      	nop
 8001ca0:	08001cb1 	.word	0x08001cb1
 8001ca4:	08001cc3 	.word	0x08001cc3
 8001ca8:	08001cb1 	.word	0x08001cb1
 8001cac:	08001d47 	.word	0x08001d47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d046      	beq.n	8001d4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cc0:	e043      	b.n	8001d4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cca:	d140      	bne.n	8001d4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cd0:	e03d      	b.n	8001d4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cda:	d121      	bne.n	8001d20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d837      	bhi.n	8001d52 <DMA_CheckFifoParam+0xda>
 8001ce2:	a201      	add	r2, pc, #4	; (adr r2, 8001ce8 <DMA_CheckFifoParam+0x70>)
 8001ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce8:	08001cf9 	.word	0x08001cf9
 8001cec:	08001cff 	.word	0x08001cff
 8001cf0:	08001cf9 	.word	0x08001cf9
 8001cf4:	08001d11 	.word	0x08001d11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8001cfc:	e030      	b.n	8001d60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d025      	beq.n	8001d56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d0e:	e022      	b.n	8001d56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d18:	d11f      	bne.n	8001d5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d1e:	e01c      	b.n	8001d5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d903      	bls.n	8001d2e <DMA_CheckFifoParam+0xb6>
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d003      	beq.n	8001d34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d2c:	e018      	b.n	8001d60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	73fb      	strb	r3, [r7, #15]
      break;
 8001d32:	e015      	b.n	8001d60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00e      	beq.n	8001d5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
      break;
 8001d44:	e00b      	b.n	8001d5e <DMA_CheckFifoParam+0xe6>
      break;
 8001d46:	bf00      	nop
 8001d48:	e00a      	b.n	8001d60 <DMA_CheckFifoParam+0xe8>
      break;
 8001d4a:	bf00      	nop
 8001d4c:	e008      	b.n	8001d60 <DMA_CheckFifoParam+0xe8>
      break;
 8001d4e:	bf00      	nop
 8001d50:	e006      	b.n	8001d60 <DMA_CheckFifoParam+0xe8>
      break;
 8001d52:	bf00      	nop
 8001d54:	e004      	b.n	8001d60 <DMA_CheckFifoParam+0xe8>
      break;
 8001d56:	bf00      	nop
 8001d58:	e002      	b.n	8001d60 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d5a:	bf00      	nop
 8001d5c:	e000      	b.n	8001d60 <DMA_CheckFifoParam+0xe8>
      break;
 8001d5e:	bf00      	nop
    }
  } 
  
  return status; 
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop

08001d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	; 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
 8001d8a:	e177      	b.n	800207c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	f040 8166 	bne.w	8002076 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d005      	beq.n	8001dc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d130      	bne.n	8001e24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	2203      	movs	r2, #3
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001df8:	2201      	movs	r2, #1
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	091b      	lsrs	r3, r3, #4
 8001e0e:	f003 0201 	and.w	r2, r3, #1
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d017      	beq.n	8001e60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d123      	bne.n	8001eb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	08da      	lsrs	r2, r3, #3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3208      	adds	r2, #8
 8001e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	220f      	movs	r2, #15
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	08da      	lsrs	r2, r3, #3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3208      	adds	r2, #8
 8001eae:	69b9      	ldr	r1, [r7, #24]
 8001eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 0203 	and.w	r2, r3, #3
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 80c0 	beq.w	8002076 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	4b66      	ldr	r3, [pc, #408]	; (8002094 <HAL_GPIO_Init+0x324>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	4a65      	ldr	r2, [pc, #404]	; (8002094 <HAL_GPIO_Init+0x324>)
 8001f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f04:	6453      	str	r3, [r2, #68]	; 0x44
 8001f06:	4b63      	ldr	r3, [pc, #396]	; (8002094 <HAL_GPIO_Init+0x324>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f12:	4a61      	ldr	r2, [pc, #388]	; (8002098 <HAL_GPIO_Init+0x328>)
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	089b      	lsrs	r3, r3, #2
 8001f18:	3302      	adds	r3, #2
 8001f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	220f      	movs	r2, #15
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a58      	ldr	r2, [pc, #352]	; (800209c <HAL_GPIO_Init+0x32c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d037      	beq.n	8001fae <HAL_GPIO_Init+0x23e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a57      	ldr	r2, [pc, #348]	; (80020a0 <HAL_GPIO_Init+0x330>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d031      	beq.n	8001faa <HAL_GPIO_Init+0x23a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a56      	ldr	r2, [pc, #344]	; (80020a4 <HAL_GPIO_Init+0x334>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d02b      	beq.n	8001fa6 <HAL_GPIO_Init+0x236>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a55      	ldr	r2, [pc, #340]	; (80020a8 <HAL_GPIO_Init+0x338>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d025      	beq.n	8001fa2 <HAL_GPIO_Init+0x232>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a54      	ldr	r2, [pc, #336]	; (80020ac <HAL_GPIO_Init+0x33c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d01f      	beq.n	8001f9e <HAL_GPIO_Init+0x22e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a53      	ldr	r2, [pc, #332]	; (80020b0 <HAL_GPIO_Init+0x340>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d019      	beq.n	8001f9a <HAL_GPIO_Init+0x22a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a52      	ldr	r2, [pc, #328]	; (80020b4 <HAL_GPIO_Init+0x344>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d013      	beq.n	8001f96 <HAL_GPIO_Init+0x226>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a51      	ldr	r2, [pc, #324]	; (80020b8 <HAL_GPIO_Init+0x348>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d00d      	beq.n	8001f92 <HAL_GPIO_Init+0x222>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a50      	ldr	r2, [pc, #320]	; (80020bc <HAL_GPIO_Init+0x34c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d007      	beq.n	8001f8e <HAL_GPIO_Init+0x21e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a4f      	ldr	r2, [pc, #316]	; (80020c0 <HAL_GPIO_Init+0x350>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d101      	bne.n	8001f8a <HAL_GPIO_Init+0x21a>
 8001f86:	2309      	movs	r3, #9
 8001f88:	e012      	b.n	8001fb0 <HAL_GPIO_Init+0x240>
 8001f8a:	230a      	movs	r3, #10
 8001f8c:	e010      	b.n	8001fb0 <HAL_GPIO_Init+0x240>
 8001f8e:	2308      	movs	r3, #8
 8001f90:	e00e      	b.n	8001fb0 <HAL_GPIO_Init+0x240>
 8001f92:	2307      	movs	r3, #7
 8001f94:	e00c      	b.n	8001fb0 <HAL_GPIO_Init+0x240>
 8001f96:	2306      	movs	r3, #6
 8001f98:	e00a      	b.n	8001fb0 <HAL_GPIO_Init+0x240>
 8001f9a:	2305      	movs	r3, #5
 8001f9c:	e008      	b.n	8001fb0 <HAL_GPIO_Init+0x240>
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	e006      	b.n	8001fb0 <HAL_GPIO_Init+0x240>
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e004      	b.n	8001fb0 <HAL_GPIO_Init+0x240>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e002      	b.n	8001fb0 <HAL_GPIO_Init+0x240>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_GPIO_Init+0x240>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	69fa      	ldr	r2, [r7, #28]
 8001fb2:	f002 0203 	and.w	r2, r2, #3
 8001fb6:	0092      	lsls	r2, r2, #2
 8001fb8:	4093      	lsls	r3, r2
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc0:	4935      	ldr	r1, [pc, #212]	; (8002098 <HAL_GPIO_Init+0x328>)
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	089b      	lsrs	r3, r3, #2
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fce:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <HAL_GPIO_Init+0x354>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ff2:	4a34      	ldr	r2, [pc, #208]	; (80020c4 <HAL_GPIO_Init+0x354>)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ff8:	4b32      	ldr	r3, [pc, #200]	; (80020c4 <HAL_GPIO_Init+0x354>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800201c:	4a29      	ldr	r2, [pc, #164]	; (80020c4 <HAL_GPIO_Init+0x354>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002022:	4b28      	ldr	r3, [pc, #160]	; (80020c4 <HAL_GPIO_Init+0x354>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002046:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <HAL_GPIO_Init+0x354>)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_GPIO_Init+0x354>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002070:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <HAL_GPIO_Init+0x354>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3301      	adds	r3, #1
 800207a:	61fb      	str	r3, [r7, #28]
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	2b0f      	cmp	r3, #15
 8002080:	f67f ae84 	bls.w	8001d8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	3724      	adds	r7, #36	; 0x24
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800
 8002098:	40013800 	.word	0x40013800
 800209c:	40020000 	.word	0x40020000
 80020a0:	40020400 	.word	0x40020400
 80020a4:	40020800 	.word	0x40020800
 80020a8:	40020c00 	.word	0x40020c00
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40021400 	.word	0x40021400
 80020b4:	40021800 	.word	0x40021800
 80020b8:	40021c00 	.word	0x40021c00
 80020bc:	40022000 	.word	0x40022000
 80020c0:	40022400 	.word	0x40022400
 80020c4:	40013c00 	.word	0x40013c00

080020c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	887b      	ldrh	r3, [r7, #2]
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d002      	beq.n	80020e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020e0:	2301      	movs	r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
 80020e4:	e001      	b.n	80020ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002102:	4b08      	ldr	r3, [pc, #32]	; (8002124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d006      	beq.n	800211c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800210e:	4a05      	ldr	r2, [pc, #20]	; (8002124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002114:	88fb      	ldrh	r3, [r7, #6]
 8002116:	4618      	mov	r0, r3
 8002118:	f000 f806 	bl	8002128 <HAL_GPIO_EXTI_Callback>
  }
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40013c00 	.word	0x40013c00

08002128 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	603b      	str	r3, [r7, #0]
 800214e:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	4a1f      	ldr	r2, [pc, #124]	; (80021d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002158:	6413      	str	r3, [r2, #64]	; 0x40
 800215a:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <HAL_PWREx_EnableOverDrive+0x90>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002166:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002168:	2201      	movs	r2, #1
 800216a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800216c:	f7ff f996 	bl	800149c <HAL_GetTick>
 8002170:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002172:	e009      	b.n	8002188 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002174:	f7ff f992 	bl	800149c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002182:	d901      	bls.n	8002188 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e01f      	b.n	80021c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002194:	d1ee      	bne.n	8002174 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002198:	2201      	movs	r2, #1
 800219a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800219c:	f7ff f97e 	bl	800149c <HAL_GetTick>
 80021a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021a2:	e009      	b.n	80021b8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021a4:	f7ff f97a 	bl	800149c <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021b2:	d901      	bls.n	80021b8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e007      	b.n	80021c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021b8:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <HAL_PWREx_EnableOverDrive+0x98>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021c4:	d1ee      	bne.n	80021a4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40023800 	.word	0x40023800
 80021d4:	420e0040 	.word	0x420e0040
 80021d8:	40007000 	.word	0x40007000
 80021dc:	420e0044 	.word	0x420e0044

080021e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e267      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d075      	beq.n	80022ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021fe:	4b88      	ldr	r3, [pc, #544]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b04      	cmp	r3, #4
 8002208:	d00c      	beq.n	8002224 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800220a:	4b85      	ldr	r3, [pc, #532]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002212:	2b08      	cmp	r3, #8
 8002214:	d112      	bne.n	800223c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002216:	4b82      	ldr	r3, [pc, #520]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002222:	d10b      	bne.n	800223c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002224:	4b7e      	ldr	r3, [pc, #504]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d05b      	beq.n	80022e8 <HAL_RCC_OscConfig+0x108>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d157      	bne.n	80022e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e242      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002244:	d106      	bne.n	8002254 <HAL_RCC_OscConfig+0x74>
 8002246:	4b76      	ldr	r3, [pc, #472]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a75      	ldr	r2, [pc, #468]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e01d      	b.n	8002290 <HAL_RCC_OscConfig+0xb0>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0x98>
 800225e:	4b70      	ldr	r3, [pc, #448]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a6f      	ldr	r2, [pc, #444]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b6d      	ldr	r3, [pc, #436]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a6c      	ldr	r2, [pc, #432]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e00b      	b.n	8002290 <HAL_RCC_OscConfig+0xb0>
 8002278:	4b69      	ldr	r3, [pc, #420]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a68      	ldr	r2, [pc, #416]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 800227e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	4b66      	ldr	r3, [pc, #408]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a65      	ldr	r2, [pc, #404]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 800228a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d013      	beq.n	80022c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7ff f900 	bl	800149c <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a0:	f7ff f8fc 	bl	800149c <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e207      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	4b5b      	ldr	r3, [pc, #364]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0xc0>
 80022be:	e014      	b.n	80022ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7ff f8ec 	bl	800149c <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c8:	f7ff f8e8 	bl	800149c <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e1f3      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022da:	4b51      	ldr	r3, [pc, #324]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0xe8>
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d063      	beq.n	80023be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022f6:	4b4a      	ldr	r3, [pc, #296]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002302:	4b47      	ldr	r3, [pc, #284]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800230a:	2b08      	cmp	r3, #8
 800230c:	d11c      	bne.n	8002348 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800230e:	4b44      	ldr	r3, [pc, #272]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d116      	bne.n	8002348 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231a:	4b41      	ldr	r3, [pc, #260]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_RCC_OscConfig+0x152>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e1c7      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002332:	4b3b      	ldr	r3, [pc, #236]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4937      	ldr	r1, [pc, #220]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002346:	e03a      	b.n	80023be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002350:	4b34      	ldr	r3, [pc, #208]	; (8002424 <HAL_RCC_OscConfig+0x244>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7ff f8a1 	bl	800149c <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800235e:	f7ff f89d 	bl	800149c <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e1a8      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002370:	4b2b      	ldr	r3, [pc, #172]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237c:	4b28      	ldr	r3, [pc, #160]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4925      	ldr	r1, [pc, #148]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]
 8002390:	e015      	b.n	80023be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002392:	4b24      	ldr	r3, [pc, #144]	; (8002424 <HAL_RCC_OscConfig+0x244>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002398:	f7ff f880 	bl	800149c <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a0:	f7ff f87c 	bl	800149c <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e187      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b2:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d036      	beq.n	8002438 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d016      	beq.n	8002400 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <HAL_RCC_OscConfig+0x248>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d8:	f7ff f860 	bl	800149c <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023e0:	f7ff f85c 	bl	800149c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e167      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 80023f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x200>
 80023fe:	e01b      	b.n	8002438 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <HAL_RCC_OscConfig+0x248>)
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002406:	f7ff f849 	bl	800149c <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240c:	e00e      	b.n	800242c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800240e:	f7ff f845 	bl	800149c <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d907      	bls.n	800242c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e150      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
 8002420:	40023800 	.word	0x40023800
 8002424:	42470000 	.word	0x42470000
 8002428:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242c:	4b88      	ldr	r3, [pc, #544]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 800242e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1ea      	bne.n	800240e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 8097 	beq.w	8002574 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002446:	2300      	movs	r3, #0
 8002448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800244a:	4b81      	ldr	r3, [pc, #516]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10f      	bne.n	8002476 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	4b7d      	ldr	r3, [pc, #500]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	4a7c      	ldr	r2, [pc, #496]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002464:	6413      	str	r3, [r2, #64]	; 0x40
 8002466:	4b7a      	ldr	r3, [pc, #488]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002472:	2301      	movs	r3, #1
 8002474:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002476:	4b77      	ldr	r3, [pc, #476]	; (8002654 <HAL_RCC_OscConfig+0x474>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d118      	bne.n	80024b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002482:	4b74      	ldr	r3, [pc, #464]	; (8002654 <HAL_RCC_OscConfig+0x474>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a73      	ldr	r2, [pc, #460]	; (8002654 <HAL_RCC_OscConfig+0x474>)
 8002488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248e:	f7ff f805 	bl	800149c <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002496:	f7ff f801 	bl	800149c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e10c      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a8:	4b6a      	ldr	r3, [pc, #424]	; (8002654 <HAL_RCC_OscConfig+0x474>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d106      	bne.n	80024ca <HAL_RCC_OscConfig+0x2ea>
 80024bc:	4b64      	ldr	r3, [pc, #400]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80024be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c0:	4a63      	ldr	r2, [pc, #396]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6713      	str	r3, [r2, #112]	; 0x70
 80024c8:	e01c      	b.n	8002504 <HAL_RCC_OscConfig+0x324>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b05      	cmp	r3, #5
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0x30c>
 80024d2:	4b5f      	ldr	r3, [pc, #380]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d6:	4a5e      	ldr	r2, [pc, #376]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80024d8:	f043 0304 	orr.w	r3, r3, #4
 80024dc:	6713      	str	r3, [r2, #112]	; 0x70
 80024de:	4b5c      	ldr	r3, [pc, #368]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80024e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e2:	4a5b      	ldr	r2, [pc, #364]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6713      	str	r3, [r2, #112]	; 0x70
 80024ea:	e00b      	b.n	8002504 <HAL_RCC_OscConfig+0x324>
 80024ec:	4b58      	ldr	r3, [pc, #352]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80024ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f0:	4a57      	ldr	r2, [pc, #348]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	6713      	str	r3, [r2, #112]	; 0x70
 80024f8:	4b55      	ldr	r3, [pc, #340]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fc:	4a54      	ldr	r2, [pc, #336]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80024fe:	f023 0304 	bic.w	r3, r3, #4
 8002502:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d015      	beq.n	8002538 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250c:	f7fe ffc6 	bl	800149c <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002512:	e00a      	b.n	800252a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002514:	f7fe ffc2 	bl	800149c <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e0cb      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252a:	4b49      	ldr	r3, [pc, #292]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0ee      	beq.n	8002514 <HAL_RCC_OscConfig+0x334>
 8002536:	e014      	b.n	8002562 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002538:	f7fe ffb0 	bl	800149c <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800253e:	e00a      	b.n	8002556 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002540:	f7fe ffac 	bl	800149c <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	f241 3288 	movw	r2, #5000	; 0x1388
 800254e:	4293      	cmp	r3, r2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e0b5      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002556:	4b3e      	ldr	r3, [pc, #248]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 8002558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1ee      	bne.n	8002540 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002562:	7dfb      	ldrb	r3, [r7, #23]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d105      	bne.n	8002574 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002568:	4b39      	ldr	r3, [pc, #228]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	4a38      	ldr	r2, [pc, #224]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 800256e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002572:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 80a1 	beq.w	80026c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800257e:	4b34      	ldr	r3, [pc, #208]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b08      	cmp	r3, #8
 8002588:	d05c      	beq.n	8002644 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d141      	bne.n	8002616 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002592:	4b31      	ldr	r3, [pc, #196]	; (8002658 <HAL_RCC_OscConfig+0x478>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7fe ff80 	bl	800149c <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a0:	f7fe ff7c 	bl	800149c <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e087      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b2:	4b27      	ldr	r3, [pc, #156]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69da      	ldr	r2, [r3, #28]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	019b      	lsls	r3, r3, #6
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	085b      	lsrs	r3, r3, #1
 80025d6:	3b01      	subs	r3, #1
 80025d8:	041b      	lsls	r3, r3, #16
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	061b      	lsls	r3, r3, #24
 80025e2:	491b      	ldr	r1, [pc, #108]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <HAL_RCC_OscConfig+0x478>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ee:	f7fe ff55 	bl	800149c <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f6:	f7fe ff51 	bl	800149c <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e05c      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x416>
 8002614:	e054      	b.n	80026c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <HAL_RCC_OscConfig+0x478>)
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7fe ff3e 	bl	800149c <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002624:	f7fe ff3a 	bl	800149c <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e045      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x444>
 8002642:	e03d      	b.n	80026c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d107      	bne.n	800265c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e038      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
 8002650:	40023800 	.word	0x40023800
 8002654:	40007000 	.word	0x40007000
 8002658:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800265c:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HAL_RCC_OscConfig+0x4ec>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d028      	beq.n	80026bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002674:	429a      	cmp	r2, r3
 8002676:	d121      	bne.n	80026bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002682:	429a      	cmp	r2, r3
 8002684:	d11a      	bne.n	80026bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800268c:	4013      	ands	r3, r2
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002692:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002694:	4293      	cmp	r3, r2
 8002696:	d111      	bne.n	80026bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a2:	085b      	lsrs	r3, r3, #1
 80026a4:	3b01      	subs	r3, #1
 80026a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d107      	bne.n	80026bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800

080026d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0cc      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026e4:	4b68      	ldr	r3, [pc, #416]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d90c      	bls.n	800270c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b65      	ldr	r3, [pc, #404]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fa:	4b63      	ldr	r3, [pc, #396]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0b8      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d020      	beq.n	800275a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002724:	4b59      	ldr	r3, [pc, #356]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	4a58      	ldr	r2, [pc, #352]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800272e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800273c:	4b53      	ldr	r3, [pc, #332]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	4a52      	ldr	r2, [pc, #328]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002748:	4b50      	ldr	r3, [pc, #320]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	494d      	ldr	r1, [pc, #308]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	4313      	orrs	r3, r2
 8002758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d044      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276e:	4b47      	ldr	r3, [pc, #284]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d119      	bne.n	80027ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e07f      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d003      	beq.n	800278e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800278a:	2b03      	cmp	r3, #3
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278e:	4b3f      	ldr	r3, [pc, #252]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d109      	bne.n	80027ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e06f      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279e:	4b3b      	ldr	r3, [pc, #236]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e067      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ae:	4b37      	ldr	r3, [pc, #220]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f023 0203 	bic.w	r2, r3, #3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4934      	ldr	r1, [pc, #208]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027c0:	f7fe fe6c 	bl	800149c <HAL_GetTick>
 80027c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c6:	e00a      	b.n	80027de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c8:	f7fe fe68 	bl	800149c <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e04f      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027de:	4b2b      	ldr	r3, [pc, #172]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 020c 	and.w	r2, r3, #12
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d1eb      	bne.n	80027c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027f0:	4b25      	ldr	r3, [pc, #148]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 030f 	and.w	r3, r3, #15
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d20c      	bcs.n	8002818 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fe:	4b22      	ldr	r3, [pc, #136]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b20      	ldr	r3, [pc, #128]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e032      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	4916      	ldr	r1, [pc, #88]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d009      	beq.n	8002856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002842:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	490e      	ldr	r1, [pc, #56]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002856:	f000 f821 	bl	800289c <HAL_RCC_GetSysClockFreq>
 800285a:	4602      	mov	r2, r0
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	490a      	ldr	r1, [pc, #40]	; (8002890 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	5ccb      	ldrb	r3, [r1, r3]
 800286a:	fa22 f303 	lsr.w	r3, r2, r3
 800286e:	4a09      	ldr	r2, [pc, #36]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe f98a 	bl	8000b90 <HAL_InitTick>

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023c00 	.word	0x40023c00
 800288c:	40023800 	.word	0x40023800
 8002890:	08008998 	.word	0x08008998
 8002894:	20000004 	.word	0x20000004
 8002898:	20000008 	.word	0x20000008

0800289c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800289c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028a0:	b090      	sub	sp, #64	; 0x40
 80028a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	637b      	str	r3, [r7, #52]	; 0x34
 80028a8:	2300      	movs	r3, #0
 80028aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ac:	2300      	movs	r3, #0
 80028ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028b4:	4b59      	ldr	r3, [pc, #356]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d00d      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0x40>
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	f200 80a1 	bhi.w	8002a08 <HAL_RCC_GetSysClockFreq+0x16c>
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0x34>
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d003      	beq.n	80028d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ce:	e09b      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028d0:	4b53      	ldr	r3, [pc, #332]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x184>)
 80028d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80028d4:	e09b      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028d6:	4b53      	ldr	r3, [pc, #332]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x188>)
 80028d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028da:	e098      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028dc:	4b4f      	ldr	r3, [pc, #316]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028e6:	4b4d      	ldr	r3, [pc, #308]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d028      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028f2:	4b4a      	ldr	r3, [pc, #296]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	099b      	lsrs	r3, r3, #6
 80028f8:	2200      	movs	r2, #0
 80028fa:	623b      	str	r3, [r7, #32]
 80028fc:	627a      	str	r2, [r7, #36]	; 0x24
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002904:	2100      	movs	r1, #0
 8002906:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002908:	fb03 f201 	mul.w	r2, r3, r1
 800290c:	2300      	movs	r3, #0
 800290e:	fb00 f303 	mul.w	r3, r0, r3
 8002912:	4413      	add	r3, r2
 8002914:	4a43      	ldr	r2, [pc, #268]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002916:	fba0 1202 	umull	r1, r2, r0, r2
 800291a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800291c:	460a      	mov	r2, r1
 800291e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002922:	4413      	add	r3, r2
 8002924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002928:	2200      	movs	r2, #0
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	61fa      	str	r2, [r7, #28]
 800292e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002932:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002936:	f7fd fcb3 	bl	80002a0 <__aeabi_uldivmod>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4613      	mov	r3, r2
 8002940:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002942:	e053      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002944:	4b35      	ldr	r3, [pc, #212]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	099b      	lsrs	r3, r3, #6
 800294a:	2200      	movs	r2, #0
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	617a      	str	r2, [r7, #20]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002956:	f04f 0b00 	mov.w	fp, #0
 800295a:	4652      	mov	r2, sl
 800295c:	465b      	mov	r3, fp
 800295e:	f04f 0000 	mov.w	r0, #0
 8002962:	f04f 0100 	mov.w	r1, #0
 8002966:	0159      	lsls	r1, r3, #5
 8002968:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800296c:	0150      	lsls	r0, r2, #5
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	ebb2 080a 	subs.w	r8, r2, sl
 8002976:	eb63 090b 	sbc.w	r9, r3, fp
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002986:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800298a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800298e:	ebb2 0408 	subs.w	r4, r2, r8
 8002992:	eb63 0509 	sbc.w	r5, r3, r9
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	00eb      	lsls	r3, r5, #3
 80029a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029a4:	00e2      	lsls	r2, r4, #3
 80029a6:	4614      	mov	r4, r2
 80029a8:	461d      	mov	r5, r3
 80029aa:	eb14 030a 	adds.w	r3, r4, sl
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	eb45 030b 	adc.w	r3, r5, fp
 80029b4:	607b      	str	r3, [r7, #4]
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029c2:	4629      	mov	r1, r5
 80029c4:	028b      	lsls	r3, r1, #10
 80029c6:	4621      	mov	r1, r4
 80029c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029cc:	4621      	mov	r1, r4
 80029ce:	028a      	lsls	r2, r1, #10
 80029d0:	4610      	mov	r0, r2
 80029d2:	4619      	mov	r1, r3
 80029d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d6:	2200      	movs	r2, #0
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	60fa      	str	r2, [r7, #12]
 80029dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029e0:	f7fd fc5e 	bl	80002a0 <__aeabi_uldivmod>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4613      	mov	r3, r2
 80029ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	0c1b      	lsrs	r3, r3, #16
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	3301      	adds	r3, #1
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80029fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a06:	e002      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3740      	adds	r7, #64	; 0x40
 8002a14:	46bd      	mov	sp, r7
 8002a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	00f42400 	.word	0x00f42400
 8002a24:	017d7840 	.word	0x017d7840

08002a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a2c:	4b03      	ldr	r3, [pc, #12]	; (8002a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000004 	.word	0x20000004

08002a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a44:	f7ff fff0 	bl	8002a28 <HAL_RCC_GetHCLKFreq>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	0a9b      	lsrs	r3, r3, #10
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	4903      	ldr	r1, [pc, #12]	; (8002a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a56:	5ccb      	ldrb	r3, [r1, r3]
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40023800 	.word	0x40023800
 8002a64:	080089a8 	.word	0x080089a8

08002a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a6c:	f7ff ffdc 	bl	8002a28 <HAL_RCC_GetHCLKFreq>
 8002a70:	4602      	mov	r2, r0
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	0b5b      	lsrs	r3, r3, #13
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	4903      	ldr	r1, [pc, #12]	; (8002a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a7e:	5ccb      	ldrb	r3, [r1, r3]
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	080089a8 	.word	0x080089a8

08002a90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	220f      	movs	r2, #15
 8002a9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002aa0:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_RCC_GetClockConfig+0x5c>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 0203 	and.w	r2, r3, #3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002aac:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <HAL_RCC_GetClockConfig+0x5c>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <HAL_RCC_GetClockConfig+0x5c>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ac4:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_RCC_GetClockConfig+0x5c>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	08db      	lsrs	r3, r3, #3
 8002aca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ad2:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <HAL_RCC_GetClockConfig+0x60>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 020f 	and.w	r2, r3, #15
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	601a      	str	r2, [r3, #0]
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40023c00 	.word	0x40023c00

08002af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e041      	b.n	8002b8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7fe fa96 	bl	800104c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3304      	adds	r3, #4
 8002b30:	4619      	mov	r1, r3
 8002b32:	4610      	mov	r0, r2
 8002b34:	f000 fc7a 	bl	800342c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d001      	beq.n	8002bac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e04e      	b.n	8002c4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a23      	ldr	r2, [pc, #140]	; (8002c58 <HAL_TIM_Base_Start_IT+0xc4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d022      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x80>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd6:	d01d      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x80>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a1f      	ldr	r2, [pc, #124]	; (8002c5c <HAL_TIM_Base_Start_IT+0xc8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d018      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x80>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a1e      	ldr	r2, [pc, #120]	; (8002c60 <HAL_TIM_Base_Start_IT+0xcc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d013      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x80>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a1c      	ldr	r2, [pc, #112]	; (8002c64 <HAL_TIM_Base_Start_IT+0xd0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00e      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x80>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a1b      	ldr	r2, [pc, #108]	; (8002c68 <HAL_TIM_Base_Start_IT+0xd4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d009      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x80>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a19      	ldr	r2, [pc, #100]	; (8002c6c <HAL_TIM_Base_Start_IT+0xd8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d004      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x80>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a18      	ldr	r2, [pc, #96]	; (8002c70 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d111      	bne.n	8002c38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b06      	cmp	r3, #6
 8002c24:	d010      	beq.n	8002c48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0201 	orr.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c36:	e007      	b.n	8002c48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40010000 	.word	0x40010000
 8002c5c:	40000400 	.word	0x40000400
 8002c60:	40000800 	.word	0x40000800
 8002c64:	40000c00 	.word	0x40000c00
 8002c68:	40010400 	.word	0x40010400
 8002c6c:	40014000 	.word	0x40014000
 8002c70:	40001800 	.word	0x40001800

08002c74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e041      	b.n	8002d0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f839 	bl	8002d12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	f000 fbba 	bl	800342c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
	...

08002d28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d109      	bne.n	8002d4c <HAL_TIM_PWM_Start+0x24>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	bf14      	ite	ne
 8002d44:	2301      	movne	r3, #1
 8002d46:	2300      	moveq	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	e022      	b.n	8002d92 <HAL_TIM_PWM_Start+0x6a>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d109      	bne.n	8002d66 <HAL_TIM_PWM_Start+0x3e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	bf14      	ite	ne
 8002d5e:	2301      	movne	r3, #1
 8002d60:	2300      	moveq	r3, #0
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	e015      	b.n	8002d92 <HAL_TIM_PWM_Start+0x6a>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d109      	bne.n	8002d80 <HAL_TIM_PWM_Start+0x58>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	bf14      	ite	ne
 8002d78:	2301      	movne	r3, #1
 8002d7a:	2300      	moveq	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	e008      	b.n	8002d92 <HAL_TIM_PWM_Start+0x6a>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	bf14      	ite	ne
 8002d8c:	2301      	movne	r3, #1
 8002d8e:	2300      	moveq	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e07c      	b.n	8002e94 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d104      	bne.n	8002daa <HAL_TIM_PWM_Start+0x82>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002da8:	e013      	b.n	8002dd2 <HAL_TIM_PWM_Start+0xaa>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d104      	bne.n	8002dba <HAL_TIM_PWM_Start+0x92>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002db8:	e00b      	b.n	8002dd2 <HAL_TIM_PWM_Start+0xaa>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d104      	bne.n	8002dca <HAL_TIM_PWM_Start+0xa2>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc8:	e003      	b.n	8002dd2 <HAL_TIM_PWM_Start+0xaa>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2202      	movs	r2, #2
 8002dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	6839      	ldr	r1, [r7, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 fe10 	bl	8003a00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a2d      	ldr	r2, [pc, #180]	; (8002e9c <HAL_TIM_PWM_Start+0x174>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d004      	beq.n	8002df4 <HAL_TIM_PWM_Start+0xcc>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a2c      	ldr	r2, [pc, #176]	; (8002ea0 <HAL_TIM_PWM_Start+0x178>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d101      	bne.n	8002df8 <HAL_TIM_PWM_Start+0xd0>
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <HAL_TIM_PWM_Start+0xd2>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d007      	beq.n	8002e0e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a22      	ldr	r2, [pc, #136]	; (8002e9c <HAL_TIM_PWM_Start+0x174>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d022      	beq.n	8002e5e <HAL_TIM_PWM_Start+0x136>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e20:	d01d      	beq.n	8002e5e <HAL_TIM_PWM_Start+0x136>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1f      	ldr	r2, [pc, #124]	; (8002ea4 <HAL_TIM_PWM_Start+0x17c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d018      	beq.n	8002e5e <HAL_TIM_PWM_Start+0x136>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1d      	ldr	r2, [pc, #116]	; (8002ea8 <HAL_TIM_PWM_Start+0x180>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d013      	beq.n	8002e5e <HAL_TIM_PWM_Start+0x136>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1c      	ldr	r2, [pc, #112]	; (8002eac <HAL_TIM_PWM_Start+0x184>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00e      	beq.n	8002e5e <HAL_TIM_PWM_Start+0x136>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a16      	ldr	r2, [pc, #88]	; (8002ea0 <HAL_TIM_PWM_Start+0x178>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d009      	beq.n	8002e5e <HAL_TIM_PWM_Start+0x136>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a18      	ldr	r2, [pc, #96]	; (8002eb0 <HAL_TIM_PWM_Start+0x188>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d004      	beq.n	8002e5e <HAL_TIM_PWM_Start+0x136>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a16      	ldr	r2, [pc, #88]	; (8002eb4 <HAL_TIM_PWM_Start+0x18c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d111      	bne.n	8002e82 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2b06      	cmp	r3, #6
 8002e6e:	d010      	beq.n	8002e92 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e80:	e007      	b.n	8002e92 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0201 	orr.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40010000 	.word	0x40010000
 8002ea0:	40010400 	.word	0x40010400
 8002ea4:	40000400 	.word	0x40000400
 8002ea8:	40000800 	.word	0x40000800
 8002eac:	40000c00 	.word	0x40000c00
 8002eb0:	40014000 	.word	0x40014000
 8002eb4:	40001800 	.word	0x40001800

08002eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d122      	bne.n	8002f14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d11b      	bne.n	8002f14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f06f 0202 	mvn.w	r2, #2
 8002ee4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fa77 	bl	80033ee <HAL_TIM_IC_CaptureCallback>
 8002f00:	e005      	b.n	8002f0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fa69 	bl	80033da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fa7a 	bl	8003402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d122      	bne.n	8002f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d11b      	bne.n	8002f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f06f 0204 	mvn.w	r2, #4
 8002f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fa4d 	bl	80033ee <HAL_TIM_IC_CaptureCallback>
 8002f54:	e005      	b.n	8002f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fa3f 	bl	80033da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 fa50 	bl	8003402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d122      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d11b      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0208 	mvn.w	r2, #8
 8002f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2204      	movs	r2, #4
 8002f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fa23 	bl	80033ee <HAL_TIM_IC_CaptureCallback>
 8002fa8:	e005      	b.n	8002fb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fa15 	bl	80033da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fa26 	bl	8003402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	2b10      	cmp	r3, #16
 8002fc8:	d122      	bne.n	8003010 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b10      	cmp	r3, #16
 8002fd6:	d11b      	bne.n	8003010 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0210 	mvn.w	r2, #16
 8002fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2208      	movs	r2, #8
 8002fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f9f9 	bl	80033ee <HAL_TIM_IC_CaptureCallback>
 8002ffc:	e005      	b.n	800300a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f9eb 	bl	80033da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f9fc 	bl	8003402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b01      	cmp	r3, #1
 800301c:	d10e      	bne.n	800303c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b01      	cmp	r3, #1
 800302a:	d107      	bne.n	800303c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0201 	mvn.w	r2, #1
 8003034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fd fd66 	bl	8000b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003046:	2b80      	cmp	r3, #128	; 0x80
 8003048:	d10e      	bne.n	8003068 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003054:	2b80      	cmp	r3, #128	; 0x80
 8003056:	d107      	bne.n	8003068 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 fd78 	bl	8003b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003072:	2b40      	cmp	r3, #64	; 0x40
 8003074:	d10e      	bne.n	8003094 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d107      	bne.n	8003094 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800308c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f9c1 	bl	8003416 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b20      	cmp	r3, #32
 80030a0:	d10e      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	d107      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0220 	mvn.w	r2, #32
 80030b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 fd42 	bl	8003b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e0ae      	b.n	8003244 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b0c      	cmp	r3, #12
 80030f2:	f200 809f 	bhi.w	8003234 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030f6:	a201      	add	r2, pc, #4	; (adr r2, 80030fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fc:	08003131 	.word	0x08003131
 8003100:	08003235 	.word	0x08003235
 8003104:	08003235 	.word	0x08003235
 8003108:	08003235 	.word	0x08003235
 800310c:	08003171 	.word	0x08003171
 8003110:	08003235 	.word	0x08003235
 8003114:	08003235 	.word	0x08003235
 8003118:	08003235 	.word	0x08003235
 800311c:	080031b3 	.word	0x080031b3
 8003120:	08003235 	.word	0x08003235
 8003124:	08003235 	.word	0x08003235
 8003128:	08003235 	.word	0x08003235
 800312c:	080031f3 	.word	0x080031f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fa18 	bl	800356c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699a      	ldr	r2, [r3, #24]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0208 	orr.w	r2, r2, #8
 800314a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699a      	ldr	r2, [r3, #24]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0204 	bic.w	r2, r2, #4
 800315a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6999      	ldr	r1, [r3, #24]
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	619a      	str	r2, [r3, #24]
      break;
 800316e:	e064      	b.n	800323a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68b9      	ldr	r1, [r7, #8]
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fa68 	bl	800364c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800318a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699a      	ldr	r2, [r3, #24]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800319a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6999      	ldr	r1, [r3, #24]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	021a      	lsls	r2, r3, #8
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	619a      	str	r2, [r3, #24]
      break;
 80031b0:	e043      	b.n	800323a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fabd 	bl	8003738 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69da      	ldr	r2, [r3, #28]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0208 	orr.w	r2, r2, #8
 80031cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	69da      	ldr	r2, [r3, #28]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0204 	bic.w	r2, r2, #4
 80031dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69d9      	ldr	r1, [r3, #28]
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	61da      	str	r2, [r3, #28]
      break;
 80031f0:	e023      	b.n	800323a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fb11 	bl	8003820 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800320c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69da      	ldr	r2, [r3, #28]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800321c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69d9      	ldr	r1, [r3, #28]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	021a      	lsls	r2, r3, #8
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	61da      	str	r2, [r3, #28]
      break;
 8003232:	e002      	b.n	800323a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	75fb      	strb	r3, [r7, #23]
      break;
 8003238:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003242:	7dfb      	ldrb	r3, [r7, #23]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_TIM_ConfigClockSource+0x1c>
 8003264:	2302      	movs	r3, #2
 8003266:	e0b4      	b.n	80033d2 <HAL_TIM_ConfigClockSource+0x186>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800328e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032a0:	d03e      	beq.n	8003320 <HAL_TIM_ConfigClockSource+0xd4>
 80032a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032a6:	f200 8087 	bhi.w	80033b8 <HAL_TIM_ConfigClockSource+0x16c>
 80032aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ae:	f000 8086 	beq.w	80033be <HAL_TIM_ConfigClockSource+0x172>
 80032b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b6:	d87f      	bhi.n	80033b8 <HAL_TIM_ConfigClockSource+0x16c>
 80032b8:	2b70      	cmp	r3, #112	; 0x70
 80032ba:	d01a      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0xa6>
 80032bc:	2b70      	cmp	r3, #112	; 0x70
 80032be:	d87b      	bhi.n	80033b8 <HAL_TIM_ConfigClockSource+0x16c>
 80032c0:	2b60      	cmp	r3, #96	; 0x60
 80032c2:	d050      	beq.n	8003366 <HAL_TIM_ConfigClockSource+0x11a>
 80032c4:	2b60      	cmp	r3, #96	; 0x60
 80032c6:	d877      	bhi.n	80033b8 <HAL_TIM_ConfigClockSource+0x16c>
 80032c8:	2b50      	cmp	r3, #80	; 0x50
 80032ca:	d03c      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0xfa>
 80032cc:	2b50      	cmp	r3, #80	; 0x50
 80032ce:	d873      	bhi.n	80033b8 <HAL_TIM_ConfigClockSource+0x16c>
 80032d0:	2b40      	cmp	r3, #64	; 0x40
 80032d2:	d058      	beq.n	8003386 <HAL_TIM_ConfigClockSource+0x13a>
 80032d4:	2b40      	cmp	r3, #64	; 0x40
 80032d6:	d86f      	bhi.n	80033b8 <HAL_TIM_ConfigClockSource+0x16c>
 80032d8:	2b30      	cmp	r3, #48	; 0x30
 80032da:	d064      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x15a>
 80032dc:	2b30      	cmp	r3, #48	; 0x30
 80032de:	d86b      	bhi.n	80033b8 <HAL_TIM_ConfigClockSource+0x16c>
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d060      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x15a>
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	d867      	bhi.n	80033b8 <HAL_TIM_ConfigClockSource+0x16c>
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d05c      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x15a>
 80032ec:	2b10      	cmp	r3, #16
 80032ee:	d05a      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x15a>
 80032f0:	e062      	b.n	80033b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	6899      	ldr	r1, [r3, #8]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f000 fb5d 	bl	80039c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003314:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	609a      	str	r2, [r3, #8]
      break;
 800331e:	e04f      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6818      	ldr	r0, [r3, #0]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	6899      	ldr	r1, [r3, #8]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f000 fb46 	bl	80039c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003342:	609a      	str	r2, [r3, #8]
      break;
 8003344:	e03c      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	6859      	ldr	r1, [r3, #4]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	461a      	mov	r2, r3
 8003354:	f000 faba 	bl	80038cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2150      	movs	r1, #80	; 0x50
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fb13 	bl	800398a <TIM_ITRx_SetConfig>
      break;
 8003364:	e02c      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	6859      	ldr	r1, [r3, #4]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	461a      	mov	r2, r3
 8003374:	f000 fad9 	bl	800392a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2160      	movs	r1, #96	; 0x60
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fb03 	bl	800398a <TIM_ITRx_SetConfig>
      break;
 8003384:	e01c      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6859      	ldr	r1, [r3, #4]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	461a      	mov	r2, r3
 8003394:	f000 fa9a 	bl	80038cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2140      	movs	r1, #64	; 0x40
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 faf3 	bl	800398a <TIM_ITRx_SetConfig>
      break;
 80033a4:	e00c      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4619      	mov	r1, r3
 80033b0:	4610      	mov	r0, r2
 80033b2:	f000 faea 	bl	800398a <TIM_ITRx_SetConfig>
      break;
 80033b6:	e003      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
      break;
 80033bc:	e000      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a40      	ldr	r2, [pc, #256]	; (8003540 <TIM_Base_SetConfig+0x114>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d013      	beq.n	800346c <TIM_Base_SetConfig+0x40>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344a:	d00f      	beq.n	800346c <TIM_Base_SetConfig+0x40>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a3d      	ldr	r2, [pc, #244]	; (8003544 <TIM_Base_SetConfig+0x118>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d00b      	beq.n	800346c <TIM_Base_SetConfig+0x40>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a3c      	ldr	r2, [pc, #240]	; (8003548 <TIM_Base_SetConfig+0x11c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d007      	beq.n	800346c <TIM_Base_SetConfig+0x40>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a3b      	ldr	r2, [pc, #236]	; (800354c <TIM_Base_SetConfig+0x120>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d003      	beq.n	800346c <TIM_Base_SetConfig+0x40>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a3a      	ldr	r2, [pc, #232]	; (8003550 <TIM_Base_SetConfig+0x124>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d108      	bne.n	800347e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a2f      	ldr	r2, [pc, #188]	; (8003540 <TIM_Base_SetConfig+0x114>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d02b      	beq.n	80034de <TIM_Base_SetConfig+0xb2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348c:	d027      	beq.n	80034de <TIM_Base_SetConfig+0xb2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a2c      	ldr	r2, [pc, #176]	; (8003544 <TIM_Base_SetConfig+0x118>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d023      	beq.n	80034de <TIM_Base_SetConfig+0xb2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a2b      	ldr	r2, [pc, #172]	; (8003548 <TIM_Base_SetConfig+0x11c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d01f      	beq.n	80034de <TIM_Base_SetConfig+0xb2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a2a      	ldr	r2, [pc, #168]	; (800354c <TIM_Base_SetConfig+0x120>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d01b      	beq.n	80034de <TIM_Base_SetConfig+0xb2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a29      	ldr	r2, [pc, #164]	; (8003550 <TIM_Base_SetConfig+0x124>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d017      	beq.n	80034de <TIM_Base_SetConfig+0xb2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a28      	ldr	r2, [pc, #160]	; (8003554 <TIM_Base_SetConfig+0x128>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d013      	beq.n	80034de <TIM_Base_SetConfig+0xb2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a27      	ldr	r2, [pc, #156]	; (8003558 <TIM_Base_SetConfig+0x12c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d00f      	beq.n	80034de <TIM_Base_SetConfig+0xb2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a26      	ldr	r2, [pc, #152]	; (800355c <TIM_Base_SetConfig+0x130>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00b      	beq.n	80034de <TIM_Base_SetConfig+0xb2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a25      	ldr	r2, [pc, #148]	; (8003560 <TIM_Base_SetConfig+0x134>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d007      	beq.n	80034de <TIM_Base_SetConfig+0xb2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a24      	ldr	r2, [pc, #144]	; (8003564 <TIM_Base_SetConfig+0x138>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d003      	beq.n	80034de <TIM_Base_SetConfig+0xb2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a23      	ldr	r2, [pc, #140]	; (8003568 <TIM_Base_SetConfig+0x13c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d108      	bne.n	80034f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <TIM_Base_SetConfig+0x114>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d003      	beq.n	8003524 <TIM_Base_SetConfig+0xf8>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a0c      	ldr	r2, [pc, #48]	; (8003550 <TIM_Base_SetConfig+0x124>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d103      	bne.n	800352c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	615a      	str	r2, [r3, #20]
}
 8003532:	bf00      	nop
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40010000 	.word	0x40010000
 8003544:	40000400 	.word	0x40000400
 8003548:	40000800 	.word	0x40000800
 800354c:	40000c00 	.word	0x40000c00
 8003550:	40010400 	.word	0x40010400
 8003554:	40014000 	.word	0x40014000
 8003558:	40014400 	.word	0x40014400
 800355c:	40014800 	.word	0x40014800
 8003560:	40001800 	.word	0x40001800
 8003564:	40001c00 	.word	0x40001c00
 8003568:	40002000 	.word	0x40002000

0800356c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	f023 0201 	bic.w	r2, r3, #1
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0303 	bic.w	r3, r3, #3
 80035a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f023 0302 	bic.w	r3, r3, #2
 80035b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a20      	ldr	r2, [pc, #128]	; (8003644 <TIM_OC1_SetConfig+0xd8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d003      	beq.n	80035d0 <TIM_OC1_SetConfig+0x64>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a1f      	ldr	r2, [pc, #124]	; (8003648 <TIM_OC1_SetConfig+0xdc>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d10c      	bne.n	80035ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f023 0308 	bic.w	r3, r3, #8
 80035d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f023 0304 	bic.w	r3, r3, #4
 80035e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a15      	ldr	r2, [pc, #84]	; (8003644 <TIM_OC1_SetConfig+0xd8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d003      	beq.n	80035fa <TIM_OC1_SetConfig+0x8e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a14      	ldr	r2, [pc, #80]	; (8003648 <TIM_OC1_SetConfig+0xdc>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d111      	bne.n	800361e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	621a      	str	r2, [r3, #32]
}
 8003638:	bf00      	nop
 800363a:	371c      	adds	r7, #28
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	40010000 	.word	0x40010000
 8003648:	40010400 	.word	0x40010400

0800364c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	f023 0210 	bic.w	r2, r3, #16
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800367a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4313      	orrs	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f023 0320 	bic.w	r3, r3, #32
 8003696:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a22      	ldr	r2, [pc, #136]	; (8003730 <TIM_OC2_SetConfig+0xe4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d003      	beq.n	80036b4 <TIM_OC2_SetConfig+0x68>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a21      	ldr	r2, [pc, #132]	; (8003734 <TIM_OC2_SetConfig+0xe8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d10d      	bne.n	80036d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a17      	ldr	r2, [pc, #92]	; (8003730 <TIM_OC2_SetConfig+0xe4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d003      	beq.n	80036e0 <TIM_OC2_SetConfig+0x94>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a16      	ldr	r2, [pc, #88]	; (8003734 <TIM_OC2_SetConfig+0xe8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d113      	bne.n	8003708 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4313      	orrs	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	621a      	str	r2, [r3, #32]
}
 8003722:	bf00      	nop
 8003724:	371c      	adds	r7, #28
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40010000 	.word	0x40010000
 8003734:	40010400 	.word	0x40010400

08003738 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0303 	bic.w	r3, r3, #3
 800376e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	4313      	orrs	r3, r2
 800378c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a21      	ldr	r2, [pc, #132]	; (8003818 <TIM_OC3_SetConfig+0xe0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d003      	beq.n	800379e <TIM_OC3_SetConfig+0x66>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a20      	ldr	r2, [pc, #128]	; (800381c <TIM_OC3_SetConfig+0xe4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d10d      	bne.n	80037ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a16      	ldr	r2, [pc, #88]	; (8003818 <TIM_OC3_SetConfig+0xe0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d003      	beq.n	80037ca <TIM_OC3_SetConfig+0x92>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a15      	ldr	r2, [pc, #84]	; (800381c <TIM_OC3_SetConfig+0xe4>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d113      	bne.n	80037f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	621a      	str	r2, [r3, #32]
}
 800380c:	bf00      	nop
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	40010000 	.word	0x40010000
 800381c:	40010400 	.word	0x40010400

08003820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800384e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	021b      	lsls	r3, r3, #8
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4313      	orrs	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800386a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	031b      	lsls	r3, r3, #12
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4313      	orrs	r3, r2
 8003876:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a12      	ldr	r2, [pc, #72]	; (80038c4 <TIM_OC4_SetConfig+0xa4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d003      	beq.n	8003888 <TIM_OC4_SetConfig+0x68>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a11      	ldr	r2, [pc, #68]	; (80038c8 <TIM_OC4_SetConfig+0xa8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d109      	bne.n	800389c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800388e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	019b      	lsls	r3, r3, #6
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	621a      	str	r2, [r3, #32]
}
 80038b6:	bf00      	nop
 80038b8:	371c      	adds	r7, #28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40010000 	.word	0x40010000
 80038c8:	40010400 	.word	0x40010400

080038cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	f023 0201 	bic.w	r2, r3, #1
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f023 030a 	bic.w	r3, r3, #10
 8003908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4313      	orrs	r3, r2
 8003910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	621a      	str	r2, [r3, #32]
}
 800391e:	bf00      	nop
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800392a:	b480      	push	{r7}
 800392c:	b087      	sub	sp, #28
 800392e:	af00      	add	r7, sp, #0
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	f023 0210 	bic.w	r2, r3, #16
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003954:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	031b      	lsls	r3, r3, #12
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003966:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	4313      	orrs	r3, r2
 8003970:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	621a      	str	r2, [r3, #32]
}
 800397e:	bf00      	nop
 8003980:	371c      	adds	r7, #28
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800398a:	b480      	push	{r7}
 800398c:	b085      	sub	sp, #20
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f043 0307 	orr.w	r3, r3, #7
 80039ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	609a      	str	r2, [r3, #8]
}
 80039b4:	bf00      	nop
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	021a      	lsls	r2, r3, #8
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	609a      	str	r2, [r3, #8]
}
 80039f4:	bf00      	nop
 80039f6:	371c      	adds	r7, #28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f003 031f 	and.w	r3, r3, #31
 8003a12:	2201      	movs	r2, #1
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a1a      	ldr	r2, [r3, #32]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	43db      	mvns	r3, r3
 8003a22:	401a      	ands	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a1a      	ldr	r2, [r3, #32]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f003 031f 	and.w	r3, r3, #31
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	fa01 f303 	lsl.w	r3, r1, r3
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	621a      	str	r2, [r3, #32]
}
 8003a3e:	bf00      	nop
 8003a40:	371c      	adds	r7, #28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
	...

08003a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e05a      	b.n	8003b1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a21      	ldr	r2, [pc, #132]	; (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d022      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab0:	d01d      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a1d      	ldr	r2, [pc, #116]	; (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d018      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1b      	ldr	r2, [pc, #108]	; (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d013      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a1a      	ldr	r2, [pc, #104]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00e      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d009      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a17      	ldr	r2, [pc, #92]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d004      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a15      	ldr	r2, [pc, #84]	; (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d10c      	bne.n	8003b08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003af4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40010000 	.word	0x40010000
 8003b2c:	40000400 	.word	0x40000400
 8003b30:	40000800 	.word	0x40000800
 8003b34:	40000c00 	.word	0x40000c00
 8003b38:	40010400 	.word	0x40010400
 8003b3c:	40014000 	.word	0x40014000
 8003b40:	40001800 	.word	0x40001800

08003b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e03f      	b.n	8003bfe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fd fb00 	bl	8001198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2224      	movs	r2, #36	; 0x24
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fe81 	bl	80048b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695a      	ldr	r2, [r3, #20]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003be4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b08a      	sub	sp, #40	; 0x28
 8003c0a:	af02      	add	r7, sp, #8
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	603b      	str	r3, [r7, #0]
 8003c12:	4613      	mov	r3, r2
 8003c14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d17c      	bne.n	8003d20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <HAL_UART_Transmit+0x2c>
 8003c2c:	88fb      	ldrh	r3, [r7, #6]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e075      	b.n	8003d22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_UART_Transmit+0x3e>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e06e      	b.n	8003d22 <HAL_UART_Transmit+0x11c>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2221      	movs	r2, #33	; 0x21
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c5a:	f7fd fc1f 	bl	800149c <HAL_GetTick>
 8003c5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	88fa      	ldrh	r2, [r7, #6]
 8003c64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	88fa      	ldrh	r2, [r7, #6]
 8003c6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c74:	d108      	bne.n	8003c88 <HAL_UART_Transmit+0x82>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d104      	bne.n	8003c88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	61bb      	str	r3, [r7, #24]
 8003c86:	e003      	b.n	8003c90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c98:	e02a      	b.n	8003cf0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2180      	movs	r1, #128	; 0x80
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 fbc1 	bl	800442c <UART_WaitOnFlagUntilTimeout>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e036      	b.n	8003d22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10b      	bne.n	8003cd2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	3302      	adds	r3, #2
 8003cce:	61bb      	str	r3, [r7, #24]
 8003cd0:	e007      	b.n	8003ce2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	781a      	ldrb	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1cf      	bne.n	8003c9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2200      	movs	r2, #0
 8003d02:	2140      	movs	r1, #64	; 0x40
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 fb91 	bl	800442c <UART_WaitOnFlagUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e006      	b.n	8003d22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	e000      	b.n	8003d22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d20:	2302      	movs	r3, #2
  }
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3720      	adds	r7, #32
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b08a      	sub	sp, #40	; 0x28
 8003d2e:	af02      	add	r7, sp, #8
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	603b      	str	r3, [r7, #0]
 8003d36:	4613      	mov	r3, r2
 8003d38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b20      	cmp	r3, #32
 8003d48:	f040 808c 	bne.w	8003e64 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_UART_Receive+0x2e>
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e084      	b.n	8003e66 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_UART_Receive+0x40>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e07d      	b.n	8003e66 <HAL_UART_Receive+0x13c>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2222      	movs	r2, #34	; 0x22
 8003d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d86:	f7fd fb89 	bl	800149c <HAL_GetTick>
 8003d8a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	88fa      	ldrh	r2, [r7, #6]
 8003d90:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	88fa      	ldrh	r2, [r7, #6]
 8003d96:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da0:	d108      	bne.n	8003db4 <HAL_UART_Receive+0x8a>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d104      	bne.n	8003db4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	e003      	b.n	8003dbc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003dc4:	e043      	b.n	8003e4e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2120      	movs	r1, #32
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 fb2b 	bl	800442c <UART_WaitOnFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e042      	b.n	8003e66 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10c      	bne.n	8003e00 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	3302      	adds	r3, #2
 8003dfc:	61bb      	str	r3, [r7, #24]
 8003dfe:	e01f      	b.n	8003e40 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e08:	d007      	beq.n	8003e1a <HAL_UART_Receive+0xf0>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10a      	bne.n	8003e28 <HAL_UART_Receive+0xfe>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	701a      	strb	r2, [r3, #0]
 8003e26:	e008      	b.n	8003e3a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1b6      	bne.n	8003dc6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	e000      	b.n	8003e66 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
  }
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3720      	adds	r7, #32
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b084      	sub	sp, #16
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	d11d      	bne.n	8003ec4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <HAL_UART_Receive_IT+0x26>
 8003e8e:	88fb      	ldrh	r3, [r7, #6]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e016      	b.n	8003ec6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d101      	bne.n	8003ea6 <HAL_UART_Receive_IT+0x38>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e00f      	b.n	8003ec6 <HAL_UART_Receive_IT+0x58>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003eb4:	88fb      	ldrh	r3, [r7, #6]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 fb24 	bl	8004508 <UART_Start_Receive_IT>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	e000      	b.n	8003ec6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003ec4:	2302      	movs	r3, #2
  }
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b0ba      	sub	sp, #232	; 0xe8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10f      	bne.n	8003f36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1a:	f003 0320 	and.w	r3, r3, #32
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d009      	beq.n	8003f36 <HAL_UART_IRQHandler+0x66>
 8003f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 fc07 	bl	8004742 <UART_Receive_IT>
      return;
 8003f34:	e256      	b.n	80043e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80de 	beq.w	80040fc <HAL_UART_IRQHandler+0x22c>
 8003f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d106      	bne.n	8003f5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 80d1 	beq.w	80040fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00b      	beq.n	8003f7e <HAL_UART_IRQHandler+0xae>
 8003f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f043 0201 	orr.w	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00b      	beq.n	8003fa2 <HAL_UART_IRQHandler+0xd2>
 8003f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d005      	beq.n	8003fa2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	f043 0202 	orr.w	r2, r3, #2
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00b      	beq.n	8003fc6 <HAL_UART_IRQHandler+0xf6>
 8003fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f043 0204 	orr.w	r2, r3, #4
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d011      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x126>
 8003fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d105      	bne.n	8003fea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f043 0208 	orr.w	r2, r3, #8
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 81ed 	beq.w	80043da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004004:	f003 0320 	and.w	r3, r3, #32
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_UART_IRQHandler+0x14e>
 800400c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fb92 	bl	8004742 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004028:	2b40      	cmp	r3, #64	; 0x40
 800402a:	bf0c      	ite	eq
 800402c:	2301      	moveq	r3, #1
 800402e:	2300      	movne	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d103      	bne.n	800404a <HAL_UART_IRQHandler+0x17a>
 8004042:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004046:	2b00      	cmp	r3, #0
 8004048:	d04f      	beq.n	80040ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fa9a 	bl	8004584 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405a:	2b40      	cmp	r3, #64	; 0x40
 800405c:	d141      	bne.n	80040e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3314      	adds	r3, #20
 8004064:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004074:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800407c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3314      	adds	r3, #20
 8004086:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800408a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800408e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004092:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004096:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800409a:	e841 2300 	strex	r3, r2, [r1]
 800409e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1d9      	bne.n	800405e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d013      	beq.n	80040da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b6:	4a7d      	ldr	r2, [pc, #500]	; (80042ac <HAL_UART_IRQHandler+0x3dc>)
 80040b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fd fbf8 	bl	80018b4 <HAL_DMA_Abort_IT>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d016      	beq.n	80040f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040d4:	4610      	mov	r0, r2
 80040d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d8:	e00e      	b.n	80040f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f990 	bl	8004400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e0:	e00a      	b.n	80040f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f98c 	bl	8004400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e8:	e006      	b.n	80040f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f988 	bl	8004400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80040f6:	e170      	b.n	80043da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f8:	bf00      	nop
    return;
 80040fa:	e16e      	b.n	80043da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004100:	2b01      	cmp	r3, #1
 8004102:	f040 814a 	bne.w	800439a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 8143 	beq.w	800439a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 813c 	beq.w	800439a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004122:	2300      	movs	r3, #0
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004142:	2b40      	cmp	r3, #64	; 0x40
 8004144:	f040 80b4 	bne.w	80042b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004154:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 8140 	beq.w	80043de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004162:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004166:	429a      	cmp	r2, r3
 8004168:	f080 8139 	bcs.w	80043de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004172:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800417e:	f000 8088 	beq.w	8004292 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	330c      	adds	r3, #12
 8004188:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004198:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800419c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	330c      	adds	r3, #12
 80041aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80041ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1d9      	bne.n	8004182 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3314      	adds	r3, #20
 80041d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d8:	e853 3f00 	ldrex	r3, [r3]
 80041dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041e0:	f023 0301 	bic.w	r3, r3, #1
 80041e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3314      	adds	r3, #20
 80041ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e1      	bne.n	80041ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3314      	adds	r3, #20
 8004210:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004214:	e853 3f00 	ldrex	r3, [r3]
 8004218:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800421a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800421c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004220:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3314      	adds	r3, #20
 800422a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800422e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004230:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004232:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004234:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004236:	e841 2300 	strex	r3, r2, [r1]
 800423a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800423c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1e3      	bne.n	800420a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	330c      	adds	r3, #12
 8004256:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800425a:	e853 3f00 	ldrex	r3, [r3]
 800425e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004262:	f023 0310 	bic.w	r3, r3, #16
 8004266:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	330c      	adds	r3, #12
 8004270:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004274:	65ba      	str	r2, [r7, #88]	; 0x58
 8004276:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800427a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800427c:	e841 2300 	strex	r3, r2, [r1]
 8004280:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1e3      	bne.n	8004250 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428c:	4618      	mov	r0, r3
 800428e:	f7fd faa1 	bl	80017d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800429a:	b29b      	uxth	r3, r3
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	b29b      	uxth	r3, r3
 80042a0:	4619      	mov	r1, r3
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f8b6 	bl	8004414 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042a8:	e099      	b.n	80043de <HAL_UART_IRQHandler+0x50e>
 80042aa:	bf00      	nop
 80042ac:	0800464b 	.word	0x0800464b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 808b 	beq.w	80043e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80042cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 8086 	beq.w	80043e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	330c      	adds	r3, #12
 80042dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	330c      	adds	r3, #12
 80042f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80042fa:	647a      	str	r2, [r7, #68]	; 0x44
 80042fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004300:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004302:	e841 2300 	strex	r3, r2, [r1]
 8004306:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1e3      	bne.n	80042d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3314      	adds	r3, #20
 8004314:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	623b      	str	r3, [r7, #32]
   return(result);
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	f023 0301 	bic.w	r3, r3, #1
 8004324:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3314      	adds	r3, #20
 800432e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004332:	633a      	str	r2, [r7, #48]	; 0x30
 8004334:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800433a:	e841 2300 	strex	r3, r2, [r1]
 800433e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e3      	bne.n	800430e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2220      	movs	r2, #32
 800434a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	330c      	adds	r3, #12
 800435a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	e853 3f00 	ldrex	r3, [r3]
 8004362:	60fb      	str	r3, [r7, #12]
   return(result);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0310 	bic.w	r3, r3, #16
 800436a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	330c      	adds	r3, #12
 8004374:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004378:	61fa      	str	r2, [r7, #28]
 800437a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	69b9      	ldr	r1, [r7, #24]
 800437e:	69fa      	ldr	r2, [r7, #28]
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	617b      	str	r3, [r7, #20]
   return(result);
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e3      	bne.n	8004354 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800438c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004390:	4619      	mov	r1, r3
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f83e 	bl	8004414 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004398:	e023      	b.n	80043e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800439a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <HAL_UART_IRQHandler+0x4ea>
 80043a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f95d 	bl	8004672 <UART_Transmit_IT>
    return;
 80043b8:	e014      	b.n	80043e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00e      	beq.n	80043e4 <HAL_UART_IRQHandler+0x514>
 80043c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d008      	beq.n	80043e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f99d 	bl	8004712 <UART_EndTransmit_IT>
    return;
 80043d8:	e004      	b.n	80043e4 <HAL_UART_IRQHandler+0x514>
    return;
 80043da:	bf00      	nop
 80043dc:	e002      	b.n	80043e4 <HAL_UART_IRQHandler+0x514>
      return;
 80043de:	bf00      	nop
 80043e0:	e000      	b.n	80043e4 <HAL_UART_IRQHandler+0x514>
      return;
 80043e2:	bf00      	nop
  }
}
 80043e4:	37e8      	adds	r7, #232	; 0xe8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop

080043ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b090      	sub	sp, #64	; 0x40
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	4613      	mov	r3, r2
 800443a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800443c:	e050      	b.n	80044e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004444:	d04c      	beq.n	80044e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004448:	2b00      	cmp	r3, #0
 800444a:	d007      	beq.n	800445c <UART_WaitOnFlagUntilTimeout+0x30>
 800444c:	f7fd f826 	bl	800149c <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004458:	429a      	cmp	r2, r3
 800445a:	d241      	bcs.n	80044e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800447c:	637a      	str	r2, [r7, #52]	; 0x34
 800447e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e5      	bne.n	800445c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3314      	adds	r3, #20
 8004496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	613b      	str	r3, [r7, #16]
   return(result);
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f023 0301 	bic.w	r3, r3, #1
 80044a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3314      	adds	r3, #20
 80044ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044b0:	623a      	str	r2, [r7, #32]
 80044b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	69f9      	ldr	r1, [r7, #28]
 80044b6:	6a3a      	ldr	r2, [r7, #32]
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e5      	bne.n	8004490 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e00f      	b.n	8004500 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	4013      	ands	r3, r2
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	bf0c      	ite	eq
 80044f0:	2301      	moveq	r3, #1
 80044f2:	2300      	movne	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	461a      	mov	r2, r3
 80044f8:	79fb      	ldrb	r3, [r7, #7]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d09f      	beq.n	800443e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3740      	adds	r7, #64	; 0x40
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	4613      	mov	r3, r2
 8004514:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	88fa      	ldrh	r2, [r7, #6]
 8004520:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	88fa      	ldrh	r2, [r7, #6]
 8004526:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2222      	movs	r2, #34	; 0x22
 8004532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d007      	beq.n	8004556 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004554:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695a      	ldr	r2, [r3, #20]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f042 0201 	orr.w	r2, r2, #1
 8004564:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0220 	orr.w	r2, r2, #32
 8004574:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004584:	b480      	push	{r7}
 8004586:	b095      	sub	sp, #84	; 0x54
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	330c      	adds	r3, #12
 8004592:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004596:	e853 3f00 	ldrex	r3, [r3]
 800459a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	330c      	adds	r3, #12
 80045aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045ac:	643a      	str	r2, [r7, #64]	; 0x40
 80045ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045b4:	e841 2300 	strex	r3, r2, [r1]
 80045b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1e5      	bne.n	800458c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3314      	adds	r3, #20
 80045c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	e853 3f00 	ldrex	r3, [r3]
 80045ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	3314      	adds	r3, #20
 80045de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045e8:	e841 2300 	strex	r3, r2, [r1]
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1e5      	bne.n	80045c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d119      	bne.n	8004630 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	330c      	adds	r3, #12
 8004602:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	60bb      	str	r3, [r7, #8]
   return(result);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f023 0310 	bic.w	r3, r3, #16
 8004612:	647b      	str	r3, [r7, #68]	; 0x44
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	330c      	adds	r3, #12
 800461a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800461c:	61ba      	str	r2, [r7, #24]
 800461e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	6979      	ldr	r1, [r7, #20]
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	613b      	str	r3, [r7, #16]
   return(result);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e5      	bne.n	80045fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800463e:	bf00      	nop
 8004640:	3754      	adds	r7, #84	; 0x54
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b084      	sub	sp, #16
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004656:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f7ff fecb 	bl	8004400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800466a:	bf00      	nop
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004672:	b480      	push	{r7}
 8004674:	b085      	sub	sp, #20
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b21      	cmp	r3, #33	; 0x21
 8004684:	d13e      	bne.n	8004704 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468e:	d114      	bne.n	80046ba <UART_Transmit_IT+0x48>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d110      	bne.n	80046ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	1c9a      	adds	r2, r3, #2
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	621a      	str	r2, [r3, #32]
 80046b8:	e008      	b.n	80046cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	1c59      	adds	r1, r3, #1
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6211      	str	r1, [r2, #32]
 80046c4:	781a      	ldrb	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	4619      	mov	r1, r3
 80046da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10f      	bne.n	8004700 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	e000      	b.n	8004706 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004704:	2302      	movs	r3, #2
  }
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004728:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7ff fe5a 	bl	80043ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b08c      	sub	sp, #48	; 0x30
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b22      	cmp	r3, #34	; 0x22
 8004754:	f040 80ab 	bne.w	80048ae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004760:	d117      	bne.n	8004792 <UART_Receive_IT+0x50>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d113      	bne.n	8004792 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800476a:	2300      	movs	r3, #0
 800476c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004772:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	b29b      	uxth	r3, r3
 800477c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004780:	b29a      	uxth	r2, r3
 8004782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004784:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478a:	1c9a      	adds	r2, r3, #2
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	629a      	str	r2, [r3, #40]	; 0x28
 8004790:	e026      	b.n	80047e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004796:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004798:	2300      	movs	r3, #0
 800479a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a4:	d007      	beq.n	80047b6 <UART_Receive_IT+0x74>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10a      	bne.n	80047c4 <UART_Receive_IT+0x82>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c0:	701a      	strb	r2, [r3, #0]
 80047c2:	e008      	b.n	80047d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	3b01      	subs	r3, #1
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	4619      	mov	r1, r3
 80047ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d15a      	bne.n	80048aa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0220 	bic.w	r2, r2, #32
 8004802:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004812:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695a      	ldr	r2, [r3, #20]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0201 	bic.w	r2, r2, #1
 8004822:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004830:	2b01      	cmp	r3, #1
 8004832:	d135      	bne.n	80048a0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	330c      	adds	r3, #12
 8004840:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	e853 3f00 	ldrex	r3, [r3]
 8004848:	613b      	str	r3, [r7, #16]
   return(result);
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f023 0310 	bic.w	r3, r3, #16
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	330c      	adds	r3, #12
 8004858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800485a:	623a      	str	r2, [r7, #32]
 800485c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485e:	69f9      	ldr	r1, [r7, #28]
 8004860:	6a3a      	ldr	r2, [r7, #32]
 8004862:	e841 2300 	strex	r3, r2, [r1]
 8004866:	61bb      	str	r3, [r7, #24]
   return(result);
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1e5      	bne.n	800483a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	2b10      	cmp	r3, #16
 800487a:	d10a      	bne.n	8004892 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004896:	4619      	mov	r1, r3
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7ff fdbb 	bl	8004414 <HAL_UARTEx_RxEventCallback>
 800489e:	e002      	b.n	80048a6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7fc fd63 	bl	800136c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	e002      	b.n	80048b0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	e000      	b.n	80048b0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80048ae:	2302      	movs	r3, #2
  }
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3730      	adds	r7, #48	; 0x30
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048bc:	b0c0      	sub	sp, #256	; 0x100
 80048be:	af00      	add	r7, sp, #0
 80048c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d4:	68d9      	ldr	r1, [r3, #12]
 80048d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	ea40 0301 	orr.w	r3, r0, r1
 80048e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	431a      	orrs	r2, r3
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004910:	f021 010c 	bic.w	r1, r1, #12
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800491e:	430b      	orrs	r3, r1
 8004920:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800492e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004932:	6999      	ldr	r1, [r3, #24]
 8004934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	ea40 0301 	orr.w	r3, r0, r1
 800493e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4b8f      	ldr	r3, [pc, #572]	; (8004b84 <UART_SetConfig+0x2cc>)
 8004948:	429a      	cmp	r2, r3
 800494a:	d005      	beq.n	8004958 <UART_SetConfig+0xa0>
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	4b8d      	ldr	r3, [pc, #564]	; (8004b88 <UART_SetConfig+0x2d0>)
 8004954:	429a      	cmp	r2, r3
 8004956:	d104      	bne.n	8004962 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004958:	f7fe f886 	bl	8002a68 <HAL_RCC_GetPCLK2Freq>
 800495c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004960:	e003      	b.n	800496a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004962:	f7fe f86d 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
 8004966:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800496a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004974:	f040 810c 	bne.w	8004b90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800497c:	2200      	movs	r2, #0
 800497e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004982:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004986:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800498a:	4622      	mov	r2, r4
 800498c:	462b      	mov	r3, r5
 800498e:	1891      	adds	r1, r2, r2
 8004990:	65b9      	str	r1, [r7, #88]	; 0x58
 8004992:	415b      	adcs	r3, r3
 8004994:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004996:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800499a:	4621      	mov	r1, r4
 800499c:	eb12 0801 	adds.w	r8, r2, r1
 80049a0:	4629      	mov	r1, r5
 80049a2:	eb43 0901 	adc.w	r9, r3, r1
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	f04f 0300 	mov.w	r3, #0
 80049ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049ba:	4690      	mov	r8, r2
 80049bc:	4699      	mov	r9, r3
 80049be:	4623      	mov	r3, r4
 80049c0:	eb18 0303 	adds.w	r3, r8, r3
 80049c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049c8:	462b      	mov	r3, r5
 80049ca:	eb49 0303 	adc.w	r3, r9, r3
 80049ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049e6:	460b      	mov	r3, r1
 80049e8:	18db      	adds	r3, r3, r3
 80049ea:	653b      	str	r3, [r7, #80]	; 0x50
 80049ec:	4613      	mov	r3, r2
 80049ee:	eb42 0303 	adc.w	r3, r2, r3
 80049f2:	657b      	str	r3, [r7, #84]	; 0x54
 80049f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049fc:	f7fb fc50 	bl	80002a0 <__aeabi_uldivmod>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4b61      	ldr	r3, [pc, #388]	; (8004b8c <UART_SetConfig+0x2d4>)
 8004a06:	fba3 2302 	umull	r2, r3, r3, r2
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	011c      	lsls	r4, r3, #4
 8004a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a12:	2200      	movs	r2, #0
 8004a14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a20:	4642      	mov	r2, r8
 8004a22:	464b      	mov	r3, r9
 8004a24:	1891      	adds	r1, r2, r2
 8004a26:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a28:	415b      	adcs	r3, r3
 8004a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a30:	4641      	mov	r1, r8
 8004a32:	eb12 0a01 	adds.w	sl, r2, r1
 8004a36:	4649      	mov	r1, r9
 8004a38:	eb43 0b01 	adc.w	fp, r3, r1
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a50:	4692      	mov	sl, r2
 8004a52:	469b      	mov	fp, r3
 8004a54:	4643      	mov	r3, r8
 8004a56:	eb1a 0303 	adds.w	r3, sl, r3
 8004a5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a5e:	464b      	mov	r3, r9
 8004a60:	eb4b 0303 	adc.w	r3, fp, r3
 8004a64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	18db      	adds	r3, r3, r3
 8004a80:	643b      	str	r3, [r7, #64]	; 0x40
 8004a82:	4613      	mov	r3, r2
 8004a84:	eb42 0303 	adc.w	r3, r2, r3
 8004a88:	647b      	str	r3, [r7, #68]	; 0x44
 8004a8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a92:	f7fb fc05 	bl	80002a0 <__aeabi_uldivmod>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	4b3b      	ldr	r3, [pc, #236]	; (8004b8c <UART_SetConfig+0x2d4>)
 8004a9e:	fba3 2301 	umull	r2, r3, r3, r1
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	2264      	movs	r2, #100	; 0x64
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	1acb      	subs	r3, r1, r3
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ab2:	4b36      	ldr	r3, [pc, #216]	; (8004b8c <UART_SetConfig+0x2d4>)
 8004ab4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ac0:	441c      	add	r4, r3
 8004ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004acc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ad0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ad4:	4642      	mov	r2, r8
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	1891      	adds	r1, r2, r2
 8004ada:	63b9      	str	r1, [r7, #56]	; 0x38
 8004adc:	415b      	adcs	r3, r3
 8004ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ae0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ae4:	4641      	mov	r1, r8
 8004ae6:	1851      	adds	r1, r2, r1
 8004ae8:	6339      	str	r1, [r7, #48]	; 0x30
 8004aea:	4649      	mov	r1, r9
 8004aec:	414b      	adcs	r3, r1
 8004aee:	637b      	str	r3, [r7, #52]	; 0x34
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004afc:	4659      	mov	r1, fp
 8004afe:	00cb      	lsls	r3, r1, #3
 8004b00:	4651      	mov	r1, sl
 8004b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b06:	4651      	mov	r1, sl
 8004b08:	00ca      	lsls	r2, r1, #3
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4603      	mov	r3, r0
 8004b10:	4642      	mov	r2, r8
 8004b12:	189b      	adds	r3, r3, r2
 8004b14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b18:	464b      	mov	r3, r9
 8004b1a:	460a      	mov	r2, r1
 8004b1c:	eb42 0303 	adc.w	r3, r2, r3
 8004b20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b38:	460b      	mov	r3, r1
 8004b3a:	18db      	adds	r3, r3, r3
 8004b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b3e:	4613      	mov	r3, r2
 8004b40:	eb42 0303 	adc.w	r3, r2, r3
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b4e:	f7fb fba7 	bl	80002a0 <__aeabi_uldivmod>
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <UART_SetConfig+0x2d4>)
 8004b58:	fba3 1302 	umull	r1, r3, r3, r2
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	2164      	movs	r1, #100	; 0x64
 8004b60:	fb01 f303 	mul.w	r3, r1, r3
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	3332      	adds	r3, #50	; 0x32
 8004b6a:	4a08      	ldr	r2, [pc, #32]	; (8004b8c <UART_SetConfig+0x2d4>)
 8004b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b70:	095b      	lsrs	r3, r3, #5
 8004b72:	f003 0207 	and.w	r2, r3, #7
 8004b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4422      	add	r2, r4
 8004b7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b80:	e105      	b.n	8004d8e <UART_SetConfig+0x4d6>
 8004b82:	bf00      	nop
 8004b84:	40011000 	.word	0x40011000
 8004b88:	40011400 	.word	0x40011400
 8004b8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b94:	2200      	movs	r2, #0
 8004b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ba2:	4642      	mov	r2, r8
 8004ba4:	464b      	mov	r3, r9
 8004ba6:	1891      	adds	r1, r2, r2
 8004ba8:	6239      	str	r1, [r7, #32]
 8004baa:	415b      	adcs	r3, r3
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
 8004bae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bb2:	4641      	mov	r1, r8
 8004bb4:	1854      	adds	r4, r2, r1
 8004bb6:	4649      	mov	r1, r9
 8004bb8:	eb43 0501 	adc.w	r5, r3, r1
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	00eb      	lsls	r3, r5, #3
 8004bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bca:	00e2      	lsls	r2, r4, #3
 8004bcc:	4614      	mov	r4, r2
 8004bce:	461d      	mov	r5, r3
 8004bd0:	4643      	mov	r3, r8
 8004bd2:	18e3      	adds	r3, r4, r3
 8004bd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bd8:	464b      	mov	r3, r9
 8004bda:	eb45 0303 	adc.w	r3, r5, r3
 8004bde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004bfe:	4629      	mov	r1, r5
 8004c00:	008b      	lsls	r3, r1, #2
 8004c02:	4621      	mov	r1, r4
 8004c04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c08:	4621      	mov	r1, r4
 8004c0a:	008a      	lsls	r2, r1, #2
 8004c0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c10:	f7fb fb46 	bl	80002a0 <__aeabi_uldivmod>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4b60      	ldr	r3, [pc, #384]	; (8004d9c <UART_SetConfig+0x4e4>)
 8004c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	011c      	lsls	r4, r3, #4
 8004c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c26:	2200      	movs	r2, #0
 8004c28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c34:	4642      	mov	r2, r8
 8004c36:	464b      	mov	r3, r9
 8004c38:	1891      	adds	r1, r2, r2
 8004c3a:	61b9      	str	r1, [r7, #24]
 8004c3c:	415b      	adcs	r3, r3
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c44:	4641      	mov	r1, r8
 8004c46:	1851      	adds	r1, r2, r1
 8004c48:	6139      	str	r1, [r7, #16]
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	414b      	adcs	r3, r1
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c5c:	4659      	mov	r1, fp
 8004c5e:	00cb      	lsls	r3, r1, #3
 8004c60:	4651      	mov	r1, sl
 8004c62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c66:	4651      	mov	r1, sl
 8004c68:	00ca      	lsls	r2, r1, #3
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4603      	mov	r3, r0
 8004c70:	4642      	mov	r2, r8
 8004c72:	189b      	adds	r3, r3, r2
 8004c74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c78:	464b      	mov	r3, r9
 8004c7a:	460a      	mov	r2, r1
 8004c7c:	eb42 0303 	adc.w	r3, r2, r3
 8004c80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c9c:	4649      	mov	r1, r9
 8004c9e:	008b      	lsls	r3, r1, #2
 8004ca0:	4641      	mov	r1, r8
 8004ca2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ca6:	4641      	mov	r1, r8
 8004ca8:	008a      	lsls	r2, r1, #2
 8004caa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cae:	f7fb faf7 	bl	80002a0 <__aeabi_uldivmod>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4b39      	ldr	r3, [pc, #228]	; (8004d9c <UART_SetConfig+0x4e4>)
 8004cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8004cbc:	095b      	lsrs	r3, r3, #5
 8004cbe:	2164      	movs	r1, #100	; 0x64
 8004cc0:	fb01 f303 	mul.w	r3, r1, r3
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	3332      	adds	r3, #50	; 0x32
 8004cca:	4a34      	ldr	r2, [pc, #208]	; (8004d9c <UART_SetConfig+0x4e4>)
 8004ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd0:	095b      	lsrs	r3, r3, #5
 8004cd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cd6:	441c      	add	r4, r3
 8004cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cdc:	2200      	movs	r2, #0
 8004cde:	673b      	str	r3, [r7, #112]	; 0x70
 8004ce0:	677a      	str	r2, [r7, #116]	; 0x74
 8004ce2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ce6:	4642      	mov	r2, r8
 8004ce8:	464b      	mov	r3, r9
 8004cea:	1891      	adds	r1, r2, r2
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	415b      	adcs	r3, r3
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cf6:	4641      	mov	r1, r8
 8004cf8:	1851      	adds	r1, r2, r1
 8004cfa:	6039      	str	r1, [r7, #0]
 8004cfc:	4649      	mov	r1, r9
 8004cfe:	414b      	adcs	r3, r1
 8004d00:	607b      	str	r3, [r7, #4]
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d0e:	4659      	mov	r1, fp
 8004d10:	00cb      	lsls	r3, r1, #3
 8004d12:	4651      	mov	r1, sl
 8004d14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d18:	4651      	mov	r1, sl
 8004d1a:	00ca      	lsls	r2, r1, #3
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4603      	mov	r3, r0
 8004d22:	4642      	mov	r2, r8
 8004d24:	189b      	adds	r3, r3, r2
 8004d26:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d28:	464b      	mov	r3, r9
 8004d2a:	460a      	mov	r2, r1
 8004d2c:	eb42 0303 	adc.w	r3, r2, r3
 8004d30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d3c:	667a      	str	r2, [r7, #100]	; 0x64
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	008b      	lsls	r3, r1, #2
 8004d4e:	4641      	mov	r1, r8
 8004d50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d54:	4641      	mov	r1, r8
 8004d56:	008a      	lsls	r2, r1, #2
 8004d58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d5c:	f7fb faa0 	bl	80002a0 <__aeabi_uldivmod>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4b0d      	ldr	r3, [pc, #52]	; (8004d9c <UART_SetConfig+0x4e4>)
 8004d66:	fba3 1302 	umull	r1, r3, r3, r2
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	2164      	movs	r1, #100	; 0x64
 8004d6e:	fb01 f303 	mul.w	r3, r1, r3
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	3332      	adds	r3, #50	; 0x32
 8004d78:	4a08      	ldr	r2, [pc, #32]	; (8004d9c <UART_SetConfig+0x4e4>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	f003 020f 	and.w	r2, r3, #15
 8004d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4422      	add	r2, r4
 8004d8c:	609a      	str	r2, [r3, #8]
}
 8004d8e:	bf00      	nop
 8004d90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d94:	46bd      	mov	sp, r7
 8004d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d9a:	bf00      	nop
 8004d9c:	51eb851f 	.word	0x51eb851f

08004da0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	4603      	mov	r3, r0
 8004da8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004daa:	2300      	movs	r3, #0
 8004dac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004db2:	2b84      	cmp	r3, #132	; 0x84
 8004db4:	d005      	beq.n	8004dc2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004db6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	3303      	adds	r3, #3
 8004dc0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004dd4:	f000 fe14 	bl	8005a00 <vTaskStartScheduler>
  
  return osOK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004dde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004de0:	b089      	sub	sp, #36	; 0x24
 8004de2:	af04      	add	r7, sp, #16
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d020      	beq.n	8004e32 <osThreadCreate+0x54>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01c      	beq.n	8004e32 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685c      	ldr	r4, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681d      	ldr	r5, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691e      	ldr	r6, [r3, #16]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff ffc8 	bl	8004da0 <makeFreeRtosPriority>
 8004e10:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e1a:	9202      	str	r2, [sp, #8]
 8004e1c:	9301      	str	r3, [sp, #4]
 8004e1e:	9100      	str	r1, [sp, #0]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	4632      	mov	r2, r6
 8004e24:	4629      	mov	r1, r5
 8004e26:	4620      	mov	r0, r4
 8004e28:	f000 fc22 	bl	8005670 <xTaskCreateStatic>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	e01c      	b.n	8004e6c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685c      	ldr	r4, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e3e:	b29e      	uxth	r6, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff ffaa 	bl	8004da0 <makeFreeRtosPriority>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	f107 030c 	add.w	r3, r7, #12
 8004e52:	9301      	str	r3, [sp, #4]
 8004e54:	9200      	str	r2, [sp, #0]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	4632      	mov	r2, r6
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	f000 fc64 	bl	800572a <xTaskCreate>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d001      	beq.n	8004e6c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	e000      	b.n	8004e6e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e76 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b084      	sub	sp, #16
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <osDelay+0x16>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	e000      	b.n	8004e8e <osDelay+0x18>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fd82 	bl	8005998 <vTaskDelay>
  
  return osOK;
 8004e94:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004e9e:	b590      	push	{r4, r7, lr}
 8004ea0:	b085      	sub	sp, #20
 8004ea2:	af02      	add	r7, sp, #8
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d011      	beq.n	8004ed4 <osMessageCreate+0x36>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00d      	beq.n	8004ed4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6818      	ldr	r0, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6859      	ldr	r1, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	2400      	movs	r4, #0
 8004eca:	9400      	str	r4, [sp, #0]
 8004ecc:	f000 f92c 	bl	8005128 <xQueueGenericCreateStatic>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	e008      	b.n	8004ee6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6818      	ldr	r0, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	4619      	mov	r1, r3
 8004ee0:	f000 f99a 	bl	8005218 <xQueueGenericCreate>
 8004ee4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd90      	pop	{r4, r7, pc}

08004eee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f103 0208 	add.w	r2, r3, #8
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f04f 32ff 	mov.w	r2, #4294967295
 8004f06:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f103 0208 	add.w	r2, r3, #8
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f103 0208 	add.w	r2, r3, #8
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	689a      	ldr	r2, [r3, #8]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	601a      	str	r2, [r3, #0]
}
 8004f84:	bf00      	nop
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa6:	d103      	bne.n	8004fb0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	e00c      	b.n	8004fca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3308      	adds	r3, #8
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	e002      	b.n	8004fbe <vListInsert+0x2e>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d2f6      	bcs.n	8004fb8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	601a      	str	r2, [r3, #0]
}
 8004ff6:	bf00      	nop
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005002:	b480      	push	{r7}
 8005004:	b085      	sub	sp, #20
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6892      	ldr	r2, [r2, #8]
 8005018:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6852      	ldr	r2, [r2, #4]
 8005022:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	429a      	cmp	r2, r3
 800502c:	d103      	bne.n	8005036 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	1e5a      	subs	r2, r3, #1
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
	...

08005058 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10a      	bne.n	8005082 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800506c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800507e:	bf00      	nop
 8005080:	e7fe      	b.n	8005080 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005082:	f001 faef 	bl	8006664 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508e:	68f9      	ldr	r1, [r7, #12]
 8005090:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005092:	fb01 f303 	mul.w	r3, r1, r3
 8005096:	441a      	add	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b2:	3b01      	subs	r3, #1
 80050b4:	68f9      	ldr	r1, [r7, #12]
 80050b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050b8:	fb01 f303 	mul.w	r3, r1, r3
 80050bc:	441a      	add	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	22ff      	movs	r2, #255	; 0xff
 80050c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	22ff      	movs	r2, #255	; 0xff
 80050ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d114      	bne.n	8005102 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01a      	beq.n	8005116 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	3310      	adds	r3, #16
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 fecd 	bl	8005e84 <xTaskRemoveFromEventList>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d012      	beq.n	8005116 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80050f0:	4b0c      	ldr	r3, [pc, #48]	; (8005124 <xQueueGenericReset+0xcc>)
 80050f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	e009      	b.n	8005116 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3310      	adds	r3, #16
 8005106:	4618      	mov	r0, r3
 8005108:	f7ff fef1 	bl	8004eee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	3324      	adds	r3, #36	; 0x24
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff feec 	bl	8004eee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005116:	f001 fad5 	bl	80066c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800511a:	2301      	movs	r3, #1
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	e000ed04 	.word	0xe000ed04

08005128 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08e      	sub	sp, #56	; 0x38
 800512c:	af02      	add	r7, sp, #8
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10a      	bne.n	8005152 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800514e:	bf00      	nop
 8005150:	e7fe      	b.n	8005150 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10a      	bne.n	800516e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515c:	f383 8811 	msr	BASEPRI, r3
 8005160:	f3bf 8f6f 	isb	sy
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
}
 800516a:	bf00      	nop
 800516c:	e7fe      	b.n	800516c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <xQueueGenericCreateStatic+0x52>
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <xQueueGenericCreateStatic+0x56>
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <xQueueGenericCreateStatic+0x58>
 800517e:	2300      	movs	r3, #0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10a      	bne.n	800519a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	623b      	str	r3, [r7, #32]
}
 8005196:	bf00      	nop
 8005198:	e7fe      	b.n	8005198 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d102      	bne.n	80051a6 <xQueueGenericCreateStatic+0x7e>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <xQueueGenericCreateStatic+0x82>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <xQueueGenericCreateStatic+0x84>
 80051aa:	2300      	movs	r3, #0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10a      	bne.n	80051c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	61fb      	str	r3, [r7, #28]
}
 80051c2:	bf00      	nop
 80051c4:	e7fe      	b.n	80051c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051c6:	2348      	movs	r3, #72	; 0x48
 80051c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2b48      	cmp	r3, #72	; 0x48
 80051ce:	d00a      	beq.n	80051e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	61bb      	str	r3, [r7, #24]
}
 80051e2:	bf00      	nop
 80051e4:	e7fe      	b.n	80051e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80051e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80051ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00d      	beq.n	800520e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80051f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80051fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	4613      	mov	r3, r2
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	68b9      	ldr	r1, [r7, #8]
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f83f 	bl	800528c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800520e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005210:	4618      	mov	r0, r3
 8005212:	3730      	adds	r7, #48	; 0x30
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08a      	sub	sp, #40	; 0x28
 800521c:	af02      	add	r7, sp, #8
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	4613      	mov	r3, r2
 8005224:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10a      	bne.n	8005242 <xQueueGenericCreate+0x2a>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	613b      	str	r3, [r7, #16]
}
 800523e:	bf00      	nop
 8005240:	e7fe      	b.n	8005240 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	fb02 f303 	mul.w	r3, r2, r3
 800524a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	3348      	adds	r3, #72	; 0x48
 8005250:	4618      	mov	r0, r3
 8005252:	f001 fae9 	bl	8006828 <pvPortMalloc>
 8005256:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d011      	beq.n	8005282 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	3348      	adds	r3, #72	; 0x48
 8005266:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005270:	79fa      	ldrb	r2, [r7, #7]
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	4613      	mov	r3, r2
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	68b9      	ldr	r1, [r7, #8]
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 f805 	bl	800528c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005282:	69bb      	ldr	r3, [r7, #24]
	}
 8005284:	4618      	mov	r0, r3
 8005286:	3720      	adds	r7, #32
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d103      	bne.n	80052a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	e002      	b.n	80052ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80052ba:	2101      	movs	r1, #1
 80052bc:	69b8      	ldr	r0, [r7, #24]
 80052be:	f7ff fecb 	bl	8005058 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80052c2:	bf00      	nop
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
	...

080052cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08e      	sub	sp, #56	; 0x38
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80052da:	2300      	movs	r3, #0
 80052dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10a      	bne.n	80052fe <xQueueGenericSend+0x32>
	__asm volatile
 80052e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ec:	f383 8811 	msr	BASEPRI, r3
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80052fa:	bf00      	nop
 80052fc:	e7fe      	b.n	80052fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d103      	bne.n	800530c <xQueueGenericSend+0x40>
 8005304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <xQueueGenericSend+0x44>
 800530c:	2301      	movs	r3, #1
 800530e:	e000      	b.n	8005312 <xQueueGenericSend+0x46>
 8005310:	2300      	movs	r3, #0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10a      	bne.n	800532c <xQueueGenericSend+0x60>
	__asm volatile
 8005316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531a:	f383 8811 	msr	BASEPRI, r3
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005328:	bf00      	nop
 800532a:	e7fe      	b.n	800532a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d103      	bne.n	800533a <xQueueGenericSend+0x6e>
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <xQueueGenericSend+0x72>
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <xQueueGenericSend+0x74>
 800533e:	2300      	movs	r3, #0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10a      	bne.n	800535a <xQueueGenericSend+0x8e>
	__asm volatile
 8005344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	623b      	str	r3, [r7, #32]
}
 8005356:	bf00      	nop
 8005358:	e7fe      	b.n	8005358 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800535a:	f000 ff4f 	bl	80061fc <xTaskGetSchedulerState>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d102      	bne.n	800536a <xQueueGenericSend+0x9e>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <xQueueGenericSend+0xa2>
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <xQueueGenericSend+0xa4>
 800536e:	2300      	movs	r3, #0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10a      	bne.n	800538a <xQueueGenericSend+0xbe>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	61fb      	str	r3, [r7, #28]
}
 8005386:	bf00      	nop
 8005388:	e7fe      	b.n	8005388 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800538a:	f001 f96b 	bl	8006664 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005396:	429a      	cmp	r2, r3
 8005398:	d302      	bcc.n	80053a0 <xQueueGenericSend+0xd4>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d129      	bne.n	80053f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	68b9      	ldr	r1, [r7, #8]
 80053a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053a6:	f000 f88f 	bl	80054c8 <prvCopyDataToQueue>
 80053aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d010      	beq.n	80053d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	3324      	adds	r3, #36	; 0x24
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fd63 	bl	8005e84 <xTaskRemoveFromEventList>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d013      	beq.n	80053ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80053c4:	4b3f      	ldr	r3, [pc, #252]	; (80054c4 <xQueueGenericSend+0x1f8>)
 80053c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	e00a      	b.n	80053ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80053d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d007      	beq.n	80053ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80053dc:	4b39      	ldr	r3, [pc, #228]	; (80054c4 <xQueueGenericSend+0x1f8>)
 80053de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80053ec:	f001 f96a 	bl	80066c4 <vPortExitCritical>
				return pdPASS;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e063      	b.n	80054bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d103      	bne.n	8005402 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053fa:	f001 f963 	bl	80066c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80053fe:	2300      	movs	r3, #0
 8005400:	e05c      	b.n	80054bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005404:	2b00      	cmp	r3, #0
 8005406:	d106      	bne.n	8005416 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005408:	f107 0314 	add.w	r3, r7, #20
 800540c:	4618      	mov	r0, r3
 800540e:	f000 fd9b 	bl	8005f48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005412:	2301      	movs	r3, #1
 8005414:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005416:	f001 f955 	bl	80066c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800541a:	f000 fb51 	bl	8005ac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800541e:	f001 f921 	bl	8006664 <vPortEnterCritical>
 8005422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005424:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005428:	b25b      	sxtb	r3, r3
 800542a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542e:	d103      	bne.n	8005438 <xQueueGenericSend+0x16c>
 8005430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800543e:	b25b      	sxtb	r3, r3
 8005440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005444:	d103      	bne.n	800544e <xQueueGenericSend+0x182>
 8005446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800544e:	f001 f939 	bl	80066c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005452:	1d3a      	adds	r2, r7, #4
 8005454:	f107 0314 	add.w	r3, r7, #20
 8005458:	4611      	mov	r1, r2
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fd8a 	bl	8005f74 <xTaskCheckForTimeOut>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d124      	bne.n	80054b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005466:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005468:	f000 f8ea 	bl	8005640 <prvIsQueueFull>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d018      	beq.n	80054a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	3310      	adds	r3, #16
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	4611      	mov	r1, r2
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fcde 	bl	8005e3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005480:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005482:	f000 f88b 	bl	800559c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005486:	f000 fb29 	bl	8005adc <xTaskResumeAll>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	f47f af7c 	bne.w	800538a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005492:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <xQueueGenericSend+0x1f8>)
 8005494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	e772      	b.n	800538a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80054a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054a6:	f000 f879 	bl	800559c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054aa:	f000 fb17 	bl	8005adc <xTaskResumeAll>
 80054ae:	e76c      	b.n	800538a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80054b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054b2:	f000 f873 	bl	800559c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054b6:	f000 fb11 	bl	8005adc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80054ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3738      	adds	r7, #56	; 0x38
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	e000ed04 	.word	0xe000ed04

080054c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80054d4:	2300      	movs	r3, #0
 80054d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10d      	bne.n	8005502 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d14d      	bne.n	800558a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fea0 	bl	8006238 <xTaskPriorityDisinherit>
 80054f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	609a      	str	r2, [r3, #8]
 8005500:	e043      	b.n	800558a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d119      	bne.n	800553c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6858      	ldr	r0, [r3, #4]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005510:	461a      	mov	r2, r3
 8005512:	68b9      	ldr	r1, [r7, #8]
 8005514:	f001 fb9c 	bl	8006c50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005520:	441a      	add	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	429a      	cmp	r2, r3
 8005530:	d32b      	bcc.n	800558a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	605a      	str	r2, [r3, #4]
 800553a:	e026      	b.n	800558a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	68d8      	ldr	r0, [r3, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005544:	461a      	mov	r2, r3
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	f001 fb82 	bl	8006c50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005554:	425b      	negs	r3, r3
 8005556:	441a      	add	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	429a      	cmp	r2, r3
 8005566:	d207      	bcs.n	8005578 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005570:	425b      	negs	r3, r3
 8005572:	441a      	add	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b02      	cmp	r3, #2
 800557c:	d105      	bne.n	800558a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	3b01      	subs	r3, #1
 8005588:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005592:	697b      	ldr	r3, [r7, #20]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80055a4:	f001 f85e 	bl	8006664 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055b0:	e011      	b.n	80055d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d012      	beq.n	80055e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3324      	adds	r3, #36	; 0x24
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 fc60 	bl	8005e84 <xTaskRemoveFromEventList>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80055ca:	f000 fd35 	bl	8006038 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	dce9      	bgt.n	80055b2 <prvUnlockQueue+0x16>
 80055de:	e000      	b.n	80055e2 <prvUnlockQueue+0x46>
					break;
 80055e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	22ff      	movs	r2, #255	; 0xff
 80055e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80055ea:	f001 f86b 	bl	80066c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80055ee:	f001 f839 	bl	8006664 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055fa:	e011      	b.n	8005620 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d012      	beq.n	800562a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	3310      	adds	r3, #16
 8005608:	4618      	mov	r0, r3
 800560a:	f000 fc3b 	bl	8005e84 <xTaskRemoveFromEventList>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005614:	f000 fd10 	bl	8006038 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005618:	7bbb      	ldrb	r3, [r7, #14]
 800561a:	3b01      	subs	r3, #1
 800561c:	b2db      	uxtb	r3, r3
 800561e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005620:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005624:	2b00      	cmp	r3, #0
 8005626:	dce9      	bgt.n	80055fc <prvUnlockQueue+0x60>
 8005628:	e000      	b.n	800562c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800562a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	22ff      	movs	r2, #255	; 0xff
 8005630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005634:	f001 f846 	bl	80066c4 <vPortExitCritical>
}
 8005638:	bf00      	nop
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005648:	f001 f80c 	bl	8006664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005654:	429a      	cmp	r2, r3
 8005656:	d102      	bne.n	800565e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005658:	2301      	movs	r3, #1
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	e001      	b.n	8005662 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005662:	f001 f82f 	bl	80066c4 <vPortExitCritical>

	return xReturn;
 8005666:	68fb      	ldr	r3, [r7, #12]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005670:	b580      	push	{r7, lr}
 8005672:	b08e      	sub	sp, #56	; 0x38
 8005674:	af04      	add	r7, sp, #16
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
 800567c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800567e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10a      	bne.n	800569a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	623b      	str	r3, [r7, #32]
}
 8005696:	bf00      	nop
 8005698:	e7fe      	b.n	8005698 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800569a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10a      	bne.n	80056b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	61fb      	str	r3, [r7, #28]
}
 80056b2:	bf00      	nop
 80056b4:	e7fe      	b.n	80056b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056b6:	2354      	movs	r3, #84	; 0x54
 80056b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	2b54      	cmp	r3, #84	; 0x54
 80056be:	d00a      	beq.n	80056d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80056c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	61bb      	str	r3, [r7, #24]
}
 80056d2:	bf00      	nop
 80056d4:	e7fe      	b.n	80056d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80056d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d01e      	beq.n	800571c <xTaskCreateStatic+0xac>
 80056de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d01b      	beq.n	800571c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	2202      	movs	r2, #2
 80056f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056f6:	2300      	movs	r3, #0
 80056f8:	9303      	str	r3, [sp, #12]
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	9302      	str	r3, [sp, #8]
 80056fe:	f107 0314 	add.w	r3, r7, #20
 8005702:	9301      	str	r3, [sp, #4]
 8005704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 f850 	bl	80057b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005714:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005716:	f000 f8d5 	bl	80058c4 <prvAddNewTaskToReadyList>
 800571a:	e001      	b.n	8005720 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800571c:	2300      	movs	r3, #0
 800571e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005720:	697b      	ldr	r3, [r7, #20]
	}
 8005722:	4618      	mov	r0, r3
 8005724:	3728      	adds	r7, #40	; 0x28
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800572a:	b580      	push	{r7, lr}
 800572c:	b08c      	sub	sp, #48	; 0x30
 800572e:	af04      	add	r7, sp, #16
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	603b      	str	r3, [r7, #0]
 8005736:	4613      	mov	r3, r2
 8005738:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800573a:	88fb      	ldrh	r3, [r7, #6]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4618      	mov	r0, r3
 8005740:	f001 f872 	bl	8006828 <pvPortMalloc>
 8005744:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00e      	beq.n	800576a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800574c:	2054      	movs	r0, #84	; 0x54
 800574e:	f001 f86b 	bl	8006828 <pvPortMalloc>
 8005752:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	631a      	str	r2, [r3, #48]	; 0x30
 8005760:	e005      	b.n	800576e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005762:	6978      	ldr	r0, [r7, #20]
 8005764:	f001 f92c 	bl	80069c0 <vPortFree>
 8005768:	e001      	b.n	800576e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800576a:	2300      	movs	r3, #0
 800576c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d017      	beq.n	80057a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800577c:	88fa      	ldrh	r2, [r7, #6]
 800577e:	2300      	movs	r3, #0
 8005780:	9303      	str	r3, [sp, #12]
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	9302      	str	r3, [sp, #8]
 8005786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005788:	9301      	str	r3, [sp, #4]
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68b9      	ldr	r1, [r7, #8]
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 f80e 	bl	80057b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005798:	69f8      	ldr	r0, [r7, #28]
 800579a:	f000 f893 	bl	80058c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800579e:	2301      	movs	r3, #1
 80057a0:	61bb      	str	r3, [r7, #24]
 80057a2:	e002      	b.n	80057aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057a4:	f04f 33ff 	mov.w	r3, #4294967295
 80057a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057aa:	69bb      	ldr	r3, [r7, #24]
	}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3720      	adds	r7, #32
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b088      	sub	sp, #32
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057cc:	3b01      	subs	r3, #1
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	f023 0307 	bic.w	r3, r3, #7
 80057da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <prvInitialiseNewTask+0x48>
	__asm volatile
 80057e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ea:	f383 8811 	msr	BASEPRI, r3
 80057ee:	f3bf 8f6f 	isb	sy
 80057f2:	f3bf 8f4f 	dsb	sy
 80057f6:	617b      	str	r3, [r7, #20]
}
 80057f8:	bf00      	nop
 80057fa:	e7fe      	b.n	80057fa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d01f      	beq.n	8005842 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]
 8005806:	e012      	b.n	800582e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	4413      	add	r3, r2
 800580e:	7819      	ldrb	r1, [r3, #0]
 8005810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	4413      	add	r3, r2
 8005816:	3334      	adds	r3, #52	; 0x34
 8005818:	460a      	mov	r2, r1
 800581a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	4413      	add	r3, r2
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d006      	beq.n	8005836 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	3301      	adds	r3, #1
 800582c:	61fb      	str	r3, [r7, #28]
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	2b0f      	cmp	r3, #15
 8005832:	d9e9      	bls.n	8005808 <prvInitialiseNewTask+0x54>
 8005834:	e000      	b.n	8005838 <prvInitialiseNewTask+0x84>
			{
				break;
 8005836:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005840:	e003      	b.n	800584a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800584a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584c:	2b06      	cmp	r3, #6
 800584e:	d901      	bls.n	8005854 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005850:	2306      	movs	r3, #6
 8005852:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005858:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800585e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	2200      	movs	r2, #0
 8005864:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005868:	3304      	adds	r3, #4
 800586a:	4618      	mov	r0, r3
 800586c:	f7ff fb5f 	bl	8004f2e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	3318      	adds	r3, #24
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff fb5a 	bl	8004f2e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800587e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005882:	f1c3 0207 	rsb	r2, r3, #7
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800588a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800588e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005892:	2200      	movs	r2, #0
 8005894:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	68f9      	ldr	r1, [r7, #12]
 80058a2:	69b8      	ldr	r0, [r7, #24]
 80058a4:	f000 fdb4 	bl	8006410 <pxPortInitialiseStack>
 80058a8:	4602      	mov	r2, r0
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058ba:	bf00      	nop
 80058bc:	3720      	adds	r7, #32
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
	...

080058c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058cc:	f000 feca 	bl	8006664 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058d0:	4b2a      	ldr	r3, [pc, #168]	; (800597c <prvAddNewTaskToReadyList+0xb8>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3301      	adds	r3, #1
 80058d6:	4a29      	ldr	r2, [pc, #164]	; (800597c <prvAddNewTaskToReadyList+0xb8>)
 80058d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058da:	4b29      	ldr	r3, [pc, #164]	; (8005980 <prvAddNewTaskToReadyList+0xbc>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d109      	bne.n	80058f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058e2:	4a27      	ldr	r2, [pc, #156]	; (8005980 <prvAddNewTaskToReadyList+0xbc>)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058e8:	4b24      	ldr	r3, [pc, #144]	; (800597c <prvAddNewTaskToReadyList+0xb8>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d110      	bne.n	8005912 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058f0:	f000 fbc6 	bl	8006080 <prvInitialiseTaskLists>
 80058f4:	e00d      	b.n	8005912 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058f6:	4b23      	ldr	r3, [pc, #140]	; (8005984 <prvAddNewTaskToReadyList+0xc0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d109      	bne.n	8005912 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058fe:	4b20      	ldr	r3, [pc, #128]	; (8005980 <prvAddNewTaskToReadyList+0xbc>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	429a      	cmp	r2, r3
 800590a:	d802      	bhi.n	8005912 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800590c:	4a1c      	ldr	r2, [pc, #112]	; (8005980 <prvAddNewTaskToReadyList+0xbc>)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005912:	4b1d      	ldr	r3, [pc, #116]	; (8005988 <prvAddNewTaskToReadyList+0xc4>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3301      	adds	r3, #1
 8005918:	4a1b      	ldr	r2, [pc, #108]	; (8005988 <prvAddNewTaskToReadyList+0xc4>)
 800591a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005920:	2201      	movs	r2, #1
 8005922:	409a      	lsls	r2, r3
 8005924:	4b19      	ldr	r3, [pc, #100]	; (800598c <prvAddNewTaskToReadyList+0xc8>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4313      	orrs	r3, r2
 800592a:	4a18      	ldr	r2, [pc, #96]	; (800598c <prvAddNewTaskToReadyList+0xc8>)
 800592c:	6013      	str	r3, [r2, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005932:	4613      	mov	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4a15      	ldr	r2, [pc, #84]	; (8005990 <prvAddNewTaskToReadyList+0xcc>)
 800593c:	441a      	add	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	3304      	adds	r3, #4
 8005942:	4619      	mov	r1, r3
 8005944:	4610      	mov	r0, r2
 8005946:	f7ff faff 	bl	8004f48 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800594a:	f000 febb 	bl	80066c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800594e:	4b0d      	ldr	r3, [pc, #52]	; (8005984 <prvAddNewTaskToReadyList+0xc0>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00e      	beq.n	8005974 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005956:	4b0a      	ldr	r3, [pc, #40]	; (8005980 <prvAddNewTaskToReadyList+0xbc>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	429a      	cmp	r2, r3
 8005962:	d207      	bcs.n	8005974 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005964:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <prvAddNewTaskToReadyList+0xd0>)
 8005966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005974:	bf00      	nop
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20001b48 	.word	0x20001b48
 8005980:	20001a48 	.word	0x20001a48
 8005984:	20001b54 	.word	0x20001b54
 8005988:	20001b64 	.word	0x20001b64
 800598c:	20001b50 	.word	0x20001b50
 8005990:	20001a4c 	.word	0x20001a4c
 8005994:	e000ed04 	.word	0xe000ed04

08005998 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059a0:	2300      	movs	r3, #0
 80059a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d017      	beq.n	80059da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059aa:	4b13      	ldr	r3, [pc, #76]	; (80059f8 <vTaskDelay+0x60>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00a      	beq.n	80059c8 <vTaskDelay+0x30>
	__asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	60bb      	str	r3, [r7, #8]
}
 80059c4:	bf00      	nop
 80059c6:	e7fe      	b.n	80059c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80059c8:	f000 f87a 	bl	8005ac0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059cc:	2100      	movs	r1, #0
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fcb8 	bl	8006344 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059d4:	f000 f882 	bl	8005adc <xTaskResumeAll>
 80059d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d107      	bne.n	80059f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80059e0:	4b06      	ldr	r3, [pc, #24]	; (80059fc <vTaskDelay+0x64>)
 80059e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059f0:	bf00      	nop
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	20001b70 	.word	0x20001b70
 80059fc:	e000ed04 	.word	0xe000ed04

08005a00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08a      	sub	sp, #40	; 0x28
 8005a04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a0e:	463a      	mov	r2, r7
 8005a10:	1d39      	adds	r1, r7, #4
 8005a12:	f107 0308 	add.w	r3, r7, #8
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fa fdec 	bl	80005f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	9202      	str	r2, [sp, #8]
 8005a24:	9301      	str	r3, [sp, #4]
 8005a26:	2300      	movs	r3, #0
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	460a      	mov	r2, r1
 8005a2e:	491e      	ldr	r1, [pc, #120]	; (8005aa8 <vTaskStartScheduler+0xa8>)
 8005a30:	481e      	ldr	r0, [pc, #120]	; (8005aac <vTaskStartScheduler+0xac>)
 8005a32:	f7ff fe1d 	bl	8005670 <xTaskCreateStatic>
 8005a36:	4603      	mov	r3, r0
 8005a38:	4a1d      	ldr	r2, [pc, #116]	; (8005ab0 <vTaskStartScheduler+0xb0>)
 8005a3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a3c:	4b1c      	ldr	r3, [pc, #112]	; (8005ab0 <vTaskStartScheduler+0xb0>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a44:	2301      	movs	r3, #1
 8005a46:	617b      	str	r3, [r7, #20]
 8005a48:	e001      	b.n	8005a4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d116      	bne.n	8005a82 <vTaskStartScheduler+0x82>
	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	613b      	str	r3, [r7, #16]
}
 8005a66:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a68:	4b12      	ldr	r3, [pc, #72]	; (8005ab4 <vTaskStartScheduler+0xb4>)
 8005a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a70:	4b11      	ldr	r3, [pc, #68]	; (8005ab8 <vTaskStartScheduler+0xb8>)
 8005a72:	2201      	movs	r2, #1
 8005a74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a76:	4b11      	ldr	r3, [pc, #68]	; (8005abc <vTaskStartScheduler+0xbc>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a7c:	f000 fd50 	bl	8006520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a80:	e00e      	b.n	8005aa0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a88:	d10a      	bne.n	8005aa0 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8e:	f383 8811 	msr	BASEPRI, r3
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	60fb      	str	r3, [r7, #12]
}
 8005a9c:	bf00      	nop
 8005a9e:	e7fe      	b.n	8005a9e <vTaskStartScheduler+0x9e>
}
 8005aa0:	bf00      	nop
 8005aa2:	3718      	adds	r7, #24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	08008984 	.word	0x08008984
 8005aac:	08006051 	.word	0x08006051
 8005ab0:	20001b6c 	.word	0x20001b6c
 8005ab4:	20001b68 	.word	0x20001b68
 8005ab8:	20001b54 	.word	0x20001b54
 8005abc:	20001b4c 	.word	0x20001b4c

08005ac0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ac4:	4b04      	ldr	r3, [pc, #16]	; (8005ad8 <vTaskSuspendAll+0x18>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	4a03      	ldr	r2, [pc, #12]	; (8005ad8 <vTaskSuspendAll+0x18>)
 8005acc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005ace:	bf00      	nop
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	20001b70 	.word	0x20001b70

08005adc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005aea:	4b41      	ldr	r3, [pc, #260]	; (8005bf0 <xTaskResumeAll+0x114>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10a      	bne.n	8005b08 <xTaskResumeAll+0x2c>
	__asm volatile
 8005af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af6:	f383 8811 	msr	BASEPRI, r3
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	603b      	str	r3, [r7, #0]
}
 8005b04:	bf00      	nop
 8005b06:	e7fe      	b.n	8005b06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b08:	f000 fdac 	bl	8006664 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b0c:	4b38      	ldr	r3, [pc, #224]	; (8005bf0 <xTaskResumeAll+0x114>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3b01      	subs	r3, #1
 8005b12:	4a37      	ldr	r2, [pc, #220]	; (8005bf0 <xTaskResumeAll+0x114>)
 8005b14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b16:	4b36      	ldr	r3, [pc, #216]	; (8005bf0 <xTaskResumeAll+0x114>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d161      	bne.n	8005be2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b1e:	4b35      	ldr	r3, [pc, #212]	; (8005bf4 <xTaskResumeAll+0x118>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d05d      	beq.n	8005be2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b26:	e02e      	b.n	8005b86 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b28:	4b33      	ldr	r3, [pc, #204]	; (8005bf8 <xTaskResumeAll+0x11c>)
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3318      	adds	r3, #24
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff fa64 	bl	8005002 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff fa5f 	bl	8005002 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	2201      	movs	r2, #1
 8005b4a:	409a      	lsls	r2, r3
 8005b4c:	4b2b      	ldr	r3, [pc, #172]	; (8005bfc <xTaskResumeAll+0x120>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	4a2a      	ldr	r2, [pc, #168]	; (8005bfc <xTaskResumeAll+0x120>)
 8005b54:	6013      	str	r3, [r2, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4a27      	ldr	r2, [pc, #156]	; (8005c00 <xTaskResumeAll+0x124>)
 8005b64:	441a      	add	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	f7ff f9eb 	bl	8004f48 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b76:	4b23      	ldr	r3, [pc, #140]	; (8005c04 <xTaskResumeAll+0x128>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d302      	bcc.n	8005b86 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005b80:	4b21      	ldr	r3, [pc, #132]	; (8005c08 <xTaskResumeAll+0x12c>)
 8005b82:	2201      	movs	r2, #1
 8005b84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b86:	4b1c      	ldr	r3, [pc, #112]	; (8005bf8 <xTaskResumeAll+0x11c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1cc      	bne.n	8005b28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b94:	f000 fb12 	bl	80061bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b98:	4b1c      	ldr	r3, [pc, #112]	; (8005c0c <xTaskResumeAll+0x130>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d010      	beq.n	8005bc6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ba4:	f000 f836 	bl	8005c14 <xTaskIncrementTick>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d002      	beq.n	8005bb4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005bae:	4b16      	ldr	r3, [pc, #88]	; (8005c08 <xTaskResumeAll+0x12c>)
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1f1      	bne.n	8005ba4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005bc0:	4b12      	ldr	r3, [pc, #72]	; (8005c0c <xTaskResumeAll+0x130>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005bc6:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <xTaskResumeAll+0x12c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d009      	beq.n	8005be2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005bd2:	4b0f      	ldr	r3, [pc, #60]	; (8005c10 <xTaskResumeAll+0x134>)
 8005bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005be2:	f000 fd6f 	bl	80066c4 <vPortExitCritical>

	return xAlreadyYielded;
 8005be6:	68bb      	ldr	r3, [r7, #8]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	20001b70 	.word	0x20001b70
 8005bf4:	20001b48 	.word	0x20001b48
 8005bf8:	20001b08 	.word	0x20001b08
 8005bfc:	20001b50 	.word	0x20001b50
 8005c00:	20001a4c 	.word	0x20001a4c
 8005c04:	20001a48 	.word	0x20001a48
 8005c08:	20001b5c 	.word	0x20001b5c
 8005c0c:	20001b58 	.word	0x20001b58
 8005c10:	e000ed04 	.word	0xe000ed04

08005c14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c1e:	4b4e      	ldr	r3, [pc, #312]	; (8005d58 <xTaskIncrementTick+0x144>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f040 808e 	bne.w	8005d44 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c28:	4b4c      	ldr	r3, [pc, #304]	; (8005d5c <xTaskIncrementTick+0x148>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c30:	4a4a      	ldr	r2, [pc, #296]	; (8005d5c <xTaskIncrementTick+0x148>)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d120      	bne.n	8005c7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c3c:	4b48      	ldr	r3, [pc, #288]	; (8005d60 <xTaskIncrementTick+0x14c>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <xTaskIncrementTick+0x48>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	603b      	str	r3, [r7, #0]
}
 8005c58:	bf00      	nop
 8005c5a:	e7fe      	b.n	8005c5a <xTaskIncrementTick+0x46>
 8005c5c:	4b40      	ldr	r3, [pc, #256]	; (8005d60 <xTaskIncrementTick+0x14c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	60fb      	str	r3, [r7, #12]
 8005c62:	4b40      	ldr	r3, [pc, #256]	; (8005d64 <xTaskIncrementTick+0x150>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a3e      	ldr	r2, [pc, #248]	; (8005d60 <xTaskIncrementTick+0x14c>)
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	4a3e      	ldr	r2, [pc, #248]	; (8005d64 <xTaskIncrementTick+0x150>)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6013      	str	r3, [r2, #0]
 8005c70:	4b3d      	ldr	r3, [pc, #244]	; (8005d68 <xTaskIncrementTick+0x154>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3301      	adds	r3, #1
 8005c76:	4a3c      	ldr	r2, [pc, #240]	; (8005d68 <xTaskIncrementTick+0x154>)
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	f000 fa9f 	bl	80061bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c7e:	4b3b      	ldr	r3, [pc, #236]	; (8005d6c <xTaskIncrementTick+0x158>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d348      	bcc.n	8005d1a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c88:	4b35      	ldr	r3, [pc, #212]	; (8005d60 <xTaskIncrementTick+0x14c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d104      	bne.n	8005c9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c92:	4b36      	ldr	r3, [pc, #216]	; (8005d6c <xTaskIncrementTick+0x158>)
 8005c94:	f04f 32ff 	mov.w	r2, #4294967295
 8005c98:	601a      	str	r2, [r3, #0]
					break;
 8005c9a:	e03e      	b.n	8005d1a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c9c:	4b30      	ldr	r3, [pc, #192]	; (8005d60 <xTaskIncrementTick+0x14c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d203      	bcs.n	8005cbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005cb4:	4a2d      	ldr	r2, [pc, #180]	; (8005d6c <xTaskIncrementTick+0x158>)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005cba:	e02e      	b.n	8005d1a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7ff f99e 	bl	8005002 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d004      	beq.n	8005cd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	3318      	adds	r3, #24
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7ff f995 	bl	8005002 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	2201      	movs	r2, #1
 8005cde:	409a      	lsls	r2, r3
 8005ce0:	4b23      	ldr	r3, [pc, #140]	; (8005d70 <xTaskIncrementTick+0x15c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	4a22      	ldr	r2, [pc, #136]	; (8005d70 <xTaskIncrementTick+0x15c>)
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cee:	4613      	mov	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4a1f      	ldr	r2, [pc, #124]	; (8005d74 <xTaskIncrementTick+0x160>)
 8005cf8:	441a      	add	r2, r3
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	4619      	mov	r1, r3
 8005d00:	4610      	mov	r0, r2
 8005d02:	f7ff f921 	bl	8004f48 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0a:	4b1b      	ldr	r3, [pc, #108]	; (8005d78 <xTaskIncrementTick+0x164>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d3b9      	bcc.n	8005c88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005d14:	2301      	movs	r3, #1
 8005d16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d18:	e7b6      	b.n	8005c88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d1a:	4b17      	ldr	r3, [pc, #92]	; (8005d78 <xTaskIncrementTick+0x164>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d20:	4914      	ldr	r1, [pc, #80]	; (8005d74 <xTaskIncrementTick+0x160>)
 8005d22:	4613      	mov	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	440b      	add	r3, r1
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d901      	bls.n	8005d36 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005d32:	2301      	movs	r3, #1
 8005d34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d36:	4b11      	ldr	r3, [pc, #68]	; (8005d7c <xTaskIncrementTick+0x168>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d007      	beq.n	8005d4e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	e004      	b.n	8005d4e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d44:	4b0e      	ldr	r3, [pc, #56]	; (8005d80 <xTaskIncrementTick+0x16c>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	4a0d      	ldr	r2, [pc, #52]	; (8005d80 <xTaskIncrementTick+0x16c>)
 8005d4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005d4e:	697b      	ldr	r3, [r7, #20]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	20001b70 	.word	0x20001b70
 8005d5c:	20001b4c 	.word	0x20001b4c
 8005d60:	20001b00 	.word	0x20001b00
 8005d64:	20001b04 	.word	0x20001b04
 8005d68:	20001b60 	.word	0x20001b60
 8005d6c:	20001b68 	.word	0x20001b68
 8005d70:	20001b50 	.word	0x20001b50
 8005d74:	20001a4c 	.word	0x20001a4c
 8005d78:	20001a48 	.word	0x20001a48
 8005d7c:	20001b5c 	.word	0x20001b5c
 8005d80:	20001b58 	.word	0x20001b58

08005d84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d8a:	4b27      	ldr	r3, [pc, #156]	; (8005e28 <vTaskSwitchContext+0xa4>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d92:	4b26      	ldr	r3, [pc, #152]	; (8005e2c <vTaskSwitchContext+0xa8>)
 8005d94:	2201      	movs	r2, #1
 8005d96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d98:	e03f      	b.n	8005e1a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005d9a:	4b24      	ldr	r3, [pc, #144]	; (8005e2c <vTaskSwitchContext+0xa8>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005da0:	4b23      	ldr	r3, [pc, #140]	; (8005e30 <vTaskSwitchContext+0xac>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	fab3 f383 	clz	r3, r3
 8005dac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005dae:	7afb      	ldrb	r3, [r7, #11]
 8005db0:	f1c3 031f 	rsb	r3, r3, #31
 8005db4:	617b      	str	r3, [r7, #20]
 8005db6:	491f      	ldr	r1, [pc, #124]	; (8005e34 <vTaskSwitchContext+0xb0>)
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	440b      	add	r3, r1
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10a      	bne.n	8005de0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	607b      	str	r3, [r7, #4]
}
 8005ddc:	bf00      	nop
 8005dde:	e7fe      	b.n	8005dde <vTaskSwitchContext+0x5a>
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4a12      	ldr	r2, [pc, #72]	; (8005e34 <vTaskSwitchContext+0xb0>)
 8005dec:	4413      	add	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	605a      	str	r2, [r3, #4]
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	3308      	adds	r3, #8
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d104      	bne.n	8005e10 <vTaskSwitchContext+0x8c>
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	605a      	str	r2, [r3, #4]
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	4a08      	ldr	r2, [pc, #32]	; (8005e38 <vTaskSwitchContext+0xb4>)
 8005e18:	6013      	str	r3, [r2, #0]
}
 8005e1a:	bf00      	nop
 8005e1c:	371c      	adds	r7, #28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	20001b70 	.word	0x20001b70
 8005e2c:	20001b5c 	.word	0x20001b5c
 8005e30:	20001b50 	.word	0x20001b50
 8005e34:	20001a4c 	.word	0x20001a4c
 8005e38:	20001a48 	.word	0x20001a48

08005e3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10a      	bne.n	8005e62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	60fb      	str	r3, [r7, #12]
}
 8005e5e:	bf00      	nop
 8005e60:	e7fe      	b.n	8005e60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e62:	4b07      	ldr	r3, [pc, #28]	; (8005e80 <vTaskPlaceOnEventList+0x44>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3318      	adds	r3, #24
 8005e68:	4619      	mov	r1, r3
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7ff f890 	bl	8004f90 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e70:	2101      	movs	r1, #1
 8005e72:	6838      	ldr	r0, [r7, #0]
 8005e74:	f000 fa66 	bl	8006344 <prvAddCurrentTaskToDelayedList>
}
 8005e78:	bf00      	nop
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	20001a48 	.word	0x20001a48

08005e84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10a      	bne.n	8005eb0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	60fb      	str	r3, [r7, #12]
}
 8005eac:	bf00      	nop
 8005eae:	e7fe      	b.n	8005eae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	3318      	adds	r3, #24
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff f8a4 	bl	8005002 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eba:	4b1d      	ldr	r3, [pc, #116]	; (8005f30 <xTaskRemoveFromEventList+0xac>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d11c      	bne.n	8005efc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff f89b 	bl	8005002 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	409a      	lsls	r2, r3
 8005ed4:	4b17      	ldr	r3, [pc, #92]	; (8005f34 <xTaskRemoveFromEventList+0xb0>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	4a16      	ldr	r2, [pc, #88]	; (8005f34 <xTaskRemoveFromEventList+0xb0>)
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4a13      	ldr	r2, [pc, #76]	; (8005f38 <xTaskRemoveFromEventList+0xb4>)
 8005eec:	441a      	add	r2, r3
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	f7ff f827 	bl	8004f48 <vListInsertEnd>
 8005efa:	e005      	b.n	8005f08 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	3318      	adds	r3, #24
 8005f00:	4619      	mov	r1, r3
 8005f02:	480e      	ldr	r0, [pc, #56]	; (8005f3c <xTaskRemoveFromEventList+0xb8>)
 8005f04:	f7ff f820 	bl	8004f48 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0c:	4b0c      	ldr	r3, [pc, #48]	; (8005f40 <xTaskRemoveFromEventList+0xbc>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d905      	bls.n	8005f22 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f16:	2301      	movs	r3, #1
 8005f18:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f1a:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <xTaskRemoveFromEventList+0xc0>)
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	e001      	b.n	8005f26 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005f26:	697b      	ldr	r3, [r7, #20]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3718      	adds	r7, #24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	20001b70 	.word	0x20001b70
 8005f34:	20001b50 	.word	0x20001b50
 8005f38:	20001a4c 	.word	0x20001a4c
 8005f3c:	20001b08 	.word	0x20001b08
 8005f40:	20001a48 	.word	0x20001a48
 8005f44:	20001b5c 	.word	0x20001b5c

08005f48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f50:	4b06      	ldr	r3, [pc, #24]	; (8005f6c <vTaskInternalSetTimeOutState+0x24>)
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005f58:	4b05      	ldr	r3, [pc, #20]	; (8005f70 <vTaskInternalSetTimeOutState+0x28>)
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	605a      	str	r2, [r3, #4]
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	20001b60 	.word	0x20001b60
 8005f70:	20001b4c 	.word	0x20001b4c

08005f74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10a      	bne.n	8005f9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	613b      	str	r3, [r7, #16]
}
 8005f96:	bf00      	nop
 8005f98:	e7fe      	b.n	8005f98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10a      	bne.n	8005fb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	60fb      	str	r3, [r7, #12]
}
 8005fb2:	bf00      	nop
 8005fb4:	e7fe      	b.n	8005fb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005fb6:	f000 fb55 	bl	8006664 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005fba:	4b1d      	ldr	r3, [pc, #116]	; (8006030 <xTaskCheckForTimeOut+0xbc>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd2:	d102      	bne.n	8005fda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	61fb      	str	r3, [r7, #28]
 8005fd8:	e023      	b.n	8006022 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4b15      	ldr	r3, [pc, #84]	; (8006034 <xTaskCheckForTimeOut+0xc0>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d007      	beq.n	8005ff6 <xTaskCheckForTimeOut+0x82>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d302      	bcc.n	8005ff6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	61fb      	str	r3, [r7, #28]
 8005ff4:	e015      	b.n	8006022 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d20b      	bcs.n	8006018 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	1ad2      	subs	r2, r2, r3
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7ff ff9b 	bl	8005f48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006012:	2300      	movs	r3, #0
 8006014:	61fb      	str	r3, [r7, #28]
 8006016:	e004      	b.n	8006022 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	2200      	movs	r2, #0
 800601c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800601e:	2301      	movs	r3, #1
 8006020:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006022:	f000 fb4f 	bl	80066c4 <vPortExitCritical>

	return xReturn;
 8006026:	69fb      	ldr	r3, [r7, #28]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3720      	adds	r7, #32
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	20001b4c 	.word	0x20001b4c
 8006034:	20001b60 	.word	0x20001b60

08006038 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006038:	b480      	push	{r7}
 800603a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800603c:	4b03      	ldr	r3, [pc, #12]	; (800604c <vTaskMissedYield+0x14>)
 800603e:	2201      	movs	r2, #1
 8006040:	601a      	str	r2, [r3, #0]
}
 8006042:	bf00      	nop
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	20001b5c 	.word	0x20001b5c

08006050 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006058:	f000 f852 	bl	8006100 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800605c:	4b06      	ldr	r3, [pc, #24]	; (8006078 <prvIdleTask+0x28>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d9f9      	bls.n	8006058 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006064:	4b05      	ldr	r3, [pc, #20]	; (800607c <prvIdleTask+0x2c>)
 8006066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006074:	e7f0      	b.n	8006058 <prvIdleTask+0x8>
 8006076:	bf00      	nop
 8006078:	20001a4c 	.word	0x20001a4c
 800607c:	e000ed04 	.word	0xe000ed04

08006080 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006086:	2300      	movs	r3, #0
 8006088:	607b      	str	r3, [r7, #4]
 800608a:	e00c      	b.n	80060a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	4613      	mov	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4a12      	ldr	r2, [pc, #72]	; (80060e0 <prvInitialiseTaskLists+0x60>)
 8006098:	4413      	add	r3, r2
 800609a:	4618      	mov	r0, r3
 800609c:	f7fe ff27 	bl	8004eee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	3301      	adds	r3, #1
 80060a4:	607b      	str	r3, [r7, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b06      	cmp	r3, #6
 80060aa:	d9ef      	bls.n	800608c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80060ac:	480d      	ldr	r0, [pc, #52]	; (80060e4 <prvInitialiseTaskLists+0x64>)
 80060ae:	f7fe ff1e 	bl	8004eee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060b2:	480d      	ldr	r0, [pc, #52]	; (80060e8 <prvInitialiseTaskLists+0x68>)
 80060b4:	f7fe ff1b 	bl	8004eee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80060b8:	480c      	ldr	r0, [pc, #48]	; (80060ec <prvInitialiseTaskLists+0x6c>)
 80060ba:	f7fe ff18 	bl	8004eee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80060be:	480c      	ldr	r0, [pc, #48]	; (80060f0 <prvInitialiseTaskLists+0x70>)
 80060c0:	f7fe ff15 	bl	8004eee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80060c4:	480b      	ldr	r0, [pc, #44]	; (80060f4 <prvInitialiseTaskLists+0x74>)
 80060c6:	f7fe ff12 	bl	8004eee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060ca:	4b0b      	ldr	r3, [pc, #44]	; (80060f8 <prvInitialiseTaskLists+0x78>)
 80060cc:	4a05      	ldr	r2, [pc, #20]	; (80060e4 <prvInitialiseTaskLists+0x64>)
 80060ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060d0:	4b0a      	ldr	r3, [pc, #40]	; (80060fc <prvInitialiseTaskLists+0x7c>)
 80060d2:	4a05      	ldr	r2, [pc, #20]	; (80060e8 <prvInitialiseTaskLists+0x68>)
 80060d4:	601a      	str	r2, [r3, #0]
}
 80060d6:	bf00      	nop
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20001a4c 	.word	0x20001a4c
 80060e4:	20001ad8 	.word	0x20001ad8
 80060e8:	20001aec 	.word	0x20001aec
 80060ec:	20001b08 	.word	0x20001b08
 80060f0:	20001b1c 	.word	0x20001b1c
 80060f4:	20001b34 	.word	0x20001b34
 80060f8:	20001b00 	.word	0x20001b00
 80060fc:	20001b04 	.word	0x20001b04

08006100 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006106:	e019      	b.n	800613c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006108:	f000 faac 	bl	8006664 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800610c:	4b10      	ldr	r3, [pc, #64]	; (8006150 <prvCheckTasksWaitingTermination+0x50>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3304      	adds	r3, #4
 8006118:	4618      	mov	r0, r3
 800611a:	f7fe ff72 	bl	8005002 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800611e:	4b0d      	ldr	r3, [pc, #52]	; (8006154 <prvCheckTasksWaitingTermination+0x54>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3b01      	subs	r3, #1
 8006124:	4a0b      	ldr	r2, [pc, #44]	; (8006154 <prvCheckTasksWaitingTermination+0x54>)
 8006126:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006128:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <prvCheckTasksWaitingTermination+0x58>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3b01      	subs	r3, #1
 800612e:	4a0a      	ldr	r2, [pc, #40]	; (8006158 <prvCheckTasksWaitingTermination+0x58>)
 8006130:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006132:	f000 fac7 	bl	80066c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f810 	bl	800615c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800613c:	4b06      	ldr	r3, [pc, #24]	; (8006158 <prvCheckTasksWaitingTermination+0x58>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e1      	bne.n	8006108 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006144:	bf00      	nop
 8006146:	bf00      	nop
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20001b1c 	.word	0x20001b1c
 8006154:	20001b48 	.word	0x20001b48
 8006158:	20001b30 	.word	0x20001b30

0800615c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800616a:	2b00      	cmp	r3, #0
 800616c:	d108      	bne.n	8006180 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	4618      	mov	r0, r3
 8006174:	f000 fc24 	bl	80069c0 <vPortFree>
				vPortFree( pxTCB );
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 fc21 	bl	80069c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800617e:	e018      	b.n	80061b2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006186:	2b01      	cmp	r3, #1
 8006188:	d103      	bne.n	8006192 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fc18 	bl	80069c0 <vPortFree>
	}
 8006190:	e00f      	b.n	80061b2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006198:	2b02      	cmp	r3, #2
 800619a:	d00a      	beq.n	80061b2 <prvDeleteTCB+0x56>
	__asm volatile
 800619c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	60fb      	str	r3, [r7, #12]
}
 80061ae:	bf00      	nop
 80061b0:	e7fe      	b.n	80061b0 <prvDeleteTCB+0x54>
	}
 80061b2:	bf00      	nop
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061c2:	4b0c      	ldr	r3, [pc, #48]	; (80061f4 <prvResetNextTaskUnblockTime+0x38>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d104      	bne.n	80061d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80061cc:	4b0a      	ldr	r3, [pc, #40]	; (80061f8 <prvResetNextTaskUnblockTime+0x3c>)
 80061ce:	f04f 32ff 	mov.w	r2, #4294967295
 80061d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80061d4:	e008      	b.n	80061e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061d6:	4b07      	ldr	r3, [pc, #28]	; (80061f4 <prvResetNextTaskUnblockTime+0x38>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	4a04      	ldr	r2, [pc, #16]	; (80061f8 <prvResetNextTaskUnblockTime+0x3c>)
 80061e6:	6013      	str	r3, [r2, #0]
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	20001b00 	.word	0x20001b00
 80061f8:	20001b68 	.word	0x20001b68

080061fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006202:	4b0b      	ldr	r3, [pc, #44]	; (8006230 <xTaskGetSchedulerState+0x34>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d102      	bne.n	8006210 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800620a:	2301      	movs	r3, #1
 800620c:	607b      	str	r3, [r7, #4]
 800620e:	e008      	b.n	8006222 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006210:	4b08      	ldr	r3, [pc, #32]	; (8006234 <xTaskGetSchedulerState+0x38>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d102      	bne.n	800621e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006218:	2302      	movs	r3, #2
 800621a:	607b      	str	r3, [r7, #4]
 800621c:	e001      	b.n	8006222 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800621e:	2300      	movs	r3, #0
 8006220:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006222:	687b      	ldr	r3, [r7, #4]
	}
 8006224:	4618      	mov	r0, r3
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	20001b54 	.word	0x20001b54
 8006234:	20001b70 	.word	0x20001b70

08006238 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006244:	2300      	movs	r3, #0
 8006246:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d06e      	beq.n	800632c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800624e:	4b3a      	ldr	r3, [pc, #232]	; (8006338 <xTaskPriorityDisinherit+0x100>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	429a      	cmp	r2, r3
 8006256:	d00a      	beq.n	800626e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	60fb      	str	r3, [r7, #12]
}
 800626a:	bf00      	nop
 800626c:	e7fe      	b.n	800626c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10a      	bne.n	800628c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	60bb      	str	r3, [r7, #8]
}
 8006288:	bf00      	nop
 800628a:	e7fe      	b.n	800628a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006290:	1e5a      	subs	r2, r3, #1
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629e:	429a      	cmp	r2, r3
 80062a0:	d044      	beq.n	800632c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d140      	bne.n	800632c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	3304      	adds	r3, #4
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fe fea7 	bl	8005002 <uxListRemove>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d115      	bne.n	80062e6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062be:	491f      	ldr	r1, [pc, #124]	; (800633c <xTaskPriorityDisinherit+0x104>)
 80062c0:	4613      	mov	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	440b      	add	r3, r1
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10a      	bne.n	80062e6 <xTaskPriorityDisinherit+0xae>
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	2201      	movs	r2, #1
 80062d6:	fa02 f303 	lsl.w	r3, r2, r3
 80062da:	43da      	mvns	r2, r3
 80062dc:	4b18      	ldr	r3, [pc, #96]	; (8006340 <xTaskPriorityDisinherit+0x108>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4013      	ands	r3, r2
 80062e2:	4a17      	ldr	r2, [pc, #92]	; (8006340 <xTaskPriorityDisinherit+0x108>)
 80062e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f2:	f1c3 0207 	rsb	r2, r3, #7
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fe:	2201      	movs	r2, #1
 8006300:	409a      	lsls	r2, r3
 8006302:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <xTaskPriorityDisinherit+0x108>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4313      	orrs	r3, r2
 8006308:	4a0d      	ldr	r2, [pc, #52]	; (8006340 <xTaskPriorityDisinherit+0x108>)
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4a08      	ldr	r2, [pc, #32]	; (800633c <xTaskPriorityDisinherit+0x104>)
 800631a:	441a      	add	r2, r3
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	3304      	adds	r3, #4
 8006320:	4619      	mov	r1, r3
 8006322:	4610      	mov	r0, r2
 8006324:	f7fe fe10 	bl	8004f48 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006328:	2301      	movs	r3, #1
 800632a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800632c:	697b      	ldr	r3, [r7, #20]
	}
 800632e:	4618      	mov	r0, r3
 8006330:	3718      	adds	r7, #24
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	20001a48 	.word	0x20001a48
 800633c:	20001a4c 	.word	0x20001a4c
 8006340:	20001b50 	.word	0x20001b50

08006344 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800634e:	4b29      	ldr	r3, [pc, #164]	; (80063f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006354:	4b28      	ldr	r3, [pc, #160]	; (80063f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3304      	adds	r3, #4
 800635a:	4618      	mov	r0, r3
 800635c:	f7fe fe51 	bl	8005002 <uxListRemove>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10b      	bne.n	800637e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006366:	4b24      	ldr	r3, [pc, #144]	; (80063f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636c:	2201      	movs	r2, #1
 800636e:	fa02 f303 	lsl.w	r3, r2, r3
 8006372:	43da      	mvns	r2, r3
 8006374:	4b21      	ldr	r3, [pc, #132]	; (80063fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4013      	ands	r3, r2
 800637a:	4a20      	ldr	r2, [pc, #128]	; (80063fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800637c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006384:	d10a      	bne.n	800639c <prvAddCurrentTaskToDelayedList+0x58>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d007      	beq.n	800639c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800638c:	4b1a      	ldr	r3, [pc, #104]	; (80063f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3304      	adds	r3, #4
 8006392:	4619      	mov	r1, r3
 8006394:	481a      	ldr	r0, [pc, #104]	; (8006400 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006396:	f7fe fdd7 	bl	8004f48 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800639a:	e026      	b.n	80063ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4413      	add	r3, r2
 80063a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063a4:	4b14      	ldr	r3, [pc, #80]	; (80063f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d209      	bcs.n	80063c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063b4:	4b13      	ldr	r3, [pc, #76]	; (8006404 <prvAddCurrentTaskToDelayedList+0xc0>)
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	4b0f      	ldr	r3, [pc, #60]	; (80063f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3304      	adds	r3, #4
 80063be:	4619      	mov	r1, r3
 80063c0:	4610      	mov	r0, r2
 80063c2:	f7fe fde5 	bl	8004f90 <vListInsert>
}
 80063c6:	e010      	b.n	80063ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063c8:	4b0f      	ldr	r3, [pc, #60]	; (8006408 <prvAddCurrentTaskToDelayedList+0xc4>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	4b0a      	ldr	r3, [pc, #40]	; (80063f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3304      	adds	r3, #4
 80063d2:	4619      	mov	r1, r3
 80063d4:	4610      	mov	r0, r2
 80063d6:	f7fe fddb 	bl	8004f90 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063da:	4b0c      	ldr	r3, [pc, #48]	; (800640c <prvAddCurrentTaskToDelayedList+0xc8>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d202      	bcs.n	80063ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80063e4:	4a09      	ldr	r2, [pc, #36]	; (800640c <prvAddCurrentTaskToDelayedList+0xc8>)
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	6013      	str	r3, [r2, #0]
}
 80063ea:	bf00      	nop
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	20001b4c 	.word	0x20001b4c
 80063f8:	20001a48 	.word	0x20001a48
 80063fc:	20001b50 	.word	0x20001b50
 8006400:	20001b34 	.word	0x20001b34
 8006404:	20001b04 	.word	0x20001b04
 8006408:	20001b00 	.word	0x20001b00
 800640c:	20001b68 	.word	0x20001b68

08006410 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	3b04      	subs	r3, #4
 8006420:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3b04      	subs	r3, #4
 800642e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f023 0201 	bic.w	r2, r3, #1
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	3b04      	subs	r3, #4
 800643e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006440:	4a0c      	ldr	r2, [pc, #48]	; (8006474 <pxPortInitialiseStack+0x64>)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3b14      	subs	r3, #20
 800644a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3b04      	subs	r3, #4
 8006456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f06f 0202 	mvn.w	r2, #2
 800645e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	3b20      	subs	r3, #32
 8006464:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006466:	68fb      	ldr	r3, [r7, #12]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	08006479 	.word	0x08006479

08006478 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800647e:	2300      	movs	r3, #0
 8006480:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006482:	4b12      	ldr	r3, [pc, #72]	; (80064cc <prvTaskExitError+0x54>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648a:	d00a      	beq.n	80064a2 <prvTaskExitError+0x2a>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	60fb      	str	r3, [r7, #12]
}
 800649e:	bf00      	nop
 80064a0:	e7fe      	b.n	80064a0 <prvTaskExitError+0x28>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	60bb      	str	r3, [r7, #8]
}
 80064b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80064b6:	bf00      	nop
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0fc      	beq.n	80064b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064be:	bf00      	nop
 80064c0:	bf00      	nop
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	20000010 	.word	0x20000010

080064d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064d0:	4b07      	ldr	r3, [pc, #28]	; (80064f0 <pxCurrentTCBConst2>)
 80064d2:	6819      	ldr	r1, [r3, #0]
 80064d4:	6808      	ldr	r0, [r1, #0]
 80064d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064da:	f380 8809 	msr	PSP, r0
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f04f 0000 	mov.w	r0, #0
 80064e6:	f380 8811 	msr	BASEPRI, r0
 80064ea:	4770      	bx	lr
 80064ec:	f3af 8000 	nop.w

080064f0 <pxCurrentTCBConst2>:
 80064f0:	20001a48 	.word	0x20001a48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064f4:	bf00      	nop
 80064f6:	bf00      	nop

080064f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80064f8:	4808      	ldr	r0, [pc, #32]	; (800651c <prvPortStartFirstTask+0x24>)
 80064fa:	6800      	ldr	r0, [r0, #0]
 80064fc:	6800      	ldr	r0, [r0, #0]
 80064fe:	f380 8808 	msr	MSP, r0
 8006502:	f04f 0000 	mov.w	r0, #0
 8006506:	f380 8814 	msr	CONTROL, r0
 800650a:	b662      	cpsie	i
 800650c:	b661      	cpsie	f
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	df00      	svc	0
 8006518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800651a:	bf00      	nop
 800651c:	e000ed08 	.word	0xe000ed08

08006520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006526:	4b46      	ldr	r3, [pc, #280]	; (8006640 <xPortStartScheduler+0x120>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a46      	ldr	r2, [pc, #280]	; (8006644 <xPortStartScheduler+0x124>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d10a      	bne.n	8006546 <xPortStartScheduler+0x26>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	613b      	str	r3, [r7, #16]
}
 8006542:	bf00      	nop
 8006544:	e7fe      	b.n	8006544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006546:	4b3e      	ldr	r3, [pc, #248]	; (8006640 <xPortStartScheduler+0x120>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a3f      	ldr	r2, [pc, #252]	; (8006648 <xPortStartScheduler+0x128>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d10a      	bne.n	8006566 <xPortStartScheduler+0x46>
	__asm volatile
 8006550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	60fb      	str	r3, [r7, #12]
}
 8006562:	bf00      	nop
 8006564:	e7fe      	b.n	8006564 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006566:	4b39      	ldr	r3, [pc, #228]	; (800664c <xPortStartScheduler+0x12c>)
 8006568:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	b2db      	uxtb	r3, r3
 8006570:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	22ff      	movs	r2, #255	; 0xff
 8006576:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	b2db      	uxtb	r3, r3
 800657e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006580:	78fb      	ldrb	r3, [r7, #3]
 8006582:	b2db      	uxtb	r3, r3
 8006584:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006588:	b2da      	uxtb	r2, r3
 800658a:	4b31      	ldr	r3, [pc, #196]	; (8006650 <xPortStartScheduler+0x130>)
 800658c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800658e:	4b31      	ldr	r3, [pc, #196]	; (8006654 <xPortStartScheduler+0x134>)
 8006590:	2207      	movs	r2, #7
 8006592:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006594:	e009      	b.n	80065aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006596:	4b2f      	ldr	r3, [pc, #188]	; (8006654 <xPortStartScheduler+0x134>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	3b01      	subs	r3, #1
 800659c:	4a2d      	ldr	r2, [pc, #180]	; (8006654 <xPortStartScheduler+0x134>)
 800659e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065a0:	78fb      	ldrb	r3, [r7, #3]
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065aa:	78fb      	ldrb	r3, [r7, #3]
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b2:	2b80      	cmp	r3, #128	; 0x80
 80065b4:	d0ef      	beq.n	8006596 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80065b6:	4b27      	ldr	r3, [pc, #156]	; (8006654 <xPortStartScheduler+0x134>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f1c3 0307 	rsb	r3, r3, #7
 80065be:	2b04      	cmp	r3, #4
 80065c0:	d00a      	beq.n	80065d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	60bb      	str	r3, [r7, #8]
}
 80065d4:	bf00      	nop
 80065d6:	e7fe      	b.n	80065d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80065d8:	4b1e      	ldr	r3, [pc, #120]	; (8006654 <xPortStartScheduler+0x134>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	021b      	lsls	r3, r3, #8
 80065de:	4a1d      	ldr	r2, [pc, #116]	; (8006654 <xPortStartScheduler+0x134>)
 80065e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065e2:	4b1c      	ldr	r3, [pc, #112]	; (8006654 <xPortStartScheduler+0x134>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065ea:	4a1a      	ldr	r2, [pc, #104]	; (8006654 <xPortStartScheduler+0x134>)
 80065ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80065f6:	4b18      	ldr	r3, [pc, #96]	; (8006658 <xPortStartScheduler+0x138>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a17      	ldr	r2, [pc, #92]	; (8006658 <xPortStartScheduler+0x138>)
 80065fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006602:	4b15      	ldr	r3, [pc, #84]	; (8006658 <xPortStartScheduler+0x138>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a14      	ldr	r2, [pc, #80]	; (8006658 <xPortStartScheduler+0x138>)
 8006608:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800660c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800660e:	f000 f8dd 	bl	80067cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006612:	4b12      	ldr	r3, [pc, #72]	; (800665c <xPortStartScheduler+0x13c>)
 8006614:	2200      	movs	r2, #0
 8006616:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006618:	f000 f8fc 	bl	8006814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800661c:	4b10      	ldr	r3, [pc, #64]	; (8006660 <xPortStartScheduler+0x140>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a0f      	ldr	r2, [pc, #60]	; (8006660 <xPortStartScheduler+0x140>)
 8006622:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006626:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006628:	f7ff ff66 	bl	80064f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800662c:	f7ff fbaa 	bl	8005d84 <vTaskSwitchContext>
	prvTaskExitError();
 8006630:	f7ff ff22 	bl	8006478 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3718      	adds	r7, #24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	e000ed00 	.word	0xe000ed00
 8006644:	410fc271 	.word	0x410fc271
 8006648:	410fc270 	.word	0x410fc270
 800664c:	e000e400 	.word	0xe000e400
 8006650:	20001b74 	.word	0x20001b74
 8006654:	20001b78 	.word	0x20001b78
 8006658:	e000ed20 	.word	0xe000ed20
 800665c:	20000010 	.word	0x20000010
 8006660:	e000ef34 	.word	0xe000ef34

08006664 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
	__asm volatile
 800666a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666e:	f383 8811 	msr	BASEPRI, r3
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	607b      	str	r3, [r7, #4]
}
 800667c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800667e:	4b0f      	ldr	r3, [pc, #60]	; (80066bc <vPortEnterCritical+0x58>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3301      	adds	r3, #1
 8006684:	4a0d      	ldr	r2, [pc, #52]	; (80066bc <vPortEnterCritical+0x58>)
 8006686:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006688:	4b0c      	ldr	r3, [pc, #48]	; (80066bc <vPortEnterCritical+0x58>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d10f      	bne.n	80066b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006690:	4b0b      	ldr	r3, [pc, #44]	; (80066c0 <vPortEnterCritical+0x5c>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	603b      	str	r3, [r7, #0]
}
 80066ac:	bf00      	nop
 80066ae:	e7fe      	b.n	80066ae <vPortEnterCritical+0x4a>
	}
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	20000010 	.word	0x20000010
 80066c0:	e000ed04 	.word	0xe000ed04

080066c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80066ca:	4b12      	ldr	r3, [pc, #72]	; (8006714 <vPortExitCritical+0x50>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10a      	bne.n	80066e8 <vPortExitCritical+0x24>
	__asm volatile
 80066d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	607b      	str	r3, [r7, #4]
}
 80066e4:	bf00      	nop
 80066e6:	e7fe      	b.n	80066e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80066e8:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <vPortExitCritical+0x50>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	4a09      	ldr	r2, [pc, #36]	; (8006714 <vPortExitCritical+0x50>)
 80066f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80066f2:	4b08      	ldr	r3, [pc, #32]	; (8006714 <vPortExitCritical+0x50>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d105      	bne.n	8006706 <vPortExitCritical+0x42>
 80066fa:	2300      	movs	r3, #0
 80066fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006704:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	20000010 	.word	0x20000010
	...

08006720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006720:	f3ef 8009 	mrs	r0, PSP
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	4b15      	ldr	r3, [pc, #84]	; (8006780 <pxCurrentTCBConst>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	f01e 0f10 	tst.w	lr, #16
 8006730:	bf08      	it	eq
 8006732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673a:	6010      	str	r0, [r2, #0]
 800673c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006744:	f380 8811 	msr	BASEPRI, r0
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f7ff fb18 	bl	8005d84 <vTaskSwitchContext>
 8006754:	f04f 0000 	mov.w	r0, #0
 8006758:	f380 8811 	msr	BASEPRI, r0
 800675c:	bc09      	pop	{r0, r3}
 800675e:	6819      	ldr	r1, [r3, #0]
 8006760:	6808      	ldr	r0, [r1, #0]
 8006762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006766:	f01e 0f10 	tst.w	lr, #16
 800676a:	bf08      	it	eq
 800676c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006770:	f380 8809 	msr	PSP, r0
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	f3af 8000 	nop.w

08006780 <pxCurrentTCBConst>:
 8006780:	20001a48 	.word	0x20001a48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop

08006788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	607b      	str	r3, [r7, #4]
}
 80067a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067a2:	f7ff fa37 	bl	8005c14 <xTaskIncrementTick>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067ac:	4b06      	ldr	r3, [pc, #24]	; (80067c8 <SysTick_Handler+0x40>)
 80067ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	2300      	movs	r3, #0
 80067b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	f383 8811 	msr	BASEPRI, r3
}
 80067be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80067c0:	bf00      	nop
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	e000ed04 	.word	0xe000ed04

080067cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80067cc:	b480      	push	{r7}
 80067ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067d0:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <vPortSetupTimerInterrupt+0x34>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80067d6:	4b0b      	ldr	r3, [pc, #44]	; (8006804 <vPortSetupTimerInterrupt+0x38>)
 80067d8:	2200      	movs	r2, #0
 80067da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80067dc:	4b0a      	ldr	r3, [pc, #40]	; (8006808 <vPortSetupTimerInterrupt+0x3c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a0a      	ldr	r2, [pc, #40]	; (800680c <vPortSetupTimerInterrupt+0x40>)
 80067e2:	fba2 2303 	umull	r2, r3, r2, r3
 80067e6:	099b      	lsrs	r3, r3, #6
 80067e8:	4a09      	ldr	r2, [pc, #36]	; (8006810 <vPortSetupTimerInterrupt+0x44>)
 80067ea:	3b01      	subs	r3, #1
 80067ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80067ee:	4b04      	ldr	r3, [pc, #16]	; (8006800 <vPortSetupTimerInterrupt+0x34>)
 80067f0:	2207      	movs	r2, #7
 80067f2:	601a      	str	r2, [r3, #0]
}
 80067f4:	bf00      	nop
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	e000e010 	.word	0xe000e010
 8006804:	e000e018 	.word	0xe000e018
 8006808:	20000004 	.word	0x20000004
 800680c:	10624dd3 	.word	0x10624dd3
 8006810:	e000e014 	.word	0xe000e014

08006814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006814:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006824 <vPortEnableVFP+0x10>
 8006818:	6801      	ldr	r1, [r0, #0]
 800681a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800681e:	6001      	str	r1, [r0, #0]
 8006820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006822:	bf00      	nop
 8006824:	e000ed88 	.word	0xe000ed88

08006828 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08a      	sub	sp, #40	; 0x28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006830:	2300      	movs	r3, #0
 8006832:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006834:	f7ff f944 	bl	8005ac0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006838:	4b5b      	ldr	r3, [pc, #364]	; (80069a8 <pvPortMalloc+0x180>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006840:	f000 f920 	bl	8006a84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006844:	4b59      	ldr	r3, [pc, #356]	; (80069ac <pvPortMalloc+0x184>)
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4013      	ands	r3, r2
 800684c:	2b00      	cmp	r3, #0
 800684e:	f040 8093 	bne.w	8006978 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d01d      	beq.n	8006894 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006858:	2208      	movs	r2, #8
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4413      	add	r3, r2
 800685e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f003 0307 	and.w	r3, r3, #7
 8006866:	2b00      	cmp	r3, #0
 8006868:	d014      	beq.n	8006894 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f023 0307 	bic.w	r3, r3, #7
 8006870:	3308      	adds	r3, #8
 8006872:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f003 0307 	and.w	r3, r3, #7
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <pvPortMalloc+0x6c>
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	617b      	str	r3, [r7, #20]
}
 8006890:	bf00      	nop
 8006892:	e7fe      	b.n	8006892 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d06e      	beq.n	8006978 <pvPortMalloc+0x150>
 800689a:	4b45      	ldr	r3, [pc, #276]	; (80069b0 <pvPortMalloc+0x188>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d869      	bhi.n	8006978 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068a4:	4b43      	ldr	r3, [pc, #268]	; (80069b4 <pvPortMalloc+0x18c>)
 80068a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068a8:	4b42      	ldr	r3, [pc, #264]	; (80069b4 <pvPortMalloc+0x18c>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068ae:	e004      	b.n	80068ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d903      	bls.n	80068cc <pvPortMalloc+0xa4>
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1f1      	bne.n	80068b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068cc:	4b36      	ldr	r3, [pc, #216]	; (80069a8 <pvPortMalloc+0x180>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d050      	beq.n	8006978 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2208      	movs	r2, #8
 80068dc:	4413      	add	r3, r2
 80068de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	1ad2      	subs	r2, r2, r3
 80068f0:	2308      	movs	r3, #8
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d91f      	bls.n	8006938 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4413      	add	r3, r2
 80068fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	f003 0307 	and.w	r3, r3, #7
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <pvPortMalloc+0xf8>
	__asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	613b      	str	r3, [r7, #16]
}
 800691c:	bf00      	nop
 800691e:	e7fe      	b.n	800691e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	1ad2      	subs	r2, r2, r3
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006932:	69b8      	ldr	r0, [r7, #24]
 8006934:	f000 f908 	bl	8006b48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006938:	4b1d      	ldr	r3, [pc, #116]	; (80069b0 <pvPortMalloc+0x188>)
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	4a1b      	ldr	r2, [pc, #108]	; (80069b0 <pvPortMalloc+0x188>)
 8006944:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006946:	4b1a      	ldr	r3, [pc, #104]	; (80069b0 <pvPortMalloc+0x188>)
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	4b1b      	ldr	r3, [pc, #108]	; (80069b8 <pvPortMalloc+0x190>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	429a      	cmp	r2, r3
 8006950:	d203      	bcs.n	800695a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006952:	4b17      	ldr	r3, [pc, #92]	; (80069b0 <pvPortMalloc+0x188>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a18      	ldr	r2, [pc, #96]	; (80069b8 <pvPortMalloc+0x190>)
 8006958:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	4b13      	ldr	r3, [pc, #76]	; (80069ac <pvPortMalloc+0x184>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	431a      	orrs	r2, r3
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	2200      	movs	r2, #0
 800696c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800696e:	4b13      	ldr	r3, [pc, #76]	; (80069bc <pvPortMalloc+0x194>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3301      	adds	r3, #1
 8006974:	4a11      	ldr	r2, [pc, #68]	; (80069bc <pvPortMalloc+0x194>)
 8006976:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006978:	f7ff f8b0 	bl	8005adc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	f003 0307 	and.w	r3, r3, #7
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <pvPortMalloc+0x174>
	__asm volatile
 8006986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	60fb      	str	r3, [r7, #12]
}
 8006998:	bf00      	nop
 800699a:	e7fe      	b.n	800699a <pvPortMalloc+0x172>
	return pvReturn;
 800699c:	69fb      	ldr	r3, [r7, #28]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3728      	adds	r7, #40	; 0x28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20005784 	.word	0x20005784
 80069ac:	20005798 	.word	0x20005798
 80069b0:	20005788 	.word	0x20005788
 80069b4:	2000577c 	.word	0x2000577c
 80069b8:	2000578c 	.word	0x2000578c
 80069bc:	20005790 	.word	0x20005790

080069c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d04d      	beq.n	8006a6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069d2:	2308      	movs	r3, #8
 80069d4:	425b      	negs	r3, r3
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	4413      	add	r3, r2
 80069da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	4b24      	ldr	r3, [pc, #144]	; (8006a78 <vPortFree+0xb8>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4013      	ands	r3, r2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10a      	bne.n	8006a04 <vPortFree+0x44>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	60fb      	str	r3, [r7, #12]
}
 8006a00:	bf00      	nop
 8006a02:	e7fe      	b.n	8006a02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00a      	beq.n	8006a22 <vPortFree+0x62>
	__asm volatile
 8006a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	60bb      	str	r3, [r7, #8]
}
 8006a1e:	bf00      	nop
 8006a20:	e7fe      	b.n	8006a20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	4b14      	ldr	r3, [pc, #80]	; (8006a78 <vPortFree+0xb8>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d01e      	beq.n	8006a6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d11a      	bne.n	8006a6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	4b0e      	ldr	r3, [pc, #56]	; (8006a78 <vPortFree+0xb8>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	43db      	mvns	r3, r3
 8006a42:	401a      	ands	r2, r3
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a48:	f7ff f83a 	bl	8005ac0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	4b0a      	ldr	r3, [pc, #40]	; (8006a7c <vPortFree+0xbc>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4413      	add	r3, r2
 8006a56:	4a09      	ldr	r2, [pc, #36]	; (8006a7c <vPortFree+0xbc>)
 8006a58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a5a:	6938      	ldr	r0, [r7, #16]
 8006a5c:	f000 f874 	bl	8006b48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a60:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <vPortFree+0xc0>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3301      	adds	r3, #1
 8006a66:	4a06      	ldr	r2, [pc, #24]	; (8006a80 <vPortFree+0xc0>)
 8006a68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a6a:	f7ff f837 	bl	8005adc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a6e:	bf00      	nop
 8006a70:	3718      	adds	r7, #24
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20005798 	.word	0x20005798
 8006a7c:	20005788 	.word	0x20005788
 8006a80:	20005794 	.word	0x20005794

08006a84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a90:	4b27      	ldr	r3, [pc, #156]	; (8006b30 <prvHeapInit+0xac>)
 8006a92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f003 0307 	and.w	r3, r3, #7
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00c      	beq.n	8006ab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	3307      	adds	r3, #7
 8006aa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 0307 	bic.w	r3, r3, #7
 8006aaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	4a1f      	ldr	r2, [pc, #124]	; (8006b30 <prvHeapInit+0xac>)
 8006ab4:	4413      	add	r3, r2
 8006ab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006abc:	4a1d      	ldr	r2, [pc, #116]	; (8006b34 <prvHeapInit+0xb0>)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ac2:	4b1c      	ldr	r3, [pc, #112]	; (8006b34 <prvHeapInit+0xb0>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	4413      	add	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ad0:	2208      	movs	r2, #8
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	1a9b      	subs	r3, r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 0307 	bic.w	r3, r3, #7
 8006ade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4a15      	ldr	r2, [pc, #84]	; (8006b38 <prvHeapInit+0xb4>)
 8006ae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ae6:	4b14      	ldr	r3, [pc, #80]	; (8006b38 <prvHeapInit+0xb4>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2200      	movs	r2, #0
 8006aec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006aee:	4b12      	ldr	r3, [pc, #72]	; (8006b38 <prvHeapInit+0xb4>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2200      	movs	r2, #0
 8006af4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	1ad2      	subs	r2, r2, r3
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b04:	4b0c      	ldr	r3, [pc, #48]	; (8006b38 <prvHeapInit+0xb4>)
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	4a0a      	ldr	r2, [pc, #40]	; (8006b3c <prvHeapInit+0xb8>)
 8006b12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	4a09      	ldr	r2, [pc, #36]	; (8006b40 <prvHeapInit+0xbc>)
 8006b1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b1c:	4b09      	ldr	r3, [pc, #36]	; (8006b44 <prvHeapInit+0xc0>)
 8006b1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b22:	601a      	str	r2, [r3, #0]
}
 8006b24:	bf00      	nop
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	20001b7c 	.word	0x20001b7c
 8006b34:	2000577c 	.word	0x2000577c
 8006b38:	20005784 	.word	0x20005784
 8006b3c:	2000578c 	.word	0x2000578c
 8006b40:	20005788 	.word	0x20005788
 8006b44:	20005798 	.word	0x20005798

08006b48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b50:	4b28      	ldr	r3, [pc, #160]	; (8006bf4 <prvInsertBlockIntoFreeList+0xac>)
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	e002      	b.n	8006b5c <prvInsertBlockIntoFreeList+0x14>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d8f7      	bhi.n	8006b56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	4413      	add	r3, r2
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d108      	bne.n	8006b8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	441a      	add	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	441a      	add	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d118      	bne.n	8006bd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	4b15      	ldr	r3, [pc, #84]	; (8006bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d00d      	beq.n	8006bc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	441a      	add	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	e008      	b.n	8006bd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bc6:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	e003      	b.n	8006bd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d002      	beq.n	8006be6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006be6:	bf00      	nop
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	2000577c 	.word	0x2000577c
 8006bf8:	20005784 	.word	0x20005784

08006bfc <__errno>:
 8006bfc:	4b01      	ldr	r3, [pc, #4]	; (8006c04 <__errno+0x8>)
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	20000014 	.word	0x20000014

08006c08 <__libc_init_array>:
 8006c08:	b570      	push	{r4, r5, r6, lr}
 8006c0a:	4d0d      	ldr	r5, [pc, #52]	; (8006c40 <__libc_init_array+0x38>)
 8006c0c:	4c0d      	ldr	r4, [pc, #52]	; (8006c44 <__libc_init_array+0x3c>)
 8006c0e:	1b64      	subs	r4, r4, r5
 8006c10:	10a4      	asrs	r4, r4, #2
 8006c12:	2600      	movs	r6, #0
 8006c14:	42a6      	cmp	r6, r4
 8006c16:	d109      	bne.n	8006c2c <__libc_init_array+0x24>
 8006c18:	4d0b      	ldr	r5, [pc, #44]	; (8006c48 <__libc_init_array+0x40>)
 8006c1a:	4c0c      	ldr	r4, [pc, #48]	; (8006c4c <__libc_init_array+0x44>)
 8006c1c:	f001 fdf4 	bl	8008808 <_init>
 8006c20:	1b64      	subs	r4, r4, r5
 8006c22:	10a4      	asrs	r4, r4, #2
 8006c24:	2600      	movs	r6, #0
 8006c26:	42a6      	cmp	r6, r4
 8006c28:	d105      	bne.n	8006c36 <__libc_init_array+0x2e>
 8006c2a:	bd70      	pop	{r4, r5, r6, pc}
 8006c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c30:	4798      	blx	r3
 8006c32:	3601      	adds	r6, #1
 8006c34:	e7ee      	b.n	8006c14 <__libc_init_array+0xc>
 8006c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c3a:	4798      	blx	r3
 8006c3c:	3601      	adds	r6, #1
 8006c3e:	e7f2      	b.n	8006c26 <__libc_init_array+0x1e>
 8006c40:	08008b74 	.word	0x08008b74
 8006c44:	08008b74 	.word	0x08008b74
 8006c48:	08008b74 	.word	0x08008b74
 8006c4c:	08008b78 	.word	0x08008b78

08006c50 <memcpy>:
 8006c50:	440a      	add	r2, r1
 8006c52:	4291      	cmp	r1, r2
 8006c54:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c58:	d100      	bne.n	8006c5c <memcpy+0xc>
 8006c5a:	4770      	bx	lr
 8006c5c:	b510      	push	{r4, lr}
 8006c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c66:	4291      	cmp	r1, r2
 8006c68:	d1f9      	bne.n	8006c5e <memcpy+0xe>
 8006c6a:	bd10      	pop	{r4, pc}

08006c6c <memset>:
 8006c6c:	4402      	add	r2, r0
 8006c6e:	4603      	mov	r3, r0
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d100      	bne.n	8006c76 <memset+0xa>
 8006c74:	4770      	bx	lr
 8006c76:	f803 1b01 	strb.w	r1, [r3], #1
 8006c7a:	e7f9      	b.n	8006c70 <memset+0x4>

08006c7c <iprintf>:
 8006c7c:	b40f      	push	{r0, r1, r2, r3}
 8006c7e:	4b0a      	ldr	r3, [pc, #40]	; (8006ca8 <iprintf+0x2c>)
 8006c80:	b513      	push	{r0, r1, r4, lr}
 8006c82:	681c      	ldr	r4, [r3, #0]
 8006c84:	b124      	cbz	r4, 8006c90 <iprintf+0x14>
 8006c86:	69a3      	ldr	r3, [r4, #24]
 8006c88:	b913      	cbnz	r3, 8006c90 <iprintf+0x14>
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f000 fbb8 	bl	8007400 <__sinit>
 8006c90:	ab05      	add	r3, sp, #20
 8006c92:	9a04      	ldr	r2, [sp, #16]
 8006c94:	68a1      	ldr	r1, [r4, #8]
 8006c96:	9301      	str	r3, [sp, #4]
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f000 ffad 	bl	8007bf8 <_vfiprintf_r>
 8006c9e:	b002      	add	sp, #8
 8006ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca4:	b004      	add	sp, #16
 8006ca6:	4770      	bx	lr
 8006ca8:	20000014 	.word	0x20000014

08006cac <_puts_r>:
 8006cac:	b570      	push	{r4, r5, r6, lr}
 8006cae:	460e      	mov	r6, r1
 8006cb0:	4605      	mov	r5, r0
 8006cb2:	b118      	cbz	r0, 8006cbc <_puts_r+0x10>
 8006cb4:	6983      	ldr	r3, [r0, #24]
 8006cb6:	b90b      	cbnz	r3, 8006cbc <_puts_r+0x10>
 8006cb8:	f000 fba2 	bl	8007400 <__sinit>
 8006cbc:	69ab      	ldr	r3, [r5, #24]
 8006cbe:	68ac      	ldr	r4, [r5, #8]
 8006cc0:	b913      	cbnz	r3, 8006cc8 <_puts_r+0x1c>
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f000 fb9c 	bl	8007400 <__sinit>
 8006cc8:	4b2c      	ldr	r3, [pc, #176]	; (8006d7c <_puts_r+0xd0>)
 8006cca:	429c      	cmp	r4, r3
 8006ccc:	d120      	bne.n	8006d10 <_puts_r+0x64>
 8006cce:	686c      	ldr	r4, [r5, #4]
 8006cd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cd2:	07db      	lsls	r3, r3, #31
 8006cd4:	d405      	bmi.n	8006ce2 <_puts_r+0x36>
 8006cd6:	89a3      	ldrh	r3, [r4, #12]
 8006cd8:	0598      	lsls	r0, r3, #22
 8006cda:	d402      	bmi.n	8006ce2 <_puts_r+0x36>
 8006cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cde:	f000 fc2d 	bl	800753c <__retarget_lock_acquire_recursive>
 8006ce2:	89a3      	ldrh	r3, [r4, #12]
 8006ce4:	0719      	lsls	r1, r3, #28
 8006ce6:	d51d      	bpl.n	8006d24 <_puts_r+0x78>
 8006ce8:	6923      	ldr	r3, [r4, #16]
 8006cea:	b1db      	cbz	r3, 8006d24 <_puts_r+0x78>
 8006cec:	3e01      	subs	r6, #1
 8006cee:	68a3      	ldr	r3, [r4, #8]
 8006cf0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	60a3      	str	r3, [r4, #8]
 8006cf8:	bb39      	cbnz	r1, 8006d4a <_puts_r+0x9e>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	da38      	bge.n	8006d70 <_puts_r+0xc4>
 8006cfe:	4622      	mov	r2, r4
 8006d00:	210a      	movs	r1, #10
 8006d02:	4628      	mov	r0, r5
 8006d04:	f000 f980 	bl	8007008 <__swbuf_r>
 8006d08:	3001      	adds	r0, #1
 8006d0a:	d011      	beq.n	8006d30 <_puts_r+0x84>
 8006d0c:	250a      	movs	r5, #10
 8006d0e:	e011      	b.n	8006d34 <_puts_r+0x88>
 8006d10:	4b1b      	ldr	r3, [pc, #108]	; (8006d80 <_puts_r+0xd4>)
 8006d12:	429c      	cmp	r4, r3
 8006d14:	d101      	bne.n	8006d1a <_puts_r+0x6e>
 8006d16:	68ac      	ldr	r4, [r5, #8]
 8006d18:	e7da      	b.n	8006cd0 <_puts_r+0x24>
 8006d1a:	4b1a      	ldr	r3, [pc, #104]	; (8006d84 <_puts_r+0xd8>)
 8006d1c:	429c      	cmp	r4, r3
 8006d1e:	bf08      	it	eq
 8006d20:	68ec      	ldreq	r4, [r5, #12]
 8006d22:	e7d5      	b.n	8006cd0 <_puts_r+0x24>
 8006d24:	4621      	mov	r1, r4
 8006d26:	4628      	mov	r0, r5
 8006d28:	f000 f9d2 	bl	80070d0 <__swsetup_r>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	d0dd      	beq.n	8006cec <_puts_r+0x40>
 8006d30:	f04f 35ff 	mov.w	r5, #4294967295
 8006d34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d36:	07da      	lsls	r2, r3, #31
 8006d38:	d405      	bmi.n	8006d46 <_puts_r+0x9a>
 8006d3a:	89a3      	ldrh	r3, [r4, #12]
 8006d3c:	059b      	lsls	r3, r3, #22
 8006d3e:	d402      	bmi.n	8006d46 <_puts_r+0x9a>
 8006d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d42:	f000 fbfc 	bl	800753e <__retarget_lock_release_recursive>
 8006d46:	4628      	mov	r0, r5
 8006d48:	bd70      	pop	{r4, r5, r6, pc}
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	da04      	bge.n	8006d58 <_puts_r+0xac>
 8006d4e:	69a2      	ldr	r2, [r4, #24]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	dc06      	bgt.n	8006d62 <_puts_r+0xb6>
 8006d54:	290a      	cmp	r1, #10
 8006d56:	d004      	beq.n	8006d62 <_puts_r+0xb6>
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	6022      	str	r2, [r4, #0]
 8006d5e:	7019      	strb	r1, [r3, #0]
 8006d60:	e7c5      	b.n	8006cee <_puts_r+0x42>
 8006d62:	4622      	mov	r2, r4
 8006d64:	4628      	mov	r0, r5
 8006d66:	f000 f94f 	bl	8007008 <__swbuf_r>
 8006d6a:	3001      	adds	r0, #1
 8006d6c:	d1bf      	bne.n	8006cee <_puts_r+0x42>
 8006d6e:	e7df      	b.n	8006d30 <_puts_r+0x84>
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	250a      	movs	r5, #10
 8006d74:	1c5a      	adds	r2, r3, #1
 8006d76:	6022      	str	r2, [r4, #0]
 8006d78:	701d      	strb	r5, [r3, #0]
 8006d7a:	e7db      	b.n	8006d34 <_puts_r+0x88>
 8006d7c:	080089dc 	.word	0x080089dc
 8006d80:	080089fc 	.word	0x080089fc
 8006d84:	080089bc 	.word	0x080089bc

08006d88 <puts>:
 8006d88:	4b02      	ldr	r3, [pc, #8]	; (8006d94 <puts+0xc>)
 8006d8a:	4601      	mov	r1, r0
 8006d8c:	6818      	ldr	r0, [r3, #0]
 8006d8e:	f7ff bf8d 	b.w	8006cac <_puts_r>
 8006d92:	bf00      	nop
 8006d94:	20000014 	.word	0x20000014

08006d98 <setvbuf>:
 8006d98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d9c:	461d      	mov	r5, r3
 8006d9e:	4b5d      	ldr	r3, [pc, #372]	; (8006f14 <setvbuf+0x17c>)
 8006da0:	681f      	ldr	r7, [r3, #0]
 8006da2:	4604      	mov	r4, r0
 8006da4:	460e      	mov	r6, r1
 8006da6:	4690      	mov	r8, r2
 8006da8:	b127      	cbz	r7, 8006db4 <setvbuf+0x1c>
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	b913      	cbnz	r3, 8006db4 <setvbuf+0x1c>
 8006dae:	4638      	mov	r0, r7
 8006db0:	f000 fb26 	bl	8007400 <__sinit>
 8006db4:	4b58      	ldr	r3, [pc, #352]	; (8006f18 <setvbuf+0x180>)
 8006db6:	429c      	cmp	r4, r3
 8006db8:	d167      	bne.n	8006e8a <setvbuf+0xf2>
 8006dba:	687c      	ldr	r4, [r7, #4]
 8006dbc:	f1b8 0f02 	cmp.w	r8, #2
 8006dc0:	d006      	beq.n	8006dd0 <setvbuf+0x38>
 8006dc2:	f1b8 0f01 	cmp.w	r8, #1
 8006dc6:	f200 809f 	bhi.w	8006f08 <setvbuf+0x170>
 8006dca:	2d00      	cmp	r5, #0
 8006dcc:	f2c0 809c 	blt.w	8006f08 <setvbuf+0x170>
 8006dd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dd2:	07db      	lsls	r3, r3, #31
 8006dd4:	d405      	bmi.n	8006de2 <setvbuf+0x4a>
 8006dd6:	89a3      	ldrh	r3, [r4, #12]
 8006dd8:	0598      	lsls	r0, r3, #22
 8006dda:	d402      	bmi.n	8006de2 <setvbuf+0x4a>
 8006ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dde:	f000 fbad 	bl	800753c <__retarget_lock_acquire_recursive>
 8006de2:	4621      	mov	r1, r4
 8006de4:	4638      	mov	r0, r7
 8006de6:	f000 fa77 	bl	80072d8 <_fflush_r>
 8006dea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dec:	b141      	cbz	r1, 8006e00 <setvbuf+0x68>
 8006dee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006df2:	4299      	cmp	r1, r3
 8006df4:	d002      	beq.n	8006dfc <setvbuf+0x64>
 8006df6:	4638      	mov	r0, r7
 8006df8:	f000 fc22 	bl	8007640 <_free_r>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	6363      	str	r3, [r4, #52]	; 0x34
 8006e00:	2300      	movs	r3, #0
 8006e02:	61a3      	str	r3, [r4, #24]
 8006e04:	6063      	str	r3, [r4, #4]
 8006e06:	89a3      	ldrh	r3, [r4, #12]
 8006e08:	0619      	lsls	r1, r3, #24
 8006e0a:	d503      	bpl.n	8006e14 <setvbuf+0x7c>
 8006e0c:	6921      	ldr	r1, [r4, #16]
 8006e0e:	4638      	mov	r0, r7
 8006e10:	f000 fc16 	bl	8007640 <_free_r>
 8006e14:	89a3      	ldrh	r3, [r4, #12]
 8006e16:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006e1a:	f023 0303 	bic.w	r3, r3, #3
 8006e1e:	f1b8 0f02 	cmp.w	r8, #2
 8006e22:	81a3      	strh	r3, [r4, #12]
 8006e24:	d06c      	beq.n	8006f00 <setvbuf+0x168>
 8006e26:	ab01      	add	r3, sp, #4
 8006e28:	466a      	mov	r2, sp
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	4638      	mov	r0, r7
 8006e2e:	f000 fb99 	bl	8007564 <__swhatbuf_r>
 8006e32:	89a3      	ldrh	r3, [r4, #12]
 8006e34:	4318      	orrs	r0, r3
 8006e36:	81a0      	strh	r0, [r4, #12]
 8006e38:	2d00      	cmp	r5, #0
 8006e3a:	d130      	bne.n	8006e9e <setvbuf+0x106>
 8006e3c:	9d00      	ldr	r5, [sp, #0]
 8006e3e:	4628      	mov	r0, r5
 8006e40:	f000 fbf6 	bl	8007630 <malloc>
 8006e44:	4606      	mov	r6, r0
 8006e46:	2800      	cmp	r0, #0
 8006e48:	d155      	bne.n	8006ef6 <setvbuf+0x15e>
 8006e4a:	f8dd 9000 	ldr.w	r9, [sp]
 8006e4e:	45a9      	cmp	r9, r5
 8006e50:	d14a      	bne.n	8006ee8 <setvbuf+0x150>
 8006e52:	f04f 35ff 	mov.w	r5, #4294967295
 8006e56:	2200      	movs	r2, #0
 8006e58:	60a2      	str	r2, [r4, #8]
 8006e5a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006e5e:	6022      	str	r2, [r4, #0]
 8006e60:	6122      	str	r2, [r4, #16]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e68:	6162      	str	r2, [r4, #20]
 8006e6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e6c:	f043 0302 	orr.w	r3, r3, #2
 8006e70:	07d2      	lsls	r2, r2, #31
 8006e72:	81a3      	strh	r3, [r4, #12]
 8006e74:	d405      	bmi.n	8006e82 <setvbuf+0xea>
 8006e76:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006e7a:	d102      	bne.n	8006e82 <setvbuf+0xea>
 8006e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e7e:	f000 fb5e 	bl	800753e <__retarget_lock_release_recursive>
 8006e82:	4628      	mov	r0, r5
 8006e84:	b003      	add	sp, #12
 8006e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e8a:	4b24      	ldr	r3, [pc, #144]	; (8006f1c <setvbuf+0x184>)
 8006e8c:	429c      	cmp	r4, r3
 8006e8e:	d101      	bne.n	8006e94 <setvbuf+0xfc>
 8006e90:	68bc      	ldr	r4, [r7, #8]
 8006e92:	e793      	b.n	8006dbc <setvbuf+0x24>
 8006e94:	4b22      	ldr	r3, [pc, #136]	; (8006f20 <setvbuf+0x188>)
 8006e96:	429c      	cmp	r4, r3
 8006e98:	bf08      	it	eq
 8006e9a:	68fc      	ldreq	r4, [r7, #12]
 8006e9c:	e78e      	b.n	8006dbc <setvbuf+0x24>
 8006e9e:	2e00      	cmp	r6, #0
 8006ea0:	d0cd      	beq.n	8006e3e <setvbuf+0xa6>
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	b913      	cbnz	r3, 8006eac <setvbuf+0x114>
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	f000 faaa 	bl	8007400 <__sinit>
 8006eac:	f1b8 0f01 	cmp.w	r8, #1
 8006eb0:	bf08      	it	eq
 8006eb2:	89a3      	ldrheq	r3, [r4, #12]
 8006eb4:	6026      	str	r6, [r4, #0]
 8006eb6:	bf04      	itt	eq
 8006eb8:	f043 0301 	orreq.w	r3, r3, #1
 8006ebc:	81a3      	strheq	r3, [r4, #12]
 8006ebe:	89a2      	ldrh	r2, [r4, #12]
 8006ec0:	f012 0308 	ands.w	r3, r2, #8
 8006ec4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006ec8:	d01c      	beq.n	8006f04 <setvbuf+0x16c>
 8006eca:	07d3      	lsls	r3, r2, #31
 8006ecc:	bf41      	itttt	mi
 8006ece:	2300      	movmi	r3, #0
 8006ed0:	426d      	negmi	r5, r5
 8006ed2:	60a3      	strmi	r3, [r4, #8]
 8006ed4:	61a5      	strmi	r5, [r4, #24]
 8006ed6:	bf58      	it	pl
 8006ed8:	60a5      	strpl	r5, [r4, #8]
 8006eda:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006edc:	f015 0501 	ands.w	r5, r5, #1
 8006ee0:	d115      	bne.n	8006f0e <setvbuf+0x176>
 8006ee2:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006ee6:	e7c8      	b.n	8006e7a <setvbuf+0xe2>
 8006ee8:	4648      	mov	r0, r9
 8006eea:	f000 fba1 	bl	8007630 <malloc>
 8006eee:	4606      	mov	r6, r0
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	d0ae      	beq.n	8006e52 <setvbuf+0xba>
 8006ef4:	464d      	mov	r5, r9
 8006ef6:	89a3      	ldrh	r3, [r4, #12]
 8006ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006efc:	81a3      	strh	r3, [r4, #12]
 8006efe:	e7d0      	b.n	8006ea2 <setvbuf+0x10a>
 8006f00:	2500      	movs	r5, #0
 8006f02:	e7a8      	b.n	8006e56 <setvbuf+0xbe>
 8006f04:	60a3      	str	r3, [r4, #8]
 8006f06:	e7e8      	b.n	8006eda <setvbuf+0x142>
 8006f08:	f04f 35ff 	mov.w	r5, #4294967295
 8006f0c:	e7b9      	b.n	8006e82 <setvbuf+0xea>
 8006f0e:	2500      	movs	r5, #0
 8006f10:	e7b7      	b.n	8006e82 <setvbuf+0xea>
 8006f12:	bf00      	nop
 8006f14:	20000014 	.word	0x20000014
 8006f18:	080089dc 	.word	0x080089dc
 8006f1c:	080089fc 	.word	0x080089fc
 8006f20:	080089bc 	.word	0x080089bc

08006f24 <siscanf>:
 8006f24:	b40e      	push	{r1, r2, r3}
 8006f26:	b510      	push	{r4, lr}
 8006f28:	b09f      	sub	sp, #124	; 0x7c
 8006f2a:	ac21      	add	r4, sp, #132	; 0x84
 8006f2c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006f30:	f854 2b04 	ldr.w	r2, [r4], #4
 8006f34:	9201      	str	r2, [sp, #4]
 8006f36:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006f3a:	9004      	str	r0, [sp, #16]
 8006f3c:	9008      	str	r0, [sp, #32]
 8006f3e:	f7f9 f957 	bl	80001f0 <strlen>
 8006f42:	4b0c      	ldr	r3, [pc, #48]	; (8006f74 <siscanf+0x50>)
 8006f44:	9005      	str	r0, [sp, #20]
 8006f46:	9009      	str	r0, [sp, #36]	; 0x24
 8006f48:	930d      	str	r3, [sp, #52]	; 0x34
 8006f4a:	480b      	ldr	r0, [pc, #44]	; (8006f78 <siscanf+0x54>)
 8006f4c:	9a01      	ldr	r2, [sp, #4]
 8006f4e:	6800      	ldr	r0, [r0, #0]
 8006f50:	9403      	str	r4, [sp, #12]
 8006f52:	2300      	movs	r3, #0
 8006f54:	9311      	str	r3, [sp, #68]	; 0x44
 8006f56:	9316      	str	r3, [sp, #88]	; 0x58
 8006f58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f5c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006f60:	a904      	add	r1, sp, #16
 8006f62:	4623      	mov	r3, r4
 8006f64:	f000 fca6 	bl	80078b4 <__ssvfiscanf_r>
 8006f68:	b01f      	add	sp, #124	; 0x7c
 8006f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f6e:	b003      	add	sp, #12
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	08006f9f 	.word	0x08006f9f
 8006f78:	20000014 	.word	0x20000014

08006f7c <__sread>:
 8006f7c:	b510      	push	{r4, lr}
 8006f7e:	460c      	mov	r4, r1
 8006f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f84:	f001 fa4e 	bl	8008424 <_read_r>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	bfab      	itete	ge
 8006f8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f8e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f90:	181b      	addge	r3, r3, r0
 8006f92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f96:	bfac      	ite	ge
 8006f98:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f9a:	81a3      	strhlt	r3, [r4, #12]
 8006f9c:	bd10      	pop	{r4, pc}

08006f9e <__seofread>:
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	4770      	bx	lr

08006fa2 <__swrite>:
 8006fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa6:	461f      	mov	r7, r3
 8006fa8:	898b      	ldrh	r3, [r1, #12]
 8006faa:	05db      	lsls	r3, r3, #23
 8006fac:	4605      	mov	r5, r0
 8006fae:	460c      	mov	r4, r1
 8006fb0:	4616      	mov	r6, r2
 8006fb2:	d505      	bpl.n	8006fc0 <__swrite+0x1e>
 8006fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fb8:	2302      	movs	r3, #2
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f000 fac0 	bl	8007540 <_lseek_r>
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fca:	81a3      	strh	r3, [r4, #12]
 8006fcc:	4632      	mov	r2, r6
 8006fce:	463b      	mov	r3, r7
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd6:	f000 b869 	b.w	80070ac <_write_r>

08006fda <__sseek>:
 8006fda:	b510      	push	{r4, lr}
 8006fdc:	460c      	mov	r4, r1
 8006fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe2:	f000 faad 	bl	8007540 <_lseek_r>
 8006fe6:	1c43      	adds	r3, r0, #1
 8006fe8:	89a3      	ldrh	r3, [r4, #12]
 8006fea:	bf15      	itete	ne
 8006fec:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ff6:	81a3      	strheq	r3, [r4, #12]
 8006ff8:	bf18      	it	ne
 8006ffa:	81a3      	strhne	r3, [r4, #12]
 8006ffc:	bd10      	pop	{r4, pc}

08006ffe <__sclose>:
 8006ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007002:	f000 b8d3 	b.w	80071ac <_close_r>
	...

08007008 <__swbuf_r>:
 8007008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700a:	460e      	mov	r6, r1
 800700c:	4614      	mov	r4, r2
 800700e:	4605      	mov	r5, r0
 8007010:	b118      	cbz	r0, 800701a <__swbuf_r+0x12>
 8007012:	6983      	ldr	r3, [r0, #24]
 8007014:	b90b      	cbnz	r3, 800701a <__swbuf_r+0x12>
 8007016:	f000 f9f3 	bl	8007400 <__sinit>
 800701a:	4b21      	ldr	r3, [pc, #132]	; (80070a0 <__swbuf_r+0x98>)
 800701c:	429c      	cmp	r4, r3
 800701e:	d12b      	bne.n	8007078 <__swbuf_r+0x70>
 8007020:	686c      	ldr	r4, [r5, #4]
 8007022:	69a3      	ldr	r3, [r4, #24]
 8007024:	60a3      	str	r3, [r4, #8]
 8007026:	89a3      	ldrh	r3, [r4, #12]
 8007028:	071a      	lsls	r2, r3, #28
 800702a:	d52f      	bpl.n	800708c <__swbuf_r+0x84>
 800702c:	6923      	ldr	r3, [r4, #16]
 800702e:	b36b      	cbz	r3, 800708c <__swbuf_r+0x84>
 8007030:	6923      	ldr	r3, [r4, #16]
 8007032:	6820      	ldr	r0, [r4, #0]
 8007034:	1ac0      	subs	r0, r0, r3
 8007036:	6963      	ldr	r3, [r4, #20]
 8007038:	b2f6      	uxtb	r6, r6
 800703a:	4283      	cmp	r3, r0
 800703c:	4637      	mov	r7, r6
 800703e:	dc04      	bgt.n	800704a <__swbuf_r+0x42>
 8007040:	4621      	mov	r1, r4
 8007042:	4628      	mov	r0, r5
 8007044:	f000 f948 	bl	80072d8 <_fflush_r>
 8007048:	bb30      	cbnz	r0, 8007098 <__swbuf_r+0x90>
 800704a:	68a3      	ldr	r3, [r4, #8]
 800704c:	3b01      	subs	r3, #1
 800704e:	60a3      	str	r3, [r4, #8]
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	1c5a      	adds	r2, r3, #1
 8007054:	6022      	str	r2, [r4, #0]
 8007056:	701e      	strb	r6, [r3, #0]
 8007058:	6963      	ldr	r3, [r4, #20]
 800705a:	3001      	adds	r0, #1
 800705c:	4283      	cmp	r3, r0
 800705e:	d004      	beq.n	800706a <__swbuf_r+0x62>
 8007060:	89a3      	ldrh	r3, [r4, #12]
 8007062:	07db      	lsls	r3, r3, #31
 8007064:	d506      	bpl.n	8007074 <__swbuf_r+0x6c>
 8007066:	2e0a      	cmp	r6, #10
 8007068:	d104      	bne.n	8007074 <__swbuf_r+0x6c>
 800706a:	4621      	mov	r1, r4
 800706c:	4628      	mov	r0, r5
 800706e:	f000 f933 	bl	80072d8 <_fflush_r>
 8007072:	b988      	cbnz	r0, 8007098 <__swbuf_r+0x90>
 8007074:	4638      	mov	r0, r7
 8007076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007078:	4b0a      	ldr	r3, [pc, #40]	; (80070a4 <__swbuf_r+0x9c>)
 800707a:	429c      	cmp	r4, r3
 800707c:	d101      	bne.n	8007082 <__swbuf_r+0x7a>
 800707e:	68ac      	ldr	r4, [r5, #8]
 8007080:	e7cf      	b.n	8007022 <__swbuf_r+0x1a>
 8007082:	4b09      	ldr	r3, [pc, #36]	; (80070a8 <__swbuf_r+0xa0>)
 8007084:	429c      	cmp	r4, r3
 8007086:	bf08      	it	eq
 8007088:	68ec      	ldreq	r4, [r5, #12]
 800708a:	e7ca      	b.n	8007022 <__swbuf_r+0x1a>
 800708c:	4621      	mov	r1, r4
 800708e:	4628      	mov	r0, r5
 8007090:	f000 f81e 	bl	80070d0 <__swsetup_r>
 8007094:	2800      	cmp	r0, #0
 8007096:	d0cb      	beq.n	8007030 <__swbuf_r+0x28>
 8007098:	f04f 37ff 	mov.w	r7, #4294967295
 800709c:	e7ea      	b.n	8007074 <__swbuf_r+0x6c>
 800709e:	bf00      	nop
 80070a0:	080089dc 	.word	0x080089dc
 80070a4:	080089fc 	.word	0x080089fc
 80070a8:	080089bc 	.word	0x080089bc

080070ac <_write_r>:
 80070ac:	b538      	push	{r3, r4, r5, lr}
 80070ae:	4d07      	ldr	r5, [pc, #28]	; (80070cc <_write_r+0x20>)
 80070b0:	4604      	mov	r4, r0
 80070b2:	4608      	mov	r0, r1
 80070b4:	4611      	mov	r1, r2
 80070b6:	2200      	movs	r2, #0
 80070b8:	602a      	str	r2, [r5, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	f7f9 fe5b 	bl	8000d76 <_write>
 80070c0:	1c43      	adds	r3, r0, #1
 80070c2:	d102      	bne.n	80070ca <_write_r+0x1e>
 80070c4:	682b      	ldr	r3, [r5, #0]
 80070c6:	b103      	cbz	r3, 80070ca <_write_r+0x1e>
 80070c8:	6023      	str	r3, [r4, #0]
 80070ca:	bd38      	pop	{r3, r4, r5, pc}
 80070cc:	200057a8 	.word	0x200057a8

080070d0 <__swsetup_r>:
 80070d0:	4b32      	ldr	r3, [pc, #200]	; (800719c <__swsetup_r+0xcc>)
 80070d2:	b570      	push	{r4, r5, r6, lr}
 80070d4:	681d      	ldr	r5, [r3, #0]
 80070d6:	4606      	mov	r6, r0
 80070d8:	460c      	mov	r4, r1
 80070da:	b125      	cbz	r5, 80070e6 <__swsetup_r+0x16>
 80070dc:	69ab      	ldr	r3, [r5, #24]
 80070de:	b913      	cbnz	r3, 80070e6 <__swsetup_r+0x16>
 80070e0:	4628      	mov	r0, r5
 80070e2:	f000 f98d 	bl	8007400 <__sinit>
 80070e6:	4b2e      	ldr	r3, [pc, #184]	; (80071a0 <__swsetup_r+0xd0>)
 80070e8:	429c      	cmp	r4, r3
 80070ea:	d10f      	bne.n	800710c <__swsetup_r+0x3c>
 80070ec:	686c      	ldr	r4, [r5, #4]
 80070ee:	89a3      	ldrh	r3, [r4, #12]
 80070f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070f4:	0719      	lsls	r1, r3, #28
 80070f6:	d42c      	bmi.n	8007152 <__swsetup_r+0x82>
 80070f8:	06dd      	lsls	r5, r3, #27
 80070fa:	d411      	bmi.n	8007120 <__swsetup_r+0x50>
 80070fc:	2309      	movs	r3, #9
 80070fe:	6033      	str	r3, [r6, #0]
 8007100:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007104:	81a3      	strh	r3, [r4, #12]
 8007106:	f04f 30ff 	mov.w	r0, #4294967295
 800710a:	e03e      	b.n	800718a <__swsetup_r+0xba>
 800710c:	4b25      	ldr	r3, [pc, #148]	; (80071a4 <__swsetup_r+0xd4>)
 800710e:	429c      	cmp	r4, r3
 8007110:	d101      	bne.n	8007116 <__swsetup_r+0x46>
 8007112:	68ac      	ldr	r4, [r5, #8]
 8007114:	e7eb      	b.n	80070ee <__swsetup_r+0x1e>
 8007116:	4b24      	ldr	r3, [pc, #144]	; (80071a8 <__swsetup_r+0xd8>)
 8007118:	429c      	cmp	r4, r3
 800711a:	bf08      	it	eq
 800711c:	68ec      	ldreq	r4, [r5, #12]
 800711e:	e7e6      	b.n	80070ee <__swsetup_r+0x1e>
 8007120:	0758      	lsls	r0, r3, #29
 8007122:	d512      	bpl.n	800714a <__swsetup_r+0x7a>
 8007124:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007126:	b141      	cbz	r1, 800713a <__swsetup_r+0x6a>
 8007128:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800712c:	4299      	cmp	r1, r3
 800712e:	d002      	beq.n	8007136 <__swsetup_r+0x66>
 8007130:	4630      	mov	r0, r6
 8007132:	f000 fa85 	bl	8007640 <_free_r>
 8007136:	2300      	movs	r3, #0
 8007138:	6363      	str	r3, [r4, #52]	; 0x34
 800713a:	89a3      	ldrh	r3, [r4, #12]
 800713c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007140:	81a3      	strh	r3, [r4, #12]
 8007142:	2300      	movs	r3, #0
 8007144:	6063      	str	r3, [r4, #4]
 8007146:	6923      	ldr	r3, [r4, #16]
 8007148:	6023      	str	r3, [r4, #0]
 800714a:	89a3      	ldrh	r3, [r4, #12]
 800714c:	f043 0308 	orr.w	r3, r3, #8
 8007150:	81a3      	strh	r3, [r4, #12]
 8007152:	6923      	ldr	r3, [r4, #16]
 8007154:	b94b      	cbnz	r3, 800716a <__swsetup_r+0x9a>
 8007156:	89a3      	ldrh	r3, [r4, #12]
 8007158:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800715c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007160:	d003      	beq.n	800716a <__swsetup_r+0x9a>
 8007162:	4621      	mov	r1, r4
 8007164:	4630      	mov	r0, r6
 8007166:	f000 fa23 	bl	80075b0 <__smakebuf_r>
 800716a:	89a0      	ldrh	r0, [r4, #12]
 800716c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007170:	f010 0301 	ands.w	r3, r0, #1
 8007174:	d00a      	beq.n	800718c <__swsetup_r+0xbc>
 8007176:	2300      	movs	r3, #0
 8007178:	60a3      	str	r3, [r4, #8]
 800717a:	6963      	ldr	r3, [r4, #20]
 800717c:	425b      	negs	r3, r3
 800717e:	61a3      	str	r3, [r4, #24]
 8007180:	6923      	ldr	r3, [r4, #16]
 8007182:	b943      	cbnz	r3, 8007196 <__swsetup_r+0xc6>
 8007184:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007188:	d1ba      	bne.n	8007100 <__swsetup_r+0x30>
 800718a:	bd70      	pop	{r4, r5, r6, pc}
 800718c:	0781      	lsls	r1, r0, #30
 800718e:	bf58      	it	pl
 8007190:	6963      	ldrpl	r3, [r4, #20]
 8007192:	60a3      	str	r3, [r4, #8]
 8007194:	e7f4      	b.n	8007180 <__swsetup_r+0xb0>
 8007196:	2000      	movs	r0, #0
 8007198:	e7f7      	b.n	800718a <__swsetup_r+0xba>
 800719a:	bf00      	nop
 800719c:	20000014 	.word	0x20000014
 80071a0:	080089dc 	.word	0x080089dc
 80071a4:	080089fc 	.word	0x080089fc
 80071a8:	080089bc 	.word	0x080089bc

080071ac <_close_r>:
 80071ac:	b538      	push	{r3, r4, r5, lr}
 80071ae:	4d06      	ldr	r5, [pc, #24]	; (80071c8 <_close_r+0x1c>)
 80071b0:	2300      	movs	r3, #0
 80071b2:	4604      	mov	r4, r0
 80071b4:	4608      	mov	r0, r1
 80071b6:	602b      	str	r3, [r5, #0]
 80071b8:	f7f9 fdf9 	bl	8000dae <_close>
 80071bc:	1c43      	adds	r3, r0, #1
 80071be:	d102      	bne.n	80071c6 <_close_r+0x1a>
 80071c0:	682b      	ldr	r3, [r5, #0]
 80071c2:	b103      	cbz	r3, 80071c6 <_close_r+0x1a>
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	bd38      	pop	{r3, r4, r5, pc}
 80071c8:	200057a8 	.word	0x200057a8

080071cc <__sflush_r>:
 80071cc:	898a      	ldrh	r2, [r1, #12]
 80071ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071d2:	4605      	mov	r5, r0
 80071d4:	0710      	lsls	r0, r2, #28
 80071d6:	460c      	mov	r4, r1
 80071d8:	d458      	bmi.n	800728c <__sflush_r+0xc0>
 80071da:	684b      	ldr	r3, [r1, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	dc05      	bgt.n	80071ec <__sflush_r+0x20>
 80071e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	dc02      	bgt.n	80071ec <__sflush_r+0x20>
 80071e6:	2000      	movs	r0, #0
 80071e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071ee:	2e00      	cmp	r6, #0
 80071f0:	d0f9      	beq.n	80071e6 <__sflush_r+0x1a>
 80071f2:	2300      	movs	r3, #0
 80071f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80071f8:	682f      	ldr	r7, [r5, #0]
 80071fa:	602b      	str	r3, [r5, #0]
 80071fc:	d032      	beq.n	8007264 <__sflush_r+0x98>
 80071fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007200:	89a3      	ldrh	r3, [r4, #12]
 8007202:	075a      	lsls	r2, r3, #29
 8007204:	d505      	bpl.n	8007212 <__sflush_r+0x46>
 8007206:	6863      	ldr	r3, [r4, #4]
 8007208:	1ac0      	subs	r0, r0, r3
 800720a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800720c:	b10b      	cbz	r3, 8007212 <__sflush_r+0x46>
 800720e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007210:	1ac0      	subs	r0, r0, r3
 8007212:	2300      	movs	r3, #0
 8007214:	4602      	mov	r2, r0
 8007216:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007218:	6a21      	ldr	r1, [r4, #32]
 800721a:	4628      	mov	r0, r5
 800721c:	47b0      	blx	r6
 800721e:	1c43      	adds	r3, r0, #1
 8007220:	89a3      	ldrh	r3, [r4, #12]
 8007222:	d106      	bne.n	8007232 <__sflush_r+0x66>
 8007224:	6829      	ldr	r1, [r5, #0]
 8007226:	291d      	cmp	r1, #29
 8007228:	d82c      	bhi.n	8007284 <__sflush_r+0xb8>
 800722a:	4a2a      	ldr	r2, [pc, #168]	; (80072d4 <__sflush_r+0x108>)
 800722c:	40ca      	lsrs	r2, r1
 800722e:	07d6      	lsls	r6, r2, #31
 8007230:	d528      	bpl.n	8007284 <__sflush_r+0xb8>
 8007232:	2200      	movs	r2, #0
 8007234:	6062      	str	r2, [r4, #4]
 8007236:	04d9      	lsls	r1, r3, #19
 8007238:	6922      	ldr	r2, [r4, #16]
 800723a:	6022      	str	r2, [r4, #0]
 800723c:	d504      	bpl.n	8007248 <__sflush_r+0x7c>
 800723e:	1c42      	adds	r2, r0, #1
 8007240:	d101      	bne.n	8007246 <__sflush_r+0x7a>
 8007242:	682b      	ldr	r3, [r5, #0]
 8007244:	b903      	cbnz	r3, 8007248 <__sflush_r+0x7c>
 8007246:	6560      	str	r0, [r4, #84]	; 0x54
 8007248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800724a:	602f      	str	r7, [r5, #0]
 800724c:	2900      	cmp	r1, #0
 800724e:	d0ca      	beq.n	80071e6 <__sflush_r+0x1a>
 8007250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007254:	4299      	cmp	r1, r3
 8007256:	d002      	beq.n	800725e <__sflush_r+0x92>
 8007258:	4628      	mov	r0, r5
 800725a:	f000 f9f1 	bl	8007640 <_free_r>
 800725e:	2000      	movs	r0, #0
 8007260:	6360      	str	r0, [r4, #52]	; 0x34
 8007262:	e7c1      	b.n	80071e8 <__sflush_r+0x1c>
 8007264:	6a21      	ldr	r1, [r4, #32]
 8007266:	2301      	movs	r3, #1
 8007268:	4628      	mov	r0, r5
 800726a:	47b0      	blx	r6
 800726c:	1c41      	adds	r1, r0, #1
 800726e:	d1c7      	bne.n	8007200 <__sflush_r+0x34>
 8007270:	682b      	ldr	r3, [r5, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d0c4      	beq.n	8007200 <__sflush_r+0x34>
 8007276:	2b1d      	cmp	r3, #29
 8007278:	d001      	beq.n	800727e <__sflush_r+0xb2>
 800727a:	2b16      	cmp	r3, #22
 800727c:	d101      	bne.n	8007282 <__sflush_r+0xb6>
 800727e:	602f      	str	r7, [r5, #0]
 8007280:	e7b1      	b.n	80071e6 <__sflush_r+0x1a>
 8007282:	89a3      	ldrh	r3, [r4, #12]
 8007284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007288:	81a3      	strh	r3, [r4, #12]
 800728a:	e7ad      	b.n	80071e8 <__sflush_r+0x1c>
 800728c:	690f      	ldr	r7, [r1, #16]
 800728e:	2f00      	cmp	r7, #0
 8007290:	d0a9      	beq.n	80071e6 <__sflush_r+0x1a>
 8007292:	0793      	lsls	r3, r2, #30
 8007294:	680e      	ldr	r6, [r1, #0]
 8007296:	bf08      	it	eq
 8007298:	694b      	ldreq	r3, [r1, #20]
 800729a:	600f      	str	r7, [r1, #0]
 800729c:	bf18      	it	ne
 800729e:	2300      	movne	r3, #0
 80072a0:	eba6 0807 	sub.w	r8, r6, r7
 80072a4:	608b      	str	r3, [r1, #8]
 80072a6:	f1b8 0f00 	cmp.w	r8, #0
 80072aa:	dd9c      	ble.n	80071e6 <__sflush_r+0x1a>
 80072ac:	6a21      	ldr	r1, [r4, #32]
 80072ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072b0:	4643      	mov	r3, r8
 80072b2:	463a      	mov	r2, r7
 80072b4:	4628      	mov	r0, r5
 80072b6:	47b0      	blx	r6
 80072b8:	2800      	cmp	r0, #0
 80072ba:	dc06      	bgt.n	80072ca <__sflush_r+0xfe>
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072c2:	81a3      	strh	r3, [r4, #12]
 80072c4:	f04f 30ff 	mov.w	r0, #4294967295
 80072c8:	e78e      	b.n	80071e8 <__sflush_r+0x1c>
 80072ca:	4407      	add	r7, r0
 80072cc:	eba8 0800 	sub.w	r8, r8, r0
 80072d0:	e7e9      	b.n	80072a6 <__sflush_r+0xda>
 80072d2:	bf00      	nop
 80072d4:	20400001 	.word	0x20400001

080072d8 <_fflush_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	690b      	ldr	r3, [r1, #16]
 80072dc:	4605      	mov	r5, r0
 80072de:	460c      	mov	r4, r1
 80072e0:	b913      	cbnz	r3, 80072e8 <_fflush_r+0x10>
 80072e2:	2500      	movs	r5, #0
 80072e4:	4628      	mov	r0, r5
 80072e6:	bd38      	pop	{r3, r4, r5, pc}
 80072e8:	b118      	cbz	r0, 80072f2 <_fflush_r+0x1a>
 80072ea:	6983      	ldr	r3, [r0, #24]
 80072ec:	b90b      	cbnz	r3, 80072f2 <_fflush_r+0x1a>
 80072ee:	f000 f887 	bl	8007400 <__sinit>
 80072f2:	4b14      	ldr	r3, [pc, #80]	; (8007344 <_fflush_r+0x6c>)
 80072f4:	429c      	cmp	r4, r3
 80072f6:	d11b      	bne.n	8007330 <_fflush_r+0x58>
 80072f8:	686c      	ldr	r4, [r5, #4]
 80072fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d0ef      	beq.n	80072e2 <_fflush_r+0xa>
 8007302:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007304:	07d0      	lsls	r0, r2, #31
 8007306:	d404      	bmi.n	8007312 <_fflush_r+0x3a>
 8007308:	0599      	lsls	r1, r3, #22
 800730a:	d402      	bmi.n	8007312 <_fflush_r+0x3a>
 800730c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800730e:	f000 f915 	bl	800753c <__retarget_lock_acquire_recursive>
 8007312:	4628      	mov	r0, r5
 8007314:	4621      	mov	r1, r4
 8007316:	f7ff ff59 	bl	80071cc <__sflush_r>
 800731a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800731c:	07da      	lsls	r2, r3, #31
 800731e:	4605      	mov	r5, r0
 8007320:	d4e0      	bmi.n	80072e4 <_fflush_r+0xc>
 8007322:	89a3      	ldrh	r3, [r4, #12]
 8007324:	059b      	lsls	r3, r3, #22
 8007326:	d4dd      	bmi.n	80072e4 <_fflush_r+0xc>
 8007328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800732a:	f000 f908 	bl	800753e <__retarget_lock_release_recursive>
 800732e:	e7d9      	b.n	80072e4 <_fflush_r+0xc>
 8007330:	4b05      	ldr	r3, [pc, #20]	; (8007348 <_fflush_r+0x70>)
 8007332:	429c      	cmp	r4, r3
 8007334:	d101      	bne.n	800733a <_fflush_r+0x62>
 8007336:	68ac      	ldr	r4, [r5, #8]
 8007338:	e7df      	b.n	80072fa <_fflush_r+0x22>
 800733a:	4b04      	ldr	r3, [pc, #16]	; (800734c <_fflush_r+0x74>)
 800733c:	429c      	cmp	r4, r3
 800733e:	bf08      	it	eq
 8007340:	68ec      	ldreq	r4, [r5, #12]
 8007342:	e7da      	b.n	80072fa <_fflush_r+0x22>
 8007344:	080089dc 	.word	0x080089dc
 8007348:	080089fc 	.word	0x080089fc
 800734c:	080089bc 	.word	0x080089bc

08007350 <std>:
 8007350:	2300      	movs	r3, #0
 8007352:	b510      	push	{r4, lr}
 8007354:	4604      	mov	r4, r0
 8007356:	e9c0 3300 	strd	r3, r3, [r0]
 800735a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800735e:	6083      	str	r3, [r0, #8]
 8007360:	8181      	strh	r1, [r0, #12]
 8007362:	6643      	str	r3, [r0, #100]	; 0x64
 8007364:	81c2      	strh	r2, [r0, #14]
 8007366:	6183      	str	r3, [r0, #24]
 8007368:	4619      	mov	r1, r3
 800736a:	2208      	movs	r2, #8
 800736c:	305c      	adds	r0, #92	; 0x5c
 800736e:	f7ff fc7d 	bl	8006c6c <memset>
 8007372:	4b05      	ldr	r3, [pc, #20]	; (8007388 <std+0x38>)
 8007374:	6263      	str	r3, [r4, #36]	; 0x24
 8007376:	4b05      	ldr	r3, [pc, #20]	; (800738c <std+0x3c>)
 8007378:	62a3      	str	r3, [r4, #40]	; 0x28
 800737a:	4b05      	ldr	r3, [pc, #20]	; (8007390 <std+0x40>)
 800737c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800737e:	4b05      	ldr	r3, [pc, #20]	; (8007394 <std+0x44>)
 8007380:	6224      	str	r4, [r4, #32]
 8007382:	6323      	str	r3, [r4, #48]	; 0x30
 8007384:	bd10      	pop	{r4, pc}
 8007386:	bf00      	nop
 8007388:	08006f7d 	.word	0x08006f7d
 800738c:	08006fa3 	.word	0x08006fa3
 8007390:	08006fdb 	.word	0x08006fdb
 8007394:	08006fff 	.word	0x08006fff

08007398 <_cleanup_r>:
 8007398:	4901      	ldr	r1, [pc, #4]	; (80073a0 <_cleanup_r+0x8>)
 800739a:	f000 b8af 	b.w	80074fc <_fwalk_reent>
 800739e:	bf00      	nop
 80073a0:	080072d9 	.word	0x080072d9

080073a4 <__sfmoreglue>:
 80073a4:	b570      	push	{r4, r5, r6, lr}
 80073a6:	2268      	movs	r2, #104	; 0x68
 80073a8:	1e4d      	subs	r5, r1, #1
 80073aa:	4355      	muls	r5, r2
 80073ac:	460e      	mov	r6, r1
 80073ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073b2:	f000 f9b1 	bl	8007718 <_malloc_r>
 80073b6:	4604      	mov	r4, r0
 80073b8:	b140      	cbz	r0, 80073cc <__sfmoreglue+0x28>
 80073ba:	2100      	movs	r1, #0
 80073bc:	e9c0 1600 	strd	r1, r6, [r0]
 80073c0:	300c      	adds	r0, #12
 80073c2:	60a0      	str	r0, [r4, #8]
 80073c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073c8:	f7ff fc50 	bl	8006c6c <memset>
 80073cc:	4620      	mov	r0, r4
 80073ce:	bd70      	pop	{r4, r5, r6, pc}

080073d0 <__sfp_lock_acquire>:
 80073d0:	4801      	ldr	r0, [pc, #4]	; (80073d8 <__sfp_lock_acquire+0x8>)
 80073d2:	f000 b8b3 	b.w	800753c <__retarget_lock_acquire_recursive>
 80073d6:	bf00      	nop
 80073d8:	2000579d 	.word	0x2000579d

080073dc <__sfp_lock_release>:
 80073dc:	4801      	ldr	r0, [pc, #4]	; (80073e4 <__sfp_lock_release+0x8>)
 80073de:	f000 b8ae 	b.w	800753e <__retarget_lock_release_recursive>
 80073e2:	bf00      	nop
 80073e4:	2000579d 	.word	0x2000579d

080073e8 <__sinit_lock_acquire>:
 80073e8:	4801      	ldr	r0, [pc, #4]	; (80073f0 <__sinit_lock_acquire+0x8>)
 80073ea:	f000 b8a7 	b.w	800753c <__retarget_lock_acquire_recursive>
 80073ee:	bf00      	nop
 80073f0:	2000579e 	.word	0x2000579e

080073f4 <__sinit_lock_release>:
 80073f4:	4801      	ldr	r0, [pc, #4]	; (80073fc <__sinit_lock_release+0x8>)
 80073f6:	f000 b8a2 	b.w	800753e <__retarget_lock_release_recursive>
 80073fa:	bf00      	nop
 80073fc:	2000579e 	.word	0x2000579e

08007400 <__sinit>:
 8007400:	b510      	push	{r4, lr}
 8007402:	4604      	mov	r4, r0
 8007404:	f7ff fff0 	bl	80073e8 <__sinit_lock_acquire>
 8007408:	69a3      	ldr	r3, [r4, #24]
 800740a:	b11b      	cbz	r3, 8007414 <__sinit+0x14>
 800740c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007410:	f7ff bff0 	b.w	80073f4 <__sinit_lock_release>
 8007414:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007418:	6523      	str	r3, [r4, #80]	; 0x50
 800741a:	4b13      	ldr	r3, [pc, #76]	; (8007468 <__sinit+0x68>)
 800741c:	4a13      	ldr	r2, [pc, #76]	; (800746c <__sinit+0x6c>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	62a2      	str	r2, [r4, #40]	; 0x28
 8007422:	42a3      	cmp	r3, r4
 8007424:	bf04      	itt	eq
 8007426:	2301      	moveq	r3, #1
 8007428:	61a3      	streq	r3, [r4, #24]
 800742a:	4620      	mov	r0, r4
 800742c:	f000 f820 	bl	8007470 <__sfp>
 8007430:	6060      	str	r0, [r4, #4]
 8007432:	4620      	mov	r0, r4
 8007434:	f000 f81c 	bl	8007470 <__sfp>
 8007438:	60a0      	str	r0, [r4, #8]
 800743a:	4620      	mov	r0, r4
 800743c:	f000 f818 	bl	8007470 <__sfp>
 8007440:	2200      	movs	r2, #0
 8007442:	60e0      	str	r0, [r4, #12]
 8007444:	2104      	movs	r1, #4
 8007446:	6860      	ldr	r0, [r4, #4]
 8007448:	f7ff ff82 	bl	8007350 <std>
 800744c:	68a0      	ldr	r0, [r4, #8]
 800744e:	2201      	movs	r2, #1
 8007450:	2109      	movs	r1, #9
 8007452:	f7ff ff7d 	bl	8007350 <std>
 8007456:	68e0      	ldr	r0, [r4, #12]
 8007458:	2202      	movs	r2, #2
 800745a:	2112      	movs	r1, #18
 800745c:	f7ff ff78 	bl	8007350 <std>
 8007460:	2301      	movs	r3, #1
 8007462:	61a3      	str	r3, [r4, #24]
 8007464:	e7d2      	b.n	800740c <__sinit+0xc>
 8007466:	bf00      	nop
 8007468:	080089b8 	.word	0x080089b8
 800746c:	08007399 	.word	0x08007399

08007470 <__sfp>:
 8007470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007472:	4607      	mov	r7, r0
 8007474:	f7ff ffac 	bl	80073d0 <__sfp_lock_acquire>
 8007478:	4b1e      	ldr	r3, [pc, #120]	; (80074f4 <__sfp+0x84>)
 800747a:	681e      	ldr	r6, [r3, #0]
 800747c:	69b3      	ldr	r3, [r6, #24]
 800747e:	b913      	cbnz	r3, 8007486 <__sfp+0x16>
 8007480:	4630      	mov	r0, r6
 8007482:	f7ff ffbd 	bl	8007400 <__sinit>
 8007486:	3648      	adds	r6, #72	; 0x48
 8007488:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800748c:	3b01      	subs	r3, #1
 800748e:	d503      	bpl.n	8007498 <__sfp+0x28>
 8007490:	6833      	ldr	r3, [r6, #0]
 8007492:	b30b      	cbz	r3, 80074d8 <__sfp+0x68>
 8007494:	6836      	ldr	r6, [r6, #0]
 8007496:	e7f7      	b.n	8007488 <__sfp+0x18>
 8007498:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800749c:	b9d5      	cbnz	r5, 80074d4 <__sfp+0x64>
 800749e:	4b16      	ldr	r3, [pc, #88]	; (80074f8 <__sfp+0x88>)
 80074a0:	60e3      	str	r3, [r4, #12]
 80074a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80074a6:	6665      	str	r5, [r4, #100]	; 0x64
 80074a8:	f000 f847 	bl	800753a <__retarget_lock_init_recursive>
 80074ac:	f7ff ff96 	bl	80073dc <__sfp_lock_release>
 80074b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80074b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80074b8:	6025      	str	r5, [r4, #0]
 80074ba:	61a5      	str	r5, [r4, #24]
 80074bc:	2208      	movs	r2, #8
 80074be:	4629      	mov	r1, r5
 80074c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074c4:	f7ff fbd2 	bl	8006c6c <memset>
 80074c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074d0:	4620      	mov	r0, r4
 80074d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074d4:	3468      	adds	r4, #104	; 0x68
 80074d6:	e7d9      	b.n	800748c <__sfp+0x1c>
 80074d8:	2104      	movs	r1, #4
 80074da:	4638      	mov	r0, r7
 80074dc:	f7ff ff62 	bl	80073a4 <__sfmoreglue>
 80074e0:	4604      	mov	r4, r0
 80074e2:	6030      	str	r0, [r6, #0]
 80074e4:	2800      	cmp	r0, #0
 80074e6:	d1d5      	bne.n	8007494 <__sfp+0x24>
 80074e8:	f7ff ff78 	bl	80073dc <__sfp_lock_release>
 80074ec:	230c      	movs	r3, #12
 80074ee:	603b      	str	r3, [r7, #0]
 80074f0:	e7ee      	b.n	80074d0 <__sfp+0x60>
 80074f2:	bf00      	nop
 80074f4:	080089b8 	.word	0x080089b8
 80074f8:	ffff0001 	.word	0xffff0001

080074fc <_fwalk_reent>:
 80074fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007500:	4606      	mov	r6, r0
 8007502:	4688      	mov	r8, r1
 8007504:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007508:	2700      	movs	r7, #0
 800750a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800750e:	f1b9 0901 	subs.w	r9, r9, #1
 8007512:	d505      	bpl.n	8007520 <_fwalk_reent+0x24>
 8007514:	6824      	ldr	r4, [r4, #0]
 8007516:	2c00      	cmp	r4, #0
 8007518:	d1f7      	bne.n	800750a <_fwalk_reent+0xe>
 800751a:	4638      	mov	r0, r7
 800751c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007520:	89ab      	ldrh	r3, [r5, #12]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d907      	bls.n	8007536 <_fwalk_reent+0x3a>
 8007526:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800752a:	3301      	adds	r3, #1
 800752c:	d003      	beq.n	8007536 <_fwalk_reent+0x3a>
 800752e:	4629      	mov	r1, r5
 8007530:	4630      	mov	r0, r6
 8007532:	47c0      	blx	r8
 8007534:	4307      	orrs	r7, r0
 8007536:	3568      	adds	r5, #104	; 0x68
 8007538:	e7e9      	b.n	800750e <_fwalk_reent+0x12>

0800753a <__retarget_lock_init_recursive>:
 800753a:	4770      	bx	lr

0800753c <__retarget_lock_acquire_recursive>:
 800753c:	4770      	bx	lr

0800753e <__retarget_lock_release_recursive>:
 800753e:	4770      	bx	lr

08007540 <_lseek_r>:
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	4d07      	ldr	r5, [pc, #28]	; (8007560 <_lseek_r+0x20>)
 8007544:	4604      	mov	r4, r0
 8007546:	4608      	mov	r0, r1
 8007548:	4611      	mov	r1, r2
 800754a:	2200      	movs	r2, #0
 800754c:	602a      	str	r2, [r5, #0]
 800754e:	461a      	mov	r2, r3
 8007550:	f7f9 fc54 	bl	8000dfc <_lseek>
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	d102      	bne.n	800755e <_lseek_r+0x1e>
 8007558:	682b      	ldr	r3, [r5, #0]
 800755a:	b103      	cbz	r3, 800755e <_lseek_r+0x1e>
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	bd38      	pop	{r3, r4, r5, pc}
 8007560:	200057a8 	.word	0x200057a8

08007564 <__swhatbuf_r>:
 8007564:	b570      	push	{r4, r5, r6, lr}
 8007566:	460e      	mov	r6, r1
 8007568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800756c:	2900      	cmp	r1, #0
 800756e:	b096      	sub	sp, #88	; 0x58
 8007570:	4614      	mov	r4, r2
 8007572:	461d      	mov	r5, r3
 8007574:	da08      	bge.n	8007588 <__swhatbuf_r+0x24>
 8007576:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	602a      	str	r2, [r5, #0]
 800757e:	061a      	lsls	r2, r3, #24
 8007580:	d410      	bmi.n	80075a4 <__swhatbuf_r+0x40>
 8007582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007586:	e00e      	b.n	80075a6 <__swhatbuf_r+0x42>
 8007588:	466a      	mov	r2, sp
 800758a:	f001 f8d7 	bl	800873c <_fstat_r>
 800758e:	2800      	cmp	r0, #0
 8007590:	dbf1      	blt.n	8007576 <__swhatbuf_r+0x12>
 8007592:	9a01      	ldr	r2, [sp, #4]
 8007594:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007598:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800759c:	425a      	negs	r2, r3
 800759e:	415a      	adcs	r2, r3
 80075a0:	602a      	str	r2, [r5, #0]
 80075a2:	e7ee      	b.n	8007582 <__swhatbuf_r+0x1e>
 80075a4:	2340      	movs	r3, #64	; 0x40
 80075a6:	2000      	movs	r0, #0
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	b016      	add	sp, #88	; 0x58
 80075ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080075b0 <__smakebuf_r>:
 80075b0:	898b      	ldrh	r3, [r1, #12]
 80075b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075b4:	079d      	lsls	r5, r3, #30
 80075b6:	4606      	mov	r6, r0
 80075b8:	460c      	mov	r4, r1
 80075ba:	d507      	bpl.n	80075cc <__smakebuf_r+0x1c>
 80075bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075c0:	6023      	str	r3, [r4, #0]
 80075c2:	6123      	str	r3, [r4, #16]
 80075c4:	2301      	movs	r3, #1
 80075c6:	6163      	str	r3, [r4, #20]
 80075c8:	b002      	add	sp, #8
 80075ca:	bd70      	pop	{r4, r5, r6, pc}
 80075cc:	ab01      	add	r3, sp, #4
 80075ce:	466a      	mov	r2, sp
 80075d0:	f7ff ffc8 	bl	8007564 <__swhatbuf_r>
 80075d4:	9900      	ldr	r1, [sp, #0]
 80075d6:	4605      	mov	r5, r0
 80075d8:	4630      	mov	r0, r6
 80075da:	f000 f89d 	bl	8007718 <_malloc_r>
 80075de:	b948      	cbnz	r0, 80075f4 <__smakebuf_r+0x44>
 80075e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075e4:	059a      	lsls	r2, r3, #22
 80075e6:	d4ef      	bmi.n	80075c8 <__smakebuf_r+0x18>
 80075e8:	f023 0303 	bic.w	r3, r3, #3
 80075ec:	f043 0302 	orr.w	r3, r3, #2
 80075f0:	81a3      	strh	r3, [r4, #12]
 80075f2:	e7e3      	b.n	80075bc <__smakebuf_r+0xc>
 80075f4:	4b0d      	ldr	r3, [pc, #52]	; (800762c <__smakebuf_r+0x7c>)
 80075f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80075f8:	89a3      	ldrh	r3, [r4, #12]
 80075fa:	6020      	str	r0, [r4, #0]
 80075fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007600:	81a3      	strh	r3, [r4, #12]
 8007602:	9b00      	ldr	r3, [sp, #0]
 8007604:	6163      	str	r3, [r4, #20]
 8007606:	9b01      	ldr	r3, [sp, #4]
 8007608:	6120      	str	r0, [r4, #16]
 800760a:	b15b      	cbz	r3, 8007624 <__smakebuf_r+0x74>
 800760c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007610:	4630      	mov	r0, r6
 8007612:	f001 f8a5 	bl	8008760 <_isatty_r>
 8007616:	b128      	cbz	r0, 8007624 <__smakebuf_r+0x74>
 8007618:	89a3      	ldrh	r3, [r4, #12]
 800761a:	f023 0303 	bic.w	r3, r3, #3
 800761e:	f043 0301 	orr.w	r3, r3, #1
 8007622:	81a3      	strh	r3, [r4, #12]
 8007624:	89a0      	ldrh	r0, [r4, #12]
 8007626:	4305      	orrs	r5, r0
 8007628:	81a5      	strh	r5, [r4, #12]
 800762a:	e7cd      	b.n	80075c8 <__smakebuf_r+0x18>
 800762c:	08007399 	.word	0x08007399

08007630 <malloc>:
 8007630:	4b02      	ldr	r3, [pc, #8]	; (800763c <malloc+0xc>)
 8007632:	4601      	mov	r1, r0
 8007634:	6818      	ldr	r0, [r3, #0]
 8007636:	f000 b86f 	b.w	8007718 <_malloc_r>
 800763a:	bf00      	nop
 800763c:	20000014 	.word	0x20000014

08007640 <_free_r>:
 8007640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007642:	2900      	cmp	r1, #0
 8007644:	d044      	beq.n	80076d0 <_free_r+0x90>
 8007646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800764a:	9001      	str	r0, [sp, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	f1a1 0404 	sub.w	r4, r1, #4
 8007652:	bfb8      	it	lt
 8007654:	18e4      	addlt	r4, r4, r3
 8007656:	f001 f893 	bl	8008780 <__malloc_lock>
 800765a:	4a1e      	ldr	r2, [pc, #120]	; (80076d4 <_free_r+0x94>)
 800765c:	9801      	ldr	r0, [sp, #4]
 800765e:	6813      	ldr	r3, [r2, #0]
 8007660:	b933      	cbnz	r3, 8007670 <_free_r+0x30>
 8007662:	6063      	str	r3, [r4, #4]
 8007664:	6014      	str	r4, [r2, #0]
 8007666:	b003      	add	sp, #12
 8007668:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800766c:	f001 b88e 	b.w	800878c <__malloc_unlock>
 8007670:	42a3      	cmp	r3, r4
 8007672:	d908      	bls.n	8007686 <_free_r+0x46>
 8007674:	6825      	ldr	r5, [r4, #0]
 8007676:	1961      	adds	r1, r4, r5
 8007678:	428b      	cmp	r3, r1
 800767a:	bf01      	itttt	eq
 800767c:	6819      	ldreq	r1, [r3, #0]
 800767e:	685b      	ldreq	r3, [r3, #4]
 8007680:	1949      	addeq	r1, r1, r5
 8007682:	6021      	streq	r1, [r4, #0]
 8007684:	e7ed      	b.n	8007662 <_free_r+0x22>
 8007686:	461a      	mov	r2, r3
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	b10b      	cbz	r3, 8007690 <_free_r+0x50>
 800768c:	42a3      	cmp	r3, r4
 800768e:	d9fa      	bls.n	8007686 <_free_r+0x46>
 8007690:	6811      	ldr	r1, [r2, #0]
 8007692:	1855      	adds	r5, r2, r1
 8007694:	42a5      	cmp	r5, r4
 8007696:	d10b      	bne.n	80076b0 <_free_r+0x70>
 8007698:	6824      	ldr	r4, [r4, #0]
 800769a:	4421      	add	r1, r4
 800769c:	1854      	adds	r4, r2, r1
 800769e:	42a3      	cmp	r3, r4
 80076a0:	6011      	str	r1, [r2, #0]
 80076a2:	d1e0      	bne.n	8007666 <_free_r+0x26>
 80076a4:	681c      	ldr	r4, [r3, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	6053      	str	r3, [r2, #4]
 80076aa:	4421      	add	r1, r4
 80076ac:	6011      	str	r1, [r2, #0]
 80076ae:	e7da      	b.n	8007666 <_free_r+0x26>
 80076b0:	d902      	bls.n	80076b8 <_free_r+0x78>
 80076b2:	230c      	movs	r3, #12
 80076b4:	6003      	str	r3, [r0, #0]
 80076b6:	e7d6      	b.n	8007666 <_free_r+0x26>
 80076b8:	6825      	ldr	r5, [r4, #0]
 80076ba:	1961      	adds	r1, r4, r5
 80076bc:	428b      	cmp	r3, r1
 80076be:	bf04      	itt	eq
 80076c0:	6819      	ldreq	r1, [r3, #0]
 80076c2:	685b      	ldreq	r3, [r3, #4]
 80076c4:	6063      	str	r3, [r4, #4]
 80076c6:	bf04      	itt	eq
 80076c8:	1949      	addeq	r1, r1, r5
 80076ca:	6021      	streq	r1, [r4, #0]
 80076cc:	6054      	str	r4, [r2, #4]
 80076ce:	e7ca      	b.n	8007666 <_free_r+0x26>
 80076d0:	b003      	add	sp, #12
 80076d2:	bd30      	pop	{r4, r5, pc}
 80076d4:	200057a0 	.word	0x200057a0

080076d8 <sbrk_aligned>:
 80076d8:	b570      	push	{r4, r5, r6, lr}
 80076da:	4e0e      	ldr	r6, [pc, #56]	; (8007714 <sbrk_aligned+0x3c>)
 80076dc:	460c      	mov	r4, r1
 80076de:	6831      	ldr	r1, [r6, #0]
 80076e0:	4605      	mov	r5, r0
 80076e2:	b911      	cbnz	r1, 80076ea <sbrk_aligned+0x12>
 80076e4:	f000 feb0 	bl	8008448 <_sbrk_r>
 80076e8:	6030      	str	r0, [r6, #0]
 80076ea:	4621      	mov	r1, r4
 80076ec:	4628      	mov	r0, r5
 80076ee:	f000 feab 	bl	8008448 <_sbrk_r>
 80076f2:	1c43      	adds	r3, r0, #1
 80076f4:	d00a      	beq.n	800770c <sbrk_aligned+0x34>
 80076f6:	1cc4      	adds	r4, r0, #3
 80076f8:	f024 0403 	bic.w	r4, r4, #3
 80076fc:	42a0      	cmp	r0, r4
 80076fe:	d007      	beq.n	8007710 <sbrk_aligned+0x38>
 8007700:	1a21      	subs	r1, r4, r0
 8007702:	4628      	mov	r0, r5
 8007704:	f000 fea0 	bl	8008448 <_sbrk_r>
 8007708:	3001      	adds	r0, #1
 800770a:	d101      	bne.n	8007710 <sbrk_aligned+0x38>
 800770c:	f04f 34ff 	mov.w	r4, #4294967295
 8007710:	4620      	mov	r0, r4
 8007712:	bd70      	pop	{r4, r5, r6, pc}
 8007714:	200057a4 	.word	0x200057a4

08007718 <_malloc_r>:
 8007718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800771c:	1ccd      	adds	r5, r1, #3
 800771e:	f025 0503 	bic.w	r5, r5, #3
 8007722:	3508      	adds	r5, #8
 8007724:	2d0c      	cmp	r5, #12
 8007726:	bf38      	it	cc
 8007728:	250c      	movcc	r5, #12
 800772a:	2d00      	cmp	r5, #0
 800772c:	4607      	mov	r7, r0
 800772e:	db01      	blt.n	8007734 <_malloc_r+0x1c>
 8007730:	42a9      	cmp	r1, r5
 8007732:	d905      	bls.n	8007740 <_malloc_r+0x28>
 8007734:	230c      	movs	r3, #12
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	2600      	movs	r6, #0
 800773a:	4630      	mov	r0, r6
 800773c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007740:	4e2e      	ldr	r6, [pc, #184]	; (80077fc <_malloc_r+0xe4>)
 8007742:	f001 f81d 	bl	8008780 <__malloc_lock>
 8007746:	6833      	ldr	r3, [r6, #0]
 8007748:	461c      	mov	r4, r3
 800774a:	bb34      	cbnz	r4, 800779a <_malloc_r+0x82>
 800774c:	4629      	mov	r1, r5
 800774e:	4638      	mov	r0, r7
 8007750:	f7ff ffc2 	bl	80076d8 <sbrk_aligned>
 8007754:	1c43      	adds	r3, r0, #1
 8007756:	4604      	mov	r4, r0
 8007758:	d14d      	bne.n	80077f6 <_malloc_r+0xde>
 800775a:	6834      	ldr	r4, [r6, #0]
 800775c:	4626      	mov	r6, r4
 800775e:	2e00      	cmp	r6, #0
 8007760:	d140      	bne.n	80077e4 <_malloc_r+0xcc>
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	4631      	mov	r1, r6
 8007766:	4638      	mov	r0, r7
 8007768:	eb04 0803 	add.w	r8, r4, r3
 800776c:	f000 fe6c 	bl	8008448 <_sbrk_r>
 8007770:	4580      	cmp	r8, r0
 8007772:	d13a      	bne.n	80077ea <_malloc_r+0xd2>
 8007774:	6821      	ldr	r1, [r4, #0]
 8007776:	3503      	adds	r5, #3
 8007778:	1a6d      	subs	r5, r5, r1
 800777a:	f025 0503 	bic.w	r5, r5, #3
 800777e:	3508      	adds	r5, #8
 8007780:	2d0c      	cmp	r5, #12
 8007782:	bf38      	it	cc
 8007784:	250c      	movcc	r5, #12
 8007786:	4629      	mov	r1, r5
 8007788:	4638      	mov	r0, r7
 800778a:	f7ff ffa5 	bl	80076d8 <sbrk_aligned>
 800778e:	3001      	adds	r0, #1
 8007790:	d02b      	beq.n	80077ea <_malloc_r+0xd2>
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	442b      	add	r3, r5
 8007796:	6023      	str	r3, [r4, #0]
 8007798:	e00e      	b.n	80077b8 <_malloc_r+0xa0>
 800779a:	6822      	ldr	r2, [r4, #0]
 800779c:	1b52      	subs	r2, r2, r5
 800779e:	d41e      	bmi.n	80077de <_malloc_r+0xc6>
 80077a0:	2a0b      	cmp	r2, #11
 80077a2:	d916      	bls.n	80077d2 <_malloc_r+0xba>
 80077a4:	1961      	adds	r1, r4, r5
 80077a6:	42a3      	cmp	r3, r4
 80077a8:	6025      	str	r5, [r4, #0]
 80077aa:	bf18      	it	ne
 80077ac:	6059      	strne	r1, [r3, #4]
 80077ae:	6863      	ldr	r3, [r4, #4]
 80077b0:	bf08      	it	eq
 80077b2:	6031      	streq	r1, [r6, #0]
 80077b4:	5162      	str	r2, [r4, r5]
 80077b6:	604b      	str	r3, [r1, #4]
 80077b8:	4638      	mov	r0, r7
 80077ba:	f104 060b 	add.w	r6, r4, #11
 80077be:	f000 ffe5 	bl	800878c <__malloc_unlock>
 80077c2:	f026 0607 	bic.w	r6, r6, #7
 80077c6:	1d23      	adds	r3, r4, #4
 80077c8:	1af2      	subs	r2, r6, r3
 80077ca:	d0b6      	beq.n	800773a <_malloc_r+0x22>
 80077cc:	1b9b      	subs	r3, r3, r6
 80077ce:	50a3      	str	r3, [r4, r2]
 80077d0:	e7b3      	b.n	800773a <_malloc_r+0x22>
 80077d2:	6862      	ldr	r2, [r4, #4]
 80077d4:	42a3      	cmp	r3, r4
 80077d6:	bf0c      	ite	eq
 80077d8:	6032      	streq	r2, [r6, #0]
 80077da:	605a      	strne	r2, [r3, #4]
 80077dc:	e7ec      	b.n	80077b8 <_malloc_r+0xa0>
 80077de:	4623      	mov	r3, r4
 80077e0:	6864      	ldr	r4, [r4, #4]
 80077e2:	e7b2      	b.n	800774a <_malloc_r+0x32>
 80077e4:	4634      	mov	r4, r6
 80077e6:	6876      	ldr	r6, [r6, #4]
 80077e8:	e7b9      	b.n	800775e <_malloc_r+0x46>
 80077ea:	230c      	movs	r3, #12
 80077ec:	603b      	str	r3, [r7, #0]
 80077ee:	4638      	mov	r0, r7
 80077f0:	f000 ffcc 	bl	800878c <__malloc_unlock>
 80077f4:	e7a1      	b.n	800773a <_malloc_r+0x22>
 80077f6:	6025      	str	r5, [r4, #0]
 80077f8:	e7de      	b.n	80077b8 <_malloc_r+0xa0>
 80077fa:	bf00      	nop
 80077fc:	200057a0 	.word	0x200057a0

08007800 <_sungetc_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	1c4b      	adds	r3, r1, #1
 8007804:	4614      	mov	r4, r2
 8007806:	d103      	bne.n	8007810 <_sungetc_r+0x10>
 8007808:	f04f 35ff 	mov.w	r5, #4294967295
 800780c:	4628      	mov	r0, r5
 800780e:	bd38      	pop	{r3, r4, r5, pc}
 8007810:	8993      	ldrh	r3, [r2, #12]
 8007812:	f023 0320 	bic.w	r3, r3, #32
 8007816:	8193      	strh	r3, [r2, #12]
 8007818:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800781a:	6852      	ldr	r2, [r2, #4]
 800781c:	b2cd      	uxtb	r5, r1
 800781e:	b18b      	cbz	r3, 8007844 <_sungetc_r+0x44>
 8007820:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007822:	4293      	cmp	r3, r2
 8007824:	dd08      	ble.n	8007838 <_sungetc_r+0x38>
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	1e5a      	subs	r2, r3, #1
 800782a:	6022      	str	r2, [r4, #0]
 800782c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007830:	6863      	ldr	r3, [r4, #4]
 8007832:	3301      	adds	r3, #1
 8007834:	6063      	str	r3, [r4, #4]
 8007836:	e7e9      	b.n	800780c <_sungetc_r+0xc>
 8007838:	4621      	mov	r1, r4
 800783a:	f000 ff45 	bl	80086c8 <__submore>
 800783e:	2800      	cmp	r0, #0
 8007840:	d0f1      	beq.n	8007826 <_sungetc_r+0x26>
 8007842:	e7e1      	b.n	8007808 <_sungetc_r+0x8>
 8007844:	6921      	ldr	r1, [r4, #16]
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	b151      	cbz	r1, 8007860 <_sungetc_r+0x60>
 800784a:	4299      	cmp	r1, r3
 800784c:	d208      	bcs.n	8007860 <_sungetc_r+0x60>
 800784e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007852:	42a9      	cmp	r1, r5
 8007854:	d104      	bne.n	8007860 <_sungetc_r+0x60>
 8007856:	3b01      	subs	r3, #1
 8007858:	3201      	adds	r2, #1
 800785a:	6023      	str	r3, [r4, #0]
 800785c:	6062      	str	r2, [r4, #4]
 800785e:	e7d5      	b.n	800780c <_sungetc_r+0xc>
 8007860:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007868:	6363      	str	r3, [r4, #52]	; 0x34
 800786a:	2303      	movs	r3, #3
 800786c:	63a3      	str	r3, [r4, #56]	; 0x38
 800786e:	4623      	mov	r3, r4
 8007870:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007874:	6023      	str	r3, [r4, #0]
 8007876:	2301      	movs	r3, #1
 8007878:	e7dc      	b.n	8007834 <_sungetc_r+0x34>

0800787a <__ssrefill_r>:
 800787a:	b510      	push	{r4, lr}
 800787c:	460c      	mov	r4, r1
 800787e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007880:	b169      	cbz	r1, 800789e <__ssrefill_r+0x24>
 8007882:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007886:	4299      	cmp	r1, r3
 8007888:	d001      	beq.n	800788e <__ssrefill_r+0x14>
 800788a:	f7ff fed9 	bl	8007640 <_free_r>
 800788e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007890:	6063      	str	r3, [r4, #4]
 8007892:	2000      	movs	r0, #0
 8007894:	6360      	str	r0, [r4, #52]	; 0x34
 8007896:	b113      	cbz	r3, 800789e <__ssrefill_r+0x24>
 8007898:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800789a:	6023      	str	r3, [r4, #0]
 800789c:	bd10      	pop	{r4, pc}
 800789e:	6923      	ldr	r3, [r4, #16]
 80078a0:	6023      	str	r3, [r4, #0]
 80078a2:	2300      	movs	r3, #0
 80078a4:	6063      	str	r3, [r4, #4]
 80078a6:	89a3      	ldrh	r3, [r4, #12]
 80078a8:	f043 0320 	orr.w	r3, r3, #32
 80078ac:	81a3      	strh	r3, [r4, #12]
 80078ae:	f04f 30ff 	mov.w	r0, #4294967295
 80078b2:	e7f3      	b.n	800789c <__ssrefill_r+0x22>

080078b4 <__ssvfiscanf_r>:
 80078b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b8:	460c      	mov	r4, r1
 80078ba:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80078be:	2100      	movs	r1, #0
 80078c0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80078c4:	49a6      	ldr	r1, [pc, #664]	; (8007b60 <__ssvfiscanf_r+0x2ac>)
 80078c6:	91a0      	str	r1, [sp, #640]	; 0x280
 80078c8:	f10d 0804 	add.w	r8, sp, #4
 80078cc:	49a5      	ldr	r1, [pc, #660]	; (8007b64 <__ssvfiscanf_r+0x2b0>)
 80078ce:	4fa6      	ldr	r7, [pc, #664]	; (8007b68 <__ssvfiscanf_r+0x2b4>)
 80078d0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007b6c <__ssvfiscanf_r+0x2b8>
 80078d4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80078d8:	4606      	mov	r6, r0
 80078da:	91a1      	str	r1, [sp, #644]	; 0x284
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	7813      	ldrb	r3, [r2, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f000 815a 	beq.w	8007b9a <__ssvfiscanf_r+0x2e6>
 80078e6:	5dd9      	ldrb	r1, [r3, r7]
 80078e8:	f011 0108 	ands.w	r1, r1, #8
 80078ec:	f102 0501 	add.w	r5, r2, #1
 80078f0:	d019      	beq.n	8007926 <__ssvfiscanf_r+0x72>
 80078f2:	6863      	ldr	r3, [r4, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	dd0f      	ble.n	8007918 <__ssvfiscanf_r+0x64>
 80078f8:	6823      	ldr	r3, [r4, #0]
 80078fa:	781a      	ldrb	r2, [r3, #0]
 80078fc:	5cba      	ldrb	r2, [r7, r2]
 80078fe:	0712      	lsls	r2, r2, #28
 8007900:	d401      	bmi.n	8007906 <__ssvfiscanf_r+0x52>
 8007902:	462a      	mov	r2, r5
 8007904:	e7eb      	b.n	80078de <__ssvfiscanf_r+0x2a>
 8007906:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007908:	3201      	adds	r2, #1
 800790a:	9245      	str	r2, [sp, #276]	; 0x114
 800790c:	6862      	ldr	r2, [r4, #4]
 800790e:	3301      	adds	r3, #1
 8007910:	3a01      	subs	r2, #1
 8007912:	6062      	str	r2, [r4, #4]
 8007914:	6023      	str	r3, [r4, #0]
 8007916:	e7ec      	b.n	80078f2 <__ssvfiscanf_r+0x3e>
 8007918:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800791a:	4621      	mov	r1, r4
 800791c:	4630      	mov	r0, r6
 800791e:	4798      	blx	r3
 8007920:	2800      	cmp	r0, #0
 8007922:	d0e9      	beq.n	80078f8 <__ssvfiscanf_r+0x44>
 8007924:	e7ed      	b.n	8007902 <__ssvfiscanf_r+0x4e>
 8007926:	2b25      	cmp	r3, #37	; 0x25
 8007928:	d012      	beq.n	8007950 <__ssvfiscanf_r+0x9c>
 800792a:	469a      	mov	sl, r3
 800792c:	6863      	ldr	r3, [r4, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	f340 8091 	ble.w	8007a56 <__ssvfiscanf_r+0x1a2>
 8007934:	6822      	ldr	r2, [r4, #0]
 8007936:	7813      	ldrb	r3, [r2, #0]
 8007938:	4553      	cmp	r3, sl
 800793a:	f040 812e 	bne.w	8007b9a <__ssvfiscanf_r+0x2e6>
 800793e:	6863      	ldr	r3, [r4, #4]
 8007940:	3b01      	subs	r3, #1
 8007942:	6063      	str	r3, [r4, #4]
 8007944:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007946:	3201      	adds	r2, #1
 8007948:	3301      	adds	r3, #1
 800794a:	6022      	str	r2, [r4, #0]
 800794c:	9345      	str	r3, [sp, #276]	; 0x114
 800794e:	e7d8      	b.n	8007902 <__ssvfiscanf_r+0x4e>
 8007950:	9141      	str	r1, [sp, #260]	; 0x104
 8007952:	9143      	str	r1, [sp, #268]	; 0x10c
 8007954:	7853      	ldrb	r3, [r2, #1]
 8007956:	2b2a      	cmp	r3, #42	; 0x2a
 8007958:	bf02      	ittt	eq
 800795a:	2310      	moveq	r3, #16
 800795c:	1c95      	addeq	r5, r2, #2
 800795e:	9341      	streq	r3, [sp, #260]	; 0x104
 8007960:	220a      	movs	r2, #10
 8007962:	46aa      	mov	sl, r5
 8007964:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007968:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800796c:	2b09      	cmp	r3, #9
 800796e:	d91d      	bls.n	80079ac <__ssvfiscanf_r+0xf8>
 8007970:	487e      	ldr	r0, [pc, #504]	; (8007b6c <__ssvfiscanf_r+0x2b8>)
 8007972:	2203      	movs	r2, #3
 8007974:	f7f8 fc44 	bl	8000200 <memchr>
 8007978:	b140      	cbz	r0, 800798c <__ssvfiscanf_r+0xd8>
 800797a:	2301      	movs	r3, #1
 800797c:	eba0 0009 	sub.w	r0, r0, r9
 8007980:	fa03 f000 	lsl.w	r0, r3, r0
 8007984:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007986:	4318      	orrs	r0, r3
 8007988:	9041      	str	r0, [sp, #260]	; 0x104
 800798a:	4655      	mov	r5, sl
 800798c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007990:	2b78      	cmp	r3, #120	; 0x78
 8007992:	d806      	bhi.n	80079a2 <__ssvfiscanf_r+0xee>
 8007994:	2b57      	cmp	r3, #87	; 0x57
 8007996:	d810      	bhi.n	80079ba <__ssvfiscanf_r+0x106>
 8007998:	2b25      	cmp	r3, #37	; 0x25
 800799a:	d0c6      	beq.n	800792a <__ssvfiscanf_r+0x76>
 800799c:	d856      	bhi.n	8007a4c <__ssvfiscanf_r+0x198>
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d064      	beq.n	8007a6c <__ssvfiscanf_r+0x1b8>
 80079a2:	2303      	movs	r3, #3
 80079a4:	9347      	str	r3, [sp, #284]	; 0x11c
 80079a6:	230a      	movs	r3, #10
 80079a8:	9342      	str	r3, [sp, #264]	; 0x108
 80079aa:	e071      	b.n	8007a90 <__ssvfiscanf_r+0x1dc>
 80079ac:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80079ae:	fb02 1103 	mla	r1, r2, r3, r1
 80079b2:	3930      	subs	r1, #48	; 0x30
 80079b4:	9143      	str	r1, [sp, #268]	; 0x10c
 80079b6:	4655      	mov	r5, sl
 80079b8:	e7d3      	b.n	8007962 <__ssvfiscanf_r+0xae>
 80079ba:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80079be:	2a20      	cmp	r2, #32
 80079c0:	d8ef      	bhi.n	80079a2 <__ssvfiscanf_r+0xee>
 80079c2:	a101      	add	r1, pc, #4	; (adr r1, 80079c8 <__ssvfiscanf_r+0x114>)
 80079c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80079c8:	08007a7b 	.word	0x08007a7b
 80079cc:	080079a3 	.word	0x080079a3
 80079d0:	080079a3 	.word	0x080079a3
 80079d4:	08007ad9 	.word	0x08007ad9
 80079d8:	080079a3 	.word	0x080079a3
 80079dc:	080079a3 	.word	0x080079a3
 80079e0:	080079a3 	.word	0x080079a3
 80079e4:	080079a3 	.word	0x080079a3
 80079e8:	080079a3 	.word	0x080079a3
 80079ec:	080079a3 	.word	0x080079a3
 80079f0:	080079a3 	.word	0x080079a3
 80079f4:	08007aef 	.word	0x08007aef
 80079f8:	08007ac5 	.word	0x08007ac5
 80079fc:	08007a53 	.word	0x08007a53
 8007a00:	08007a53 	.word	0x08007a53
 8007a04:	08007a53 	.word	0x08007a53
 8007a08:	080079a3 	.word	0x080079a3
 8007a0c:	08007ac9 	.word	0x08007ac9
 8007a10:	080079a3 	.word	0x080079a3
 8007a14:	080079a3 	.word	0x080079a3
 8007a18:	080079a3 	.word	0x080079a3
 8007a1c:	080079a3 	.word	0x080079a3
 8007a20:	08007aff 	.word	0x08007aff
 8007a24:	08007ad1 	.word	0x08007ad1
 8007a28:	08007a73 	.word	0x08007a73
 8007a2c:	080079a3 	.word	0x080079a3
 8007a30:	080079a3 	.word	0x080079a3
 8007a34:	08007afb 	.word	0x08007afb
 8007a38:	080079a3 	.word	0x080079a3
 8007a3c:	08007ac5 	.word	0x08007ac5
 8007a40:	080079a3 	.word	0x080079a3
 8007a44:	080079a3 	.word	0x080079a3
 8007a48:	08007a7b 	.word	0x08007a7b
 8007a4c:	3b45      	subs	r3, #69	; 0x45
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d8a7      	bhi.n	80079a2 <__ssvfiscanf_r+0xee>
 8007a52:	2305      	movs	r3, #5
 8007a54:	e01b      	b.n	8007a8e <__ssvfiscanf_r+0x1da>
 8007a56:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007a58:	4621      	mov	r1, r4
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	4798      	blx	r3
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	f43f af68 	beq.w	8007934 <__ssvfiscanf_r+0x80>
 8007a64:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007a66:	2800      	cmp	r0, #0
 8007a68:	f040 808d 	bne.w	8007b86 <__ssvfiscanf_r+0x2d2>
 8007a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a70:	e08f      	b.n	8007b92 <__ssvfiscanf_r+0x2de>
 8007a72:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007a74:	f042 0220 	orr.w	r2, r2, #32
 8007a78:	9241      	str	r2, [sp, #260]	; 0x104
 8007a7a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a80:	9241      	str	r2, [sp, #260]	; 0x104
 8007a82:	2210      	movs	r2, #16
 8007a84:	2b6f      	cmp	r3, #111	; 0x6f
 8007a86:	9242      	str	r2, [sp, #264]	; 0x108
 8007a88:	bf34      	ite	cc
 8007a8a:	2303      	movcc	r3, #3
 8007a8c:	2304      	movcs	r3, #4
 8007a8e:	9347      	str	r3, [sp, #284]	; 0x11c
 8007a90:	6863      	ldr	r3, [r4, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	dd42      	ble.n	8007b1c <__ssvfiscanf_r+0x268>
 8007a96:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007a98:	0659      	lsls	r1, r3, #25
 8007a9a:	d404      	bmi.n	8007aa6 <__ssvfiscanf_r+0x1f2>
 8007a9c:	6823      	ldr	r3, [r4, #0]
 8007a9e:	781a      	ldrb	r2, [r3, #0]
 8007aa0:	5cba      	ldrb	r2, [r7, r2]
 8007aa2:	0712      	lsls	r2, r2, #28
 8007aa4:	d441      	bmi.n	8007b2a <__ssvfiscanf_r+0x276>
 8007aa6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	dc50      	bgt.n	8007b4e <__ssvfiscanf_r+0x29a>
 8007aac:	466b      	mov	r3, sp
 8007aae:	4622      	mov	r2, r4
 8007ab0:	a941      	add	r1, sp, #260	; 0x104
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	f000 fb64 	bl	8008180 <_scanf_chars>
 8007ab8:	2801      	cmp	r0, #1
 8007aba:	d06e      	beq.n	8007b9a <__ssvfiscanf_r+0x2e6>
 8007abc:	2802      	cmp	r0, #2
 8007abe:	f47f af20 	bne.w	8007902 <__ssvfiscanf_r+0x4e>
 8007ac2:	e7cf      	b.n	8007a64 <__ssvfiscanf_r+0x1b0>
 8007ac4:	220a      	movs	r2, #10
 8007ac6:	e7dd      	b.n	8007a84 <__ssvfiscanf_r+0x1d0>
 8007ac8:	2300      	movs	r3, #0
 8007aca:	9342      	str	r3, [sp, #264]	; 0x108
 8007acc:	2303      	movs	r3, #3
 8007ace:	e7de      	b.n	8007a8e <__ssvfiscanf_r+0x1da>
 8007ad0:	2308      	movs	r3, #8
 8007ad2:	9342      	str	r3, [sp, #264]	; 0x108
 8007ad4:	2304      	movs	r3, #4
 8007ad6:	e7da      	b.n	8007a8e <__ssvfiscanf_r+0x1da>
 8007ad8:	4629      	mov	r1, r5
 8007ada:	4640      	mov	r0, r8
 8007adc:	f000 fcc4 	bl	8008468 <__sccl>
 8007ae0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ae6:	9341      	str	r3, [sp, #260]	; 0x104
 8007ae8:	4605      	mov	r5, r0
 8007aea:	2301      	movs	r3, #1
 8007aec:	e7cf      	b.n	8007a8e <__ssvfiscanf_r+0x1da>
 8007aee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af4:	9341      	str	r3, [sp, #260]	; 0x104
 8007af6:	2300      	movs	r3, #0
 8007af8:	e7c9      	b.n	8007a8e <__ssvfiscanf_r+0x1da>
 8007afa:	2302      	movs	r3, #2
 8007afc:	e7c7      	b.n	8007a8e <__ssvfiscanf_r+0x1da>
 8007afe:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007b00:	06c3      	lsls	r3, r0, #27
 8007b02:	f53f aefe 	bmi.w	8007902 <__ssvfiscanf_r+0x4e>
 8007b06:	9b00      	ldr	r3, [sp, #0]
 8007b08:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007b0a:	1d19      	adds	r1, r3, #4
 8007b0c:	9100      	str	r1, [sp, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f010 0f01 	tst.w	r0, #1
 8007b14:	bf14      	ite	ne
 8007b16:	801a      	strhne	r2, [r3, #0]
 8007b18:	601a      	streq	r2, [r3, #0]
 8007b1a:	e6f2      	b.n	8007902 <__ssvfiscanf_r+0x4e>
 8007b1c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007b1e:	4621      	mov	r1, r4
 8007b20:	4630      	mov	r0, r6
 8007b22:	4798      	blx	r3
 8007b24:	2800      	cmp	r0, #0
 8007b26:	d0b6      	beq.n	8007a96 <__ssvfiscanf_r+0x1e2>
 8007b28:	e79c      	b.n	8007a64 <__ssvfiscanf_r+0x1b0>
 8007b2a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007b2c:	3201      	adds	r2, #1
 8007b2e:	9245      	str	r2, [sp, #276]	; 0x114
 8007b30:	6862      	ldr	r2, [r4, #4]
 8007b32:	3a01      	subs	r2, #1
 8007b34:	2a00      	cmp	r2, #0
 8007b36:	6062      	str	r2, [r4, #4]
 8007b38:	dd02      	ble.n	8007b40 <__ssvfiscanf_r+0x28c>
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	e7ad      	b.n	8007a9c <__ssvfiscanf_r+0x1e8>
 8007b40:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007b42:	4621      	mov	r1, r4
 8007b44:	4630      	mov	r0, r6
 8007b46:	4798      	blx	r3
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	d0a7      	beq.n	8007a9c <__ssvfiscanf_r+0x1e8>
 8007b4c:	e78a      	b.n	8007a64 <__ssvfiscanf_r+0x1b0>
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	dc0e      	bgt.n	8007b70 <__ssvfiscanf_r+0x2bc>
 8007b52:	466b      	mov	r3, sp
 8007b54:	4622      	mov	r2, r4
 8007b56:	a941      	add	r1, sp, #260	; 0x104
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f000 fb6b 	bl	8008234 <_scanf_i>
 8007b5e:	e7ab      	b.n	8007ab8 <__ssvfiscanf_r+0x204>
 8007b60:	08007801 	.word	0x08007801
 8007b64:	0800787b 	.word	0x0800787b
 8007b68:	08008a6b 	.word	0x08008a6b
 8007b6c:	08008a1c 	.word	0x08008a1c
 8007b70:	4b0b      	ldr	r3, [pc, #44]	; (8007ba0 <__ssvfiscanf_r+0x2ec>)
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f43f aec5 	beq.w	8007902 <__ssvfiscanf_r+0x4e>
 8007b78:	466b      	mov	r3, sp
 8007b7a:	4622      	mov	r2, r4
 8007b7c:	a941      	add	r1, sp, #260	; 0x104
 8007b7e:	4630      	mov	r0, r6
 8007b80:	f3af 8000 	nop.w
 8007b84:	e798      	b.n	8007ab8 <__ssvfiscanf_r+0x204>
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007b8c:	bf18      	it	ne
 8007b8e:	f04f 30ff 	movne.w	r0, #4294967295
 8007b92:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b9a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007b9c:	e7f9      	b.n	8007b92 <__ssvfiscanf_r+0x2de>
 8007b9e:	bf00      	nop
 8007ba0:	00000000 	.word	0x00000000

08007ba4 <__sfputc_r>:
 8007ba4:	6893      	ldr	r3, [r2, #8]
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	b410      	push	{r4}
 8007bac:	6093      	str	r3, [r2, #8]
 8007bae:	da08      	bge.n	8007bc2 <__sfputc_r+0x1e>
 8007bb0:	6994      	ldr	r4, [r2, #24]
 8007bb2:	42a3      	cmp	r3, r4
 8007bb4:	db01      	blt.n	8007bba <__sfputc_r+0x16>
 8007bb6:	290a      	cmp	r1, #10
 8007bb8:	d103      	bne.n	8007bc2 <__sfputc_r+0x1e>
 8007bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bbe:	f7ff ba23 	b.w	8007008 <__swbuf_r>
 8007bc2:	6813      	ldr	r3, [r2, #0]
 8007bc4:	1c58      	adds	r0, r3, #1
 8007bc6:	6010      	str	r0, [r2, #0]
 8007bc8:	7019      	strb	r1, [r3, #0]
 8007bca:	4608      	mov	r0, r1
 8007bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <__sfputs_r>:
 8007bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd4:	4606      	mov	r6, r0
 8007bd6:	460f      	mov	r7, r1
 8007bd8:	4614      	mov	r4, r2
 8007bda:	18d5      	adds	r5, r2, r3
 8007bdc:	42ac      	cmp	r4, r5
 8007bde:	d101      	bne.n	8007be4 <__sfputs_r+0x12>
 8007be0:	2000      	movs	r0, #0
 8007be2:	e007      	b.n	8007bf4 <__sfputs_r+0x22>
 8007be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007be8:	463a      	mov	r2, r7
 8007bea:	4630      	mov	r0, r6
 8007bec:	f7ff ffda 	bl	8007ba4 <__sfputc_r>
 8007bf0:	1c43      	adds	r3, r0, #1
 8007bf2:	d1f3      	bne.n	8007bdc <__sfputs_r+0xa>
 8007bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007bf8 <_vfiprintf_r>:
 8007bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bfc:	460d      	mov	r5, r1
 8007bfe:	b09d      	sub	sp, #116	; 0x74
 8007c00:	4614      	mov	r4, r2
 8007c02:	4698      	mov	r8, r3
 8007c04:	4606      	mov	r6, r0
 8007c06:	b118      	cbz	r0, 8007c10 <_vfiprintf_r+0x18>
 8007c08:	6983      	ldr	r3, [r0, #24]
 8007c0a:	b90b      	cbnz	r3, 8007c10 <_vfiprintf_r+0x18>
 8007c0c:	f7ff fbf8 	bl	8007400 <__sinit>
 8007c10:	4b89      	ldr	r3, [pc, #548]	; (8007e38 <_vfiprintf_r+0x240>)
 8007c12:	429d      	cmp	r5, r3
 8007c14:	d11b      	bne.n	8007c4e <_vfiprintf_r+0x56>
 8007c16:	6875      	ldr	r5, [r6, #4]
 8007c18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c1a:	07d9      	lsls	r1, r3, #31
 8007c1c:	d405      	bmi.n	8007c2a <_vfiprintf_r+0x32>
 8007c1e:	89ab      	ldrh	r3, [r5, #12]
 8007c20:	059a      	lsls	r2, r3, #22
 8007c22:	d402      	bmi.n	8007c2a <_vfiprintf_r+0x32>
 8007c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c26:	f7ff fc89 	bl	800753c <__retarget_lock_acquire_recursive>
 8007c2a:	89ab      	ldrh	r3, [r5, #12]
 8007c2c:	071b      	lsls	r3, r3, #28
 8007c2e:	d501      	bpl.n	8007c34 <_vfiprintf_r+0x3c>
 8007c30:	692b      	ldr	r3, [r5, #16]
 8007c32:	b9eb      	cbnz	r3, 8007c70 <_vfiprintf_r+0x78>
 8007c34:	4629      	mov	r1, r5
 8007c36:	4630      	mov	r0, r6
 8007c38:	f7ff fa4a 	bl	80070d0 <__swsetup_r>
 8007c3c:	b1c0      	cbz	r0, 8007c70 <_vfiprintf_r+0x78>
 8007c3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c40:	07dc      	lsls	r4, r3, #31
 8007c42:	d50e      	bpl.n	8007c62 <_vfiprintf_r+0x6a>
 8007c44:	f04f 30ff 	mov.w	r0, #4294967295
 8007c48:	b01d      	add	sp, #116	; 0x74
 8007c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c4e:	4b7b      	ldr	r3, [pc, #492]	; (8007e3c <_vfiprintf_r+0x244>)
 8007c50:	429d      	cmp	r5, r3
 8007c52:	d101      	bne.n	8007c58 <_vfiprintf_r+0x60>
 8007c54:	68b5      	ldr	r5, [r6, #8]
 8007c56:	e7df      	b.n	8007c18 <_vfiprintf_r+0x20>
 8007c58:	4b79      	ldr	r3, [pc, #484]	; (8007e40 <_vfiprintf_r+0x248>)
 8007c5a:	429d      	cmp	r5, r3
 8007c5c:	bf08      	it	eq
 8007c5e:	68f5      	ldreq	r5, [r6, #12]
 8007c60:	e7da      	b.n	8007c18 <_vfiprintf_r+0x20>
 8007c62:	89ab      	ldrh	r3, [r5, #12]
 8007c64:	0598      	lsls	r0, r3, #22
 8007c66:	d4ed      	bmi.n	8007c44 <_vfiprintf_r+0x4c>
 8007c68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c6a:	f7ff fc68 	bl	800753e <__retarget_lock_release_recursive>
 8007c6e:	e7e9      	b.n	8007c44 <_vfiprintf_r+0x4c>
 8007c70:	2300      	movs	r3, #0
 8007c72:	9309      	str	r3, [sp, #36]	; 0x24
 8007c74:	2320      	movs	r3, #32
 8007c76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c7e:	2330      	movs	r3, #48	; 0x30
 8007c80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007e44 <_vfiprintf_r+0x24c>
 8007c84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c88:	f04f 0901 	mov.w	r9, #1
 8007c8c:	4623      	mov	r3, r4
 8007c8e:	469a      	mov	sl, r3
 8007c90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c94:	b10a      	cbz	r2, 8007c9a <_vfiprintf_r+0xa2>
 8007c96:	2a25      	cmp	r2, #37	; 0x25
 8007c98:	d1f9      	bne.n	8007c8e <_vfiprintf_r+0x96>
 8007c9a:	ebba 0b04 	subs.w	fp, sl, r4
 8007c9e:	d00b      	beq.n	8007cb8 <_vfiprintf_r+0xc0>
 8007ca0:	465b      	mov	r3, fp
 8007ca2:	4622      	mov	r2, r4
 8007ca4:	4629      	mov	r1, r5
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f7ff ff93 	bl	8007bd2 <__sfputs_r>
 8007cac:	3001      	adds	r0, #1
 8007cae:	f000 80aa 	beq.w	8007e06 <_vfiprintf_r+0x20e>
 8007cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cb4:	445a      	add	r2, fp
 8007cb6:	9209      	str	r2, [sp, #36]	; 0x24
 8007cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 80a2 	beq.w	8007e06 <_vfiprintf_r+0x20e>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ccc:	f10a 0a01 	add.w	sl, sl, #1
 8007cd0:	9304      	str	r3, [sp, #16]
 8007cd2:	9307      	str	r3, [sp, #28]
 8007cd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cd8:	931a      	str	r3, [sp, #104]	; 0x68
 8007cda:	4654      	mov	r4, sl
 8007cdc:	2205      	movs	r2, #5
 8007cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ce2:	4858      	ldr	r0, [pc, #352]	; (8007e44 <_vfiprintf_r+0x24c>)
 8007ce4:	f7f8 fa8c 	bl	8000200 <memchr>
 8007ce8:	9a04      	ldr	r2, [sp, #16]
 8007cea:	b9d8      	cbnz	r0, 8007d24 <_vfiprintf_r+0x12c>
 8007cec:	06d1      	lsls	r1, r2, #27
 8007cee:	bf44      	itt	mi
 8007cf0:	2320      	movmi	r3, #32
 8007cf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cf6:	0713      	lsls	r3, r2, #28
 8007cf8:	bf44      	itt	mi
 8007cfa:	232b      	movmi	r3, #43	; 0x2b
 8007cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d00:	f89a 3000 	ldrb.w	r3, [sl]
 8007d04:	2b2a      	cmp	r3, #42	; 0x2a
 8007d06:	d015      	beq.n	8007d34 <_vfiprintf_r+0x13c>
 8007d08:	9a07      	ldr	r2, [sp, #28]
 8007d0a:	4654      	mov	r4, sl
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	f04f 0c0a 	mov.w	ip, #10
 8007d12:	4621      	mov	r1, r4
 8007d14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d18:	3b30      	subs	r3, #48	; 0x30
 8007d1a:	2b09      	cmp	r3, #9
 8007d1c:	d94e      	bls.n	8007dbc <_vfiprintf_r+0x1c4>
 8007d1e:	b1b0      	cbz	r0, 8007d4e <_vfiprintf_r+0x156>
 8007d20:	9207      	str	r2, [sp, #28]
 8007d22:	e014      	b.n	8007d4e <_vfiprintf_r+0x156>
 8007d24:	eba0 0308 	sub.w	r3, r0, r8
 8007d28:	fa09 f303 	lsl.w	r3, r9, r3
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	9304      	str	r3, [sp, #16]
 8007d30:	46a2      	mov	sl, r4
 8007d32:	e7d2      	b.n	8007cda <_vfiprintf_r+0xe2>
 8007d34:	9b03      	ldr	r3, [sp, #12]
 8007d36:	1d19      	adds	r1, r3, #4
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	9103      	str	r1, [sp, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	bfbb      	ittet	lt
 8007d40:	425b      	neglt	r3, r3
 8007d42:	f042 0202 	orrlt.w	r2, r2, #2
 8007d46:	9307      	strge	r3, [sp, #28]
 8007d48:	9307      	strlt	r3, [sp, #28]
 8007d4a:	bfb8      	it	lt
 8007d4c:	9204      	strlt	r2, [sp, #16]
 8007d4e:	7823      	ldrb	r3, [r4, #0]
 8007d50:	2b2e      	cmp	r3, #46	; 0x2e
 8007d52:	d10c      	bne.n	8007d6e <_vfiprintf_r+0x176>
 8007d54:	7863      	ldrb	r3, [r4, #1]
 8007d56:	2b2a      	cmp	r3, #42	; 0x2a
 8007d58:	d135      	bne.n	8007dc6 <_vfiprintf_r+0x1ce>
 8007d5a:	9b03      	ldr	r3, [sp, #12]
 8007d5c:	1d1a      	adds	r2, r3, #4
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	9203      	str	r2, [sp, #12]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	bfb8      	it	lt
 8007d66:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d6a:	3402      	adds	r4, #2
 8007d6c:	9305      	str	r3, [sp, #20]
 8007d6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007e54 <_vfiprintf_r+0x25c>
 8007d72:	7821      	ldrb	r1, [r4, #0]
 8007d74:	2203      	movs	r2, #3
 8007d76:	4650      	mov	r0, sl
 8007d78:	f7f8 fa42 	bl	8000200 <memchr>
 8007d7c:	b140      	cbz	r0, 8007d90 <_vfiprintf_r+0x198>
 8007d7e:	2340      	movs	r3, #64	; 0x40
 8007d80:	eba0 000a 	sub.w	r0, r0, sl
 8007d84:	fa03 f000 	lsl.w	r0, r3, r0
 8007d88:	9b04      	ldr	r3, [sp, #16]
 8007d8a:	4303      	orrs	r3, r0
 8007d8c:	3401      	adds	r4, #1
 8007d8e:	9304      	str	r3, [sp, #16]
 8007d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d94:	482c      	ldr	r0, [pc, #176]	; (8007e48 <_vfiprintf_r+0x250>)
 8007d96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d9a:	2206      	movs	r2, #6
 8007d9c:	f7f8 fa30 	bl	8000200 <memchr>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d03f      	beq.n	8007e24 <_vfiprintf_r+0x22c>
 8007da4:	4b29      	ldr	r3, [pc, #164]	; (8007e4c <_vfiprintf_r+0x254>)
 8007da6:	bb1b      	cbnz	r3, 8007df0 <_vfiprintf_r+0x1f8>
 8007da8:	9b03      	ldr	r3, [sp, #12]
 8007daa:	3307      	adds	r3, #7
 8007dac:	f023 0307 	bic.w	r3, r3, #7
 8007db0:	3308      	adds	r3, #8
 8007db2:	9303      	str	r3, [sp, #12]
 8007db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db6:	443b      	add	r3, r7
 8007db8:	9309      	str	r3, [sp, #36]	; 0x24
 8007dba:	e767      	b.n	8007c8c <_vfiprintf_r+0x94>
 8007dbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dc0:	460c      	mov	r4, r1
 8007dc2:	2001      	movs	r0, #1
 8007dc4:	e7a5      	b.n	8007d12 <_vfiprintf_r+0x11a>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	3401      	adds	r4, #1
 8007dca:	9305      	str	r3, [sp, #20]
 8007dcc:	4619      	mov	r1, r3
 8007dce:	f04f 0c0a 	mov.w	ip, #10
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dd8:	3a30      	subs	r2, #48	; 0x30
 8007dda:	2a09      	cmp	r2, #9
 8007ddc:	d903      	bls.n	8007de6 <_vfiprintf_r+0x1ee>
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0c5      	beq.n	8007d6e <_vfiprintf_r+0x176>
 8007de2:	9105      	str	r1, [sp, #20]
 8007de4:	e7c3      	b.n	8007d6e <_vfiprintf_r+0x176>
 8007de6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dea:	4604      	mov	r4, r0
 8007dec:	2301      	movs	r3, #1
 8007dee:	e7f0      	b.n	8007dd2 <_vfiprintf_r+0x1da>
 8007df0:	ab03      	add	r3, sp, #12
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	462a      	mov	r2, r5
 8007df6:	4b16      	ldr	r3, [pc, #88]	; (8007e50 <_vfiprintf_r+0x258>)
 8007df8:	a904      	add	r1, sp, #16
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f3af 8000 	nop.w
 8007e00:	4607      	mov	r7, r0
 8007e02:	1c78      	adds	r0, r7, #1
 8007e04:	d1d6      	bne.n	8007db4 <_vfiprintf_r+0x1bc>
 8007e06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e08:	07d9      	lsls	r1, r3, #31
 8007e0a:	d405      	bmi.n	8007e18 <_vfiprintf_r+0x220>
 8007e0c:	89ab      	ldrh	r3, [r5, #12]
 8007e0e:	059a      	lsls	r2, r3, #22
 8007e10:	d402      	bmi.n	8007e18 <_vfiprintf_r+0x220>
 8007e12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e14:	f7ff fb93 	bl	800753e <__retarget_lock_release_recursive>
 8007e18:	89ab      	ldrh	r3, [r5, #12]
 8007e1a:	065b      	lsls	r3, r3, #25
 8007e1c:	f53f af12 	bmi.w	8007c44 <_vfiprintf_r+0x4c>
 8007e20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e22:	e711      	b.n	8007c48 <_vfiprintf_r+0x50>
 8007e24:	ab03      	add	r3, sp, #12
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	462a      	mov	r2, r5
 8007e2a:	4b09      	ldr	r3, [pc, #36]	; (8007e50 <_vfiprintf_r+0x258>)
 8007e2c:	a904      	add	r1, sp, #16
 8007e2e:	4630      	mov	r0, r6
 8007e30:	f000 f880 	bl	8007f34 <_printf_i>
 8007e34:	e7e4      	b.n	8007e00 <_vfiprintf_r+0x208>
 8007e36:	bf00      	nop
 8007e38:	080089dc 	.word	0x080089dc
 8007e3c:	080089fc 	.word	0x080089fc
 8007e40:	080089bc 	.word	0x080089bc
 8007e44:	08008a20 	.word	0x08008a20
 8007e48:	08008a26 	.word	0x08008a26
 8007e4c:	00000000 	.word	0x00000000
 8007e50:	08007bd3 	.word	0x08007bd3
 8007e54:	08008a1c 	.word	0x08008a1c

08007e58 <_printf_common>:
 8007e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e5c:	4616      	mov	r6, r2
 8007e5e:	4699      	mov	r9, r3
 8007e60:	688a      	ldr	r2, [r1, #8]
 8007e62:	690b      	ldr	r3, [r1, #16]
 8007e64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	bfb8      	it	lt
 8007e6c:	4613      	movlt	r3, r2
 8007e6e:	6033      	str	r3, [r6, #0]
 8007e70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e74:	4607      	mov	r7, r0
 8007e76:	460c      	mov	r4, r1
 8007e78:	b10a      	cbz	r2, 8007e7e <_printf_common+0x26>
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	6033      	str	r3, [r6, #0]
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	0699      	lsls	r1, r3, #26
 8007e82:	bf42      	ittt	mi
 8007e84:	6833      	ldrmi	r3, [r6, #0]
 8007e86:	3302      	addmi	r3, #2
 8007e88:	6033      	strmi	r3, [r6, #0]
 8007e8a:	6825      	ldr	r5, [r4, #0]
 8007e8c:	f015 0506 	ands.w	r5, r5, #6
 8007e90:	d106      	bne.n	8007ea0 <_printf_common+0x48>
 8007e92:	f104 0a19 	add.w	sl, r4, #25
 8007e96:	68e3      	ldr	r3, [r4, #12]
 8007e98:	6832      	ldr	r2, [r6, #0]
 8007e9a:	1a9b      	subs	r3, r3, r2
 8007e9c:	42ab      	cmp	r3, r5
 8007e9e:	dc26      	bgt.n	8007eee <_printf_common+0x96>
 8007ea0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ea4:	1e13      	subs	r3, r2, #0
 8007ea6:	6822      	ldr	r2, [r4, #0]
 8007ea8:	bf18      	it	ne
 8007eaa:	2301      	movne	r3, #1
 8007eac:	0692      	lsls	r2, r2, #26
 8007eae:	d42b      	bmi.n	8007f08 <_printf_common+0xb0>
 8007eb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007eb4:	4649      	mov	r1, r9
 8007eb6:	4638      	mov	r0, r7
 8007eb8:	47c0      	blx	r8
 8007eba:	3001      	adds	r0, #1
 8007ebc:	d01e      	beq.n	8007efc <_printf_common+0xa4>
 8007ebe:	6823      	ldr	r3, [r4, #0]
 8007ec0:	68e5      	ldr	r5, [r4, #12]
 8007ec2:	6832      	ldr	r2, [r6, #0]
 8007ec4:	f003 0306 	and.w	r3, r3, #6
 8007ec8:	2b04      	cmp	r3, #4
 8007eca:	bf08      	it	eq
 8007ecc:	1aad      	subeq	r5, r5, r2
 8007ece:	68a3      	ldr	r3, [r4, #8]
 8007ed0:	6922      	ldr	r2, [r4, #16]
 8007ed2:	bf0c      	ite	eq
 8007ed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ed8:	2500      	movne	r5, #0
 8007eda:	4293      	cmp	r3, r2
 8007edc:	bfc4      	itt	gt
 8007ede:	1a9b      	subgt	r3, r3, r2
 8007ee0:	18ed      	addgt	r5, r5, r3
 8007ee2:	2600      	movs	r6, #0
 8007ee4:	341a      	adds	r4, #26
 8007ee6:	42b5      	cmp	r5, r6
 8007ee8:	d11a      	bne.n	8007f20 <_printf_common+0xc8>
 8007eea:	2000      	movs	r0, #0
 8007eec:	e008      	b.n	8007f00 <_printf_common+0xa8>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	4652      	mov	r2, sl
 8007ef2:	4649      	mov	r1, r9
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	47c0      	blx	r8
 8007ef8:	3001      	adds	r0, #1
 8007efa:	d103      	bne.n	8007f04 <_printf_common+0xac>
 8007efc:	f04f 30ff 	mov.w	r0, #4294967295
 8007f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f04:	3501      	adds	r5, #1
 8007f06:	e7c6      	b.n	8007e96 <_printf_common+0x3e>
 8007f08:	18e1      	adds	r1, r4, r3
 8007f0a:	1c5a      	adds	r2, r3, #1
 8007f0c:	2030      	movs	r0, #48	; 0x30
 8007f0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f12:	4422      	add	r2, r4
 8007f14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f1c:	3302      	adds	r3, #2
 8007f1e:	e7c7      	b.n	8007eb0 <_printf_common+0x58>
 8007f20:	2301      	movs	r3, #1
 8007f22:	4622      	mov	r2, r4
 8007f24:	4649      	mov	r1, r9
 8007f26:	4638      	mov	r0, r7
 8007f28:	47c0      	blx	r8
 8007f2a:	3001      	adds	r0, #1
 8007f2c:	d0e6      	beq.n	8007efc <_printf_common+0xa4>
 8007f2e:	3601      	adds	r6, #1
 8007f30:	e7d9      	b.n	8007ee6 <_printf_common+0x8e>
	...

08007f34 <_printf_i>:
 8007f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f38:	7e0f      	ldrb	r7, [r1, #24]
 8007f3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f3c:	2f78      	cmp	r7, #120	; 0x78
 8007f3e:	4691      	mov	r9, r2
 8007f40:	4680      	mov	r8, r0
 8007f42:	460c      	mov	r4, r1
 8007f44:	469a      	mov	sl, r3
 8007f46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f4a:	d807      	bhi.n	8007f5c <_printf_i+0x28>
 8007f4c:	2f62      	cmp	r7, #98	; 0x62
 8007f4e:	d80a      	bhi.n	8007f66 <_printf_i+0x32>
 8007f50:	2f00      	cmp	r7, #0
 8007f52:	f000 80d8 	beq.w	8008106 <_printf_i+0x1d2>
 8007f56:	2f58      	cmp	r7, #88	; 0x58
 8007f58:	f000 80a3 	beq.w	80080a2 <_printf_i+0x16e>
 8007f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f64:	e03a      	b.n	8007fdc <_printf_i+0xa8>
 8007f66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f6a:	2b15      	cmp	r3, #21
 8007f6c:	d8f6      	bhi.n	8007f5c <_printf_i+0x28>
 8007f6e:	a101      	add	r1, pc, #4	; (adr r1, 8007f74 <_printf_i+0x40>)
 8007f70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f74:	08007fcd 	.word	0x08007fcd
 8007f78:	08007fe1 	.word	0x08007fe1
 8007f7c:	08007f5d 	.word	0x08007f5d
 8007f80:	08007f5d 	.word	0x08007f5d
 8007f84:	08007f5d 	.word	0x08007f5d
 8007f88:	08007f5d 	.word	0x08007f5d
 8007f8c:	08007fe1 	.word	0x08007fe1
 8007f90:	08007f5d 	.word	0x08007f5d
 8007f94:	08007f5d 	.word	0x08007f5d
 8007f98:	08007f5d 	.word	0x08007f5d
 8007f9c:	08007f5d 	.word	0x08007f5d
 8007fa0:	080080ed 	.word	0x080080ed
 8007fa4:	08008011 	.word	0x08008011
 8007fa8:	080080cf 	.word	0x080080cf
 8007fac:	08007f5d 	.word	0x08007f5d
 8007fb0:	08007f5d 	.word	0x08007f5d
 8007fb4:	0800810f 	.word	0x0800810f
 8007fb8:	08007f5d 	.word	0x08007f5d
 8007fbc:	08008011 	.word	0x08008011
 8007fc0:	08007f5d 	.word	0x08007f5d
 8007fc4:	08007f5d 	.word	0x08007f5d
 8007fc8:	080080d7 	.word	0x080080d7
 8007fcc:	682b      	ldr	r3, [r5, #0]
 8007fce:	1d1a      	adds	r2, r3, #4
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	602a      	str	r2, [r5, #0]
 8007fd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e0a3      	b.n	8008128 <_printf_i+0x1f4>
 8007fe0:	6820      	ldr	r0, [r4, #0]
 8007fe2:	6829      	ldr	r1, [r5, #0]
 8007fe4:	0606      	lsls	r6, r0, #24
 8007fe6:	f101 0304 	add.w	r3, r1, #4
 8007fea:	d50a      	bpl.n	8008002 <_printf_i+0xce>
 8007fec:	680e      	ldr	r6, [r1, #0]
 8007fee:	602b      	str	r3, [r5, #0]
 8007ff0:	2e00      	cmp	r6, #0
 8007ff2:	da03      	bge.n	8007ffc <_printf_i+0xc8>
 8007ff4:	232d      	movs	r3, #45	; 0x2d
 8007ff6:	4276      	negs	r6, r6
 8007ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ffc:	485e      	ldr	r0, [pc, #376]	; (8008178 <_printf_i+0x244>)
 8007ffe:	230a      	movs	r3, #10
 8008000:	e019      	b.n	8008036 <_printf_i+0x102>
 8008002:	680e      	ldr	r6, [r1, #0]
 8008004:	602b      	str	r3, [r5, #0]
 8008006:	f010 0f40 	tst.w	r0, #64	; 0x40
 800800a:	bf18      	it	ne
 800800c:	b236      	sxthne	r6, r6
 800800e:	e7ef      	b.n	8007ff0 <_printf_i+0xbc>
 8008010:	682b      	ldr	r3, [r5, #0]
 8008012:	6820      	ldr	r0, [r4, #0]
 8008014:	1d19      	adds	r1, r3, #4
 8008016:	6029      	str	r1, [r5, #0]
 8008018:	0601      	lsls	r1, r0, #24
 800801a:	d501      	bpl.n	8008020 <_printf_i+0xec>
 800801c:	681e      	ldr	r6, [r3, #0]
 800801e:	e002      	b.n	8008026 <_printf_i+0xf2>
 8008020:	0646      	lsls	r6, r0, #25
 8008022:	d5fb      	bpl.n	800801c <_printf_i+0xe8>
 8008024:	881e      	ldrh	r6, [r3, #0]
 8008026:	4854      	ldr	r0, [pc, #336]	; (8008178 <_printf_i+0x244>)
 8008028:	2f6f      	cmp	r7, #111	; 0x6f
 800802a:	bf0c      	ite	eq
 800802c:	2308      	moveq	r3, #8
 800802e:	230a      	movne	r3, #10
 8008030:	2100      	movs	r1, #0
 8008032:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008036:	6865      	ldr	r5, [r4, #4]
 8008038:	60a5      	str	r5, [r4, #8]
 800803a:	2d00      	cmp	r5, #0
 800803c:	bfa2      	ittt	ge
 800803e:	6821      	ldrge	r1, [r4, #0]
 8008040:	f021 0104 	bicge.w	r1, r1, #4
 8008044:	6021      	strge	r1, [r4, #0]
 8008046:	b90e      	cbnz	r6, 800804c <_printf_i+0x118>
 8008048:	2d00      	cmp	r5, #0
 800804a:	d04d      	beq.n	80080e8 <_printf_i+0x1b4>
 800804c:	4615      	mov	r5, r2
 800804e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008052:	fb03 6711 	mls	r7, r3, r1, r6
 8008056:	5dc7      	ldrb	r7, [r0, r7]
 8008058:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800805c:	4637      	mov	r7, r6
 800805e:	42bb      	cmp	r3, r7
 8008060:	460e      	mov	r6, r1
 8008062:	d9f4      	bls.n	800804e <_printf_i+0x11a>
 8008064:	2b08      	cmp	r3, #8
 8008066:	d10b      	bne.n	8008080 <_printf_i+0x14c>
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	07de      	lsls	r6, r3, #31
 800806c:	d508      	bpl.n	8008080 <_printf_i+0x14c>
 800806e:	6923      	ldr	r3, [r4, #16]
 8008070:	6861      	ldr	r1, [r4, #4]
 8008072:	4299      	cmp	r1, r3
 8008074:	bfde      	ittt	le
 8008076:	2330      	movle	r3, #48	; 0x30
 8008078:	f805 3c01 	strble.w	r3, [r5, #-1]
 800807c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008080:	1b52      	subs	r2, r2, r5
 8008082:	6122      	str	r2, [r4, #16]
 8008084:	f8cd a000 	str.w	sl, [sp]
 8008088:	464b      	mov	r3, r9
 800808a:	aa03      	add	r2, sp, #12
 800808c:	4621      	mov	r1, r4
 800808e:	4640      	mov	r0, r8
 8008090:	f7ff fee2 	bl	8007e58 <_printf_common>
 8008094:	3001      	adds	r0, #1
 8008096:	d14c      	bne.n	8008132 <_printf_i+0x1fe>
 8008098:	f04f 30ff 	mov.w	r0, #4294967295
 800809c:	b004      	add	sp, #16
 800809e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a2:	4835      	ldr	r0, [pc, #212]	; (8008178 <_printf_i+0x244>)
 80080a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80080a8:	6829      	ldr	r1, [r5, #0]
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80080b0:	6029      	str	r1, [r5, #0]
 80080b2:	061d      	lsls	r5, r3, #24
 80080b4:	d514      	bpl.n	80080e0 <_printf_i+0x1ac>
 80080b6:	07df      	lsls	r7, r3, #31
 80080b8:	bf44      	itt	mi
 80080ba:	f043 0320 	orrmi.w	r3, r3, #32
 80080be:	6023      	strmi	r3, [r4, #0]
 80080c0:	b91e      	cbnz	r6, 80080ca <_printf_i+0x196>
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	f023 0320 	bic.w	r3, r3, #32
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	2310      	movs	r3, #16
 80080cc:	e7b0      	b.n	8008030 <_printf_i+0xfc>
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	f043 0320 	orr.w	r3, r3, #32
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	2378      	movs	r3, #120	; 0x78
 80080d8:	4828      	ldr	r0, [pc, #160]	; (800817c <_printf_i+0x248>)
 80080da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080de:	e7e3      	b.n	80080a8 <_printf_i+0x174>
 80080e0:	0659      	lsls	r1, r3, #25
 80080e2:	bf48      	it	mi
 80080e4:	b2b6      	uxthmi	r6, r6
 80080e6:	e7e6      	b.n	80080b6 <_printf_i+0x182>
 80080e8:	4615      	mov	r5, r2
 80080ea:	e7bb      	b.n	8008064 <_printf_i+0x130>
 80080ec:	682b      	ldr	r3, [r5, #0]
 80080ee:	6826      	ldr	r6, [r4, #0]
 80080f0:	6961      	ldr	r1, [r4, #20]
 80080f2:	1d18      	adds	r0, r3, #4
 80080f4:	6028      	str	r0, [r5, #0]
 80080f6:	0635      	lsls	r5, r6, #24
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	d501      	bpl.n	8008100 <_printf_i+0x1cc>
 80080fc:	6019      	str	r1, [r3, #0]
 80080fe:	e002      	b.n	8008106 <_printf_i+0x1d2>
 8008100:	0670      	lsls	r0, r6, #25
 8008102:	d5fb      	bpl.n	80080fc <_printf_i+0x1c8>
 8008104:	8019      	strh	r1, [r3, #0]
 8008106:	2300      	movs	r3, #0
 8008108:	6123      	str	r3, [r4, #16]
 800810a:	4615      	mov	r5, r2
 800810c:	e7ba      	b.n	8008084 <_printf_i+0x150>
 800810e:	682b      	ldr	r3, [r5, #0]
 8008110:	1d1a      	adds	r2, r3, #4
 8008112:	602a      	str	r2, [r5, #0]
 8008114:	681d      	ldr	r5, [r3, #0]
 8008116:	6862      	ldr	r2, [r4, #4]
 8008118:	2100      	movs	r1, #0
 800811a:	4628      	mov	r0, r5
 800811c:	f7f8 f870 	bl	8000200 <memchr>
 8008120:	b108      	cbz	r0, 8008126 <_printf_i+0x1f2>
 8008122:	1b40      	subs	r0, r0, r5
 8008124:	6060      	str	r0, [r4, #4]
 8008126:	6863      	ldr	r3, [r4, #4]
 8008128:	6123      	str	r3, [r4, #16]
 800812a:	2300      	movs	r3, #0
 800812c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008130:	e7a8      	b.n	8008084 <_printf_i+0x150>
 8008132:	6923      	ldr	r3, [r4, #16]
 8008134:	462a      	mov	r2, r5
 8008136:	4649      	mov	r1, r9
 8008138:	4640      	mov	r0, r8
 800813a:	47d0      	blx	sl
 800813c:	3001      	adds	r0, #1
 800813e:	d0ab      	beq.n	8008098 <_printf_i+0x164>
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	079b      	lsls	r3, r3, #30
 8008144:	d413      	bmi.n	800816e <_printf_i+0x23a>
 8008146:	68e0      	ldr	r0, [r4, #12]
 8008148:	9b03      	ldr	r3, [sp, #12]
 800814a:	4298      	cmp	r0, r3
 800814c:	bfb8      	it	lt
 800814e:	4618      	movlt	r0, r3
 8008150:	e7a4      	b.n	800809c <_printf_i+0x168>
 8008152:	2301      	movs	r3, #1
 8008154:	4632      	mov	r2, r6
 8008156:	4649      	mov	r1, r9
 8008158:	4640      	mov	r0, r8
 800815a:	47d0      	blx	sl
 800815c:	3001      	adds	r0, #1
 800815e:	d09b      	beq.n	8008098 <_printf_i+0x164>
 8008160:	3501      	adds	r5, #1
 8008162:	68e3      	ldr	r3, [r4, #12]
 8008164:	9903      	ldr	r1, [sp, #12]
 8008166:	1a5b      	subs	r3, r3, r1
 8008168:	42ab      	cmp	r3, r5
 800816a:	dcf2      	bgt.n	8008152 <_printf_i+0x21e>
 800816c:	e7eb      	b.n	8008146 <_printf_i+0x212>
 800816e:	2500      	movs	r5, #0
 8008170:	f104 0619 	add.w	r6, r4, #25
 8008174:	e7f5      	b.n	8008162 <_printf_i+0x22e>
 8008176:	bf00      	nop
 8008178:	08008a2d 	.word	0x08008a2d
 800817c:	08008a3e 	.word	0x08008a3e

08008180 <_scanf_chars>:
 8008180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008184:	4615      	mov	r5, r2
 8008186:	688a      	ldr	r2, [r1, #8]
 8008188:	4680      	mov	r8, r0
 800818a:	460c      	mov	r4, r1
 800818c:	b932      	cbnz	r2, 800819c <_scanf_chars+0x1c>
 800818e:	698a      	ldr	r2, [r1, #24]
 8008190:	2a00      	cmp	r2, #0
 8008192:	bf0c      	ite	eq
 8008194:	2201      	moveq	r2, #1
 8008196:	f04f 32ff 	movne.w	r2, #4294967295
 800819a:	608a      	str	r2, [r1, #8]
 800819c:	6822      	ldr	r2, [r4, #0]
 800819e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008230 <_scanf_chars+0xb0>
 80081a2:	06d1      	lsls	r1, r2, #27
 80081a4:	bf5f      	itttt	pl
 80081a6:	681a      	ldrpl	r2, [r3, #0]
 80081a8:	1d11      	addpl	r1, r2, #4
 80081aa:	6019      	strpl	r1, [r3, #0]
 80081ac:	6816      	ldrpl	r6, [r2, #0]
 80081ae:	2700      	movs	r7, #0
 80081b0:	69a0      	ldr	r0, [r4, #24]
 80081b2:	b188      	cbz	r0, 80081d8 <_scanf_chars+0x58>
 80081b4:	2801      	cmp	r0, #1
 80081b6:	d107      	bne.n	80081c8 <_scanf_chars+0x48>
 80081b8:	682a      	ldr	r2, [r5, #0]
 80081ba:	7811      	ldrb	r1, [r2, #0]
 80081bc:	6962      	ldr	r2, [r4, #20]
 80081be:	5c52      	ldrb	r2, [r2, r1]
 80081c0:	b952      	cbnz	r2, 80081d8 <_scanf_chars+0x58>
 80081c2:	2f00      	cmp	r7, #0
 80081c4:	d031      	beq.n	800822a <_scanf_chars+0xaa>
 80081c6:	e022      	b.n	800820e <_scanf_chars+0x8e>
 80081c8:	2802      	cmp	r0, #2
 80081ca:	d120      	bne.n	800820e <_scanf_chars+0x8e>
 80081cc:	682b      	ldr	r3, [r5, #0]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80081d4:	071b      	lsls	r3, r3, #28
 80081d6:	d41a      	bmi.n	800820e <_scanf_chars+0x8e>
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	06da      	lsls	r2, r3, #27
 80081dc:	bf5e      	ittt	pl
 80081de:	682b      	ldrpl	r3, [r5, #0]
 80081e0:	781b      	ldrbpl	r3, [r3, #0]
 80081e2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80081e6:	682a      	ldr	r2, [r5, #0]
 80081e8:	686b      	ldr	r3, [r5, #4]
 80081ea:	3201      	adds	r2, #1
 80081ec:	602a      	str	r2, [r5, #0]
 80081ee:	68a2      	ldr	r2, [r4, #8]
 80081f0:	3b01      	subs	r3, #1
 80081f2:	3a01      	subs	r2, #1
 80081f4:	606b      	str	r3, [r5, #4]
 80081f6:	3701      	adds	r7, #1
 80081f8:	60a2      	str	r2, [r4, #8]
 80081fa:	b142      	cbz	r2, 800820e <_scanf_chars+0x8e>
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	dcd7      	bgt.n	80081b0 <_scanf_chars+0x30>
 8008200:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008204:	4629      	mov	r1, r5
 8008206:	4640      	mov	r0, r8
 8008208:	4798      	blx	r3
 800820a:	2800      	cmp	r0, #0
 800820c:	d0d0      	beq.n	80081b0 <_scanf_chars+0x30>
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	f013 0310 	ands.w	r3, r3, #16
 8008214:	d105      	bne.n	8008222 <_scanf_chars+0xa2>
 8008216:	68e2      	ldr	r2, [r4, #12]
 8008218:	3201      	adds	r2, #1
 800821a:	60e2      	str	r2, [r4, #12]
 800821c:	69a2      	ldr	r2, [r4, #24]
 800821e:	b102      	cbz	r2, 8008222 <_scanf_chars+0xa2>
 8008220:	7033      	strb	r3, [r6, #0]
 8008222:	6923      	ldr	r3, [r4, #16]
 8008224:	443b      	add	r3, r7
 8008226:	6123      	str	r3, [r4, #16]
 8008228:	2000      	movs	r0, #0
 800822a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800822e:	bf00      	nop
 8008230:	08008a6b 	.word	0x08008a6b

08008234 <_scanf_i>:
 8008234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008238:	4698      	mov	r8, r3
 800823a:	4b76      	ldr	r3, [pc, #472]	; (8008414 <_scanf_i+0x1e0>)
 800823c:	460c      	mov	r4, r1
 800823e:	4682      	mov	sl, r0
 8008240:	4616      	mov	r6, r2
 8008242:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008246:	b087      	sub	sp, #28
 8008248:	ab03      	add	r3, sp, #12
 800824a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800824e:	4b72      	ldr	r3, [pc, #456]	; (8008418 <_scanf_i+0x1e4>)
 8008250:	69a1      	ldr	r1, [r4, #24]
 8008252:	4a72      	ldr	r2, [pc, #456]	; (800841c <_scanf_i+0x1e8>)
 8008254:	2903      	cmp	r1, #3
 8008256:	bf18      	it	ne
 8008258:	461a      	movne	r2, r3
 800825a:	68a3      	ldr	r3, [r4, #8]
 800825c:	9201      	str	r2, [sp, #4]
 800825e:	1e5a      	subs	r2, r3, #1
 8008260:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008264:	bf88      	it	hi
 8008266:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800826a:	4627      	mov	r7, r4
 800826c:	bf82      	ittt	hi
 800826e:	eb03 0905 	addhi.w	r9, r3, r5
 8008272:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008276:	60a3      	strhi	r3, [r4, #8]
 8008278:	f857 3b1c 	ldr.w	r3, [r7], #28
 800827c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008280:	bf98      	it	ls
 8008282:	f04f 0900 	movls.w	r9, #0
 8008286:	6023      	str	r3, [r4, #0]
 8008288:	463d      	mov	r5, r7
 800828a:	f04f 0b00 	mov.w	fp, #0
 800828e:	6831      	ldr	r1, [r6, #0]
 8008290:	ab03      	add	r3, sp, #12
 8008292:	7809      	ldrb	r1, [r1, #0]
 8008294:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008298:	2202      	movs	r2, #2
 800829a:	f7f7 ffb1 	bl	8000200 <memchr>
 800829e:	b328      	cbz	r0, 80082ec <_scanf_i+0xb8>
 80082a0:	f1bb 0f01 	cmp.w	fp, #1
 80082a4:	d159      	bne.n	800835a <_scanf_i+0x126>
 80082a6:	6862      	ldr	r2, [r4, #4]
 80082a8:	b92a      	cbnz	r2, 80082b6 <_scanf_i+0x82>
 80082aa:	6822      	ldr	r2, [r4, #0]
 80082ac:	2308      	movs	r3, #8
 80082ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082b2:	6063      	str	r3, [r4, #4]
 80082b4:	6022      	str	r2, [r4, #0]
 80082b6:	6822      	ldr	r2, [r4, #0]
 80082b8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80082bc:	6022      	str	r2, [r4, #0]
 80082be:	68a2      	ldr	r2, [r4, #8]
 80082c0:	1e51      	subs	r1, r2, #1
 80082c2:	60a1      	str	r1, [r4, #8]
 80082c4:	b192      	cbz	r2, 80082ec <_scanf_i+0xb8>
 80082c6:	6832      	ldr	r2, [r6, #0]
 80082c8:	1c51      	adds	r1, r2, #1
 80082ca:	6031      	str	r1, [r6, #0]
 80082cc:	7812      	ldrb	r2, [r2, #0]
 80082ce:	f805 2b01 	strb.w	r2, [r5], #1
 80082d2:	6872      	ldr	r2, [r6, #4]
 80082d4:	3a01      	subs	r2, #1
 80082d6:	2a00      	cmp	r2, #0
 80082d8:	6072      	str	r2, [r6, #4]
 80082da:	dc07      	bgt.n	80082ec <_scanf_i+0xb8>
 80082dc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80082e0:	4631      	mov	r1, r6
 80082e2:	4650      	mov	r0, sl
 80082e4:	4790      	blx	r2
 80082e6:	2800      	cmp	r0, #0
 80082e8:	f040 8085 	bne.w	80083f6 <_scanf_i+0x1c2>
 80082ec:	f10b 0b01 	add.w	fp, fp, #1
 80082f0:	f1bb 0f03 	cmp.w	fp, #3
 80082f4:	d1cb      	bne.n	800828e <_scanf_i+0x5a>
 80082f6:	6863      	ldr	r3, [r4, #4]
 80082f8:	b90b      	cbnz	r3, 80082fe <_scanf_i+0xca>
 80082fa:	230a      	movs	r3, #10
 80082fc:	6063      	str	r3, [r4, #4]
 80082fe:	6863      	ldr	r3, [r4, #4]
 8008300:	4947      	ldr	r1, [pc, #284]	; (8008420 <_scanf_i+0x1ec>)
 8008302:	6960      	ldr	r0, [r4, #20]
 8008304:	1ac9      	subs	r1, r1, r3
 8008306:	f000 f8af 	bl	8008468 <__sccl>
 800830a:	f04f 0b00 	mov.w	fp, #0
 800830e:	68a3      	ldr	r3, [r4, #8]
 8008310:	6822      	ldr	r2, [r4, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d03d      	beq.n	8008392 <_scanf_i+0x15e>
 8008316:	6831      	ldr	r1, [r6, #0]
 8008318:	6960      	ldr	r0, [r4, #20]
 800831a:	f891 c000 	ldrb.w	ip, [r1]
 800831e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008322:	2800      	cmp	r0, #0
 8008324:	d035      	beq.n	8008392 <_scanf_i+0x15e>
 8008326:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800832a:	d124      	bne.n	8008376 <_scanf_i+0x142>
 800832c:	0510      	lsls	r0, r2, #20
 800832e:	d522      	bpl.n	8008376 <_scanf_i+0x142>
 8008330:	f10b 0b01 	add.w	fp, fp, #1
 8008334:	f1b9 0f00 	cmp.w	r9, #0
 8008338:	d003      	beq.n	8008342 <_scanf_i+0x10e>
 800833a:	3301      	adds	r3, #1
 800833c:	f109 39ff 	add.w	r9, r9, #4294967295
 8008340:	60a3      	str	r3, [r4, #8]
 8008342:	6873      	ldr	r3, [r6, #4]
 8008344:	3b01      	subs	r3, #1
 8008346:	2b00      	cmp	r3, #0
 8008348:	6073      	str	r3, [r6, #4]
 800834a:	dd1b      	ble.n	8008384 <_scanf_i+0x150>
 800834c:	6833      	ldr	r3, [r6, #0]
 800834e:	3301      	adds	r3, #1
 8008350:	6033      	str	r3, [r6, #0]
 8008352:	68a3      	ldr	r3, [r4, #8]
 8008354:	3b01      	subs	r3, #1
 8008356:	60a3      	str	r3, [r4, #8]
 8008358:	e7d9      	b.n	800830e <_scanf_i+0xda>
 800835a:	f1bb 0f02 	cmp.w	fp, #2
 800835e:	d1ae      	bne.n	80082be <_scanf_i+0x8a>
 8008360:	6822      	ldr	r2, [r4, #0]
 8008362:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008366:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800836a:	d1bf      	bne.n	80082ec <_scanf_i+0xb8>
 800836c:	2310      	movs	r3, #16
 800836e:	6063      	str	r3, [r4, #4]
 8008370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008374:	e7a2      	b.n	80082bc <_scanf_i+0x88>
 8008376:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800837a:	6022      	str	r2, [r4, #0]
 800837c:	780b      	ldrb	r3, [r1, #0]
 800837e:	f805 3b01 	strb.w	r3, [r5], #1
 8008382:	e7de      	b.n	8008342 <_scanf_i+0x10e>
 8008384:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008388:	4631      	mov	r1, r6
 800838a:	4650      	mov	r0, sl
 800838c:	4798      	blx	r3
 800838e:	2800      	cmp	r0, #0
 8008390:	d0df      	beq.n	8008352 <_scanf_i+0x11e>
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	05db      	lsls	r3, r3, #23
 8008396:	d50d      	bpl.n	80083b4 <_scanf_i+0x180>
 8008398:	42bd      	cmp	r5, r7
 800839a:	d909      	bls.n	80083b0 <_scanf_i+0x17c>
 800839c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80083a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083a4:	4632      	mov	r2, r6
 80083a6:	4650      	mov	r0, sl
 80083a8:	4798      	blx	r3
 80083aa:	f105 39ff 	add.w	r9, r5, #4294967295
 80083ae:	464d      	mov	r5, r9
 80083b0:	42bd      	cmp	r5, r7
 80083b2:	d02d      	beq.n	8008410 <_scanf_i+0x1dc>
 80083b4:	6822      	ldr	r2, [r4, #0]
 80083b6:	f012 0210 	ands.w	r2, r2, #16
 80083ba:	d113      	bne.n	80083e4 <_scanf_i+0x1b0>
 80083bc:	702a      	strb	r2, [r5, #0]
 80083be:	6863      	ldr	r3, [r4, #4]
 80083c0:	9e01      	ldr	r6, [sp, #4]
 80083c2:	4639      	mov	r1, r7
 80083c4:	4650      	mov	r0, sl
 80083c6:	47b0      	blx	r6
 80083c8:	6821      	ldr	r1, [r4, #0]
 80083ca:	f8d8 3000 	ldr.w	r3, [r8]
 80083ce:	f011 0f20 	tst.w	r1, #32
 80083d2:	d013      	beq.n	80083fc <_scanf_i+0x1c8>
 80083d4:	1d1a      	adds	r2, r3, #4
 80083d6:	f8c8 2000 	str.w	r2, [r8]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6018      	str	r0, [r3, #0]
 80083de:	68e3      	ldr	r3, [r4, #12]
 80083e0:	3301      	adds	r3, #1
 80083e2:	60e3      	str	r3, [r4, #12]
 80083e4:	1bed      	subs	r5, r5, r7
 80083e6:	44ab      	add	fp, r5
 80083e8:	6925      	ldr	r5, [r4, #16]
 80083ea:	445d      	add	r5, fp
 80083ec:	6125      	str	r5, [r4, #16]
 80083ee:	2000      	movs	r0, #0
 80083f0:	b007      	add	sp, #28
 80083f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f6:	f04f 0b00 	mov.w	fp, #0
 80083fa:	e7ca      	b.n	8008392 <_scanf_i+0x15e>
 80083fc:	1d1a      	adds	r2, r3, #4
 80083fe:	f8c8 2000 	str.w	r2, [r8]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f011 0f01 	tst.w	r1, #1
 8008408:	bf14      	ite	ne
 800840a:	8018      	strhne	r0, [r3, #0]
 800840c:	6018      	streq	r0, [r3, #0]
 800840e:	e7e6      	b.n	80083de <_scanf_i+0x1aa>
 8008410:	2001      	movs	r0, #1
 8008412:	e7ed      	b.n	80083f0 <_scanf_i+0x1bc>
 8008414:	0800898c 	.word	0x0800898c
 8008418:	080086c5 	.word	0x080086c5
 800841c:	080085dd 	.word	0x080085dd
 8008420:	08008a68 	.word	0x08008a68

08008424 <_read_r>:
 8008424:	b538      	push	{r3, r4, r5, lr}
 8008426:	4d07      	ldr	r5, [pc, #28]	; (8008444 <_read_r+0x20>)
 8008428:	4604      	mov	r4, r0
 800842a:	4608      	mov	r0, r1
 800842c:	4611      	mov	r1, r2
 800842e:	2200      	movs	r2, #0
 8008430:	602a      	str	r2, [r5, #0]
 8008432:	461a      	mov	r2, r3
 8008434:	f7f8 fc82 	bl	8000d3c <_read>
 8008438:	1c43      	adds	r3, r0, #1
 800843a:	d102      	bne.n	8008442 <_read_r+0x1e>
 800843c:	682b      	ldr	r3, [r5, #0]
 800843e:	b103      	cbz	r3, 8008442 <_read_r+0x1e>
 8008440:	6023      	str	r3, [r4, #0]
 8008442:	bd38      	pop	{r3, r4, r5, pc}
 8008444:	200057a8 	.word	0x200057a8

08008448 <_sbrk_r>:
 8008448:	b538      	push	{r3, r4, r5, lr}
 800844a:	4d06      	ldr	r5, [pc, #24]	; (8008464 <_sbrk_r+0x1c>)
 800844c:	2300      	movs	r3, #0
 800844e:	4604      	mov	r4, r0
 8008450:	4608      	mov	r0, r1
 8008452:	602b      	str	r3, [r5, #0]
 8008454:	f7f8 fce0 	bl	8000e18 <_sbrk>
 8008458:	1c43      	adds	r3, r0, #1
 800845a:	d102      	bne.n	8008462 <_sbrk_r+0x1a>
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	b103      	cbz	r3, 8008462 <_sbrk_r+0x1a>
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	bd38      	pop	{r3, r4, r5, pc}
 8008464:	200057a8 	.word	0x200057a8

08008468 <__sccl>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	780b      	ldrb	r3, [r1, #0]
 800846c:	4604      	mov	r4, r0
 800846e:	2b5e      	cmp	r3, #94	; 0x5e
 8008470:	bf0b      	itete	eq
 8008472:	784b      	ldrbeq	r3, [r1, #1]
 8008474:	1c48      	addne	r0, r1, #1
 8008476:	1c88      	addeq	r0, r1, #2
 8008478:	2200      	movne	r2, #0
 800847a:	bf08      	it	eq
 800847c:	2201      	moveq	r2, #1
 800847e:	1e61      	subs	r1, r4, #1
 8008480:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008484:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008488:	42a9      	cmp	r1, r5
 800848a:	d1fb      	bne.n	8008484 <__sccl+0x1c>
 800848c:	b90b      	cbnz	r3, 8008492 <__sccl+0x2a>
 800848e:	3801      	subs	r0, #1
 8008490:	bd70      	pop	{r4, r5, r6, pc}
 8008492:	f082 0201 	eor.w	r2, r2, #1
 8008496:	54e2      	strb	r2, [r4, r3]
 8008498:	4605      	mov	r5, r0
 800849a:	4628      	mov	r0, r5
 800849c:	f810 1b01 	ldrb.w	r1, [r0], #1
 80084a0:	292d      	cmp	r1, #45	; 0x2d
 80084a2:	d006      	beq.n	80084b2 <__sccl+0x4a>
 80084a4:	295d      	cmp	r1, #93	; 0x5d
 80084a6:	d0f3      	beq.n	8008490 <__sccl+0x28>
 80084a8:	b909      	cbnz	r1, 80084ae <__sccl+0x46>
 80084aa:	4628      	mov	r0, r5
 80084ac:	e7f0      	b.n	8008490 <__sccl+0x28>
 80084ae:	460b      	mov	r3, r1
 80084b0:	e7f1      	b.n	8008496 <__sccl+0x2e>
 80084b2:	786e      	ldrb	r6, [r5, #1]
 80084b4:	2e5d      	cmp	r6, #93	; 0x5d
 80084b6:	d0fa      	beq.n	80084ae <__sccl+0x46>
 80084b8:	42b3      	cmp	r3, r6
 80084ba:	dcf8      	bgt.n	80084ae <__sccl+0x46>
 80084bc:	3502      	adds	r5, #2
 80084be:	4619      	mov	r1, r3
 80084c0:	3101      	adds	r1, #1
 80084c2:	428e      	cmp	r6, r1
 80084c4:	5462      	strb	r2, [r4, r1]
 80084c6:	dcfb      	bgt.n	80084c0 <__sccl+0x58>
 80084c8:	1af1      	subs	r1, r6, r3
 80084ca:	3901      	subs	r1, #1
 80084cc:	1c58      	adds	r0, r3, #1
 80084ce:	42b3      	cmp	r3, r6
 80084d0:	bfa8      	it	ge
 80084d2:	2100      	movge	r1, #0
 80084d4:	1843      	adds	r3, r0, r1
 80084d6:	e7e0      	b.n	800849a <__sccl+0x32>

080084d8 <_strtol_l.constprop.0>:
 80084d8:	2b01      	cmp	r3, #1
 80084da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084de:	d001      	beq.n	80084e4 <_strtol_l.constprop.0+0xc>
 80084e0:	2b24      	cmp	r3, #36	; 0x24
 80084e2:	d906      	bls.n	80084f2 <_strtol_l.constprop.0+0x1a>
 80084e4:	f7fe fb8a 	bl	8006bfc <__errno>
 80084e8:	2316      	movs	r3, #22
 80084ea:	6003      	str	r3, [r0, #0]
 80084ec:	2000      	movs	r0, #0
 80084ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80085d8 <_strtol_l.constprop.0+0x100>
 80084f6:	460d      	mov	r5, r1
 80084f8:	462e      	mov	r6, r5
 80084fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008502:	f017 0708 	ands.w	r7, r7, #8
 8008506:	d1f7      	bne.n	80084f8 <_strtol_l.constprop.0+0x20>
 8008508:	2c2d      	cmp	r4, #45	; 0x2d
 800850a:	d132      	bne.n	8008572 <_strtol_l.constprop.0+0x9a>
 800850c:	782c      	ldrb	r4, [r5, #0]
 800850e:	2701      	movs	r7, #1
 8008510:	1cb5      	adds	r5, r6, #2
 8008512:	2b00      	cmp	r3, #0
 8008514:	d05b      	beq.n	80085ce <_strtol_l.constprop.0+0xf6>
 8008516:	2b10      	cmp	r3, #16
 8008518:	d109      	bne.n	800852e <_strtol_l.constprop.0+0x56>
 800851a:	2c30      	cmp	r4, #48	; 0x30
 800851c:	d107      	bne.n	800852e <_strtol_l.constprop.0+0x56>
 800851e:	782c      	ldrb	r4, [r5, #0]
 8008520:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008524:	2c58      	cmp	r4, #88	; 0x58
 8008526:	d14d      	bne.n	80085c4 <_strtol_l.constprop.0+0xec>
 8008528:	786c      	ldrb	r4, [r5, #1]
 800852a:	2310      	movs	r3, #16
 800852c:	3502      	adds	r5, #2
 800852e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008532:	f108 38ff 	add.w	r8, r8, #4294967295
 8008536:	f04f 0c00 	mov.w	ip, #0
 800853a:	fbb8 f9f3 	udiv	r9, r8, r3
 800853e:	4666      	mov	r6, ip
 8008540:	fb03 8a19 	mls	sl, r3, r9, r8
 8008544:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008548:	f1be 0f09 	cmp.w	lr, #9
 800854c:	d816      	bhi.n	800857c <_strtol_l.constprop.0+0xa4>
 800854e:	4674      	mov	r4, lr
 8008550:	42a3      	cmp	r3, r4
 8008552:	dd24      	ble.n	800859e <_strtol_l.constprop.0+0xc6>
 8008554:	f1bc 0f00 	cmp.w	ip, #0
 8008558:	db1e      	blt.n	8008598 <_strtol_l.constprop.0+0xc0>
 800855a:	45b1      	cmp	r9, r6
 800855c:	d31c      	bcc.n	8008598 <_strtol_l.constprop.0+0xc0>
 800855e:	d101      	bne.n	8008564 <_strtol_l.constprop.0+0x8c>
 8008560:	45a2      	cmp	sl, r4
 8008562:	db19      	blt.n	8008598 <_strtol_l.constprop.0+0xc0>
 8008564:	fb06 4603 	mla	r6, r6, r3, r4
 8008568:	f04f 0c01 	mov.w	ip, #1
 800856c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008570:	e7e8      	b.n	8008544 <_strtol_l.constprop.0+0x6c>
 8008572:	2c2b      	cmp	r4, #43	; 0x2b
 8008574:	bf04      	itt	eq
 8008576:	782c      	ldrbeq	r4, [r5, #0]
 8008578:	1cb5      	addeq	r5, r6, #2
 800857a:	e7ca      	b.n	8008512 <_strtol_l.constprop.0+0x3a>
 800857c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008580:	f1be 0f19 	cmp.w	lr, #25
 8008584:	d801      	bhi.n	800858a <_strtol_l.constprop.0+0xb2>
 8008586:	3c37      	subs	r4, #55	; 0x37
 8008588:	e7e2      	b.n	8008550 <_strtol_l.constprop.0+0x78>
 800858a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800858e:	f1be 0f19 	cmp.w	lr, #25
 8008592:	d804      	bhi.n	800859e <_strtol_l.constprop.0+0xc6>
 8008594:	3c57      	subs	r4, #87	; 0x57
 8008596:	e7db      	b.n	8008550 <_strtol_l.constprop.0+0x78>
 8008598:	f04f 3cff 	mov.w	ip, #4294967295
 800859c:	e7e6      	b.n	800856c <_strtol_l.constprop.0+0x94>
 800859e:	f1bc 0f00 	cmp.w	ip, #0
 80085a2:	da05      	bge.n	80085b0 <_strtol_l.constprop.0+0xd8>
 80085a4:	2322      	movs	r3, #34	; 0x22
 80085a6:	6003      	str	r3, [r0, #0]
 80085a8:	4646      	mov	r6, r8
 80085aa:	b942      	cbnz	r2, 80085be <_strtol_l.constprop.0+0xe6>
 80085ac:	4630      	mov	r0, r6
 80085ae:	e79e      	b.n	80084ee <_strtol_l.constprop.0+0x16>
 80085b0:	b107      	cbz	r7, 80085b4 <_strtol_l.constprop.0+0xdc>
 80085b2:	4276      	negs	r6, r6
 80085b4:	2a00      	cmp	r2, #0
 80085b6:	d0f9      	beq.n	80085ac <_strtol_l.constprop.0+0xd4>
 80085b8:	f1bc 0f00 	cmp.w	ip, #0
 80085bc:	d000      	beq.n	80085c0 <_strtol_l.constprop.0+0xe8>
 80085be:	1e69      	subs	r1, r5, #1
 80085c0:	6011      	str	r1, [r2, #0]
 80085c2:	e7f3      	b.n	80085ac <_strtol_l.constprop.0+0xd4>
 80085c4:	2430      	movs	r4, #48	; 0x30
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1b1      	bne.n	800852e <_strtol_l.constprop.0+0x56>
 80085ca:	2308      	movs	r3, #8
 80085cc:	e7af      	b.n	800852e <_strtol_l.constprop.0+0x56>
 80085ce:	2c30      	cmp	r4, #48	; 0x30
 80085d0:	d0a5      	beq.n	800851e <_strtol_l.constprop.0+0x46>
 80085d2:	230a      	movs	r3, #10
 80085d4:	e7ab      	b.n	800852e <_strtol_l.constprop.0+0x56>
 80085d6:	bf00      	nop
 80085d8:	08008a6b 	.word	0x08008a6b

080085dc <_strtol_r>:
 80085dc:	f7ff bf7c 	b.w	80084d8 <_strtol_l.constprop.0>

080085e0 <_strtoul_l.constprop.0>:
 80085e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085e4:	4f36      	ldr	r7, [pc, #216]	; (80086c0 <_strtoul_l.constprop.0+0xe0>)
 80085e6:	4686      	mov	lr, r0
 80085e8:	460d      	mov	r5, r1
 80085ea:	4628      	mov	r0, r5
 80085ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085f0:	5de6      	ldrb	r6, [r4, r7]
 80085f2:	f016 0608 	ands.w	r6, r6, #8
 80085f6:	d1f8      	bne.n	80085ea <_strtoul_l.constprop.0+0xa>
 80085f8:	2c2d      	cmp	r4, #45	; 0x2d
 80085fa:	d12f      	bne.n	800865c <_strtoul_l.constprop.0+0x7c>
 80085fc:	782c      	ldrb	r4, [r5, #0]
 80085fe:	2601      	movs	r6, #1
 8008600:	1c85      	adds	r5, r0, #2
 8008602:	2b00      	cmp	r3, #0
 8008604:	d057      	beq.n	80086b6 <_strtoul_l.constprop.0+0xd6>
 8008606:	2b10      	cmp	r3, #16
 8008608:	d109      	bne.n	800861e <_strtoul_l.constprop.0+0x3e>
 800860a:	2c30      	cmp	r4, #48	; 0x30
 800860c:	d107      	bne.n	800861e <_strtoul_l.constprop.0+0x3e>
 800860e:	7828      	ldrb	r0, [r5, #0]
 8008610:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008614:	2858      	cmp	r0, #88	; 0x58
 8008616:	d149      	bne.n	80086ac <_strtoul_l.constprop.0+0xcc>
 8008618:	786c      	ldrb	r4, [r5, #1]
 800861a:	2310      	movs	r3, #16
 800861c:	3502      	adds	r5, #2
 800861e:	f04f 38ff 	mov.w	r8, #4294967295
 8008622:	2700      	movs	r7, #0
 8008624:	fbb8 f8f3 	udiv	r8, r8, r3
 8008628:	fb03 f908 	mul.w	r9, r3, r8
 800862c:	ea6f 0909 	mvn.w	r9, r9
 8008630:	4638      	mov	r0, r7
 8008632:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008636:	f1bc 0f09 	cmp.w	ip, #9
 800863a:	d814      	bhi.n	8008666 <_strtoul_l.constprop.0+0x86>
 800863c:	4664      	mov	r4, ip
 800863e:	42a3      	cmp	r3, r4
 8008640:	dd22      	ble.n	8008688 <_strtoul_l.constprop.0+0xa8>
 8008642:	2f00      	cmp	r7, #0
 8008644:	db1d      	blt.n	8008682 <_strtoul_l.constprop.0+0xa2>
 8008646:	4580      	cmp	r8, r0
 8008648:	d31b      	bcc.n	8008682 <_strtoul_l.constprop.0+0xa2>
 800864a:	d101      	bne.n	8008650 <_strtoul_l.constprop.0+0x70>
 800864c:	45a1      	cmp	r9, r4
 800864e:	db18      	blt.n	8008682 <_strtoul_l.constprop.0+0xa2>
 8008650:	fb00 4003 	mla	r0, r0, r3, r4
 8008654:	2701      	movs	r7, #1
 8008656:	f815 4b01 	ldrb.w	r4, [r5], #1
 800865a:	e7ea      	b.n	8008632 <_strtoul_l.constprop.0+0x52>
 800865c:	2c2b      	cmp	r4, #43	; 0x2b
 800865e:	bf04      	itt	eq
 8008660:	782c      	ldrbeq	r4, [r5, #0]
 8008662:	1c85      	addeq	r5, r0, #2
 8008664:	e7cd      	b.n	8008602 <_strtoul_l.constprop.0+0x22>
 8008666:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800866a:	f1bc 0f19 	cmp.w	ip, #25
 800866e:	d801      	bhi.n	8008674 <_strtoul_l.constprop.0+0x94>
 8008670:	3c37      	subs	r4, #55	; 0x37
 8008672:	e7e4      	b.n	800863e <_strtoul_l.constprop.0+0x5e>
 8008674:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008678:	f1bc 0f19 	cmp.w	ip, #25
 800867c:	d804      	bhi.n	8008688 <_strtoul_l.constprop.0+0xa8>
 800867e:	3c57      	subs	r4, #87	; 0x57
 8008680:	e7dd      	b.n	800863e <_strtoul_l.constprop.0+0x5e>
 8008682:	f04f 37ff 	mov.w	r7, #4294967295
 8008686:	e7e6      	b.n	8008656 <_strtoul_l.constprop.0+0x76>
 8008688:	2f00      	cmp	r7, #0
 800868a:	da07      	bge.n	800869c <_strtoul_l.constprop.0+0xbc>
 800868c:	2322      	movs	r3, #34	; 0x22
 800868e:	f8ce 3000 	str.w	r3, [lr]
 8008692:	f04f 30ff 	mov.w	r0, #4294967295
 8008696:	b932      	cbnz	r2, 80086a6 <_strtoul_l.constprop.0+0xc6>
 8008698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800869c:	b106      	cbz	r6, 80086a0 <_strtoul_l.constprop.0+0xc0>
 800869e:	4240      	negs	r0, r0
 80086a0:	2a00      	cmp	r2, #0
 80086a2:	d0f9      	beq.n	8008698 <_strtoul_l.constprop.0+0xb8>
 80086a4:	b107      	cbz	r7, 80086a8 <_strtoul_l.constprop.0+0xc8>
 80086a6:	1e69      	subs	r1, r5, #1
 80086a8:	6011      	str	r1, [r2, #0]
 80086aa:	e7f5      	b.n	8008698 <_strtoul_l.constprop.0+0xb8>
 80086ac:	2430      	movs	r4, #48	; 0x30
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1b5      	bne.n	800861e <_strtoul_l.constprop.0+0x3e>
 80086b2:	2308      	movs	r3, #8
 80086b4:	e7b3      	b.n	800861e <_strtoul_l.constprop.0+0x3e>
 80086b6:	2c30      	cmp	r4, #48	; 0x30
 80086b8:	d0a9      	beq.n	800860e <_strtoul_l.constprop.0+0x2e>
 80086ba:	230a      	movs	r3, #10
 80086bc:	e7af      	b.n	800861e <_strtoul_l.constprop.0+0x3e>
 80086be:	bf00      	nop
 80086c0:	08008a6b 	.word	0x08008a6b

080086c4 <_strtoul_r>:
 80086c4:	f7ff bf8c 	b.w	80085e0 <_strtoul_l.constprop.0>

080086c8 <__submore>:
 80086c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086cc:	460c      	mov	r4, r1
 80086ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80086d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086d4:	4299      	cmp	r1, r3
 80086d6:	d11d      	bne.n	8008714 <__submore+0x4c>
 80086d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80086dc:	f7ff f81c 	bl	8007718 <_malloc_r>
 80086e0:	b918      	cbnz	r0, 80086ea <__submore+0x22>
 80086e2:	f04f 30ff 	mov.w	r0, #4294967295
 80086e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086ee:	63a3      	str	r3, [r4, #56]	; 0x38
 80086f0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80086f4:	6360      	str	r0, [r4, #52]	; 0x34
 80086f6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80086fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80086fe:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008702:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008706:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800870a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800870e:	6020      	str	r0, [r4, #0]
 8008710:	2000      	movs	r0, #0
 8008712:	e7e8      	b.n	80086e6 <__submore+0x1e>
 8008714:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008716:	0077      	lsls	r7, r6, #1
 8008718:	463a      	mov	r2, r7
 800871a:	f000 f83d 	bl	8008798 <_realloc_r>
 800871e:	4605      	mov	r5, r0
 8008720:	2800      	cmp	r0, #0
 8008722:	d0de      	beq.n	80086e2 <__submore+0x1a>
 8008724:	eb00 0806 	add.w	r8, r0, r6
 8008728:	4601      	mov	r1, r0
 800872a:	4632      	mov	r2, r6
 800872c:	4640      	mov	r0, r8
 800872e:	f7fe fa8f 	bl	8006c50 <memcpy>
 8008732:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008736:	f8c4 8000 	str.w	r8, [r4]
 800873a:	e7e9      	b.n	8008710 <__submore+0x48>

0800873c <_fstat_r>:
 800873c:	b538      	push	{r3, r4, r5, lr}
 800873e:	4d07      	ldr	r5, [pc, #28]	; (800875c <_fstat_r+0x20>)
 8008740:	2300      	movs	r3, #0
 8008742:	4604      	mov	r4, r0
 8008744:	4608      	mov	r0, r1
 8008746:	4611      	mov	r1, r2
 8008748:	602b      	str	r3, [r5, #0]
 800874a:	f7f8 fb3c 	bl	8000dc6 <_fstat>
 800874e:	1c43      	adds	r3, r0, #1
 8008750:	d102      	bne.n	8008758 <_fstat_r+0x1c>
 8008752:	682b      	ldr	r3, [r5, #0]
 8008754:	b103      	cbz	r3, 8008758 <_fstat_r+0x1c>
 8008756:	6023      	str	r3, [r4, #0]
 8008758:	bd38      	pop	{r3, r4, r5, pc}
 800875a:	bf00      	nop
 800875c:	200057a8 	.word	0x200057a8

08008760 <_isatty_r>:
 8008760:	b538      	push	{r3, r4, r5, lr}
 8008762:	4d06      	ldr	r5, [pc, #24]	; (800877c <_isatty_r+0x1c>)
 8008764:	2300      	movs	r3, #0
 8008766:	4604      	mov	r4, r0
 8008768:	4608      	mov	r0, r1
 800876a:	602b      	str	r3, [r5, #0]
 800876c:	f7f8 fb3b 	bl	8000de6 <_isatty>
 8008770:	1c43      	adds	r3, r0, #1
 8008772:	d102      	bne.n	800877a <_isatty_r+0x1a>
 8008774:	682b      	ldr	r3, [r5, #0]
 8008776:	b103      	cbz	r3, 800877a <_isatty_r+0x1a>
 8008778:	6023      	str	r3, [r4, #0]
 800877a:	bd38      	pop	{r3, r4, r5, pc}
 800877c:	200057a8 	.word	0x200057a8

08008780 <__malloc_lock>:
 8008780:	4801      	ldr	r0, [pc, #4]	; (8008788 <__malloc_lock+0x8>)
 8008782:	f7fe bedb 	b.w	800753c <__retarget_lock_acquire_recursive>
 8008786:	bf00      	nop
 8008788:	2000579c 	.word	0x2000579c

0800878c <__malloc_unlock>:
 800878c:	4801      	ldr	r0, [pc, #4]	; (8008794 <__malloc_unlock+0x8>)
 800878e:	f7fe bed6 	b.w	800753e <__retarget_lock_release_recursive>
 8008792:	bf00      	nop
 8008794:	2000579c 	.word	0x2000579c

08008798 <_realloc_r>:
 8008798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800879c:	4680      	mov	r8, r0
 800879e:	4614      	mov	r4, r2
 80087a0:	460e      	mov	r6, r1
 80087a2:	b921      	cbnz	r1, 80087ae <_realloc_r+0x16>
 80087a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087a8:	4611      	mov	r1, r2
 80087aa:	f7fe bfb5 	b.w	8007718 <_malloc_r>
 80087ae:	b92a      	cbnz	r2, 80087bc <_realloc_r+0x24>
 80087b0:	f7fe ff46 	bl	8007640 <_free_r>
 80087b4:	4625      	mov	r5, r4
 80087b6:	4628      	mov	r0, r5
 80087b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087bc:	f000 f81b 	bl	80087f6 <_malloc_usable_size_r>
 80087c0:	4284      	cmp	r4, r0
 80087c2:	4607      	mov	r7, r0
 80087c4:	d802      	bhi.n	80087cc <_realloc_r+0x34>
 80087c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80087ca:	d812      	bhi.n	80087f2 <_realloc_r+0x5a>
 80087cc:	4621      	mov	r1, r4
 80087ce:	4640      	mov	r0, r8
 80087d0:	f7fe ffa2 	bl	8007718 <_malloc_r>
 80087d4:	4605      	mov	r5, r0
 80087d6:	2800      	cmp	r0, #0
 80087d8:	d0ed      	beq.n	80087b6 <_realloc_r+0x1e>
 80087da:	42bc      	cmp	r4, r7
 80087dc:	4622      	mov	r2, r4
 80087de:	4631      	mov	r1, r6
 80087e0:	bf28      	it	cs
 80087e2:	463a      	movcs	r2, r7
 80087e4:	f7fe fa34 	bl	8006c50 <memcpy>
 80087e8:	4631      	mov	r1, r6
 80087ea:	4640      	mov	r0, r8
 80087ec:	f7fe ff28 	bl	8007640 <_free_r>
 80087f0:	e7e1      	b.n	80087b6 <_realloc_r+0x1e>
 80087f2:	4635      	mov	r5, r6
 80087f4:	e7df      	b.n	80087b6 <_realloc_r+0x1e>

080087f6 <_malloc_usable_size_r>:
 80087f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087fa:	1f18      	subs	r0, r3, #4
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	bfbc      	itt	lt
 8008800:	580b      	ldrlt	r3, [r1, r0]
 8008802:	18c0      	addlt	r0, r0, r3
 8008804:	4770      	bx	lr
	...

08008808 <_init>:
 8008808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880a:	bf00      	nop
 800880c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800880e:	bc08      	pop	{r3}
 8008810:	469e      	mov	lr, r3
 8008812:	4770      	bx	lr

08008814 <_fini>:
 8008814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008816:	bf00      	nop
 8008818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800881a:	bc08      	pop	{r3}
 800881c:	469e      	mov	lr, r3
 800881e:	4770      	bx	lr
