
LAB1_VAR2_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000687c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08006a2c  08006a2c  00016a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c84  08006c84  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08006c84  08006c84  00016c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c8c  08006c8c  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c8c  08006c8c  00016c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c90  08006c90  00016c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08006c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b4  2**0
                  CONTENTS
 10 .bss          000005e8  200000b4  200000b4  000200b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000069c  2000069c  000200b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001159a  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002962  00000000  00000000  0003167e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e58  00000000  00000000  00033fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d20  00000000  00000000  00034e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000253d4  00000000  00000000  00035b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012448  00000000  00000000  0005af2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbd81  00000000  00000000  0006d374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001490f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004548  00000000  00000000  00149148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006a14 	.word	0x08006a14

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	08006a14 	.word	0x08006a14

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <SetPTimer>:
 * 			 number of timer that you want to update.
 * 			 NewTime - the new time delay in case of existing timer or time delay for the new timer in
 * 			 case if timer dosen't exist yet.
 */
void SetPTimer(uint8_t NewNumber, uint32_t NewTime)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	6039      	str	r1, [r7, #0]
 80005ae:	71fb      	strb	r3, [r7, #7]
	// The number of a free timer in array (255 - means that no free timers available)
	uint8_t free_timer = 255;
 80005b0:	23ff      	movs	r3, #255	; 0xff
 80005b2:	73fb      	strb	r3, [r7, #15]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80005b4:	f3ef 8310 	mrs	r3, PRIMASK
 80005b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80005ba:	68bb      	ldr	r3, [r7, #8]
	uint8_t interrupts_enable = ~__get_PRIMASK(); 		// Get the current state of interrupts
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	43db      	mvns	r3, r3
 80005c0:	737b      	strb	r3, [r7, #13]

	if (interrupts_enable) __disable_irq(); 								// Disable interrupts if they were enabled (atomic access)
 80005c2:	7b7b      	ldrb	r3, [r7, #13]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SetPTimer+0x28>
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	bf00      	nop
	// Go thru timers queue. Looking for existing or empty timer
	for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++)
 80005cc:	2300      	movs	r3, #0
 80005ce:	73bb      	strb	r3, [r7, #14]
 80005d0:	e01c      	b.n	800060c <SetPTimer+0x68>
	{
		if (Ptimer[i].Number == NewNumber)				// If there is the timer with the same "Number"
 80005d2:	7bbb      	ldrb	r3, [r7, #14]
 80005d4:	4a1b      	ldr	r2, [pc, #108]	; (8000644 <SetPTimer+0xa0>)
 80005d6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	79fa      	ldrb	r2, [r7, #7]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d108      	bne.n	80005f4 <SetPTimer+0x50>
		{
			Ptimer[i].Time = NewTime;                   // Give it a new "Time"
 80005e2:	7bbb      	ldrb	r3, [r7, #14]
 80005e4:	4a17      	ldr	r2, [pc, #92]	; (8000644 <SetPTimer+0xa0>)
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	4413      	add	r3, r2
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	605a      	str	r2, [r3, #4]
			free_timer = 255; 							// Mark that no free timers available and break the cycle
 80005ee:	23ff      	movs	r3, #255	; 0xff
 80005f0:	73fb      	strb	r3, [r7, #15]
			break;
 80005f2:	e00e      	b.n	8000612 <SetPTimer+0x6e>
		}
		if (Ptimer[i].Number == 255) 					// If there is a free timer, save it number
 80005f4:	7bbb      	ldrb	r3, [r7, #14]
 80005f6:	4a13      	ldr	r2, [pc, #76]	; (8000644 <SetPTimer+0xa0>)
 80005f8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2bff      	cmp	r3, #255	; 0xff
 8000600:	d101      	bne.n	8000606 <SetPTimer+0x62>
		{
			free_timer = i;
 8000602:	7bbb      	ldrb	r3, [r7, #14]
 8000604:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++)
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	3301      	adds	r3, #1
 800060a:	73bb      	strb	r3, [r7, #14]
 800060c:	7bbb      	ldrb	r3, [r7, #14]
 800060e:	2b08      	cmp	r3, #8
 8000610:	d1df      	bne.n	80005d2 <SetPTimer+0x2e>
		}
	}
	if (free_timer < MAX_NUMBER_OF_TIMERS)  			// If there is a free timer in array
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	2b07      	cmp	r3, #7
 8000616:	d80a      	bhi.n	800062e <SetPTimer+0x8a>
	{
		Ptimer[free_timer].Number = NewNumber;          // Give it a "Number"
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	490a      	ldr	r1, [pc, #40]	; (8000644 <SetPTimer+0xa0>)
 800061c:	79fa      	ldrb	r2, [r7, #7]
 800061e:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
		Ptimer[free_timer].Time = NewTime;              // And a "Time"
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	4a07      	ldr	r2, [pc, #28]	; (8000644 <SetPTimer+0xa0>)
 8000626:	00db      	lsls	r3, r3, #3
 8000628:	4413      	add	r3, r2
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	605a      	str	r2, [r3, #4]
	}

	if (interrupts_enable)
 800062e:	7b7b      	ldrb	r3, [r7, #13]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SetPTimer+0x94>
  __ASM volatile ("cpsie i" : : : "memory");
 8000634:	b662      	cpsie	i
}
 8000636:	bf00      	nop
		__enable_irq(); // Enable interrupts if they were disabled (the end of atomic access)
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	20000000 	.word	0x20000000

08000648 <PTimer>:
/************************************************************************************************
 * This function realizes the program timer functionality, it should be called from the interrupt
 * service routing of the hardware timer that provides time base for the program timer
 */
void PTimer(void)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++)    // Go thru timers queue.
 800064e:	2300      	movs	r3, #0
 8000650:	71fb      	strb	r3, [r7, #7]
 8000652:	e036      	b.n	80006c2 <PTimer+0x7a>
	{
		if (Ptimer[i].Number != 255) 					   // If timer exists and its time delay dosen't
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	4a20      	ldr	r2, [pc, #128]	; (80006d8 <PTimer+0x90>)
 8000658:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2bff      	cmp	r3, #255	; 0xff
 8000660:	d02c      	beq.n	80006bc <PTimer+0x74>
		{
			if (Ptimer[i].Time != 0)                       // equal to 0,
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	4a1c      	ldr	r2, [pc, #112]	; (80006d8 <PTimer+0x90>)
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	4413      	add	r3, r2
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d00a      	beq.n	8000686 <PTimer+0x3e>
			{
				Ptimer[i].Time--;                    	   // decrement the time delay
 8000670:	79fa      	ldrb	r2, [r7, #7]
 8000672:	4919      	ldr	r1, [pc, #100]	; (80006d8 <PTimer+0x90>)
 8000674:	00d3      	lsls	r3, r2, #3
 8000676:	440b      	add	r3, r1
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	1e59      	subs	r1, r3, #1
 800067c:	4816      	ldr	r0, [pc, #88]	; (80006d8 <PTimer+0x90>)
 800067e:	00d3      	lsls	r3, r2, #3
 8000680:	4403      	add	r3, r0
 8000682:	6059      	str	r1, [r3, #4]
 8000684:	e01a      	b.n	80006bc <PTimer+0x74>
			}
			else
			{
				ptimerFlag.timer |= 1 << Ptimer[i].Number; // If time dalay equal 0 then set the flag
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	4a13      	ldr	r2, [pc, #76]	; (80006d8 <PTimer+0x90>)
 800068a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	461a      	mov	r2, r3
 8000692:	2301      	movs	r3, #1
 8000694:	fa03 f102 	lsl.w	r1, r3, r2
 8000698:	4b10      	ldr	r3, [pc, #64]	; (80006dc <PTimer+0x94>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	b25a      	sxtb	r2, r3
 80006a0:	b24b      	sxtb	r3, r1
 80006a2:	4313      	orrs	r3, r2
 80006a4:	b25b      	sxtb	r3, r3
 80006a6:	b2d9      	uxtb	r1, r3
 80006a8:	4a0c      	ldr	r2, [pc, #48]	; (80006dc <PTimer+0x94>)
 80006aa:	7813      	ldrb	r3, [r2, #0]
 80006ac:	f361 0307 	bfi	r3, r1, #0, #8
 80006b0:	7013      	strb	r3, [r2, #0]
				Ptimer[i].Number = 255;           		   // and remove timer from queue
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	4a08      	ldr	r2, [pc, #32]	; (80006d8 <PTimer+0x90>)
 80006b6:	21ff      	movs	r1, #255	; 0xff
 80006b8:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++)    // Go thru timers queue.
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	3301      	adds	r3, #1
 80006c0:	71fb      	strb	r3, [r7, #7]
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b08      	cmp	r3, #8
 80006c6:	d1c5      	bne.n	8000654 <PTimer+0xc>
			}
		}
	}
}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000000 	.word	0x20000000
 80006dc:	200000d0 	.word	0x200000d0

080006e0 <InitPTimer>:
/**************************************************************************************
 * This function initialize program timer queue. It mast be called before program timer
 * can be used.
 */
void InitPTimer(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++) // Go thru timers queue.
 80006e6:	2300      	movs	r3, #0
 80006e8:	71fb      	strb	r3, [r7, #7]
 80006ea:	e00d      	b.n	8000708 <InitPTimer+0x28>
	{
		Ptimer[i].Number = 255;							// Set timer number to "not used" (the number 255)
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	4a0b      	ldr	r2, [pc, #44]	; (800071c <InitPTimer+0x3c>)
 80006f0:	21ff      	movs	r1, #255	; 0xff
 80006f2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		Ptimer[i].Time = 0;								// Set time delay to 0
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4a08      	ldr	r2, [pc, #32]	; (800071c <InitPTimer+0x3c>)
 80006fa:	00db      	lsls	r3, r3, #3
 80006fc:	4413      	add	r3, r2
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]
	for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++) // Go thru timers queue.
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	3301      	adds	r3, #1
 8000706:	71fb      	strb	r3, [r7, #7]
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	2b08      	cmp	r3, #8
 800070c:	d1ee      	bne.n	80006ec <InitPTimer+0xc>
	}
}
 800070e:	bf00      	nop
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	20000000 	.word	0x20000000

08000720 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_DMA_Init+0x4c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <MX_DMA_Init+0x4c>)
 8000730:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_DMA_Init+0x4c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	200c      	movs	r0, #12
 8000748:	f001 f833 	bl	80017b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800074c:	200c      	movs	r0, #12
 800074e:	f001 f84c 	bl	80017ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	200e      	movs	r0, #14
 8000758:	f001 f82b 	bl	80017b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800075c:	200e      	movs	r0, #14
 800075e:	f001 f844 	bl	80017ea <HAL_NVIC_EnableIRQ>

}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	4b35      	ldr	r3, [pc, #212]	; (8000860 <MX_GPIO_Init+0xf0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a34      	ldr	r2, [pc, #208]	; (8000860 <MX_GPIO_Init+0xf0>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b32      	ldr	r3, [pc, #200]	; (8000860 <MX_GPIO_Init+0xf0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <MX_GPIO_Init+0xf0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a2d      	ldr	r2, [pc, #180]	; (8000860 <MX_GPIO_Init+0xf0>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <MX_GPIO_Init+0xf0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b27      	ldr	r3, [pc, #156]	; (8000860 <MX_GPIO_Init+0xf0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a26      	ldr	r2, [pc, #152]	; (8000860 <MX_GPIO_Init+0xf0>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <MX_GPIO_Init+0xf0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b20      	ldr	r3, [pc, #128]	; (8000860 <MX_GPIO_Init+0xf0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a1f      	ldr	r2, [pc, #124]	; (8000860 <MX_GPIO_Init+0xf0>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <MX_GPIO_Init+0xf0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_GPIO_Init+0xf0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a18      	ldr	r2, [pc, #96]	; (8000860 <MX_GPIO_Init+0xf0>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_GPIO_Init+0xf0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_EXTI_Pin;
 8000812:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000818:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800081c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800081e:	2302      	movs	r3, #2
 8000820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	480e      	ldr	r0, [pc, #56]	; (8000864 <MX_GPIO_Init+0xf4>)
 800082a:	f001 fb7b 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800082e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000838:	2302      	movs	r3, #2
 800083a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4809      	ldr	r0, [pc, #36]	; (8000868 <MX_GPIO_Init+0xf8>)
 8000844:	f001 fb6e 	bl	8001f24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	2028      	movs	r0, #40	; 0x28
 800084e:	f000 ffb0 	bl	80017b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000852:	2028      	movs	r0, #40	; 0x28
 8000854:	f000 ffc9 	bl	80017ea <HAL_NVIC_EnableIRQ>

}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	; 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40023800 	.word	0x40023800
 8000864:	40020800 	.word	0x40020800
 8000868:	40020400 	.word	0x40020400

0800086c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	ledsStates_t 				leds_state 				= light;
 8000872:	2300      	movs	r3, #0
 8000874:	73fb      	strb	r3, [r7, #15]
	buttonStates_t 				button_state			= notpressed;
 8000876:	2300      	movs	r3, #0
 8000878:	73bb      	strb	r3, [r7, #14]
	buttonAntibounceStates_t	button_antibounce_state = wait;
 800087a:	2300      	movs	r3, #0
 800087c:	737b      	strb	r3, [r7, #13]
	TerminalStates_t			terminal_state 			= terminal_wait;
 800087e:	2300      	movs	r3, #0
 8000880:	733b      	strb	r3, [r7, #12]
	buttonPinState_t 			button_pin     			= { GPIO_PIN_RESET, GPIO_PIN_RESET };
 8000882:	7a3b      	ldrb	r3, [r7, #8]
 8000884:	f36f 0300 	bfc	r3, #0, #1
 8000888:	723b      	strb	r3, [r7, #8]
 800088a:	7a3b      	ldrb	r3, [r7, #8]
 800088c:	f36f 0341 	bfc	r3, #1, #1
 8000890:	723b      	strb	r3, [r7, #8]
	buttonFlags_t 				button_flag 			= { 0, 0 };
 8000892:	793b      	ldrb	r3, [r7, #4]
 8000894:	f36f 0300 	bfc	r3, #0, #1
 8000898:	713b      	strb	r3, [r7, #4]
 800089a:	793b      	ldrb	r3, [r7, #4]
 800089c:	f36f 0341 	bfc	r3, #1, #1
 80008a0:	713b      	strb	r3, [r7, #4]
	buttonAntibounceFlags_t 	button_antibounce_flag  = { 0, 0 };
 80008a2:	783b      	ldrb	r3, [r7, #0]
 80008a4:	f36f 0300 	bfc	r3, #0, #1
 80008a8:	703b      	strb	r3, [r7, #0]
 80008aa:	783b      	ldrb	r3, [r7, #0]
 80008ac:	f36f 0341 	bfc	r3, #1, #1
 80008b0:	703b      	strb	r3, [r7, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008b2:	f000 fe31 	bl	8001518 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008b6:	f000 f997 	bl	8000be8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008ba:	f7ff ff59 	bl	8000770 <MX_GPIO_Init>
	MX_DMA_Init();
 80008be:	f7ff ff2f 	bl	8000720 <MX_DMA_Init>
	MX_TIM1_Init();
 80008c2:	f000 fb63 	bl	8000f8c <MX_TIM1_Init>
	MX_TIM2_Init();
 80008c6:	f000 fbb3 	bl	8001030 <MX_TIM2_Init>
	MX_USART3_UART_Init();
 80008ca:	f000 fcad 	bl	8001228 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	setvbuf(stdin, NULL, _IONBF, 0); // определение нулевого буфера
 80008ce:	4ba7      	ldr	r3, [pc, #668]	; (8000b6c <main+0x300>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	6858      	ldr	r0, [r3, #4]
 80008d4:	2300      	movs	r3, #0
 80008d6:	2202      	movs	r2, #2
 80008d8:	2100      	movs	r1, #0
 80008da:	f004 fb55 	bl	8004f88 <setvbuf>

	HAL_UART_Receive_IT(&huart3, &value, 1); //запу�?каем UART по прерыванию
 80008de:	2201      	movs	r2, #1
 80008e0:	49a3      	ldr	r1, [pc, #652]	; (8000b70 <main+0x304>)
 80008e2:	48a4      	ldr	r0, [pc, #656]	; (8000b74 <main+0x308>)
 80008e4:	f003 faf7 	bl	8003ed6 <HAL_UART_Receive_IT>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80008e8:	2100      	movs	r1, #0
 80008ea:	48a3      	ldr	r0, [pc, #652]	; (8000b78 <main+0x30c>)
 80008ec:	f002 fa46 	bl	8002d7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80008f0:	2104      	movs	r1, #4
 80008f2:	48a1      	ldr	r0, [pc, #644]	; (8000b78 <main+0x30c>)
 80008f4:	f002 fa42 	bl	8002d7c <HAL_TIM_PWM_Start>
	InitPTimer();
 80008f8:	f7ff fef2 	bl	80006e0 <InitPTimer>
	SetPTimer(ANTIBOUNCE_TIMER, BOUNCE_TIME);
 80008fc:	211e      	movs	r1, #30
 80008fe:	2001      	movs	r0, #1
 8000900:	f7ff fe50 	bl	80005a4 <SetPTimer>
	printf("PRINT BRIGHTNESS FOR LED In range from 0 to 100->>>>!\r\n");
 8000904:	489d      	ldr	r0, [pc, #628]	; (8000b7c <main+0x310>)
 8000906:	f004 fb37 	bl	8004f78 <puts>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		switch (button_antibounce_state)
 800090a:	7b7b      	ldrb	r3, [r7, #13]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d002      	beq.n	8000916 <main+0xaa>
 8000910:	2b01      	cmp	r3, #1
 8000912:	d020      	beq.n	8000956 <main+0xea>
				}
			}
			break;
		}
		default:
			break;
 8000914:	e06f      	b.n	80009f6 <main+0x18a>
			if (gflag.button_action)
 8000916:	4b9a      	ldr	r3, [pc, #616]	; (8000b80 <main+0x314>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	d065      	beq.n	80009f0 <main+0x184>
				button_antibounce_state = antibounce;
 8000924:	2301      	movs	r3, #1
 8000926:	737b      	strb	r3, [r7, #13]
				button_pin.previous_state = HAL_GPIO_ReadPin(BUTTON_EXTI_GPIO_Port, BUTTON_EXTI_Pin);
 8000928:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800092c:	4895      	ldr	r0, [pc, #596]	; (8000b84 <main+0x318>)
 800092e:	f001 fca5 	bl	800227c <HAL_GPIO_ReadPin>
 8000932:	4603      	mov	r3, r0
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	b2da      	uxtb	r2, r3
 800093a:	7a3b      	ldrb	r3, [r7, #8]
 800093c:	f362 0300 	bfi	r3, r2, #0, #1
 8000940:	723b      	strb	r3, [r7, #8]
				SetPTimer(ANTIBOUNCE_TIMER, BOUNCE_TIME);
 8000942:	211e      	movs	r1, #30
 8000944:	2001      	movs	r0, #1
 8000946:	f7ff fe2d 	bl	80005a4 <SetPTimer>
				gflag.button_action = 0;
 800094a:	4a8d      	ldr	r2, [pc, #564]	; (8000b80 <main+0x314>)
 800094c:	7813      	ldrb	r3, [r2, #0]
 800094e:	f36f 0300 	bfc	r3, #0, #1
 8000952:	7013      	strb	r3, [r2, #0]
			break;
 8000954:	e04c      	b.n	80009f0 <main+0x184>
			if ((ptimerFlag.timer) & (1 << ANTIBOUNCE_TIMER)) // If anti bounce delay finished
 8000956:	4b8c      	ldr	r3, [pc, #560]	; (8000b88 <main+0x31c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	b2db      	uxtb	r3, r3
 800095c:	f003 0302 	and.w	r3, r3, #2
 8000960:	2b00      	cmp	r3, #0
 8000962:	d047      	beq.n	80009f4 <main+0x188>
 				button_pin.current_state = HAL_GPIO_ReadPin(BUTTON_EXTI_GPIO_Port, BUTTON_EXTI_Pin);
 8000964:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000968:	4886      	ldr	r0, [pc, #536]	; (8000b84 <main+0x318>)
 800096a:	f001 fc87 	bl	800227c <HAL_GPIO_ReadPin>
 800096e:	4603      	mov	r3, r0
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	b2da      	uxtb	r2, r3
 8000976:	7a3b      	ldrb	r3, [r7, #8]
 8000978:	f362 0341 	bfi	r3, r2, #1, #1
 800097c:	723b      	strb	r3, [r7, #8]
				gflag.button_action = 0;
 800097e:	4a80      	ldr	r2, [pc, #512]	; (8000b80 <main+0x314>)
 8000980:	7813      	ldrb	r3, [r2, #0]
 8000982:	f36f 0300 	bfc	r3, #0, #1
 8000986:	7013      	strb	r3, [r2, #0]
				if (button_pin.current_state == button_pin.previous_state)
 8000988:	7a3b      	ldrb	r3, [r7, #8]
 800098a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800098e:	b2da      	uxtb	r2, r3
 8000990:	7a3b      	ldrb	r3, [r7, #8]
 8000992:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000996:	b2db      	uxtb	r3, r3
 8000998:	429a      	cmp	r2, r3
 800099a:	d11c      	bne.n	80009d6 <main+0x16a>
					if (button_pin.current_state == GPIO_PIN_SET)
 800099c:	7a3b      	ldrb	r3, [r7, #8]
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d004      	beq.n	80009b2 <main+0x146>
						button_antibounce_flag.rising_edge = 1;
 80009a8:	783b      	ldrb	r3, [r7, #0]
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	703b      	strb	r3, [r7, #0]
 80009b0:	e003      	b.n	80009ba <main+0x14e>
						button_antibounce_flag.falling_edge = 1;
 80009b2:	783b      	ldrb	r3, [r7, #0]
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	703b      	strb	r3, [r7, #0]
					ptimerFlag.timer &= ~(1 << ANTIBOUNCE_TIMER); // Clear anti bounce timer flag
 80009ba:	4b73      	ldr	r3, [pc, #460]	; (8000b88 <main+0x31c>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	f023 0302 	bic.w	r3, r3, #2
 80009c4:	b2d9      	uxtb	r1, r3
 80009c6:	4a70      	ldr	r2, [pc, #448]	; (8000b88 <main+0x31c>)
 80009c8:	7813      	ldrb	r3, [r2, #0]
 80009ca:	f361 0307 	bfi	r3, r1, #0, #8
 80009ce:	7013      	strb	r3, [r2, #0]
					button_antibounce_state = wait; // Change state to "wait"
 80009d0:	2300      	movs	r3, #0
 80009d2:	737b      	strb	r3, [r7, #13]
			break;
 80009d4:	e00e      	b.n	80009f4 <main+0x188>
					button_pin.previous_state = button_pin.current_state; // Update previous button pin state
 80009d6:	7a3b      	ldrb	r3, [r7, #8]
 80009d8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	7a3b      	ldrb	r3, [r7, #8]
 80009e0:	f362 0300 	bfi	r3, r2, #0, #1
 80009e4:	723b      	strb	r3, [r7, #8]
					SetPTimer(ANTIBOUNCE_TIMER, BOUNCE_TIME); // Update anti bounce timer
 80009e6:	211e      	movs	r1, #30
 80009e8:	2001      	movs	r0, #1
 80009ea:	f7ff fddb 	bl	80005a4 <SetPTimer>
			break;
 80009ee:	e001      	b.n	80009f4 <main+0x188>
			break;
 80009f0:	bf00      	nop
 80009f2:	e000      	b.n	80009f6 <main+0x18a>
			break;
 80009f4:	bf00      	nop
		}
		switch (button_state)
 80009f6:	7bbb      	ldrb	r3, [r7, #14]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d002      	beq.n	8000a02 <main+0x196>
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d01c      	beq.n	8000a3a <main+0x1ce>
				button_antibounce_flag.falling_edge = 0;
			}
			break;
		}
		default:
			break;
 8000a00:	e03a      	b.n	8000a78 <main+0x20c>
			if (button_antibounce_flag.falling_edge)    // If button was pressed
 8000a02:	783b      	ldrb	r3, [r7, #0]
 8000a04:	f003 0302 	and.w	r3, r3, #2
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d00a      	beq.n	8000a24 <main+0x1b8>
				button_state = pressed;             // Change state to "pressed"
 8000a0e:	2301      	movs	r3, #1
 8000a10:	73bb      	strb	r3, [r7, #14]
				button_flag.pushed = 1;	// Set flag "pushed" and clear flag "falling_edge"
 8000a12:	793b      	ldrb	r3, [r7, #4]
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	713b      	strb	r3, [r7, #4]
				button_antibounce_flag.falling_edge = 0;
 8000a1a:	783b      	ldrb	r3, [r7, #0]
 8000a1c:	f36f 0341 	bfc	r3, #1, #1
 8000a20:	703b      	strb	r3, [r7, #0]
			break;
 8000a22:	e026      	b.n	8000a72 <main+0x206>
			else if (button_antibounce_flag.rising_edge)// If button was released
 8000a24:	783b      	ldrb	r3, [r7, #0]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d020      	beq.n	8000a72 <main+0x206>
				button_antibounce_flag.rising_edge = 0;	// Clear flag "rising_edge"
 8000a30:	783b      	ldrb	r3, [r7, #0]
 8000a32:	f36f 0300 	bfc	r3, #0, #1
 8000a36:	703b      	strb	r3, [r7, #0]
			break;
 8000a38:	e01b      	b.n	8000a72 <main+0x206>
			if (button_antibounce_flag.rising_edge)  // If button was released
 8000a3a:	783b      	ldrb	r3, [r7, #0]
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d00a      	beq.n	8000a5c <main+0x1f0>
				button_state = notpressed;       // Change state to "notpressed"
 8000a46:	2300      	movs	r3, #0
 8000a48:	73bb      	strb	r3, [r7, #14]
				button_flag.released = 1;				// Set flag "released"
 8000a4a:	793b      	ldrb	r3, [r7, #4]
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	713b      	strb	r3, [r7, #4]
				button_antibounce_flag.rising_edge = 0;	// Clear flag "rising_edge"
 8000a52:	783b      	ldrb	r3, [r7, #0]
 8000a54:	f36f 0300 	bfc	r3, #0, #1
 8000a58:	703b      	strb	r3, [r7, #0]
			break;
 8000a5a:	e00c      	b.n	8000a76 <main+0x20a>
			else if (button_antibounce_flag.falling_edge) // Protection (just in case)
 8000a5c:	783b      	ldrb	r3, [r7, #0]
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d006      	beq.n	8000a76 <main+0x20a>
				button_antibounce_flag.falling_edge = 0;
 8000a68:	783b      	ldrb	r3, [r7, #0]
 8000a6a:	f36f 0341 	bfc	r3, #1, #1
 8000a6e:	703b      	strb	r3, [r7, #0]
			break;
 8000a70:	e001      	b.n	8000a76 <main+0x20a>
			break;
 8000a72:	bf00      	nop
 8000a74:	e000      	b.n	8000a78 <main+0x20c>
			break;
 8000a76:	bf00      	nop
		}
		switch (leds_state)
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d002      	beq.n	8000a84 <main+0x218>
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d049      	beq.n	8000b16 <main+0x2aa>
 8000a82:	e059      	b.n	8000b38 <main+0x2cc>
		{
		case light:                    			// State "light" - LEDs are ON
		{
			switch (count)
 8000a84:	4b41      	ldr	r3, [pc, #260]	; (8000b8c <main+0x320>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d837      	bhi.n	8000afc <main+0x290>
 8000a8c:	a201      	add	r2, pc, #4	; (adr r2, 8000a94 <main+0x228>)
 8000a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a92:	bf00      	nop
 8000a94:	08000aa5 	.word	0x08000aa5
 8000a98:	08000abb 	.word	0x08000abb
 8000a9c:	08000ad1 	.word	0x08000ad1
 8000aa0:	08000ae7 	.word	0x08000ae7
			{
			case 0:
			{
				TIM2->CCR1 = off_brightness;
 8000aa4:	4b3a      	ldr	r3, [pc, #232]	; (8000b90 <main+0x324>)
 8000aa6:	781a      	ldrb	r2, [r3, #0]
 8000aa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aac:	635a      	str	r2, [r3, #52]	; 0x34
				TIM2->CCR2 = off_brightness;
 8000aae:	4b38      	ldr	r3, [pc, #224]	; (8000b90 <main+0x324>)
 8000ab0:	781a      	ldrb	r2, [r3, #0]
 8000ab2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ab6:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8000ab8:	e020      	b.n	8000afc <main+0x290>
			}
			case 1:
			{
				TIM2->CCR1 = active_brightness;
 8000aba:	4b36      	ldr	r3, [pc, #216]	; (8000b94 <main+0x328>)
 8000abc:	781a      	ldrb	r2, [r3, #0]
 8000abe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ac2:	635a      	str	r2, [r3, #52]	; 0x34
				TIM2->CCR2 = off_brightness;
 8000ac4:	4b32      	ldr	r3, [pc, #200]	; (8000b90 <main+0x324>)
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000acc:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8000ace:	e015      	b.n	8000afc <main+0x290>
			}
			case 2:
			{
				TIM2->CCR1 = off_brightness;
 8000ad0:	4b2f      	ldr	r3, [pc, #188]	; (8000b90 <main+0x324>)
 8000ad2:	781a      	ldrb	r2, [r3, #0]
 8000ad4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ad8:	635a      	str	r2, [r3, #52]	; 0x34
				TIM2->CCR2 = active_brightness;
 8000ada:	4b2e      	ldr	r3, [pc, #184]	; (8000b94 <main+0x328>)
 8000adc:	781a      	ldrb	r2, [r3, #0]
 8000ade:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ae2:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8000ae4:	e00a      	b.n	8000afc <main+0x290>
			}
			case 3:
			{
				TIM2->CCR1 = active_brightness;
 8000ae6:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <main+0x328>)
 8000ae8:	781a      	ldrb	r2, [r3, #0]
 8000aea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aee:	635a      	str	r2, [r3, #52]	; 0x34
				TIM2->CCR2 = active_brightness;
 8000af0:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <main+0x328>)
 8000af2:	781a      	ldrb	r2, [r3, #0]
 8000af4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000af8:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8000afa:	bf00      	nop
			}
			}

			if (button_flag.pushed)               // If user button was pressed
 8000afc:	793b      	ldrb	r3, [r7, #4]
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d016      	beq.n	8000b36 <main+0x2ca>
			{
				leds_state = change_combination;     // Change state to "change_combination"
 8000b08:	2301      	movs	r3, #1
 8000b0a:	73fb      	strb	r3, [r7, #15]
				button_flag.pushed = 0;
 8000b0c:	793b      	ldrb	r3, [r7, #4]
 8000b0e:	f36f 0300 	bfc	r3, #0, #1
 8000b12:	713b      	strb	r3, [r7, #4]
			}
			break;
 8000b14:	e00f      	b.n	8000b36 <main+0x2ca>
		}
		case change_combination:
		{
//			if(button_flag.pushed)
//			{
				count++;
 8000b16:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <main+0x320>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <main+0x320>)
 8000b20:	701a      	strb	r2, [r3, #0]
				if(count == 4)
 8000b22:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <main+0x320>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	d102      	bne.n	8000b30 <main+0x2c4>
				{
					count = 0;
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <main+0x320>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
				}
				leds_state = light;
 8000b30:	2300      	movs	r3, #0
 8000b32:	73fb      	strb	r3, [r7, #15]
 8000b34:	e000      	b.n	8000b38 <main+0x2cc>
			break;
 8000b36:	bf00      	nop
//			}
		}
		}
		if (terminal_flag.RX_data)
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <main+0x32c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f43f aee1 	beq.w	800090a <main+0x9e>
		{
			sscanf(&buff[0], "%d", &str[0]);
 8000b48:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <main+0x330>)
 8000b4a:	4915      	ldr	r1, [pc, #84]	; (8000ba0 <main+0x334>)
 8000b4c:	4815      	ldr	r0, [pc, #84]	; (8000ba4 <main+0x338>)
 8000b4e:	f004 fae1 	bl	8005114 <siscanf>
			if ((str[0] > 100) || (str[0] < 0))
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <main+0x330>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b64      	cmp	r3, #100	; 0x64
 8000b58:	dc03      	bgt.n	8000b62 <main+0x2f6>
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <main+0x330>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	da24      	bge.n	8000bac <main+0x340>
			{
				printf("Error. Please enter correct value!\r\n");
 8000b62:	4811      	ldr	r0, [pc, #68]	; (8000ba8 <main+0x33c>)
 8000b64:	f004 fa08 	bl	8004f78 <puts>
 8000b68:	e02e      	b.n	8000bc8 <main+0x35c>
 8000b6a:	bf00      	nop
 8000b6c:	20000050 	.word	0x20000050
 8000b70:	200000e8 	.word	0x200000e8
 8000b74:	20000580 	.word	0x20000580
 8000b78:	20000538 	.word	0x20000538
 8000b7c:	08006a2c 	.word	0x08006a2c
 8000b80:	200004e8 	.word	0x200004e8
 8000b84:	40020800 	.word	0x40020800
 8000b88:	200000d0 	.word	0x200000d0
 8000b8c:	20000040 	.word	0x20000040
 8000b90:	200000d4 	.word	0x200000d4
 8000b94:	20000041 	.word	0x20000041
 8000b98:	20000684 	.word	0x20000684
 8000b9c:	200000ec 	.word	0x200000ec
 8000ba0:	08006a64 	.word	0x08006a64
 8000ba4:	200000d8 	.word	0x200000d8
 8000ba8:	08006a68 	.word	0x08006a68
			}
			else
			{
				active_brightness = str[0];
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <main+0x368>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <main+0x36c>)
 8000bb4:	701a      	strb	r2, [r3, #0]
				printf("You enter %d value\r\n", active_brightness);
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <main+0x36c>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4807      	ldr	r0, [pc, #28]	; (8000bdc <main+0x370>)
 8000bbe:	f004 f955 	bl	8004e6c <iprintf>
				printf("PRINT BRIGHTNESS FOR LED In range from 0 to 100->>>>!\r\n");
 8000bc2:	4807      	ldr	r0, [pc, #28]	; (8000be0 <main+0x374>)
 8000bc4:	f004 f9d8 	bl	8004f78 <puts>
			}
			terminal_flag.RX_data = 0;
 8000bc8:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <main+0x378>)
 8000bca:	7813      	ldrb	r3, [r2, #0]
 8000bcc:	f36f 0300 	bfc	r3, #0, #1
 8000bd0:	7013      	strb	r3, [r2, #0]
		switch (button_antibounce_state)
 8000bd2:	e69a      	b.n	800090a <main+0x9e>
 8000bd4:	200000ec 	.word	0x200000ec
 8000bd8:	20000041 	.word	0x20000041
 8000bdc:	08006a8c 	.word	0x08006a8c
 8000be0:	08006a2c 	.word	0x08006a2c
 8000be4:	20000684 	.word	0x20000684

08000be8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b094      	sub	sp, #80	; 0x50
 8000bec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000bee:	f107 0320 	add.w	r3, r7, #32
 8000bf2:	2230      	movs	r2, #48	; 0x30
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f004 f930 	bl	8004e5c <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	4b2b      	ldr	r3, [pc, #172]	; (8000cc0 <SystemClock_Config+0xd8>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c14:	4a2a      	ldr	r2, [pc, #168]	; (8000cc0 <SystemClock_Config+0xd8>)
 8000c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1c:	4b28      	ldr	r3, [pc, #160]	; (8000cc0 <SystemClock_Config+0xd8>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <SystemClock_Config+0xdc>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a24      	ldr	r2, [pc, #144]	; (8000cc4 <SystemClock_Config+0xdc>)
 8000c32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c36:	6013      	str	r3, [r2, #0]
 8000c38:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <SystemClock_Config+0xdc>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c44:	2302      	movs	r3, #2
 8000c46:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c4c:	2310      	movs	r3, #16
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c50:	2302      	movs	r3, #2
 8000c52:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c54:	2300      	movs	r3, #0
 8000c56:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000c58:	2308      	movs	r3, #8
 8000c5a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000c5c:	23b4      	movs	r3, #180	; 0xb4
 8000c5e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c60:	2302      	movs	r3, #2
 8000c62:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c64:	2304      	movs	r3, #4
 8000c66:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c68:	f107 0320 	add.w	r3, r7, #32
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 fb85 	bl	800237c <HAL_RCC_OscConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000c78:	f000 f826 	bl	8000cc8 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c7c:	f001 fb2e 	bl	80022dc <HAL_PWREx_EnableOverDrive>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0xa2>
	{
		Error_Handler();
 8000c86:	f000 f81f 	bl	8000cc8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c9a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ca2:	f107 030c 	add.w	r3, r7, #12
 8000ca6:	2105      	movs	r1, #5
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f001 fddf 	bl	800286c <HAL_RCC_ClockConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <SystemClock_Config+0xd0>
	{
		Error_Handler();
 8000cb4:	f000 f808 	bl	8000cc8 <Error_Handler>
	}
}
 8000cb8:	bf00      	nop
 8000cba:	3750      	adds	r7, #80	; 0x50
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40007000 	.word	0x40007000

08000cc8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <Error_Handler+0x8>

08000cd2 <HAL_SYSTICK_Callback>:
#include "Ptimer.h"

extern globalFlags_t gflag;

inline void HAL_SYSTICK_Callback(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
  PTimer();
 8000cd6:	f7ff fcb7 	bl	8000648 <PTimer>
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <HAL_GPIO_EXTI_Callback>:

inline void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80fb      	strh	r3, [r7, #6]
 /* Prevent unused argument(s) compilation warning */
 UNUSED(GPIO_Pin);
 /* Set button pressed flag and disable EXTI0 IRQ */
 gflag.button_action = 1;
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <HAL_GPIO_EXTI_Callback+0x20>)
 8000cec:	7813      	ldrb	r3, [r2, #0]
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	7013      	strb	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	200004e8 	.word	0x200004e8

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <NMI_Handler+0x4>

08000d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <MemManage_Handler+0x4>

08000d66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  HAL_SYSTICK_IRQHandler();
 8000da0:	f000 fd3d 	bl	800181e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da4:	f000 fc0a 	bl	80015bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}

08000dac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <DMA1_Stream1_IRQHandler+0x10>)
 8000db2:	f000 fe7b 	bl	8001aac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000624 	.word	0x20000624

08000dc0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <DMA1_Stream3_IRQHandler+0x10>)
 8000dc6:	f000 fe71 	bl	8001aac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200005c4 	.word	0x200005c4

08000dd4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000dda:	f002 f897 	bl	8002f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200004f0 	.word	0x200004f0

08000de8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <TIM2_IRQHandler+0x10>)
 8000dee:	f002 f88d 	bl	8002f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000538 	.word	0x20000538

08000dfc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <USART3_IRQHandler+0x10>)
 8000e02:	f003 f899 	bl	8003f38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000580 	.word	0x20000580

08000e10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI_Pin);
 8000e14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e18:	f001 fa48 	bl	80022ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	e00a      	b.n	8000e48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e32:	f000 faeb 	bl	800140c <__io_getchar>
 8000e36:	4601      	mov	r1, r0
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	1c5a      	adds	r2, r3, #1
 8000e3c:	60ba      	str	r2, [r7, #8]
 8000e3e:	b2ca      	uxtb	r2, r1
 8000e40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	3301      	adds	r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	dbf0      	blt.n	8000e32 <_read+0x12>
	}

return len;
 8000e50:	687b      	ldr	r3, [r7, #4]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	60f8      	str	r0, [r7, #12]
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	e009      	b.n	8000e80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	60ba      	str	r2, [r7, #8]
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 fab7 	bl	80013e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dbf1      	blt.n	8000e6c <_write+0x12>
	}
	return len;
 8000e88:	687b      	ldr	r3, [r7, #4]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <_close>:

int _close(int file)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
	return -1;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
 8000eb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eba:	605a      	str	r2, [r3, #4]
	return 0;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <_isatty>:

int _isatty(int file)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
	return 0;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f04:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <_sbrk+0x5c>)
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <_sbrk+0x60>)
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <_sbrk+0x64>)
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <_sbrk+0x68>)
 8000f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d207      	bcs.n	8000f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f2c:	f003 ff6c 	bl	8004e08 <__errno>
 8000f30:	4603      	mov	r3, r0
 8000f32:	220c      	movs	r2, #12
 8000f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	e009      	b.n	8000f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <_sbrk+0x64>)
 8000f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20030000 	.word	0x20030000
 8000f5c:	00000400 	.word	0x00000400
 8000f60:	200004ec 	.word	0x200004ec
 8000f64:	200006a0 	.word	0x200006a0

08000f68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <SystemInit+0x20>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <SystemInit+0x20>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <MX_TIM1_Init+0x9c>)
 8000faa:	4a20      	ldr	r2, [pc, #128]	; (800102c <MX_TIM1_Init+0xa0>)
 8000fac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 900-1;
 8000fae:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <MX_TIM1_Init+0x9c>)
 8000fb0:	f240 3283 	movw	r2, #899	; 0x383
 8000fb4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <MX_TIM1_Init+0x9c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 400-1;
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <MX_TIM1_Init+0x9c>)
 8000fbe:	f240 128f 	movw	r2, #399	; 0x18f
 8000fc2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <MX_TIM1_Init+0x9c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <MX_TIM1_Init+0x9c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd0:	4b15      	ldr	r3, [pc, #84]	; (8001028 <MX_TIM1_Init+0x9c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fd6:	4814      	ldr	r0, [pc, #80]	; (8001028 <MX_TIM1_Init+0x9c>)
 8000fd8:	f001 fe28 	bl	8002c2c <HAL_TIM_Base_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000fe2:	f7ff fe71 	bl	8000cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	480d      	ldr	r0, [pc, #52]	; (8001028 <MX_TIM1_Init+0x9c>)
 8000ff4:	f002 f954 	bl	80032a0 <HAL_TIM_ConfigClockSource>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000ffe:	f7ff fe63 	bl	8000cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001002:	2300      	movs	r3, #0
 8001004:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800100a:	463b      	mov	r3, r7
 800100c:	4619      	mov	r1, r3
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <MX_TIM1_Init+0x9c>)
 8001010:	f002 fd50 	bl	8003ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800101a:	f7ff fe55 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200004f0 	.word	0x200004f0
 800102c:	40010000 	.word	0x40010000

08001030 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08e      	sub	sp, #56	; 0x38
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001036:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	f107 0320 	add.w	r3, r7, #32
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
 800105c:	615a      	str	r2, [r3, #20]
 800105e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001060:	4b32      	ldr	r3, [pc, #200]	; (800112c <MX_TIM2_Init+0xfc>)
 8001062:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001066:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 18000-1;
 8001068:	4b30      	ldr	r3, [pc, #192]	; (800112c <MX_TIM2_Init+0xfc>)
 800106a:	f244 624f 	movw	r2, #17999	; 0x464f
 800106e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b2e      	ldr	r3, [pc, #184]	; (800112c <MX_TIM2_Init+0xfc>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001076:	4b2d      	ldr	r3, [pc, #180]	; (800112c <MX_TIM2_Init+0xfc>)
 8001078:	2263      	movs	r2, #99	; 0x63
 800107a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107c:	4b2b      	ldr	r3, [pc, #172]	; (800112c <MX_TIM2_Init+0xfc>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001082:	4b2a      	ldr	r3, [pc, #168]	; (800112c <MX_TIM2_Init+0xfc>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001088:	4828      	ldr	r0, [pc, #160]	; (800112c <MX_TIM2_Init+0xfc>)
 800108a:	f001 fdcf 	bl	8002c2c <HAL_TIM_Base_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001094:	f7ff fe18 	bl	8000cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800109e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a2:	4619      	mov	r1, r3
 80010a4:	4821      	ldr	r0, [pc, #132]	; (800112c <MX_TIM2_Init+0xfc>)
 80010a6:	f002 f8fb 	bl	80032a0 <HAL_TIM_ConfigClockSource>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80010b0:	f7ff fe0a 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010b4:	481d      	ldr	r0, [pc, #116]	; (800112c <MX_TIM2_Init+0xfc>)
 80010b6:	f001 fe08 	bl	8002cca <HAL_TIM_PWM_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80010c0:	f7ff fe02 	bl	8000cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010cc:	f107 0320 	add.w	r3, r7, #32
 80010d0:	4619      	mov	r1, r3
 80010d2:	4816      	ldr	r0, [pc, #88]	; (800112c <MX_TIM2_Init+0xfc>)
 80010d4:	f002 fcee 	bl	8003ab4 <HAL_TIMEx_MasterConfigSynchronization>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80010de:	f7ff fdf3 	bl	8000cc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e2:	2360      	movs	r3, #96	; 0x60
 80010e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2200      	movs	r2, #0
 80010f6:	4619      	mov	r1, r3
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <MX_TIM2_Init+0xfc>)
 80010fa:	f002 f80f 	bl	800311c <HAL_TIM_PWM_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001104:	f7ff fde0 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2204      	movs	r2, #4
 800110c:	4619      	mov	r1, r3
 800110e:	4807      	ldr	r0, [pc, #28]	; (800112c <MX_TIM2_Init+0xfc>)
 8001110:	f002 f804 	bl	800311c <HAL_TIM_PWM_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800111a:	f7ff fdd5 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800111e:	4803      	ldr	r0, [pc, #12]	; (800112c <MX_TIM2_Init+0xfc>)
 8001120:	f000 f84a 	bl	80011b8 <HAL_TIM_MspPostInit>

}
 8001124:	bf00      	nop
 8001126:	3738      	adds	r7, #56	; 0x38
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000538 	.word	0x20000538

08001130 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a1c      	ldr	r2, [pc, #112]	; (80011b0 <HAL_TIM_Base_MspInit+0x80>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d116      	bne.n	8001170 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <HAL_TIM_Base_MspInit+0x84>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a1a      	ldr	r2, [pc, #104]	; (80011b4 <HAL_TIM_Base_MspInit+0x84>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <HAL_TIM_Base_MspInit+0x84>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	2019      	movs	r0, #25
 8001164:	f000 fb25 	bl	80017b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001168:	2019      	movs	r0, #25
 800116a:	f000 fb3e 	bl	80017ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800116e:	e01a      	b.n	80011a6 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM2)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001178:	d115      	bne.n	80011a6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <HAL_TIM_Base_MspInit+0x84>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <HAL_TIM_Base_MspInit+0x84>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6413      	str	r3, [r2, #64]	; 0x40
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <HAL_TIM_Base_MspInit+0x84>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	201c      	movs	r0, #28
 800119c:	f000 fb09 	bl	80017b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011a0:	201c      	movs	r0, #28
 80011a2:	f000 fb22 	bl	80017ea <HAL_NVIC_EnableIRQ>
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40010000 	.word	0x40010000
 80011b4:	40023800 	.word	0x40023800

080011b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011d8:	d11d      	bne.n	8001216 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <HAL_TIM_MspPostInit+0x68>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a0f      	ldr	r2, [pc, #60]	; (8001220 <HAL_TIM_MspPostInit+0x68>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <HAL_TIM_MspPostInit+0x68>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011f6:	2303      	movs	r3, #3
 80011f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001206:	2301      	movs	r3, #1
 8001208:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	4619      	mov	r1, r3
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <HAL_TIM_MspPostInit+0x6c>)
 8001212:	f000 fe87 	bl	8001f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001216:	bf00      	nop
 8001218:	3720      	adds	r7, #32
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40020000 	.word	0x40020000

08001228 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <MX_USART3_UART_Init+0x50>)
 8001230:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 8001234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001238:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 800124e:	220c      	movs	r2, #12
 8001250:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 8001260:	f002 fcb8 	bl	8003bd4 <HAL_UART_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800126a:	f7ff fd2d 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000580 	.word	0x20000580
 8001278:	40004800 	.word	0x40004800

0800127c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a4c      	ldr	r2, [pc, #304]	; (80013cc <HAL_UART_MspInit+0x150>)
 800129a:	4293      	cmp	r3, r2
 800129c:	f040 8091 	bne.w	80013c2 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	4b4a      	ldr	r3, [pc, #296]	; (80013d0 <HAL_UART_MspInit+0x154>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	4a49      	ldr	r2, [pc, #292]	; (80013d0 <HAL_UART_MspInit+0x154>)
 80012aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ae:	6413      	str	r3, [r2, #64]	; 0x40
 80012b0:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <HAL_UART_MspInit+0x154>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	4b43      	ldr	r3, [pc, #268]	; (80013d0 <HAL_UART_MspInit+0x154>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c4:	4a42      	ldr	r2, [pc, #264]	; (80013d0 <HAL_UART_MspInit+0x154>)
 80012c6:	f043 0308 	orr.w	r3, r3, #8
 80012ca:	6313      	str	r3, [r2, #48]	; 0x30
 80012cc:	4b40      	ldr	r3, [pc, #256]	; (80013d0 <HAL_UART_MspInit+0x154>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012ea:	2307      	movs	r3, #7
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	4837      	ldr	r0, [pc, #220]	; (80013d4 <HAL_UART_MspInit+0x158>)
 80012f6:	f000 fe15 	bl	8001f24 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80012fa:	4b37      	ldr	r3, [pc, #220]	; (80013d8 <HAL_UART_MspInit+0x15c>)
 80012fc:	4a37      	ldr	r2, [pc, #220]	; (80013dc <HAL_UART_MspInit+0x160>)
 80012fe:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001300:	4b35      	ldr	r3, [pc, #212]	; (80013d8 <HAL_UART_MspInit+0x15c>)
 8001302:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001306:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001308:	4b33      	ldr	r3, [pc, #204]	; (80013d8 <HAL_UART_MspInit+0x15c>)
 800130a:	2240      	movs	r2, #64	; 0x40
 800130c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800130e:	4b32      	ldr	r3, [pc, #200]	; (80013d8 <HAL_UART_MspInit+0x15c>)
 8001310:	2200      	movs	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001314:	4b30      	ldr	r3, [pc, #192]	; (80013d8 <HAL_UART_MspInit+0x15c>)
 8001316:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800131a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800131c:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <HAL_UART_MspInit+0x15c>)
 800131e:	2200      	movs	r2, #0
 8001320:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001322:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <HAL_UART_MspInit+0x15c>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001328:	4b2b      	ldr	r3, [pc, #172]	; (80013d8 <HAL_UART_MspInit+0x15c>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800132e:	4b2a      	ldr	r3, [pc, #168]	; (80013d8 <HAL_UART_MspInit+0x15c>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001334:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <HAL_UART_MspInit+0x15c>)
 8001336:	2200      	movs	r2, #0
 8001338:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800133a:	4827      	ldr	r0, [pc, #156]	; (80013d8 <HAL_UART_MspInit+0x15c>)
 800133c:	f000 fa76 	bl	800182c <HAL_DMA_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001346:	f7ff fcbf 	bl	8000cc8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a22      	ldr	r2, [pc, #136]	; (80013d8 <HAL_UART_MspInit+0x15c>)
 800134e:	635a      	str	r2, [r3, #52]	; 0x34
 8001350:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <HAL_UART_MspInit+0x15c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001356:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <HAL_UART_MspInit+0x164>)
 8001358:	4a22      	ldr	r2, [pc, #136]	; (80013e4 <HAL_UART_MspInit+0x168>)
 800135a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800135c:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <HAL_UART_MspInit+0x164>)
 800135e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001362:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001364:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <HAL_UART_MspInit+0x164>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <HAL_UART_MspInit+0x164>)
 800136c:	2200      	movs	r2, #0
 800136e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001370:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <HAL_UART_MspInit+0x164>)
 8001372:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001376:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_UART_MspInit+0x164>)
 800137a:	2200      	movs	r2, #0
 800137c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <HAL_UART_MspInit+0x164>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_UART_MspInit+0x164>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <HAL_UART_MspInit+0x164>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_UART_MspInit+0x164>)
 8001392:	2200      	movs	r2, #0
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001396:	4812      	ldr	r0, [pc, #72]	; (80013e0 <HAL_UART_MspInit+0x164>)
 8001398:	f000 fa48 	bl	800182c <HAL_DMA_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80013a2:	f7ff fc91 	bl	8000cc8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <HAL_UART_MspInit+0x164>)
 80013aa:	639a      	str	r2, [r3, #56]	; 0x38
 80013ac:	4a0c      	ldr	r2, [pc, #48]	; (80013e0 <HAL_UART_MspInit+0x164>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	2027      	movs	r0, #39	; 0x27
 80013b8:	f000 f9fb 	bl	80017b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80013bc:	2027      	movs	r0, #39	; 0x27
 80013be:	f000 fa14 	bl	80017ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80013c2:	bf00      	nop
 80013c4:	3728      	adds	r7, #40	; 0x28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40004800 	.word	0x40004800
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020c00 	.word	0x40020c00
 80013d8:	200005c4 	.word	0x200005c4
 80013dc:	40026058 	.word	0x40026058
 80013e0:	20000624 	.word	0x20000624
 80013e4:	40026028 	.word	0x40026028

080013e8 <__io_putchar>:
extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_tx;
extern DMA_HandleTypeDef hdma_usart3_rx;

int __io_putchar(int ch)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80013f0:	1d39      	adds	r1, r7, #4
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	2201      	movs	r2, #1
 80013f8:	4803      	ldr	r0, [pc, #12]	; (8001408 <__io_putchar+0x20>)
 80013fa:	f002 fc38 	bl	8003c6e <HAL_UART_Transmit>
	return 0;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000580 	.word	0x20000580

0800140c <__io_getchar>:
//Receive one char in blocking mode
int __io_getchar(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
	uint8_t result;
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8001412:	2300      	movs	r3, #0
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <__io_getchar+0x40>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <__io_getchar+0x40>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	683b      	ldr	r3, [r7, #0]
	HAL_UART_Receive(&huart3, &result, 1, HAL_MAX_DELAY);
 8001428:	1df9      	adds	r1, r7, #7
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	2201      	movs	r2, #1
 8001430:	4806      	ldr	r0, [pc, #24]	; (800144c <__io_getchar+0x40>)
 8001432:	f002 fcae 	bl	8003d92 <HAL_UART_Receive>
	if (result == '\r')
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	2b0d      	cmp	r3, #13
 800143a:	d101      	bne.n	8001440 <__io_getchar+0x34>
		result = '\n'; // Dirty hack. Replace "return" character with "new line" character
 800143c:	230a      	movs	r3, #10
 800143e:	71fb      	strb	r3, [r7, #7]
	return (int) result;
 8001440:	79fb      	ldrb	r3, [r7, #7]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000580 	.word	0x20000580

08001450 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a15      	ldr	r2, [pc, #84]	; (80014b0 <HAL_UART_RxCpltCallback+0x60>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d122      	bne.n	80014a6 <HAL_UART_RxCpltCallback+0x56>
	{
		HAL_UART_Receive_IT(&huart3, &value, 1);
 8001460:	2201      	movs	r2, #1
 8001462:	4914      	ldr	r1, [pc, #80]	; (80014b4 <HAL_UART_RxCpltCallback+0x64>)
 8001464:	4812      	ldr	r0, [pc, #72]	; (80014b0 <HAL_UART_RxCpltCallback+0x60>)
 8001466:	f002 fd36 	bl	8003ed6 <HAL_UART_Receive_IT>
		//	sscanf(value,"%d",&buff[counter]);
		buff[counter] = value;
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <HAL_UART_RxCpltCallback+0x68>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	461a      	mov	r2, r3
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <HAL_UART_RxCpltCallback+0x64>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b2d9      	uxtb	r1, r3
 8001478:	4b10      	ldr	r3, [pc, #64]	; (80014bc <HAL_UART_RxCpltCallback+0x6c>)
 800147a:	5499      	strb	r1, [r3, r2]

		if (value == '\r')
 800147c:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <HAL_UART_RxCpltCallback+0x64>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b0d      	cmp	r3, #13
 8001484:	d108      	bne.n	8001498 <HAL_UART_RxCpltCallback+0x48>
		{
			counter = 0;
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_UART_RxCpltCallback+0x68>)
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
			terminal_flag.RX_data = 1;
 800148c:	4a0c      	ldr	r2, [pc, #48]	; (80014c0 <HAL_UART_RxCpltCallback+0x70>)
 800148e:	7813      	ldrb	r3, [r2, #0]
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	7013      	strb	r3, [r2, #0]
		}
		else
			counter++;
	}
}
 8001496:	e006      	b.n	80014a6 <HAL_UART_RxCpltCallback+0x56>
			counter++;
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <HAL_UART_RxCpltCallback+0x68>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <HAL_UART_RxCpltCallback+0x68>)
 80014a4:	701a      	strb	r2, [r3, #0]
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000580 	.word	0x20000580
 80014b4:	200000e8 	.word	0x200000e8
 80014b8:	200000d5 	.word	0x200000d5
 80014bc:	200000d8 	.word	0x200000d8
 80014c0:	20000684 	.word	0x20000684

080014c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
   ldr   sp, =_estack       /* set stack pointer */
 80014c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014fc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014c8:	480d      	ldr	r0, [pc, #52]	; (8001500 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ca:	490e      	ldr	r1, [pc, #56]	; (8001504 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014cc:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d0:	e002      	b.n	80014d8 <LoopCopyDataInit>

080014d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d6:	3304      	adds	r3, #4

080014d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014dc:	d3f9      	bcc.n	80014d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014de:	4a0b      	ldr	r2, [pc, #44]	; (800150c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014e0:	4c0b      	ldr	r4, [pc, #44]	; (8001510 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e4:	e001      	b.n	80014ea <LoopFillZerobss>

080014e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e8:	3204      	adds	r2, #4

080014ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ec:	d3fb      	bcc.n	80014e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014ee:	f7ff fd3b 	bl	8000f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014f2:	f003 fc8f 	bl	8004e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014f6:	f7ff f9b9 	bl	800086c <main>
  bx  lr    
 80014fa:	4770      	bx	lr
   ldr   sp, =_estack       /* set stack pointer */
 80014fc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001504:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001508:	08006c94 	.word	0x08006c94
  ldr r2, =_sbss
 800150c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001510:	2000069c 	.word	0x2000069c

08001514 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001514:	e7fe      	b.n	8001514 <ADC_IRQHandler>
	...

08001518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800151c:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <HAL_Init+0x40>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <HAL_Init+0x40>)
 8001522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001526:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_Init+0x40>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <HAL_Init+0x40>)
 800152e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001532:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a07      	ldr	r2, [pc, #28]	; (8001558 <HAL_Init+0x40>)
 800153a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001540:	2003      	movs	r0, #3
 8001542:	f000 f92b 	bl	800179c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001546:	200f      	movs	r0, #15
 8001548:	f000 f808 	bl	800155c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800154c:	f7ff fbda 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023c00 	.word	0x40023c00

0800155c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_InitTick+0x54>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_InitTick+0x58>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001572:	fbb3 f3f1 	udiv	r3, r3, r1
 8001576:	fbb2 f3f3 	udiv	r3, r2, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f000 f943 	bl	8001806 <HAL_SYSTICK_Config>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e00e      	b.n	80015a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b0f      	cmp	r3, #15
 800158e:	d80a      	bhi.n	80015a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001590:	2200      	movs	r2, #0
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f000 f90b 	bl	80017b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800159c:	4a06      	ldr	r2, [pc, #24]	; (80015b8 <HAL_InitTick+0x5c>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	e000      	b.n	80015a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000044 	.word	0x20000044
 80015b4:	2000004c 	.word	0x2000004c
 80015b8:	20000048 	.word	0x20000048

080015bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_IncTick+0x20>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_IncTick+0x24>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <HAL_IncTick+0x24>)
 80015ce:	6013      	str	r3, [r2, #0]
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	2000004c 	.word	0x2000004c
 80015e0:	20000688 	.word	0x20000688

080015e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return uwTick;
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <HAL_GetTick+0x14>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20000688 	.word	0x20000688

080015fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001618:	4013      	ands	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162e:	4a04      	ldr	r2, [pc, #16]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	60d3      	str	r3, [r2, #12]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <__NVIC_GetPriorityGrouping+0x18>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	f003 0307 	and.w	r3, r3, #7
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	2b00      	cmp	r3, #0
 8001670:	db0b      	blt.n	800168a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	f003 021f 	and.w	r2, r3, #31
 8001678:	4907      	ldr	r1, [pc, #28]	; (8001698 <__NVIC_EnableIRQ+0x38>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	095b      	lsrs	r3, r3, #5
 8001680:	2001      	movs	r0, #1
 8001682:	fa00 f202 	lsl.w	r2, r0, r2
 8001686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000e100 	.word	0xe000e100

0800169c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db0a      	blt.n	80016c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	490c      	ldr	r1, [pc, #48]	; (80016e8 <__NVIC_SetPriority+0x4c>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	0112      	lsls	r2, r2, #4
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	440b      	add	r3, r1
 80016c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c4:	e00a      	b.n	80016dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4908      	ldr	r1, [pc, #32]	; (80016ec <__NVIC_SetPriority+0x50>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	3b04      	subs	r3, #4
 80016d4:	0112      	lsls	r2, r2, #4
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	440b      	add	r3, r1
 80016da:	761a      	strb	r2, [r3, #24]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000e100 	.word	0xe000e100
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f1c3 0307 	rsb	r3, r3, #7
 800170a:	2b04      	cmp	r3, #4
 800170c:	bf28      	it	cs
 800170e:	2304      	movcs	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	2b06      	cmp	r3, #6
 8001718:	d902      	bls.n	8001720 <NVIC_EncodePriority+0x30>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3b03      	subs	r3, #3
 800171e:	e000      	b.n	8001722 <NVIC_EncodePriority+0x32>
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	f04f 32ff 	mov.w	r2, #4294967295
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001738:	f04f 31ff 	mov.w	r1, #4294967295
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43d9      	mvns	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	4313      	orrs	r3, r2
         );
}
 800174a:	4618      	mov	r0, r3
 800174c:	3724      	adds	r7, #36	; 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001768:	d301      	bcc.n	800176e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176a:	2301      	movs	r3, #1
 800176c:	e00f      	b.n	800178e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <SysTick_Config+0x40>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001776:	210f      	movs	r1, #15
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f7ff ff8e 	bl	800169c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <SysTick_Config+0x40>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <SysTick_Config+0x40>)
 8001788:	2207      	movs	r2, #7
 800178a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	e000e010 	.word	0xe000e010

0800179c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ff29 	bl	80015fc <__NVIC_SetPriorityGrouping>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c4:	f7ff ff3e 	bl	8001644 <__NVIC_GetPriorityGrouping>
 80017c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	6978      	ldr	r0, [r7, #20]
 80017d0:	f7ff ff8e 	bl	80016f0 <NVIC_EncodePriority>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff5d 	bl	800169c <__NVIC_SetPriority>
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff31 	bl	8001660 <__NVIC_EnableIRQ>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ffa2 	bl	8001758 <SysTick_Config>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001822:	f7ff fa56 	bl	8000cd2 <HAL_SYSTICK_Callback>
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001838:	f7ff fed4 	bl	80015e4 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e099      	b.n	800197c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2202      	movs	r2, #2
 800184c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 0201 	bic.w	r2, r2, #1
 8001866:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001868:	e00f      	b.n	800188a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800186a:	f7ff febb 	bl	80015e4 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b05      	cmp	r3, #5
 8001876:	d908      	bls.n	800188a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2220      	movs	r2, #32
 800187c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2203      	movs	r2, #3
 8001882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e078      	b.n	800197c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1e8      	bne.n	800186a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	4b38      	ldr	r3, [pc, #224]	; (8001984 <HAL_DMA_Init+0x158>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4313      	orrs	r3, r2
 80018da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d107      	bne.n	80018f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	4313      	orrs	r3, r2
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f023 0307 	bic.w	r3, r3, #7
 800190a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	4313      	orrs	r3, r2
 8001914:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	2b04      	cmp	r3, #4
 800191c:	d117      	bne.n	800194e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	4313      	orrs	r3, r2
 8001926:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00e      	beq.n	800194e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 fa7b 	bl	8001e2c <DMA_CheckFifoParam>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d008      	beq.n	800194e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2240      	movs	r2, #64	; 0x40
 8001940:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800194a:	2301      	movs	r3, #1
 800194c:	e016      	b.n	800197c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 fa32 	bl	8001dc0 <DMA_CalcBaseAndBitshift>
 800195c:	4603      	mov	r3, r0
 800195e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001964:	223f      	movs	r2, #63	; 0x3f
 8001966:	409a      	lsls	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	f010803f 	.word	0xf010803f

08001988 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001994:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001996:	f7ff fe25 	bl	80015e4 <HAL_GetTick>
 800199a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d008      	beq.n	80019ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2280      	movs	r2, #128	; 0x80
 80019ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e052      	b.n	8001a60 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0216 	bic.w	r2, r2, #22
 80019c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695a      	ldr	r2, [r3, #20]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d103      	bne.n	80019ea <HAL_DMA_Abort+0x62>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0208 	bic.w	r2, r2, #8
 80019f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0201 	bic.w	r2, r2, #1
 8001a08:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a0a:	e013      	b.n	8001a34 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a0c:	f7ff fdea 	bl	80015e4 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b05      	cmp	r3, #5
 8001a18:	d90c      	bls.n	8001a34 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2203      	movs	r2, #3
 8001a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e015      	b.n	8001a60 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1e4      	bne.n	8001a0c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a46:	223f      	movs	r2, #63	; 0x3f
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d004      	beq.n	8001a86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2280      	movs	r2, #128	; 0x80
 8001a80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e00c      	b.n	8001aa0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2205      	movs	r2, #5
 8001a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0201 	bic.w	r2, r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ab8:	4b8e      	ldr	r3, [pc, #568]	; (8001cf4 <HAL_DMA_IRQHandler+0x248>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a8e      	ldr	r2, [pc, #568]	; (8001cf8 <HAL_DMA_IRQHandler+0x24c>)
 8001abe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac2:	0a9b      	lsrs	r3, r3, #10
 8001ac4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad6:	2208      	movs	r2, #8
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d01a      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d013      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0204 	bic.w	r2, r2, #4
 8001afe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b04:	2208      	movs	r2, #8
 8001b06:	409a      	lsls	r2, r3
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b10:	f043 0201 	orr.w	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d012      	beq.n	8001b4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00b      	beq.n	8001b4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b46:	f043 0202 	orr.w	r2, r3, #2
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b52:	2204      	movs	r2, #4
 8001b54:	409a      	lsls	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d012      	beq.n	8001b84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00b      	beq.n	8001b84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b70:	2204      	movs	r2, #4
 8001b72:	409a      	lsls	r2, r3
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7c:	f043 0204 	orr.w	r2, r3, #4
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b88:	2210      	movs	r2, #16
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d043      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d03c      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba6:	2210      	movs	r2, #16
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d018      	beq.n	8001bee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d108      	bne.n	8001bdc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d024      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	4798      	blx	r3
 8001bda:	e01f      	b.n	8001c1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d01b      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	4798      	blx	r3
 8001bec:	e016      	b.n	8001c1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d107      	bne.n	8001c0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0208 	bic.w	r2, r2, #8
 8001c0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c20:	2220      	movs	r2, #32
 8001c22:	409a      	lsls	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 808f 	beq.w	8001d4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0310 	and.w	r3, r3, #16
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 8087 	beq.w	8001d4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c42:	2220      	movs	r2, #32
 8001c44:	409a      	lsls	r2, r3
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b05      	cmp	r3, #5
 8001c54:	d136      	bne.n	8001cc4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0216 	bic.w	r2, r2, #22
 8001c64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	695a      	ldr	r2, [r3, #20]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d103      	bne.n	8001c86 <HAL_DMA_IRQHandler+0x1da>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d007      	beq.n	8001c96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0208 	bic.w	r2, r2, #8
 8001c94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9a:	223f      	movs	r2, #63	; 0x3f
 8001c9c:	409a      	lsls	r2, r3
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d07e      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	4798      	blx	r3
        }
        return;
 8001cc2:	e079      	b.n	8001db8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d01d      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10d      	bne.n	8001cfc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d031      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	4798      	blx	r3
 8001cf0:	e02c      	b.n	8001d4c <HAL_DMA_IRQHandler+0x2a0>
 8001cf2:	bf00      	nop
 8001cf4:	20000044 	.word	0x20000044
 8001cf8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d023      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	4798      	blx	r3
 8001d0c:	e01e      	b.n	8001d4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10f      	bne.n	8001d3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0210 	bic.w	r2, r2, #16
 8001d2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d032      	beq.n	8001dba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d022      	beq.n	8001da6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2205      	movs	r2, #5
 8001d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0201 	bic.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d307      	bcc.n	8001d94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f2      	bne.n	8001d78 <HAL_DMA_IRQHandler+0x2cc>
 8001d92:	e000      	b.n	8001d96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d005      	beq.n	8001dba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	4798      	blx	r3
 8001db6:	e000      	b.n	8001dba <HAL_DMA_IRQHandler+0x30e>
        return;
 8001db8:	bf00      	nop
    }
  }
}
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	3b10      	subs	r3, #16
 8001dd0:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <DMA_CalcBaseAndBitshift+0x64>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dda:	4a13      	ldr	r2, [pc, #76]	; (8001e28 <DMA_CalcBaseAndBitshift+0x68>)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d909      	bls.n	8001e02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001df6:	f023 0303 	bic.w	r3, r3, #3
 8001dfa:	1d1a      	adds	r2, r3, #4
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	659a      	str	r2, [r3, #88]	; 0x58
 8001e00:	e007      	b.n	8001e12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e0a:	f023 0303 	bic.w	r3, r3, #3
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	aaaaaaab 	.word	0xaaaaaaab
 8001e28:	08006ac8 	.word	0x08006ac8

08001e2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d11f      	bne.n	8001e86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d856      	bhi.n	8001efa <DMA_CheckFifoParam+0xce>
 8001e4c:	a201      	add	r2, pc, #4	; (adr r2, 8001e54 <DMA_CheckFifoParam+0x28>)
 8001e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e52:	bf00      	nop
 8001e54:	08001e65 	.word	0x08001e65
 8001e58:	08001e77 	.word	0x08001e77
 8001e5c:	08001e65 	.word	0x08001e65
 8001e60:	08001efb 	.word	0x08001efb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d046      	beq.n	8001efe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e74:	e043      	b.n	8001efe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e7e:	d140      	bne.n	8001f02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e84:	e03d      	b.n	8001f02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e8e:	d121      	bne.n	8001ed4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d837      	bhi.n	8001f06 <DMA_CheckFifoParam+0xda>
 8001e96:	a201      	add	r2, pc, #4	; (adr r2, 8001e9c <DMA_CheckFifoParam+0x70>)
 8001e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9c:	08001ead 	.word	0x08001ead
 8001ea0:	08001eb3 	.word	0x08001eb3
 8001ea4:	08001ead 	.word	0x08001ead
 8001ea8:	08001ec5 	.word	0x08001ec5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
      break;
 8001eb0:	e030      	b.n	8001f14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d025      	beq.n	8001f0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ec2:	e022      	b.n	8001f0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ecc:	d11f      	bne.n	8001f0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ed2:	e01c      	b.n	8001f0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d903      	bls.n	8001ee2 <DMA_CheckFifoParam+0xb6>
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d003      	beq.n	8001ee8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ee0:	e018      	b.n	8001f14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ee6:	e015      	b.n	8001f14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00e      	beq.n	8001f12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ef8:	e00b      	b.n	8001f12 <DMA_CheckFifoParam+0xe6>
      break;
 8001efa:	bf00      	nop
 8001efc:	e00a      	b.n	8001f14 <DMA_CheckFifoParam+0xe8>
      break;
 8001efe:	bf00      	nop
 8001f00:	e008      	b.n	8001f14 <DMA_CheckFifoParam+0xe8>
      break;
 8001f02:	bf00      	nop
 8001f04:	e006      	b.n	8001f14 <DMA_CheckFifoParam+0xe8>
      break;
 8001f06:	bf00      	nop
 8001f08:	e004      	b.n	8001f14 <DMA_CheckFifoParam+0xe8>
      break;
 8001f0a:	bf00      	nop
 8001f0c:	e002      	b.n	8001f14 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f0e:	bf00      	nop
 8001f10:	e000      	b.n	8001f14 <DMA_CheckFifoParam+0xe8>
      break;
 8001f12:	bf00      	nop
    }
  } 
  
  return status; 
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop

08001f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	e177      	b.n	8002230 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f40:	2201      	movs	r2, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	f040 8166 	bne.w	800222a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d005      	beq.n	8001f76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d130      	bne.n	8001fd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	2203      	movs	r2, #3
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fac:	2201      	movs	r2, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	f003 0201 	and.w	r2, r3, #1
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d017      	beq.n	8002014 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d123      	bne.n	8002068 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	08da      	lsrs	r2, r3, #3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3208      	adds	r2, #8
 8002028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800202c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	220f      	movs	r2, #15
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	08da      	lsrs	r2, r3, #3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3208      	adds	r2, #8
 8002062:	69b9      	ldr	r1, [r7, #24]
 8002064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	2203      	movs	r2, #3
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0203 	and.w	r2, r3, #3
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 80c0 	beq.w	800222a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	4b66      	ldr	r3, [pc, #408]	; (8002248 <HAL_GPIO_Init+0x324>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	4a65      	ldr	r2, [pc, #404]	; (8002248 <HAL_GPIO_Init+0x324>)
 80020b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ba:	4b63      	ldr	r3, [pc, #396]	; (8002248 <HAL_GPIO_Init+0x324>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020c6:	4a61      	ldr	r2, [pc, #388]	; (800224c <HAL_GPIO_Init+0x328>)
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	089b      	lsrs	r3, r3, #2
 80020cc:	3302      	adds	r3, #2
 80020ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	220f      	movs	r2, #15
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a58      	ldr	r2, [pc, #352]	; (8002250 <HAL_GPIO_Init+0x32c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d037      	beq.n	8002162 <HAL_GPIO_Init+0x23e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a57      	ldr	r2, [pc, #348]	; (8002254 <HAL_GPIO_Init+0x330>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d031      	beq.n	800215e <HAL_GPIO_Init+0x23a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a56      	ldr	r2, [pc, #344]	; (8002258 <HAL_GPIO_Init+0x334>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d02b      	beq.n	800215a <HAL_GPIO_Init+0x236>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a55      	ldr	r2, [pc, #340]	; (800225c <HAL_GPIO_Init+0x338>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d025      	beq.n	8002156 <HAL_GPIO_Init+0x232>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a54      	ldr	r2, [pc, #336]	; (8002260 <HAL_GPIO_Init+0x33c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d01f      	beq.n	8002152 <HAL_GPIO_Init+0x22e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a53      	ldr	r2, [pc, #332]	; (8002264 <HAL_GPIO_Init+0x340>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d019      	beq.n	800214e <HAL_GPIO_Init+0x22a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a52      	ldr	r2, [pc, #328]	; (8002268 <HAL_GPIO_Init+0x344>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d013      	beq.n	800214a <HAL_GPIO_Init+0x226>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a51      	ldr	r2, [pc, #324]	; (800226c <HAL_GPIO_Init+0x348>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00d      	beq.n	8002146 <HAL_GPIO_Init+0x222>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a50      	ldr	r2, [pc, #320]	; (8002270 <HAL_GPIO_Init+0x34c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d007      	beq.n	8002142 <HAL_GPIO_Init+0x21e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a4f      	ldr	r2, [pc, #316]	; (8002274 <HAL_GPIO_Init+0x350>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d101      	bne.n	800213e <HAL_GPIO_Init+0x21a>
 800213a:	2309      	movs	r3, #9
 800213c:	e012      	b.n	8002164 <HAL_GPIO_Init+0x240>
 800213e:	230a      	movs	r3, #10
 8002140:	e010      	b.n	8002164 <HAL_GPIO_Init+0x240>
 8002142:	2308      	movs	r3, #8
 8002144:	e00e      	b.n	8002164 <HAL_GPIO_Init+0x240>
 8002146:	2307      	movs	r3, #7
 8002148:	e00c      	b.n	8002164 <HAL_GPIO_Init+0x240>
 800214a:	2306      	movs	r3, #6
 800214c:	e00a      	b.n	8002164 <HAL_GPIO_Init+0x240>
 800214e:	2305      	movs	r3, #5
 8002150:	e008      	b.n	8002164 <HAL_GPIO_Init+0x240>
 8002152:	2304      	movs	r3, #4
 8002154:	e006      	b.n	8002164 <HAL_GPIO_Init+0x240>
 8002156:	2303      	movs	r3, #3
 8002158:	e004      	b.n	8002164 <HAL_GPIO_Init+0x240>
 800215a:	2302      	movs	r3, #2
 800215c:	e002      	b.n	8002164 <HAL_GPIO_Init+0x240>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_GPIO_Init+0x240>
 8002162:	2300      	movs	r3, #0
 8002164:	69fa      	ldr	r2, [r7, #28]
 8002166:	f002 0203 	and.w	r2, r2, #3
 800216a:	0092      	lsls	r2, r2, #2
 800216c:	4093      	lsls	r3, r2
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002174:	4935      	ldr	r1, [pc, #212]	; (800224c <HAL_GPIO_Init+0x328>)
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	3302      	adds	r3, #2
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002182:	4b3d      	ldr	r3, [pc, #244]	; (8002278 <HAL_GPIO_Init+0x354>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021a6:	4a34      	ldr	r2, [pc, #208]	; (8002278 <HAL_GPIO_Init+0x354>)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021ac:	4b32      	ldr	r3, [pc, #200]	; (8002278 <HAL_GPIO_Init+0x354>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021d0:	4a29      	ldr	r2, [pc, #164]	; (8002278 <HAL_GPIO_Init+0x354>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021d6:	4b28      	ldr	r3, [pc, #160]	; (8002278 <HAL_GPIO_Init+0x354>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021fa:	4a1f      	ldr	r2, [pc, #124]	; (8002278 <HAL_GPIO_Init+0x354>)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002200:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <HAL_GPIO_Init+0x354>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002224:	4a14      	ldr	r2, [pc, #80]	; (8002278 <HAL_GPIO_Init+0x354>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3301      	adds	r3, #1
 800222e:	61fb      	str	r3, [r7, #28]
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	2b0f      	cmp	r3, #15
 8002234:	f67f ae84 	bls.w	8001f40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3724      	adds	r7, #36	; 0x24
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800
 800224c:	40013800 	.word	0x40013800
 8002250:	40020000 	.word	0x40020000
 8002254:	40020400 	.word	0x40020400
 8002258:	40020800 	.word	0x40020800
 800225c:	40020c00 	.word	0x40020c00
 8002260:	40021000 	.word	0x40021000
 8002264:	40021400 	.word	0x40021400
 8002268:	40021800 	.word	0x40021800
 800226c:	40021c00 	.word	0x40021c00
 8002270:	40022000 	.word	0x40022000
 8002274:	40022400 	.word	0x40022400
 8002278:	40013c00 	.word	0x40013c00

0800227c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	887b      	ldrh	r3, [r7, #2]
 800228e:	4013      	ands	r3, r2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002294:	2301      	movs	r3, #1
 8002296:	73fb      	strb	r3, [r7, #15]
 8002298:	e001      	b.n	800229e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800229e:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	4013      	ands	r3, r2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022c2:	4a05      	ldr	r2, [pc, #20]	; (80022d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022c4:	88fb      	ldrh	r3, [r7, #6]
 80022c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022c8:	88fb      	ldrh	r3, [r7, #6]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe fd08 	bl	8000ce0 <HAL_GPIO_EXTI_Callback>
  }
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40013c00 	.word	0x40013c00

080022dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	603b      	str	r3, [r7, #0]
 80022ea:	4b20      	ldr	r3, [pc, #128]	; (800236c <HAL_PWREx_EnableOverDrive+0x90>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	4a1f      	ldr	r2, [pc, #124]	; (800236c <HAL_PWREx_EnableOverDrive+0x90>)
 80022f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f4:	6413      	str	r3, [r2, #64]	; 0x40
 80022f6:	4b1d      	ldr	r3, [pc, #116]	; (800236c <HAL_PWREx_EnableOverDrive+0x90>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fe:	603b      	str	r3, [r7, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002302:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <HAL_PWREx_EnableOverDrive+0x94>)
 8002304:	2201      	movs	r2, #1
 8002306:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002308:	f7ff f96c 	bl	80015e4 <HAL_GetTick>
 800230c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800230e:	e009      	b.n	8002324 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002310:	f7ff f968 	bl	80015e4 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800231e:	d901      	bls.n	8002324 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e01f      	b.n	8002364 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <HAL_PWREx_EnableOverDrive+0x98>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002330:	d1ee      	bne.n	8002310 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002334:	2201      	movs	r2, #1
 8002336:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002338:	f7ff f954 	bl	80015e4 <HAL_GetTick>
 800233c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800233e:	e009      	b.n	8002354 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002340:	f7ff f950 	bl	80015e4 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800234e:	d901      	bls.n	8002354 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e007      	b.n	8002364 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002354:	4b07      	ldr	r3, [pc, #28]	; (8002374 <HAL_PWREx_EnableOverDrive+0x98>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002360:	d1ee      	bne.n	8002340 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40023800 	.word	0x40023800
 8002370:	420e0040 	.word	0x420e0040
 8002374:	40007000 	.word	0x40007000
 8002378:	420e0044 	.word	0x420e0044

0800237c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e267      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d075      	beq.n	8002486 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800239a:	4b88      	ldr	r3, [pc, #544]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d00c      	beq.n	80023c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023a6:	4b85      	ldr	r3, [pc, #532]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d112      	bne.n	80023d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023b2:	4b82      	ldr	r3, [pc, #520]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023be:	d10b      	bne.n	80023d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c0:	4b7e      	ldr	r3, [pc, #504]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d05b      	beq.n	8002484 <HAL_RCC_OscConfig+0x108>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d157      	bne.n	8002484 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e242      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e0:	d106      	bne.n	80023f0 <HAL_RCC_OscConfig+0x74>
 80023e2:	4b76      	ldr	r3, [pc, #472]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a75      	ldr	r2, [pc, #468]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 80023e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	e01d      	b.n	800242c <HAL_RCC_OscConfig+0xb0>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0x98>
 80023fa:	4b70      	ldr	r3, [pc, #448]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a6f      	ldr	r2, [pc, #444]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 8002400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	4b6d      	ldr	r3, [pc, #436]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a6c      	ldr	r2, [pc, #432]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 800240c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	e00b      	b.n	800242c <HAL_RCC_OscConfig+0xb0>
 8002414:	4b69      	ldr	r3, [pc, #420]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a68      	ldr	r2, [pc, #416]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 800241a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	4b66      	ldr	r3, [pc, #408]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a65      	ldr	r2, [pc, #404]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 8002426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800242a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d013      	beq.n	800245c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7ff f8d6 	bl	80015e4 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800243c:	f7ff f8d2 	bl	80015e4 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b64      	cmp	r3, #100	; 0x64
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e207      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244e:	4b5b      	ldr	r3, [pc, #364]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCC_OscConfig+0xc0>
 800245a:	e014      	b.n	8002486 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7ff f8c2 	bl	80015e4 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002464:	f7ff f8be 	bl	80015e4 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b64      	cmp	r3, #100	; 0x64
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e1f3      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002476:	4b51      	ldr	r3, [pc, #324]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0xe8>
 8002482:	e000      	b.n	8002486 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d063      	beq.n	800255a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002492:	4b4a      	ldr	r3, [pc, #296]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00b      	beq.n	80024b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800249e:	4b47      	ldr	r3, [pc, #284]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d11c      	bne.n	80024e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024aa:	4b44      	ldr	r3, [pc, #272]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d116      	bne.n	80024e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b6:	4b41      	ldr	r3, [pc, #260]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d005      	beq.n	80024ce <HAL_RCC_OscConfig+0x152>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d001      	beq.n	80024ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e1c7      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ce:	4b3b      	ldr	r3, [pc, #236]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4937      	ldr	r1, [pc, #220]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e2:	e03a      	b.n	800255a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d020      	beq.n	800252e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ec:	4b34      	ldr	r3, [pc, #208]	; (80025c0 <HAL_RCC_OscConfig+0x244>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f2:	f7ff f877 	bl	80015e4 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024fa:	f7ff f873 	bl	80015e4 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e1a8      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250c:	4b2b      	ldr	r3, [pc, #172]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002518:	4b28      	ldr	r3, [pc, #160]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4925      	ldr	r1, [pc, #148]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 8002528:	4313      	orrs	r3, r2
 800252a:	600b      	str	r3, [r1, #0]
 800252c:	e015      	b.n	800255a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800252e:	4b24      	ldr	r3, [pc, #144]	; (80025c0 <HAL_RCC_OscConfig+0x244>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7ff f856 	bl	80015e4 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800253c:	f7ff f852 	bl	80015e4 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e187      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254e:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d036      	beq.n	80025d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d016      	beq.n	800259c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <HAL_RCC_OscConfig+0x248>)
 8002570:	2201      	movs	r2, #1
 8002572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002574:	f7ff f836 	bl	80015e4 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800257c:	f7ff f832 	bl	80015e4 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e167      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258e:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 8002590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0x200>
 800259a:	e01b      	b.n	80025d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_RCC_OscConfig+0x248>)
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a2:	f7ff f81f 	bl	80015e4 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a8:	e00e      	b.n	80025c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025aa:	f7ff f81b 	bl	80015e4 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d907      	bls.n	80025c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e150      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
 80025bc:	40023800 	.word	0x40023800
 80025c0:	42470000 	.word	0x42470000
 80025c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c8:	4b88      	ldr	r3, [pc, #544]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 80025ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1ea      	bne.n	80025aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 8097 	beq.w	8002710 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e2:	2300      	movs	r3, #0
 80025e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025e6:	4b81      	ldr	r3, [pc, #516]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10f      	bne.n	8002612 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	4b7d      	ldr	r3, [pc, #500]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	4a7c      	ldr	r2, [pc, #496]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 80025fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002600:	6413      	str	r3, [r2, #64]	; 0x40
 8002602:	4b7a      	ldr	r3, [pc, #488]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800260e:	2301      	movs	r3, #1
 8002610:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002612:	4b77      	ldr	r3, [pc, #476]	; (80027f0 <HAL_RCC_OscConfig+0x474>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d118      	bne.n	8002650 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800261e:	4b74      	ldr	r3, [pc, #464]	; (80027f0 <HAL_RCC_OscConfig+0x474>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a73      	ldr	r2, [pc, #460]	; (80027f0 <HAL_RCC_OscConfig+0x474>)
 8002624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262a:	f7fe ffdb 	bl	80015e4 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002632:	f7fe ffd7 	bl	80015e4 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e10c      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002644:	4b6a      	ldr	r3, [pc, #424]	; (80027f0 <HAL_RCC_OscConfig+0x474>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d106      	bne.n	8002666 <HAL_RCC_OscConfig+0x2ea>
 8002658:	4b64      	ldr	r3, [pc, #400]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	4a63      	ldr	r2, [pc, #396]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6713      	str	r3, [r2, #112]	; 0x70
 8002664:	e01c      	b.n	80026a0 <HAL_RCC_OscConfig+0x324>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b05      	cmp	r3, #5
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0x30c>
 800266e:	4b5f      	ldr	r3, [pc, #380]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002672:	4a5e      	ldr	r2, [pc, #376]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 8002674:	f043 0304 	orr.w	r3, r3, #4
 8002678:	6713      	str	r3, [r2, #112]	; 0x70
 800267a:	4b5c      	ldr	r3, [pc, #368]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 800267c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267e:	4a5b      	ldr	r2, [pc, #364]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6713      	str	r3, [r2, #112]	; 0x70
 8002686:	e00b      	b.n	80026a0 <HAL_RCC_OscConfig+0x324>
 8002688:	4b58      	ldr	r3, [pc, #352]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	4a57      	ldr	r2, [pc, #348]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 800268e:	f023 0301 	bic.w	r3, r3, #1
 8002692:	6713      	str	r3, [r2, #112]	; 0x70
 8002694:	4b55      	ldr	r3, [pc, #340]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 8002696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002698:	4a54      	ldr	r2, [pc, #336]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 800269a:	f023 0304 	bic.w	r3, r3, #4
 800269e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d015      	beq.n	80026d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7fe ff9c 	bl	80015e4 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ae:	e00a      	b.n	80026c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b0:	f7fe ff98 	bl	80015e4 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e0cb      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c6:	4b49      	ldr	r3, [pc, #292]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 80026c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0ee      	beq.n	80026b0 <HAL_RCC_OscConfig+0x334>
 80026d2:	e014      	b.n	80026fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d4:	f7fe ff86 	bl	80015e4 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026da:	e00a      	b.n	80026f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026dc:	f7fe ff82 	bl	80015e4 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e0b5      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f2:	4b3e      	ldr	r3, [pc, #248]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1ee      	bne.n	80026dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026fe:	7dfb      	ldrb	r3, [r7, #23]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d105      	bne.n	8002710 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002704:	4b39      	ldr	r3, [pc, #228]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	4a38      	ldr	r2, [pc, #224]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 800270a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800270e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80a1 	beq.w	800285c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800271a:	4b34      	ldr	r3, [pc, #208]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
 8002722:	2b08      	cmp	r3, #8
 8002724:	d05c      	beq.n	80027e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d141      	bne.n	80027b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272e:	4b31      	ldr	r3, [pc, #196]	; (80027f4 <HAL_RCC_OscConfig+0x478>)
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7fe ff56 	bl	80015e4 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800273c:	f7fe ff52 	bl	80015e4 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e087      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274e:	4b27      	ldr	r3, [pc, #156]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69da      	ldr	r2, [r3, #28]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	019b      	lsls	r3, r3, #6
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002770:	085b      	lsrs	r3, r3, #1
 8002772:	3b01      	subs	r3, #1
 8002774:	041b      	lsls	r3, r3, #16
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	061b      	lsls	r3, r3, #24
 800277e:	491b      	ldr	r1, [pc, #108]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002784:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <HAL_RCC_OscConfig+0x478>)
 8002786:	2201      	movs	r2, #1
 8002788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278a:	f7fe ff2b 	bl	80015e4 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002792:	f7fe ff27 	bl	80015e4 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e05c      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x416>
 80027b0:	e054      	b.n	800285c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b2:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <HAL_RCC_OscConfig+0x478>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7fe ff14 	bl	80015e4 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c0:	f7fe ff10 	bl	80015e4 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e045      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x444>
 80027de:	e03d      	b.n	800285c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d107      	bne.n	80027f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e038      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40007000 	.word	0x40007000
 80027f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027f8:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_RCC_OscConfig+0x4ec>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d028      	beq.n	8002858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002810:	429a      	cmp	r2, r3
 8002812:	d121      	bne.n	8002858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d11a      	bne.n	8002858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002828:	4013      	ands	r3, r2
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800282e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002830:	4293      	cmp	r3, r2
 8002832:	d111      	bne.n	8002858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283e:	085b      	lsrs	r3, r3, #1
 8002840:	3b01      	subs	r3, #1
 8002842:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002844:	429a      	cmp	r2, r3
 8002846:	d107      	bne.n	8002858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002854:	429a      	cmp	r2, r3
 8002856:	d001      	beq.n	800285c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40023800 	.word	0x40023800

0800286c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0cc      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002880:	4b68      	ldr	r3, [pc, #416]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 030f 	and.w	r3, r3, #15
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d90c      	bls.n	80028a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288e:	4b65      	ldr	r3, [pc, #404]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002896:	4b63      	ldr	r3, [pc, #396]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d001      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0b8      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d020      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028c0:	4b59      	ldr	r3, [pc, #356]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4a58      	ldr	r2, [pc, #352]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d8:	4b53      	ldr	r3, [pc, #332]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	4a52      	ldr	r2, [pc, #328]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e4:	4b50      	ldr	r3, [pc, #320]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	494d      	ldr	r1, [pc, #308]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d044      	beq.n	800298c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d107      	bne.n	800291a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290a:	4b47      	ldr	r3, [pc, #284]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d119      	bne.n	800294a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e07f      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d003      	beq.n	800292a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002926:	2b03      	cmp	r3, #3
 8002928:	d107      	bne.n	800293a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292a:	4b3f      	ldr	r3, [pc, #252]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e06f      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293a:	4b3b      	ldr	r3, [pc, #236]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e067      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800294a:	4b37      	ldr	r3, [pc, #220]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f023 0203 	bic.w	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	4934      	ldr	r1, [pc, #208]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	4313      	orrs	r3, r2
 800295a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800295c:	f7fe fe42 	bl	80015e4 <HAL_GetTick>
 8002960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002962:	e00a      	b.n	800297a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002964:	f7fe fe3e 	bl	80015e4 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e04f      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297a:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 020c 	and.w	r2, r3, #12
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	429a      	cmp	r2, r3
 800298a:	d1eb      	bne.n	8002964 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800298c:	4b25      	ldr	r3, [pc, #148]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d20c      	bcs.n	80029b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299a:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e032      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c0:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4916      	ldr	r1, [pc, #88]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d009      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029de:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	490e      	ldr	r1, [pc, #56]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029f2:	f000 f821 	bl	8002a38 <HAL_RCC_GetSysClockFreq>
 80029f6:	4602      	mov	r2, r0
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	091b      	lsrs	r3, r3, #4
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	490a      	ldr	r1, [pc, #40]	; (8002a2c <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	5ccb      	ldrb	r3, [r1, r3]
 8002a06:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0a:	4a09      	ldr	r2, [pc, #36]	; (8002a30 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a0e:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <HAL_RCC_ClockConfig+0x1c8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe fda2 	bl	800155c <HAL_InitTick>

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40023c00 	.word	0x40023c00
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	08006ab0 	.word	0x08006ab0
 8002a30:	20000044 	.word	0x20000044
 8002a34:	20000048 	.word	0x20000048

08002a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a3c:	b090      	sub	sp, #64	; 0x40
 8002a3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	637b      	str	r3, [r7, #52]	; 0x34
 8002a44:	2300      	movs	r3, #0
 8002a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a48:	2300      	movs	r3, #0
 8002a4a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a50:	4b59      	ldr	r3, [pc, #356]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 030c 	and.w	r3, r3, #12
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d00d      	beq.n	8002a78 <HAL_RCC_GetSysClockFreq+0x40>
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	f200 80a1 	bhi.w	8002ba4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_RCC_GetSysClockFreq+0x34>
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d003      	beq.n	8002a72 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a6a:	e09b      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a6c:	4b53      	ldr	r3, [pc, #332]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x184>)
 8002a6e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002a70:	e09b      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a72:	4b53      	ldr	r3, [pc, #332]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a76:	e098      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a78:	4b4f      	ldr	r3, [pc, #316]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a80:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a82:	4b4d      	ldr	r3, [pc, #308]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d028      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a8e:	4b4a      	ldr	r3, [pc, #296]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	099b      	lsrs	r3, r3, #6
 8002a94:	2200      	movs	r2, #0
 8002a96:	623b      	str	r3, [r7, #32]
 8002a98:	627a      	str	r2, [r7, #36]	; 0x24
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4b47      	ldr	r3, [pc, #284]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002aa4:	fb03 f201 	mul.w	r2, r3, r1
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	fb00 f303 	mul.w	r3, r0, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	4a43      	ldr	r2, [pc, #268]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ab2:	fba0 1202 	umull	r1, r2, r0, r2
 8002ab6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ab8:	460a      	mov	r2, r1
 8002aba:	62ba      	str	r2, [r7, #40]	; 0x28
 8002abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002abe:	4413      	add	r3, r2
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	61bb      	str	r3, [r7, #24]
 8002ac8:	61fa      	str	r2, [r7, #28]
 8002aca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ace:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ad2:	f7fd fbe5 	bl	80002a0 <__aeabi_uldivmod>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4613      	mov	r3, r2
 8002adc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ade:	e053      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae0:	4b35      	ldr	r3, [pc, #212]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	099b      	lsrs	r3, r3, #6
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	617a      	str	r2, [r7, #20]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002af2:	f04f 0b00 	mov.w	fp, #0
 8002af6:	4652      	mov	r2, sl
 8002af8:	465b      	mov	r3, fp
 8002afa:	f04f 0000 	mov.w	r0, #0
 8002afe:	f04f 0100 	mov.w	r1, #0
 8002b02:	0159      	lsls	r1, r3, #5
 8002b04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b08:	0150      	lsls	r0, r2, #5
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	ebb2 080a 	subs.w	r8, r2, sl
 8002b12:	eb63 090b 	sbc.w	r9, r3, fp
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b2a:	ebb2 0408 	subs.w	r4, r2, r8
 8002b2e:	eb63 0509 	sbc.w	r5, r3, r9
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	00eb      	lsls	r3, r5, #3
 8002b3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b40:	00e2      	lsls	r2, r4, #3
 8002b42:	4614      	mov	r4, r2
 8002b44:	461d      	mov	r5, r3
 8002b46:	eb14 030a 	adds.w	r3, r4, sl
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	eb45 030b 	adc.w	r3, r5, fp
 8002b50:	607b      	str	r3, [r7, #4]
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b5e:	4629      	mov	r1, r5
 8002b60:	028b      	lsls	r3, r1, #10
 8002b62:	4621      	mov	r1, r4
 8002b64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b68:	4621      	mov	r1, r4
 8002b6a:	028a      	lsls	r2, r1, #10
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4619      	mov	r1, r3
 8002b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b72:	2200      	movs	r2, #0
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	60fa      	str	r2, [r7, #12]
 8002b78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b7c:	f7fd fb90 	bl	80002a0 <__aeabi_uldivmod>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4613      	mov	r3, r2
 8002b86:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	3301      	adds	r3, #1
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002b98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ba2:	e002      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x184>)
 8002ba6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3740      	adds	r7, #64	; 0x40
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	00f42400 	.word	0x00f42400
 8002bc0:	017d7840 	.word	0x017d7840

08002bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bc8:	4b03      	ldr	r3, [pc, #12]	; (8002bd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bca:	681b      	ldr	r3, [r3, #0]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	20000044 	.word	0x20000044

08002bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002be0:	f7ff fff0 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 8002be4:	4602      	mov	r2, r0
 8002be6:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	0a9b      	lsrs	r3, r3, #10
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	4903      	ldr	r1, [pc, #12]	; (8002c00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bf2:	5ccb      	ldrb	r3, [r1, r3]
 8002bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	08006ac0 	.word	0x08006ac0

08002c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c08:	f7ff ffdc 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	0b5b      	lsrs	r3, r3, #13
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	4903      	ldr	r1, [pc, #12]	; (8002c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c1a:	5ccb      	ldrb	r3, [r1, r3]
 8002c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40023800 	.word	0x40023800
 8002c28:	08006ac0 	.word	0x08006ac0

08002c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e041      	b.n	8002cc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7fe fa6c 	bl	8001130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3304      	adds	r3, #4
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	f000 fc12 	bl	8003494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e041      	b.n	8002d60 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d106      	bne.n	8002cf6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f839 	bl	8002d68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3304      	adds	r3, #4
 8002d06:	4619      	mov	r1, r3
 8002d08:	4610      	mov	r0, r2
 8002d0a:	f000 fbc3 	bl	8003494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <HAL_TIM_PWM_Start+0x24>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	bf14      	ite	ne
 8002d98:	2301      	movne	r3, #1
 8002d9a:	2300      	moveq	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e022      	b.n	8002de6 <HAL_TIM_PWM_Start+0x6a>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d109      	bne.n	8002dba <HAL_TIM_PWM_Start+0x3e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	bf14      	ite	ne
 8002db2:	2301      	movne	r3, #1
 8002db4:	2300      	moveq	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	e015      	b.n	8002de6 <HAL_TIM_PWM_Start+0x6a>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d109      	bne.n	8002dd4 <HAL_TIM_PWM_Start+0x58>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	bf14      	ite	ne
 8002dcc:	2301      	movne	r3, #1
 8002dce:	2300      	moveq	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	e008      	b.n	8002de6 <HAL_TIM_PWM_Start+0x6a>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	bf14      	ite	ne
 8002de0:	2301      	movne	r3, #1
 8002de2:	2300      	moveq	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e07c      	b.n	8002ee8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d104      	bne.n	8002dfe <HAL_TIM_PWM_Start+0x82>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dfc:	e013      	b.n	8002e26 <HAL_TIM_PWM_Start+0xaa>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d104      	bne.n	8002e0e <HAL_TIM_PWM_Start+0x92>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e0c:	e00b      	b.n	8002e26 <HAL_TIM_PWM_Start+0xaa>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d104      	bne.n	8002e1e <HAL_TIM_PWM_Start+0xa2>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e1c:	e003      	b.n	8002e26 <HAL_TIM_PWM_Start+0xaa>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2202      	movs	r2, #2
 8002e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	6839      	ldr	r1, [r7, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 fe1a 	bl	8003a68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a2d      	ldr	r2, [pc, #180]	; (8002ef0 <HAL_TIM_PWM_Start+0x174>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d004      	beq.n	8002e48 <HAL_TIM_PWM_Start+0xcc>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a2c      	ldr	r2, [pc, #176]	; (8002ef4 <HAL_TIM_PWM_Start+0x178>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d101      	bne.n	8002e4c <HAL_TIM_PWM_Start+0xd0>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <HAL_TIM_PWM_Start+0xd2>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d007      	beq.n	8002e62 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a22      	ldr	r2, [pc, #136]	; (8002ef0 <HAL_TIM_PWM_Start+0x174>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d022      	beq.n	8002eb2 <HAL_TIM_PWM_Start+0x136>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e74:	d01d      	beq.n	8002eb2 <HAL_TIM_PWM_Start+0x136>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1f      	ldr	r2, [pc, #124]	; (8002ef8 <HAL_TIM_PWM_Start+0x17c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d018      	beq.n	8002eb2 <HAL_TIM_PWM_Start+0x136>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1d      	ldr	r2, [pc, #116]	; (8002efc <HAL_TIM_PWM_Start+0x180>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d013      	beq.n	8002eb2 <HAL_TIM_PWM_Start+0x136>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1c      	ldr	r2, [pc, #112]	; (8002f00 <HAL_TIM_PWM_Start+0x184>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d00e      	beq.n	8002eb2 <HAL_TIM_PWM_Start+0x136>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a16      	ldr	r2, [pc, #88]	; (8002ef4 <HAL_TIM_PWM_Start+0x178>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d009      	beq.n	8002eb2 <HAL_TIM_PWM_Start+0x136>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <HAL_TIM_PWM_Start+0x188>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d004      	beq.n	8002eb2 <HAL_TIM_PWM_Start+0x136>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a16      	ldr	r2, [pc, #88]	; (8002f08 <HAL_TIM_PWM_Start+0x18c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d111      	bne.n	8002ed6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b06      	cmp	r3, #6
 8002ec2:	d010      	beq.n	8002ee6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed4:	e007      	b.n	8002ee6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0201 	orr.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40010000 	.word	0x40010000
 8002ef4:	40010400 	.word	0x40010400
 8002ef8:	40000400 	.word	0x40000400
 8002efc:	40000800 	.word	0x40000800
 8002f00:	40000c00 	.word	0x40000c00
 8002f04:	40014000 	.word	0x40014000
 8002f08:	40001800 	.word	0x40001800

08002f0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d122      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d11b      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f06f 0202 	mvn.w	r2, #2
 8002f38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fa81 	bl	8003456 <HAL_TIM_IC_CaptureCallback>
 8002f54:	e005      	b.n	8002f62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fa73 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 fa84 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f003 0304 	and.w	r3, r3, #4
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d122      	bne.n	8002fbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d11b      	bne.n	8002fbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0204 	mvn.w	r2, #4
 8002f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2202      	movs	r2, #2
 8002f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fa57 	bl	8003456 <HAL_TIM_IC_CaptureCallback>
 8002fa8:	e005      	b.n	8002fb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fa49 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fa5a 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d122      	bne.n	8003010 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d11b      	bne.n	8003010 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0208 	mvn.w	r2, #8
 8002fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2204      	movs	r2, #4
 8002fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fa2d 	bl	8003456 <HAL_TIM_IC_CaptureCallback>
 8002ffc:	e005      	b.n	800300a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fa1f 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 fa30 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	2b10      	cmp	r3, #16
 800301c:	d122      	bne.n	8003064 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0310 	and.w	r3, r3, #16
 8003028:	2b10      	cmp	r3, #16
 800302a:	d11b      	bne.n	8003064 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0210 	mvn.w	r2, #16
 8003034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2208      	movs	r2, #8
 800303a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fa03 	bl	8003456 <HAL_TIM_IC_CaptureCallback>
 8003050:	e005      	b.n	800305e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f9f5 	bl	8003442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fa06 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b01      	cmp	r3, #1
 8003070:	d10e      	bne.n	8003090 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b01      	cmp	r3, #1
 800307e:	d107      	bne.n	8003090 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0201 	mvn.w	r2, #1
 8003088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f9cf 	bl	800342e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309a:	2b80      	cmp	r3, #128	; 0x80
 800309c:	d10e      	bne.n	80030bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a8:	2b80      	cmp	r3, #128	; 0x80
 80030aa:	d107      	bne.n	80030bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 fd82 	bl	8003bc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c6:	2b40      	cmp	r3, #64	; 0x40
 80030c8:	d10e      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d4:	2b40      	cmp	r3, #64	; 0x40
 80030d6:	d107      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f9cb 	bl	800347e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	d10e      	bne.n	8003114 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f003 0320 	and.w	r3, r3, #32
 8003100:	2b20      	cmp	r3, #32
 8003102:	d107      	bne.n	8003114 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f06f 0220 	mvn.w	r2, #32
 800310c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fd4c 	bl	8003bac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003136:	2302      	movs	r3, #2
 8003138:	e0ae      	b.n	8003298 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b0c      	cmp	r3, #12
 8003146:	f200 809f 	bhi.w	8003288 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800314a:	a201      	add	r2, pc, #4	; (adr r2, 8003150 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800314c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003150:	08003185 	.word	0x08003185
 8003154:	08003289 	.word	0x08003289
 8003158:	08003289 	.word	0x08003289
 800315c:	08003289 	.word	0x08003289
 8003160:	080031c5 	.word	0x080031c5
 8003164:	08003289 	.word	0x08003289
 8003168:	08003289 	.word	0x08003289
 800316c:	08003289 	.word	0x08003289
 8003170:	08003207 	.word	0x08003207
 8003174:	08003289 	.word	0x08003289
 8003178:	08003289 	.word	0x08003289
 800317c:	08003289 	.word	0x08003289
 8003180:	08003247 	.word	0x08003247
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68b9      	ldr	r1, [r7, #8]
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fa22 	bl	80035d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699a      	ldr	r2, [r3, #24]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0208 	orr.w	r2, r2, #8
 800319e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699a      	ldr	r2, [r3, #24]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0204 	bic.w	r2, r2, #4
 80031ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6999      	ldr	r1, [r3, #24]
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	619a      	str	r2, [r3, #24]
      break;
 80031c2:	e064      	b.n	800328e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68b9      	ldr	r1, [r7, #8]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fa72 	bl	80036b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699a      	ldr	r2, [r3, #24]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699a      	ldr	r2, [r3, #24]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6999      	ldr	r1, [r3, #24]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	021a      	lsls	r2, r3, #8
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	619a      	str	r2, [r3, #24]
      break;
 8003204:	e043      	b.n	800328e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68b9      	ldr	r1, [r7, #8]
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fac7 	bl	80037a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	69da      	ldr	r2, [r3, #28]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0208 	orr.w	r2, r2, #8
 8003220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	69da      	ldr	r2, [r3, #28]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0204 	bic.w	r2, r2, #4
 8003230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69d9      	ldr	r1, [r3, #28]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	61da      	str	r2, [r3, #28]
      break;
 8003244:	e023      	b.n	800328e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68b9      	ldr	r1, [r7, #8]
 800324c:	4618      	mov	r0, r3
 800324e:	f000 fb1b 	bl	8003888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	69da      	ldr	r2, [r3, #28]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	69da      	ldr	r2, [r3, #28]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	69d9      	ldr	r1, [r3, #28]
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	021a      	lsls	r2, r3, #8
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	61da      	str	r2, [r3, #28]
      break;
 8003286:	e002      	b.n	800328e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	75fb      	strb	r3, [r7, #23]
      break;
 800328c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003296:	7dfb      	ldrb	r3, [r7, #23]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_TIM_ConfigClockSource+0x1c>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e0b4      	b.n	8003426 <HAL_TIM_ConfigClockSource+0x186>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032f4:	d03e      	beq.n	8003374 <HAL_TIM_ConfigClockSource+0xd4>
 80032f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032fa:	f200 8087 	bhi.w	800340c <HAL_TIM_ConfigClockSource+0x16c>
 80032fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003302:	f000 8086 	beq.w	8003412 <HAL_TIM_ConfigClockSource+0x172>
 8003306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800330a:	d87f      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x16c>
 800330c:	2b70      	cmp	r3, #112	; 0x70
 800330e:	d01a      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0xa6>
 8003310:	2b70      	cmp	r3, #112	; 0x70
 8003312:	d87b      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x16c>
 8003314:	2b60      	cmp	r3, #96	; 0x60
 8003316:	d050      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0x11a>
 8003318:	2b60      	cmp	r3, #96	; 0x60
 800331a:	d877      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x16c>
 800331c:	2b50      	cmp	r3, #80	; 0x50
 800331e:	d03c      	beq.n	800339a <HAL_TIM_ConfigClockSource+0xfa>
 8003320:	2b50      	cmp	r3, #80	; 0x50
 8003322:	d873      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x16c>
 8003324:	2b40      	cmp	r3, #64	; 0x40
 8003326:	d058      	beq.n	80033da <HAL_TIM_ConfigClockSource+0x13a>
 8003328:	2b40      	cmp	r3, #64	; 0x40
 800332a:	d86f      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x16c>
 800332c:	2b30      	cmp	r3, #48	; 0x30
 800332e:	d064      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0x15a>
 8003330:	2b30      	cmp	r3, #48	; 0x30
 8003332:	d86b      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x16c>
 8003334:	2b20      	cmp	r3, #32
 8003336:	d060      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0x15a>
 8003338:	2b20      	cmp	r3, #32
 800333a:	d867      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x16c>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d05c      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0x15a>
 8003340:	2b10      	cmp	r3, #16
 8003342:	d05a      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0x15a>
 8003344:	e062      	b.n	800340c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	6899      	ldr	r1, [r3, #8]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f000 fb67 	bl	8003a28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003368:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	609a      	str	r2, [r3, #8]
      break;
 8003372:	e04f      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	6899      	ldr	r1, [r3, #8]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f000 fb50 	bl	8003a28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003396:	609a      	str	r2, [r3, #8]
      break;
 8003398:	e03c      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	6859      	ldr	r1, [r3, #4]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	461a      	mov	r2, r3
 80033a8:	f000 fac4 	bl	8003934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2150      	movs	r1, #80	; 0x50
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fb1d 	bl	80039f2 <TIM_ITRx_SetConfig>
      break;
 80033b8:	e02c      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6859      	ldr	r1, [r3, #4]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f000 fae3 	bl	8003992 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2160      	movs	r1, #96	; 0x60
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fb0d 	bl	80039f2 <TIM_ITRx_SetConfig>
      break;
 80033d8:	e01c      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	6859      	ldr	r1, [r3, #4]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f000 faa4 	bl	8003934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2140      	movs	r1, #64	; 0x40
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fafd 	bl	80039f2 <TIM_ITRx_SetConfig>
      break;
 80033f8:	e00c      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4619      	mov	r1, r3
 8003404:	4610      	mov	r0, r2
 8003406:	f000 faf4 	bl	80039f2 <TIM_ITRx_SetConfig>
      break;
 800340a:	e003      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	73fb      	strb	r3, [r7, #15]
      break;
 8003410:	e000      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003412:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003424:	7bfb      	ldrb	r3, [r7, #15]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
	...

08003494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a40      	ldr	r2, [pc, #256]	; (80035a8 <TIM_Base_SetConfig+0x114>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d013      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b2:	d00f      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a3d      	ldr	r2, [pc, #244]	; (80035ac <TIM_Base_SetConfig+0x118>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00b      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a3c      	ldr	r2, [pc, #240]	; (80035b0 <TIM_Base_SetConfig+0x11c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d007      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a3b      	ldr	r2, [pc, #236]	; (80035b4 <TIM_Base_SetConfig+0x120>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d003      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a3a      	ldr	r2, [pc, #232]	; (80035b8 <TIM_Base_SetConfig+0x124>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d108      	bne.n	80034e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a2f      	ldr	r2, [pc, #188]	; (80035a8 <TIM_Base_SetConfig+0x114>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d02b      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f4:	d027      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a2c      	ldr	r2, [pc, #176]	; (80035ac <TIM_Base_SetConfig+0x118>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d023      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a2b      	ldr	r2, [pc, #172]	; (80035b0 <TIM_Base_SetConfig+0x11c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d01f      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a2a      	ldr	r2, [pc, #168]	; (80035b4 <TIM_Base_SetConfig+0x120>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d01b      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a29      	ldr	r2, [pc, #164]	; (80035b8 <TIM_Base_SetConfig+0x124>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d017      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a28      	ldr	r2, [pc, #160]	; (80035bc <TIM_Base_SetConfig+0x128>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d013      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a27      	ldr	r2, [pc, #156]	; (80035c0 <TIM_Base_SetConfig+0x12c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00f      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <TIM_Base_SetConfig+0x130>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00b      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a25      	ldr	r2, [pc, #148]	; (80035c8 <TIM_Base_SetConfig+0x134>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d007      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a24      	ldr	r2, [pc, #144]	; (80035cc <TIM_Base_SetConfig+0x138>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d003      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a23      	ldr	r2, [pc, #140]	; (80035d0 <TIM_Base_SetConfig+0x13c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d108      	bne.n	8003558 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800354c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <TIM_Base_SetConfig+0x114>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d003      	beq.n	800358c <TIM_Base_SetConfig+0xf8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a0c      	ldr	r2, [pc, #48]	; (80035b8 <TIM_Base_SetConfig+0x124>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d103      	bne.n	8003594 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	615a      	str	r2, [r3, #20]
}
 800359a:	bf00      	nop
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40010000 	.word	0x40010000
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40000800 	.word	0x40000800
 80035b4:	40000c00 	.word	0x40000c00
 80035b8:	40010400 	.word	0x40010400
 80035bc:	40014000 	.word	0x40014000
 80035c0:	40014400 	.word	0x40014400
 80035c4:	40014800 	.word	0x40014800
 80035c8:	40001800 	.word	0x40001800
 80035cc:	40001c00 	.word	0x40001c00
 80035d0:	40002000 	.word	0x40002000

080035d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	f023 0201 	bic.w	r2, r3, #1
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 0303 	bic.w	r3, r3, #3
 800360a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f023 0302 	bic.w	r3, r3, #2
 800361c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	4313      	orrs	r3, r2
 8003626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a20      	ldr	r2, [pc, #128]	; (80036ac <TIM_OC1_SetConfig+0xd8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d003      	beq.n	8003638 <TIM_OC1_SetConfig+0x64>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a1f      	ldr	r2, [pc, #124]	; (80036b0 <TIM_OC1_SetConfig+0xdc>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d10c      	bne.n	8003652 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f023 0308 	bic.w	r3, r3, #8
 800363e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	4313      	orrs	r3, r2
 8003648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f023 0304 	bic.w	r3, r3, #4
 8003650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a15      	ldr	r2, [pc, #84]	; (80036ac <TIM_OC1_SetConfig+0xd8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d003      	beq.n	8003662 <TIM_OC1_SetConfig+0x8e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a14      	ldr	r2, [pc, #80]	; (80036b0 <TIM_OC1_SetConfig+0xdc>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d111      	bne.n	8003686 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	621a      	str	r2, [r3, #32]
}
 80036a0:	bf00      	nop
 80036a2:	371c      	adds	r7, #28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	40010000 	.word	0x40010000
 80036b0:	40010400 	.word	0x40010400

080036b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	f023 0210 	bic.w	r2, r3, #16
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	021b      	lsls	r3, r3, #8
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f023 0320 	bic.w	r3, r3, #32
 80036fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4313      	orrs	r3, r2
 800370a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a22      	ldr	r2, [pc, #136]	; (8003798 <TIM_OC2_SetConfig+0xe4>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d003      	beq.n	800371c <TIM_OC2_SetConfig+0x68>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a21      	ldr	r2, [pc, #132]	; (800379c <TIM_OC2_SetConfig+0xe8>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d10d      	bne.n	8003738 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4313      	orrs	r3, r2
 800372e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003736:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a17      	ldr	r2, [pc, #92]	; (8003798 <TIM_OC2_SetConfig+0xe4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d003      	beq.n	8003748 <TIM_OC2_SetConfig+0x94>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a16      	ldr	r2, [pc, #88]	; (800379c <TIM_OC2_SetConfig+0xe8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d113      	bne.n	8003770 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800374e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003756:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	621a      	str	r2, [r3, #32]
}
 800378a:	bf00      	nop
 800378c:	371c      	adds	r7, #28
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40010000 	.word	0x40010000
 800379c:	40010400 	.word	0x40010400

080037a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0303 	bic.w	r3, r3, #3
 80037d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a21      	ldr	r2, [pc, #132]	; (8003880 <TIM_OC3_SetConfig+0xe0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d003      	beq.n	8003806 <TIM_OC3_SetConfig+0x66>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a20      	ldr	r2, [pc, #128]	; (8003884 <TIM_OC3_SetConfig+0xe4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d10d      	bne.n	8003822 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800380c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a16      	ldr	r2, [pc, #88]	; (8003880 <TIM_OC3_SetConfig+0xe0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d003      	beq.n	8003832 <TIM_OC3_SetConfig+0x92>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a15      	ldr	r2, [pc, #84]	; (8003884 <TIM_OC3_SetConfig+0xe4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d113      	bne.n	800385a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4313      	orrs	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	621a      	str	r2, [r3, #32]
}
 8003874:	bf00      	nop
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	40010000 	.word	0x40010000
 8003884:	40010400 	.word	0x40010400

08003888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	021b      	lsls	r3, r3, #8
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	031b      	lsls	r3, r3, #12
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a12      	ldr	r2, [pc, #72]	; (800392c <TIM_OC4_SetConfig+0xa4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d003      	beq.n	80038f0 <TIM_OC4_SetConfig+0x68>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a11      	ldr	r2, [pc, #68]	; (8003930 <TIM_OC4_SetConfig+0xa8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d109      	bne.n	8003904 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	019b      	lsls	r3, r3, #6
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	4313      	orrs	r3, r2
 8003902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	621a      	str	r2, [r3, #32]
}
 800391e:	bf00      	nop
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40010000 	.word	0x40010000
 8003930:	40010400 	.word	0x40010400

08003934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	f023 0201 	bic.w	r2, r3, #1
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800395e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f023 030a 	bic.w	r3, r3, #10
 8003970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	4313      	orrs	r3, r2
 8003978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	621a      	str	r2, [r3, #32]
}
 8003986:	bf00      	nop
 8003988:	371c      	adds	r7, #28
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003992:	b480      	push	{r7}
 8003994:	b087      	sub	sp, #28
 8003996:	af00      	add	r7, sp, #0
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	f023 0210 	bic.w	r2, r3, #16
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	031b      	lsls	r3, r3, #12
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	621a      	str	r2, [r3, #32]
}
 80039e6:	bf00      	nop
 80039e8:	371c      	adds	r7, #28
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b085      	sub	sp, #20
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f043 0307 	orr.w	r3, r3, #7
 8003a14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	609a      	str	r2, [r3, #8]
}
 8003a1c:	bf00      	nop
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	021a      	lsls	r2, r3, #8
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	609a      	str	r2, [r3, #8]
}
 8003a5c:	bf00      	nop
 8003a5e:	371c      	adds	r7, #28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f003 031f 	and.w	r3, r3, #31
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a1a      	ldr	r2, [r3, #32]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	401a      	ands	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a1a      	ldr	r2, [r3, #32]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f003 031f 	and.w	r3, r3, #31
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	621a      	str	r2, [r3, #32]
}
 8003aa6:	bf00      	nop
 8003aa8:	371c      	adds	r7, #28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d101      	bne.n	8003acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e05a      	b.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a21      	ldr	r2, [pc, #132]	; (8003b90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d022      	beq.n	8003b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b18:	d01d      	beq.n	8003b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1d      	ldr	r2, [pc, #116]	; (8003b94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d018      	beq.n	8003b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1b      	ldr	r2, [pc, #108]	; (8003b98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d013      	beq.n	8003b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1a      	ldr	r2, [pc, #104]	; (8003b9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00e      	beq.n	8003b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a18      	ldr	r2, [pc, #96]	; (8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d009      	beq.n	8003b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a17      	ldr	r2, [pc, #92]	; (8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d004      	beq.n	8003b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a15      	ldr	r2, [pc, #84]	; (8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d10c      	bne.n	8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40010000 	.word	0x40010000
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40000800 	.word	0x40000800
 8003b9c:	40000c00 	.word	0x40000c00
 8003ba0:	40010400 	.word	0x40010400
 8003ba4:	40014000 	.word	0x40014000
 8003ba8:	40001800 	.word	0x40001800

08003bac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e03f      	b.n	8003c66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d106      	bne.n	8003c00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fd fb3e 	bl	800127c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2224      	movs	r2, #36	; 0x24
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 fe81 	bl	8004920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695a      	ldr	r2, [r3, #20]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b08a      	sub	sp, #40	; 0x28
 8003c72:	af02      	add	r7, sp, #8
 8003c74:	60f8      	str	r0, [r7, #12]
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	603b      	str	r3, [r7, #0]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	d17c      	bne.n	8003d88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <HAL_UART_Transmit+0x2c>
 8003c94:	88fb      	ldrh	r3, [r7, #6]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e075      	b.n	8003d8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_UART_Transmit+0x3e>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e06e      	b.n	8003d8a <HAL_UART_Transmit+0x11c>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2221      	movs	r2, #33	; 0x21
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cc2:	f7fd fc8f 	bl	80015e4 <HAL_GetTick>
 8003cc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	88fa      	ldrh	r2, [r7, #6]
 8003ccc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	88fa      	ldrh	r2, [r7, #6]
 8003cd2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cdc:	d108      	bne.n	8003cf0 <HAL_UART_Transmit+0x82>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d104      	bne.n	8003cf0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	e003      	b.n	8003cf8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d00:	e02a      	b.n	8003d58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	2180      	movs	r1, #128	; 0x80
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fbc1 	bl	8004494 <UART_WaitOnFlagUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e036      	b.n	8003d8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10b      	bne.n	8003d3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	461a      	mov	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	3302      	adds	r3, #2
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	e007      	b.n	8003d4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	781a      	ldrb	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	3301      	adds	r3, #1
 8003d48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1cf      	bne.n	8003d02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2140      	movs	r1, #64	; 0x40
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 fb91 	bl	8004494 <UART_WaitOnFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e006      	b.n	8003d8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	e000      	b.n	8003d8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d88:	2302      	movs	r3, #2
  }
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3720      	adds	r7, #32
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b08a      	sub	sp, #40	; 0x28
 8003d96:	af02      	add	r7, sp, #8
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	603b      	str	r3, [r7, #0]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	f040 808c 	bne.w	8003ecc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <HAL_UART_Receive+0x2e>
 8003dba:	88fb      	ldrh	r3, [r7, #6]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e084      	b.n	8003ece <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_UART_Receive+0x40>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e07d      	b.n	8003ece <HAL_UART_Receive+0x13c>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2222      	movs	r2, #34	; 0x22
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dee:	f7fd fbf9 	bl	80015e4 <HAL_GetTick>
 8003df2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	88fa      	ldrh	r2, [r7, #6]
 8003df8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	88fa      	ldrh	r2, [r7, #6]
 8003dfe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e08:	d108      	bne.n	8003e1c <HAL_UART_Receive+0x8a>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d104      	bne.n	8003e1c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	61bb      	str	r3, [r7, #24]
 8003e1a:	e003      	b.n	8003e24 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003e2c:	e043      	b.n	8003eb6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2200      	movs	r2, #0
 8003e36:	2120      	movs	r1, #32
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 fb2b 	bl	8004494 <UART_WaitOnFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e042      	b.n	8003ece <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10c      	bne.n	8003e68 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	3302      	adds	r3, #2
 8003e64:	61bb      	str	r3, [r7, #24]
 8003e66:	e01f      	b.n	8003ea8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e70:	d007      	beq.n	8003e82 <HAL_UART_Receive+0xf0>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10a      	bne.n	8003e90 <HAL_UART_Receive+0xfe>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	701a      	strb	r2, [r3, #0]
 8003e8e:	e008      	b.n	8003ea2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1b6      	bne.n	8003e2e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	e000      	b.n	8003ece <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003ecc:	2302      	movs	r3, #2
  }
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3720      	adds	r7, #32
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b084      	sub	sp, #16
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	60f8      	str	r0, [r7, #12]
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d11d      	bne.n	8003f2c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_UART_Receive_IT+0x26>
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e016      	b.n	8003f2e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_UART_Receive_IT+0x38>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e00f      	b.n	8003f2e <HAL_UART_Receive_IT+0x58>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	68b9      	ldr	r1, [r7, #8]
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 fb24 	bl	8004570 <UART_Start_Receive_IT>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	e000      	b.n	8003f2e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003f2c:	2302      	movs	r3, #2
  }
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
	...

08003f38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b0ba      	sub	sp, #232	; 0xe8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10f      	bne.n	8003f9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d009      	beq.n	8003f9e <HAL_UART_IRQHandler+0x66>
 8003f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 fc07 	bl	80047aa <UART_Receive_IT>
      return;
 8003f9c:	e256      	b.n	800444c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 80de 	beq.w	8004164 <HAL_UART_IRQHandler+0x22c>
 8003fa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d106      	bne.n	8003fc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fb8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 80d1 	beq.w	8004164 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00b      	beq.n	8003fe6 <HAL_UART_IRQHandler+0xae>
 8003fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d005      	beq.n	8003fe6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	f043 0201 	orr.w	r2, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00b      	beq.n	800400a <HAL_UART_IRQHandler+0xd2>
 8003ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d005      	beq.n	800400a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f043 0202 	orr.w	r2, r3, #2
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800400a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00b      	beq.n	800402e <HAL_UART_IRQHandler+0xf6>
 8004016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d005      	beq.n	800402e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f043 0204 	orr.w	r2, r3, #4
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800402e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d011      	beq.n	800405e <HAL_UART_IRQHandler+0x126>
 800403a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	2b00      	cmp	r3, #0
 8004044:	d105      	bne.n	8004052 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	f043 0208 	orr.w	r2, r3, #8
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 81ed 	beq.w	8004442 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b00      	cmp	r3, #0
 8004072:	d008      	beq.n	8004086 <HAL_UART_IRQHandler+0x14e>
 8004074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 fb92 	bl	80047aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004090:	2b40      	cmp	r3, #64	; 0x40
 8004092:	bf0c      	ite	eq
 8004094:	2301      	moveq	r3, #1
 8004096:	2300      	movne	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d103      	bne.n	80040b2 <HAL_UART_IRQHandler+0x17a>
 80040aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d04f      	beq.n	8004152 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fa9a 	bl	80045ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c2:	2b40      	cmp	r3, #64	; 0x40
 80040c4:	d141      	bne.n	800414a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3314      	adds	r3, #20
 80040cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80040dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3314      	adds	r3, #20
 80040ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80040f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80040f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800410a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1d9      	bne.n	80040c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004116:	2b00      	cmp	r3, #0
 8004118:	d013      	beq.n	8004142 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	4a7d      	ldr	r2, [pc, #500]	; (8004314 <HAL_UART_IRQHandler+0x3dc>)
 8004120:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	4618      	mov	r0, r3
 8004128:	f7fd fc9e 	bl	8001a68 <HAL_DMA_Abort_IT>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d016      	beq.n	8004160 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800413c:	4610      	mov	r0, r2
 800413e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004140:	e00e      	b.n	8004160 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f990 	bl	8004468 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004148:	e00a      	b.n	8004160 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f98c 	bl	8004468 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004150:	e006      	b.n	8004160 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f988 	bl	8004468 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800415e:	e170      	b.n	8004442 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004160:	bf00      	nop
    return;
 8004162:	e16e      	b.n	8004442 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	2b01      	cmp	r3, #1
 800416a:	f040 814a 	bne.w	8004402 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800416e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004172:	f003 0310 	and.w	r3, r3, #16
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 8143 	beq.w	8004402 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800417c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004180:	f003 0310 	and.w	r3, r3, #16
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 813c 	beq.w	8004402 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800418a:	2300      	movs	r3, #0
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	60bb      	str	r3, [r7, #8]
 800419e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041aa:	2b40      	cmp	r3, #64	; 0x40
 80041ac:	f040 80b4 	bne.w	8004318 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 8140 	beq.w	8004446 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041ce:	429a      	cmp	r2, r3
 80041d0:	f080 8139 	bcs.w	8004446 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e6:	f000 8088 	beq.w	80042fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	330c      	adds	r3, #12
 80041f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041f8:	e853 3f00 	ldrex	r3, [r3]
 80041fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004200:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004208:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004216:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800421a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004222:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004226:	e841 2300 	strex	r3, r2, [r1]
 800422a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800422e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1d9      	bne.n	80041ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3314      	adds	r3, #20
 800423c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004246:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3314      	adds	r3, #20
 8004256:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800425a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800425e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004260:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004262:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800426c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e1      	bne.n	8004236 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3314      	adds	r3, #20
 8004278:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004288:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3314      	adds	r3, #20
 8004292:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004296:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004298:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800429c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800429e:	e841 2300 	strex	r3, r2, [r1]
 80042a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1e3      	bne.n	8004272 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	330c      	adds	r3, #12
 80042be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c2:	e853 3f00 	ldrex	r3, [r3]
 80042c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ca:	f023 0310 	bic.w	r3, r3, #16
 80042ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	330c      	adds	r3, #12
 80042d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80042dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80042de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042e4:	e841 2300 	strex	r3, r2, [r1]
 80042e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e3      	bne.n	80042b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fd fb47 	bl	8001988 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004302:	b29b      	uxth	r3, r3
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	b29b      	uxth	r3, r3
 8004308:	4619      	mov	r1, r3
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f8b6 	bl	800447c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004310:	e099      	b.n	8004446 <HAL_UART_IRQHandler+0x50e>
 8004312:	bf00      	nop
 8004314:	080046b3 	.word	0x080046b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004320:	b29b      	uxth	r3, r3
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 808b 	beq.w	800444a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004334:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 8086 	beq.w	800444a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004348:	e853 3f00 	ldrex	r3, [r3]
 800434c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800434e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004350:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004354:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	330c      	adds	r3, #12
 800435e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004362:	647a      	str	r2, [r7, #68]	; 0x44
 8004364:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004368:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e3      	bne.n	800433e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3314      	adds	r3, #20
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	623b      	str	r3, [r7, #32]
   return(result);
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	f023 0301 	bic.w	r3, r3, #1
 800438c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3314      	adds	r3, #20
 8004396:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800439a:	633a      	str	r2, [r7, #48]	; 0x30
 800439c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043a2:	e841 2300 	strex	r3, r2, [r1]
 80043a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1e3      	bne.n	8004376 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	330c      	adds	r3, #12
 80043c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	e853 3f00 	ldrex	r3, [r3]
 80043ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0310 	bic.w	r3, r3, #16
 80043d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	330c      	adds	r3, #12
 80043dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80043e0:	61fa      	str	r2, [r7, #28]
 80043e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	69b9      	ldr	r1, [r7, #24]
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	e841 2300 	strex	r3, r2, [r1]
 80043ec:	617b      	str	r3, [r7, #20]
   return(result);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e3      	bne.n	80043bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043f8:	4619      	mov	r1, r3
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f83e 	bl	800447c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004400:	e023      	b.n	800444a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440a:	2b00      	cmp	r3, #0
 800440c:	d009      	beq.n	8004422 <HAL_UART_IRQHandler+0x4ea>
 800440e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f95d 	bl	80046da <UART_Transmit_IT>
    return;
 8004420:	e014      	b.n	800444c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00e      	beq.n	800444c <HAL_UART_IRQHandler+0x514>
 800442e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004436:	2b00      	cmp	r3, #0
 8004438:	d008      	beq.n	800444c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f99d 	bl	800477a <UART_EndTransmit_IT>
    return;
 8004440:	e004      	b.n	800444c <HAL_UART_IRQHandler+0x514>
    return;
 8004442:	bf00      	nop
 8004444:	e002      	b.n	800444c <HAL_UART_IRQHandler+0x514>
      return;
 8004446:	bf00      	nop
 8004448:	e000      	b.n	800444c <HAL_UART_IRQHandler+0x514>
      return;
 800444a:	bf00      	nop
  }
}
 800444c:	37e8      	adds	r7, #232	; 0xe8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop

08004454 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b090      	sub	sp, #64	; 0x40
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	4613      	mov	r3, r2
 80044a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a4:	e050      	b.n	8004548 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ac:	d04c      	beq.n	8004548 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d007      	beq.n	80044c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80044b4:	f7fd f896 	bl	80015e4 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d241      	bcs.n	8004548 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	330c      	adds	r3, #12
 80044ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ce:	e853 3f00 	ldrex	r3, [r3]
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	330c      	adds	r3, #12
 80044e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044e4:	637a      	str	r2, [r7, #52]	; 0x34
 80044e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044ec:	e841 2300 	strex	r3, r2, [r1]
 80044f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1e5      	bne.n	80044c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	3314      	adds	r3, #20
 80044fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	e853 3f00 	ldrex	r3, [r3]
 8004506:	613b      	str	r3, [r7, #16]
   return(result);
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f023 0301 	bic.w	r3, r3, #1
 800450e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3314      	adds	r3, #20
 8004516:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004518:	623a      	str	r2, [r7, #32]
 800451a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451c:	69f9      	ldr	r1, [r7, #28]
 800451e:	6a3a      	ldr	r2, [r7, #32]
 8004520:	e841 2300 	strex	r3, r2, [r1]
 8004524:	61bb      	str	r3, [r7, #24]
   return(result);
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e5      	bne.n	80044f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e00f      	b.n	8004568 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	4013      	ands	r3, r2
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	429a      	cmp	r2, r3
 8004556:	bf0c      	ite	eq
 8004558:	2301      	moveq	r3, #1
 800455a:	2300      	movne	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	461a      	mov	r2, r3
 8004560:	79fb      	ldrb	r3, [r7, #7]
 8004562:	429a      	cmp	r2, r3
 8004564:	d09f      	beq.n	80044a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3740      	adds	r7, #64	; 0x40
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	4613      	mov	r3, r2
 800457c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	88fa      	ldrh	r2, [r7, #6]
 8004588:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	88fa      	ldrh	r2, [r7, #6]
 800458e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2222      	movs	r2, #34	; 0x22
 800459a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d007      	beq.n	80045be <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045bc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	695a      	ldr	r2, [r3, #20]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0201 	orr.w	r2, r2, #1
 80045cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f042 0220 	orr.w	r2, r2, #32
 80045dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b095      	sub	sp, #84	; 0x54
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	330c      	adds	r3, #12
 80045fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fe:	e853 3f00 	ldrex	r3, [r3]
 8004602:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800460a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	330c      	adds	r3, #12
 8004612:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004614:	643a      	str	r2, [r7, #64]	; 0x40
 8004616:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004618:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800461a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800461c:	e841 2300 	strex	r3, r2, [r1]
 8004620:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1e5      	bne.n	80045f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3314      	adds	r3, #20
 800462e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	e853 3f00 	ldrex	r3, [r3]
 8004636:	61fb      	str	r3, [r7, #28]
   return(result);
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f023 0301 	bic.w	r3, r3, #1
 800463e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3314      	adds	r3, #20
 8004646:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004648:	62fa      	str	r2, [r7, #44]	; 0x2c
 800464a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800464e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e5      	bne.n	8004628 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004660:	2b01      	cmp	r3, #1
 8004662:	d119      	bne.n	8004698 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	330c      	adds	r3, #12
 800466a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	e853 3f00 	ldrex	r3, [r3]
 8004672:	60bb      	str	r3, [r7, #8]
   return(result);
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f023 0310 	bic.w	r3, r3, #16
 800467a:	647b      	str	r3, [r7, #68]	; 0x44
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	330c      	adds	r3, #12
 8004682:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004684:	61ba      	str	r2, [r7, #24]
 8004686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004688:	6979      	ldr	r1, [r7, #20]
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	e841 2300 	strex	r3, r2, [r1]
 8004690:	613b      	str	r3, [r7, #16]
   return(result);
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1e5      	bne.n	8004664 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80046a6:	bf00      	nop
 80046a8:	3754      	adds	r7, #84	; 0x54
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b084      	sub	sp, #16
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f7ff fecb 	bl	8004468 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046d2:	bf00      	nop
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046da:	b480      	push	{r7}
 80046dc:	b085      	sub	sp, #20
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b21      	cmp	r3, #33	; 0x21
 80046ec:	d13e      	bne.n	800476c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f6:	d114      	bne.n	8004722 <UART_Transmit_IT+0x48>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d110      	bne.n	8004722 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	461a      	mov	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004714:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	1c9a      	adds	r2, r3, #2
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	621a      	str	r2, [r3, #32]
 8004720:	e008      	b.n	8004734 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	1c59      	adds	r1, r3, #1
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6211      	str	r1, [r2, #32]
 800472c:	781a      	ldrb	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29b      	uxth	r3, r3
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	4619      	mov	r1, r3
 8004742:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10f      	bne.n	8004768 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004756:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004766:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	e000      	b.n	800476e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800476c:	2302      	movs	r3, #2
  }
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004790:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7ff fe5a 	bl	8004454 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b08c      	sub	sp, #48	; 0x30
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b22      	cmp	r3, #34	; 0x22
 80047bc:	f040 80ab 	bne.w	8004916 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c8:	d117      	bne.n	80047fa <UART_Receive_IT+0x50>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d113      	bne.n	80047fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f2:	1c9a      	adds	r2, r3, #2
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	629a      	str	r2, [r3, #40]	; 0x28
 80047f8:	e026      	b.n	8004848 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004800:	2300      	movs	r3, #0
 8004802:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480c:	d007      	beq.n	800481e <UART_Receive_IT+0x74>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10a      	bne.n	800482c <UART_Receive_IT+0x82>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	b2da      	uxtb	r2, r3
 8004826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	e008      	b.n	800483e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	b2db      	uxtb	r3, r3
 8004834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004838:	b2da      	uxtb	r2, r3
 800483a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29b      	uxth	r3, r3
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	4619      	mov	r1, r3
 8004856:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004858:	2b00      	cmp	r3, #0
 800485a:	d15a      	bne.n	8004912 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0220 	bic.w	r2, r2, #32
 800486a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800487a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695a      	ldr	r2, [r3, #20]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0201 	bic.w	r2, r2, #1
 800488a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	2b01      	cmp	r3, #1
 800489a:	d135      	bne.n	8004908 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	330c      	adds	r3, #12
 80048a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	613b      	str	r3, [r7, #16]
   return(result);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f023 0310 	bic.w	r3, r3, #16
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	330c      	adds	r3, #12
 80048c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c2:	623a      	str	r2, [r7, #32]
 80048c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	69f9      	ldr	r1, [r7, #28]
 80048c8:	6a3a      	ldr	r2, [r7, #32]
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e5      	bne.n	80048a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d10a      	bne.n	80048fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048fe:	4619      	mov	r1, r3
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff fdbb 	bl	800447c <HAL_UARTEx_RxEventCallback>
 8004906:	e002      	b.n	800490e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7fc fda1 	bl	8001450 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	e002      	b.n	8004918 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	e000      	b.n	8004918 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004916:	2302      	movs	r3, #2
  }
}
 8004918:	4618      	mov	r0, r3
 800491a:	3730      	adds	r7, #48	; 0x30
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004924:	b0c0      	sub	sp, #256	; 0x100
 8004926:	af00      	add	r7, sp, #0
 8004928:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800492c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493c:	68d9      	ldr	r1, [r3, #12]
 800493e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	ea40 0301 	orr.w	r3, r0, r1
 8004948:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800494a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	431a      	orrs	r2, r3
 8004958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	431a      	orrs	r2, r3
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004978:	f021 010c 	bic.w	r1, r1, #12
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004986:	430b      	orrs	r3, r1
 8004988:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800498a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499a:	6999      	ldr	r1, [r3, #24]
 800499c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	ea40 0301 	orr.w	r3, r0, r1
 80049a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	4b8f      	ldr	r3, [pc, #572]	; (8004bec <UART_SetConfig+0x2cc>)
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d005      	beq.n	80049c0 <UART_SetConfig+0xa0>
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	4b8d      	ldr	r3, [pc, #564]	; (8004bf0 <UART_SetConfig+0x2d0>)
 80049bc:	429a      	cmp	r2, r3
 80049be:	d104      	bne.n	80049ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049c0:	f7fe f920 	bl	8002c04 <HAL_RCC_GetPCLK2Freq>
 80049c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049c8:	e003      	b.n	80049d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049ca:	f7fe f907 	bl	8002bdc <HAL_RCC_GetPCLK1Freq>
 80049ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d6:	69db      	ldr	r3, [r3, #28]
 80049d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049dc:	f040 810c 	bne.w	8004bf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049e4:	2200      	movs	r2, #0
 80049e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049f2:	4622      	mov	r2, r4
 80049f4:	462b      	mov	r3, r5
 80049f6:	1891      	adds	r1, r2, r2
 80049f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80049fa:	415b      	adcs	r3, r3
 80049fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a02:	4621      	mov	r1, r4
 8004a04:	eb12 0801 	adds.w	r8, r2, r1
 8004a08:	4629      	mov	r1, r5
 8004a0a:	eb43 0901 	adc.w	r9, r3, r1
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	f04f 0300 	mov.w	r3, #0
 8004a16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a22:	4690      	mov	r8, r2
 8004a24:	4699      	mov	r9, r3
 8004a26:	4623      	mov	r3, r4
 8004a28:	eb18 0303 	adds.w	r3, r8, r3
 8004a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a30:	462b      	mov	r3, r5
 8004a32:	eb49 0303 	adc.w	r3, r9, r3
 8004a36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a4e:	460b      	mov	r3, r1
 8004a50:	18db      	adds	r3, r3, r3
 8004a52:	653b      	str	r3, [r7, #80]	; 0x50
 8004a54:	4613      	mov	r3, r2
 8004a56:	eb42 0303 	adc.w	r3, r2, r3
 8004a5a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a64:	f7fb fc1c 	bl	80002a0 <__aeabi_uldivmod>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4b61      	ldr	r3, [pc, #388]	; (8004bf4 <UART_SetConfig+0x2d4>)
 8004a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	011c      	lsls	r4, r3, #4
 8004a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a88:	4642      	mov	r2, r8
 8004a8a:	464b      	mov	r3, r9
 8004a8c:	1891      	adds	r1, r2, r2
 8004a8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a90:	415b      	adcs	r3, r3
 8004a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a98:	4641      	mov	r1, r8
 8004a9a:	eb12 0a01 	adds.w	sl, r2, r1
 8004a9e:	4649      	mov	r1, r9
 8004aa0:	eb43 0b01 	adc.w	fp, r3, r1
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ab0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ab4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ab8:	4692      	mov	sl, r2
 8004aba:	469b      	mov	fp, r3
 8004abc:	4643      	mov	r3, r8
 8004abe:	eb1a 0303 	adds.w	r3, sl, r3
 8004ac2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ac6:	464b      	mov	r3, r9
 8004ac8:	eb4b 0303 	adc.w	r3, fp, r3
 8004acc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004adc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ae0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	18db      	adds	r3, r3, r3
 8004ae8:	643b      	str	r3, [r7, #64]	; 0x40
 8004aea:	4613      	mov	r3, r2
 8004aec:	eb42 0303 	adc.w	r3, r2, r3
 8004af0:	647b      	str	r3, [r7, #68]	; 0x44
 8004af2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004af6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004afa:	f7fb fbd1 	bl	80002a0 <__aeabi_uldivmod>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	4611      	mov	r1, r2
 8004b04:	4b3b      	ldr	r3, [pc, #236]	; (8004bf4 <UART_SetConfig+0x2d4>)
 8004b06:	fba3 2301 	umull	r2, r3, r3, r1
 8004b0a:	095b      	lsrs	r3, r3, #5
 8004b0c:	2264      	movs	r2, #100	; 0x64
 8004b0e:	fb02 f303 	mul.w	r3, r2, r3
 8004b12:	1acb      	subs	r3, r1, r3
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b1a:	4b36      	ldr	r3, [pc, #216]	; (8004bf4 <UART_SetConfig+0x2d4>)
 8004b1c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b20:	095b      	lsrs	r3, r3, #5
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b28:	441c      	add	r4, r3
 8004b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b3c:	4642      	mov	r2, r8
 8004b3e:	464b      	mov	r3, r9
 8004b40:	1891      	adds	r1, r2, r2
 8004b42:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b44:	415b      	adcs	r3, r3
 8004b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b4c:	4641      	mov	r1, r8
 8004b4e:	1851      	adds	r1, r2, r1
 8004b50:	6339      	str	r1, [r7, #48]	; 0x30
 8004b52:	4649      	mov	r1, r9
 8004b54:	414b      	adcs	r3, r1
 8004b56:	637b      	str	r3, [r7, #52]	; 0x34
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b64:	4659      	mov	r1, fp
 8004b66:	00cb      	lsls	r3, r1, #3
 8004b68:	4651      	mov	r1, sl
 8004b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b6e:	4651      	mov	r1, sl
 8004b70:	00ca      	lsls	r2, r1, #3
 8004b72:	4610      	mov	r0, r2
 8004b74:	4619      	mov	r1, r3
 8004b76:	4603      	mov	r3, r0
 8004b78:	4642      	mov	r2, r8
 8004b7a:	189b      	adds	r3, r3, r2
 8004b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b80:	464b      	mov	r3, r9
 8004b82:	460a      	mov	r2, r1
 8004b84:	eb42 0303 	adc.w	r3, r2, r3
 8004b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	18db      	adds	r3, r3, r3
 8004ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	eb42 0303 	adc.w	r3, r2, r3
 8004bac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004bb6:	f7fb fb73 	bl	80002a0 <__aeabi_uldivmod>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <UART_SetConfig+0x2d4>)
 8004bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	2164      	movs	r1, #100	; 0x64
 8004bc8:	fb01 f303 	mul.w	r3, r1, r3
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	3332      	adds	r3, #50	; 0x32
 8004bd2:	4a08      	ldr	r2, [pc, #32]	; (8004bf4 <UART_SetConfig+0x2d4>)
 8004bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	f003 0207 	and.w	r2, r3, #7
 8004bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4422      	add	r2, r4
 8004be6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004be8:	e105      	b.n	8004df6 <UART_SetConfig+0x4d6>
 8004bea:	bf00      	nop
 8004bec:	40011000 	.word	0x40011000
 8004bf0:	40011400 	.word	0x40011400
 8004bf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c0a:	4642      	mov	r2, r8
 8004c0c:	464b      	mov	r3, r9
 8004c0e:	1891      	adds	r1, r2, r2
 8004c10:	6239      	str	r1, [r7, #32]
 8004c12:	415b      	adcs	r3, r3
 8004c14:	627b      	str	r3, [r7, #36]	; 0x24
 8004c16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c1a:	4641      	mov	r1, r8
 8004c1c:	1854      	adds	r4, r2, r1
 8004c1e:	4649      	mov	r1, r9
 8004c20:	eb43 0501 	adc.w	r5, r3, r1
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	00eb      	lsls	r3, r5, #3
 8004c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c32:	00e2      	lsls	r2, r4, #3
 8004c34:	4614      	mov	r4, r2
 8004c36:	461d      	mov	r5, r3
 8004c38:	4643      	mov	r3, r8
 8004c3a:	18e3      	adds	r3, r4, r3
 8004c3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c40:	464b      	mov	r3, r9
 8004c42:	eb45 0303 	adc.w	r3, r5, r3
 8004c46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c66:	4629      	mov	r1, r5
 8004c68:	008b      	lsls	r3, r1, #2
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c70:	4621      	mov	r1, r4
 8004c72:	008a      	lsls	r2, r1, #2
 8004c74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c78:	f7fb fb12 	bl	80002a0 <__aeabi_uldivmod>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4b60      	ldr	r3, [pc, #384]	; (8004e04 <UART_SetConfig+0x4e4>)
 8004c82:	fba3 2302 	umull	r2, r3, r3, r2
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	011c      	lsls	r4, r3, #4
 8004c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c9c:	4642      	mov	r2, r8
 8004c9e:	464b      	mov	r3, r9
 8004ca0:	1891      	adds	r1, r2, r2
 8004ca2:	61b9      	str	r1, [r7, #24]
 8004ca4:	415b      	adcs	r3, r3
 8004ca6:	61fb      	str	r3, [r7, #28]
 8004ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cac:	4641      	mov	r1, r8
 8004cae:	1851      	adds	r1, r2, r1
 8004cb0:	6139      	str	r1, [r7, #16]
 8004cb2:	4649      	mov	r1, r9
 8004cb4:	414b      	adcs	r3, r1
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cc4:	4659      	mov	r1, fp
 8004cc6:	00cb      	lsls	r3, r1, #3
 8004cc8:	4651      	mov	r1, sl
 8004cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cce:	4651      	mov	r1, sl
 8004cd0:	00ca      	lsls	r2, r1, #3
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	4642      	mov	r2, r8
 8004cda:	189b      	adds	r3, r3, r2
 8004cdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ce0:	464b      	mov	r3, r9
 8004ce2:	460a      	mov	r2, r1
 8004ce4:	eb42 0303 	adc.w	r3, r2, r3
 8004ce8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cf6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d04:	4649      	mov	r1, r9
 8004d06:	008b      	lsls	r3, r1, #2
 8004d08:	4641      	mov	r1, r8
 8004d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d0e:	4641      	mov	r1, r8
 8004d10:	008a      	lsls	r2, r1, #2
 8004d12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d16:	f7fb fac3 	bl	80002a0 <__aeabi_uldivmod>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4b39      	ldr	r3, [pc, #228]	; (8004e04 <UART_SetConfig+0x4e4>)
 8004d20:	fba3 1302 	umull	r1, r3, r3, r2
 8004d24:	095b      	lsrs	r3, r3, #5
 8004d26:	2164      	movs	r1, #100	; 0x64
 8004d28:	fb01 f303 	mul.w	r3, r1, r3
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	3332      	adds	r3, #50	; 0x32
 8004d32:	4a34      	ldr	r2, [pc, #208]	; (8004e04 <UART_SetConfig+0x4e4>)
 8004d34:	fba2 2303 	umull	r2, r3, r2, r3
 8004d38:	095b      	lsrs	r3, r3, #5
 8004d3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d3e:	441c      	add	r4, r3
 8004d40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d44:	2200      	movs	r2, #0
 8004d46:	673b      	str	r3, [r7, #112]	; 0x70
 8004d48:	677a      	str	r2, [r7, #116]	; 0x74
 8004d4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d4e:	4642      	mov	r2, r8
 8004d50:	464b      	mov	r3, r9
 8004d52:	1891      	adds	r1, r2, r2
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	415b      	adcs	r3, r3
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d5e:	4641      	mov	r1, r8
 8004d60:	1851      	adds	r1, r2, r1
 8004d62:	6039      	str	r1, [r7, #0]
 8004d64:	4649      	mov	r1, r9
 8004d66:	414b      	adcs	r3, r1
 8004d68:	607b      	str	r3, [r7, #4]
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d76:	4659      	mov	r1, fp
 8004d78:	00cb      	lsls	r3, r1, #3
 8004d7a:	4651      	mov	r1, sl
 8004d7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d80:	4651      	mov	r1, sl
 8004d82:	00ca      	lsls	r2, r1, #3
 8004d84:	4610      	mov	r0, r2
 8004d86:	4619      	mov	r1, r3
 8004d88:	4603      	mov	r3, r0
 8004d8a:	4642      	mov	r2, r8
 8004d8c:	189b      	adds	r3, r3, r2
 8004d8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d90:	464b      	mov	r3, r9
 8004d92:	460a      	mov	r2, r1
 8004d94:	eb42 0303 	adc.w	r3, r2, r3
 8004d98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	663b      	str	r3, [r7, #96]	; 0x60
 8004da4:	667a      	str	r2, [r7, #100]	; 0x64
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004db2:	4649      	mov	r1, r9
 8004db4:	008b      	lsls	r3, r1, #2
 8004db6:	4641      	mov	r1, r8
 8004db8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dbc:	4641      	mov	r1, r8
 8004dbe:	008a      	lsls	r2, r1, #2
 8004dc0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004dc4:	f7fb fa6c 	bl	80002a0 <__aeabi_uldivmod>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4b0d      	ldr	r3, [pc, #52]	; (8004e04 <UART_SetConfig+0x4e4>)
 8004dce:	fba3 1302 	umull	r1, r3, r3, r2
 8004dd2:	095b      	lsrs	r3, r3, #5
 8004dd4:	2164      	movs	r1, #100	; 0x64
 8004dd6:	fb01 f303 	mul.w	r3, r1, r3
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	3332      	adds	r3, #50	; 0x32
 8004de0:	4a08      	ldr	r2, [pc, #32]	; (8004e04 <UART_SetConfig+0x4e4>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	f003 020f 	and.w	r2, r3, #15
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4422      	add	r2, r4
 8004df4:	609a      	str	r2, [r3, #8]
}
 8004df6:	bf00      	nop
 8004df8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e02:	bf00      	nop
 8004e04:	51eb851f 	.word	0x51eb851f

08004e08 <__errno>:
 8004e08:	4b01      	ldr	r3, [pc, #4]	; (8004e10 <__errno+0x8>)
 8004e0a:	6818      	ldr	r0, [r3, #0]
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	20000050 	.word	0x20000050

08004e14 <__libc_init_array>:
 8004e14:	b570      	push	{r4, r5, r6, lr}
 8004e16:	4d0d      	ldr	r5, [pc, #52]	; (8004e4c <__libc_init_array+0x38>)
 8004e18:	4c0d      	ldr	r4, [pc, #52]	; (8004e50 <__libc_init_array+0x3c>)
 8004e1a:	1b64      	subs	r4, r4, r5
 8004e1c:	10a4      	asrs	r4, r4, #2
 8004e1e:	2600      	movs	r6, #0
 8004e20:	42a6      	cmp	r6, r4
 8004e22:	d109      	bne.n	8004e38 <__libc_init_array+0x24>
 8004e24:	4d0b      	ldr	r5, [pc, #44]	; (8004e54 <__libc_init_array+0x40>)
 8004e26:	4c0c      	ldr	r4, [pc, #48]	; (8004e58 <__libc_init_array+0x44>)
 8004e28:	f001 fdf4 	bl	8006a14 <_init>
 8004e2c:	1b64      	subs	r4, r4, r5
 8004e2e:	10a4      	asrs	r4, r4, #2
 8004e30:	2600      	movs	r6, #0
 8004e32:	42a6      	cmp	r6, r4
 8004e34:	d105      	bne.n	8004e42 <__libc_init_array+0x2e>
 8004e36:	bd70      	pop	{r4, r5, r6, pc}
 8004e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e3c:	4798      	blx	r3
 8004e3e:	3601      	adds	r6, #1
 8004e40:	e7ee      	b.n	8004e20 <__libc_init_array+0xc>
 8004e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e46:	4798      	blx	r3
 8004e48:	3601      	adds	r6, #1
 8004e4a:	e7f2      	b.n	8004e32 <__libc_init_array+0x1e>
 8004e4c:	08006c8c 	.word	0x08006c8c
 8004e50:	08006c8c 	.word	0x08006c8c
 8004e54:	08006c8c 	.word	0x08006c8c
 8004e58:	08006c90 	.word	0x08006c90

08004e5c <memset>:
 8004e5c:	4402      	add	r2, r0
 8004e5e:	4603      	mov	r3, r0
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d100      	bne.n	8004e66 <memset+0xa>
 8004e64:	4770      	bx	lr
 8004e66:	f803 1b01 	strb.w	r1, [r3], #1
 8004e6a:	e7f9      	b.n	8004e60 <memset+0x4>

08004e6c <iprintf>:
 8004e6c:	b40f      	push	{r0, r1, r2, r3}
 8004e6e:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <iprintf+0x2c>)
 8004e70:	b513      	push	{r0, r1, r4, lr}
 8004e72:	681c      	ldr	r4, [r3, #0]
 8004e74:	b124      	cbz	r4, 8004e80 <iprintf+0x14>
 8004e76:	69a3      	ldr	r3, [r4, #24]
 8004e78:	b913      	cbnz	r3, 8004e80 <iprintf+0x14>
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	f000 fbb8 	bl	80055f0 <__sinit>
 8004e80:	ab05      	add	r3, sp, #20
 8004e82:	9a04      	ldr	r2, [sp, #16]
 8004e84:	68a1      	ldr	r1, [r4, #8]
 8004e86:	9301      	str	r3, [sp, #4]
 8004e88:	4620      	mov	r0, r4
 8004e8a:	f000 ffad 	bl	8005de8 <_vfiprintf_r>
 8004e8e:	b002      	add	sp, #8
 8004e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e94:	b004      	add	sp, #16
 8004e96:	4770      	bx	lr
 8004e98:	20000050 	.word	0x20000050

08004e9c <_puts_r>:
 8004e9c:	b570      	push	{r4, r5, r6, lr}
 8004e9e:	460e      	mov	r6, r1
 8004ea0:	4605      	mov	r5, r0
 8004ea2:	b118      	cbz	r0, 8004eac <_puts_r+0x10>
 8004ea4:	6983      	ldr	r3, [r0, #24]
 8004ea6:	b90b      	cbnz	r3, 8004eac <_puts_r+0x10>
 8004ea8:	f000 fba2 	bl	80055f0 <__sinit>
 8004eac:	69ab      	ldr	r3, [r5, #24]
 8004eae:	68ac      	ldr	r4, [r5, #8]
 8004eb0:	b913      	cbnz	r3, 8004eb8 <_puts_r+0x1c>
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	f000 fb9c 	bl	80055f0 <__sinit>
 8004eb8:	4b2c      	ldr	r3, [pc, #176]	; (8004f6c <_puts_r+0xd0>)
 8004eba:	429c      	cmp	r4, r3
 8004ebc:	d120      	bne.n	8004f00 <_puts_r+0x64>
 8004ebe:	686c      	ldr	r4, [r5, #4]
 8004ec0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ec2:	07db      	lsls	r3, r3, #31
 8004ec4:	d405      	bmi.n	8004ed2 <_puts_r+0x36>
 8004ec6:	89a3      	ldrh	r3, [r4, #12]
 8004ec8:	0598      	lsls	r0, r3, #22
 8004eca:	d402      	bmi.n	8004ed2 <_puts_r+0x36>
 8004ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ece:	f000 fc2d 	bl	800572c <__retarget_lock_acquire_recursive>
 8004ed2:	89a3      	ldrh	r3, [r4, #12]
 8004ed4:	0719      	lsls	r1, r3, #28
 8004ed6:	d51d      	bpl.n	8004f14 <_puts_r+0x78>
 8004ed8:	6923      	ldr	r3, [r4, #16]
 8004eda:	b1db      	cbz	r3, 8004f14 <_puts_r+0x78>
 8004edc:	3e01      	subs	r6, #1
 8004ede:	68a3      	ldr	r3, [r4, #8]
 8004ee0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	60a3      	str	r3, [r4, #8]
 8004ee8:	bb39      	cbnz	r1, 8004f3a <_puts_r+0x9e>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	da38      	bge.n	8004f60 <_puts_r+0xc4>
 8004eee:	4622      	mov	r2, r4
 8004ef0:	210a      	movs	r1, #10
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	f000 f980 	bl	80051f8 <__swbuf_r>
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d011      	beq.n	8004f20 <_puts_r+0x84>
 8004efc:	250a      	movs	r5, #10
 8004efe:	e011      	b.n	8004f24 <_puts_r+0x88>
 8004f00:	4b1b      	ldr	r3, [pc, #108]	; (8004f70 <_puts_r+0xd4>)
 8004f02:	429c      	cmp	r4, r3
 8004f04:	d101      	bne.n	8004f0a <_puts_r+0x6e>
 8004f06:	68ac      	ldr	r4, [r5, #8]
 8004f08:	e7da      	b.n	8004ec0 <_puts_r+0x24>
 8004f0a:	4b1a      	ldr	r3, [pc, #104]	; (8004f74 <_puts_r+0xd8>)
 8004f0c:	429c      	cmp	r4, r3
 8004f0e:	bf08      	it	eq
 8004f10:	68ec      	ldreq	r4, [r5, #12]
 8004f12:	e7d5      	b.n	8004ec0 <_puts_r+0x24>
 8004f14:	4621      	mov	r1, r4
 8004f16:	4628      	mov	r0, r5
 8004f18:	f000 f9d2 	bl	80052c0 <__swsetup_r>
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	d0dd      	beq.n	8004edc <_puts_r+0x40>
 8004f20:	f04f 35ff 	mov.w	r5, #4294967295
 8004f24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f26:	07da      	lsls	r2, r3, #31
 8004f28:	d405      	bmi.n	8004f36 <_puts_r+0x9a>
 8004f2a:	89a3      	ldrh	r3, [r4, #12]
 8004f2c:	059b      	lsls	r3, r3, #22
 8004f2e:	d402      	bmi.n	8004f36 <_puts_r+0x9a>
 8004f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f32:	f000 fbfc 	bl	800572e <__retarget_lock_release_recursive>
 8004f36:	4628      	mov	r0, r5
 8004f38:	bd70      	pop	{r4, r5, r6, pc}
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	da04      	bge.n	8004f48 <_puts_r+0xac>
 8004f3e:	69a2      	ldr	r2, [r4, #24]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	dc06      	bgt.n	8004f52 <_puts_r+0xb6>
 8004f44:	290a      	cmp	r1, #10
 8004f46:	d004      	beq.n	8004f52 <_puts_r+0xb6>
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	6022      	str	r2, [r4, #0]
 8004f4e:	7019      	strb	r1, [r3, #0]
 8004f50:	e7c5      	b.n	8004ede <_puts_r+0x42>
 8004f52:	4622      	mov	r2, r4
 8004f54:	4628      	mov	r0, r5
 8004f56:	f000 f94f 	bl	80051f8 <__swbuf_r>
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	d1bf      	bne.n	8004ede <_puts_r+0x42>
 8004f5e:	e7df      	b.n	8004f20 <_puts_r+0x84>
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	250a      	movs	r5, #10
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	6022      	str	r2, [r4, #0]
 8004f68:	701d      	strb	r5, [r3, #0]
 8004f6a:	e7db      	b.n	8004f24 <_puts_r+0x88>
 8004f6c:	08006af4 	.word	0x08006af4
 8004f70:	08006b14 	.word	0x08006b14
 8004f74:	08006ad4 	.word	0x08006ad4

08004f78 <puts>:
 8004f78:	4b02      	ldr	r3, [pc, #8]	; (8004f84 <puts+0xc>)
 8004f7a:	4601      	mov	r1, r0
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	f7ff bf8d 	b.w	8004e9c <_puts_r>
 8004f82:	bf00      	nop
 8004f84:	20000050 	.word	0x20000050

08004f88 <setvbuf>:
 8004f88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004f8c:	461d      	mov	r5, r3
 8004f8e:	4b5d      	ldr	r3, [pc, #372]	; (8005104 <setvbuf+0x17c>)
 8004f90:	681f      	ldr	r7, [r3, #0]
 8004f92:	4604      	mov	r4, r0
 8004f94:	460e      	mov	r6, r1
 8004f96:	4690      	mov	r8, r2
 8004f98:	b127      	cbz	r7, 8004fa4 <setvbuf+0x1c>
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	b913      	cbnz	r3, 8004fa4 <setvbuf+0x1c>
 8004f9e:	4638      	mov	r0, r7
 8004fa0:	f000 fb26 	bl	80055f0 <__sinit>
 8004fa4:	4b58      	ldr	r3, [pc, #352]	; (8005108 <setvbuf+0x180>)
 8004fa6:	429c      	cmp	r4, r3
 8004fa8:	d167      	bne.n	800507a <setvbuf+0xf2>
 8004faa:	687c      	ldr	r4, [r7, #4]
 8004fac:	f1b8 0f02 	cmp.w	r8, #2
 8004fb0:	d006      	beq.n	8004fc0 <setvbuf+0x38>
 8004fb2:	f1b8 0f01 	cmp.w	r8, #1
 8004fb6:	f200 809f 	bhi.w	80050f8 <setvbuf+0x170>
 8004fba:	2d00      	cmp	r5, #0
 8004fbc:	f2c0 809c 	blt.w	80050f8 <setvbuf+0x170>
 8004fc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fc2:	07db      	lsls	r3, r3, #31
 8004fc4:	d405      	bmi.n	8004fd2 <setvbuf+0x4a>
 8004fc6:	89a3      	ldrh	r3, [r4, #12]
 8004fc8:	0598      	lsls	r0, r3, #22
 8004fca:	d402      	bmi.n	8004fd2 <setvbuf+0x4a>
 8004fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fce:	f000 fbad 	bl	800572c <__retarget_lock_acquire_recursive>
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	4638      	mov	r0, r7
 8004fd6:	f000 fa77 	bl	80054c8 <_fflush_r>
 8004fda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fdc:	b141      	cbz	r1, 8004ff0 <setvbuf+0x68>
 8004fde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fe2:	4299      	cmp	r1, r3
 8004fe4:	d002      	beq.n	8004fec <setvbuf+0x64>
 8004fe6:	4638      	mov	r0, r7
 8004fe8:	f000 fc22 	bl	8005830 <_free_r>
 8004fec:	2300      	movs	r3, #0
 8004fee:	6363      	str	r3, [r4, #52]	; 0x34
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	61a3      	str	r3, [r4, #24]
 8004ff4:	6063      	str	r3, [r4, #4]
 8004ff6:	89a3      	ldrh	r3, [r4, #12]
 8004ff8:	0619      	lsls	r1, r3, #24
 8004ffa:	d503      	bpl.n	8005004 <setvbuf+0x7c>
 8004ffc:	6921      	ldr	r1, [r4, #16]
 8004ffe:	4638      	mov	r0, r7
 8005000:	f000 fc16 	bl	8005830 <_free_r>
 8005004:	89a3      	ldrh	r3, [r4, #12]
 8005006:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800500a:	f023 0303 	bic.w	r3, r3, #3
 800500e:	f1b8 0f02 	cmp.w	r8, #2
 8005012:	81a3      	strh	r3, [r4, #12]
 8005014:	d06c      	beq.n	80050f0 <setvbuf+0x168>
 8005016:	ab01      	add	r3, sp, #4
 8005018:	466a      	mov	r2, sp
 800501a:	4621      	mov	r1, r4
 800501c:	4638      	mov	r0, r7
 800501e:	f000 fb99 	bl	8005754 <__swhatbuf_r>
 8005022:	89a3      	ldrh	r3, [r4, #12]
 8005024:	4318      	orrs	r0, r3
 8005026:	81a0      	strh	r0, [r4, #12]
 8005028:	2d00      	cmp	r5, #0
 800502a:	d130      	bne.n	800508e <setvbuf+0x106>
 800502c:	9d00      	ldr	r5, [sp, #0]
 800502e:	4628      	mov	r0, r5
 8005030:	f000 fbf6 	bl	8005820 <malloc>
 8005034:	4606      	mov	r6, r0
 8005036:	2800      	cmp	r0, #0
 8005038:	d155      	bne.n	80050e6 <setvbuf+0x15e>
 800503a:	f8dd 9000 	ldr.w	r9, [sp]
 800503e:	45a9      	cmp	r9, r5
 8005040:	d14a      	bne.n	80050d8 <setvbuf+0x150>
 8005042:	f04f 35ff 	mov.w	r5, #4294967295
 8005046:	2200      	movs	r2, #0
 8005048:	60a2      	str	r2, [r4, #8]
 800504a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800504e:	6022      	str	r2, [r4, #0]
 8005050:	6122      	str	r2, [r4, #16]
 8005052:	2201      	movs	r2, #1
 8005054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005058:	6162      	str	r2, [r4, #20]
 800505a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800505c:	f043 0302 	orr.w	r3, r3, #2
 8005060:	07d2      	lsls	r2, r2, #31
 8005062:	81a3      	strh	r3, [r4, #12]
 8005064:	d405      	bmi.n	8005072 <setvbuf+0xea>
 8005066:	f413 7f00 	tst.w	r3, #512	; 0x200
 800506a:	d102      	bne.n	8005072 <setvbuf+0xea>
 800506c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800506e:	f000 fb5e 	bl	800572e <__retarget_lock_release_recursive>
 8005072:	4628      	mov	r0, r5
 8005074:	b003      	add	sp, #12
 8005076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800507a:	4b24      	ldr	r3, [pc, #144]	; (800510c <setvbuf+0x184>)
 800507c:	429c      	cmp	r4, r3
 800507e:	d101      	bne.n	8005084 <setvbuf+0xfc>
 8005080:	68bc      	ldr	r4, [r7, #8]
 8005082:	e793      	b.n	8004fac <setvbuf+0x24>
 8005084:	4b22      	ldr	r3, [pc, #136]	; (8005110 <setvbuf+0x188>)
 8005086:	429c      	cmp	r4, r3
 8005088:	bf08      	it	eq
 800508a:	68fc      	ldreq	r4, [r7, #12]
 800508c:	e78e      	b.n	8004fac <setvbuf+0x24>
 800508e:	2e00      	cmp	r6, #0
 8005090:	d0cd      	beq.n	800502e <setvbuf+0xa6>
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	b913      	cbnz	r3, 800509c <setvbuf+0x114>
 8005096:	4638      	mov	r0, r7
 8005098:	f000 faaa 	bl	80055f0 <__sinit>
 800509c:	f1b8 0f01 	cmp.w	r8, #1
 80050a0:	bf08      	it	eq
 80050a2:	89a3      	ldrheq	r3, [r4, #12]
 80050a4:	6026      	str	r6, [r4, #0]
 80050a6:	bf04      	itt	eq
 80050a8:	f043 0301 	orreq.w	r3, r3, #1
 80050ac:	81a3      	strheq	r3, [r4, #12]
 80050ae:	89a2      	ldrh	r2, [r4, #12]
 80050b0:	f012 0308 	ands.w	r3, r2, #8
 80050b4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80050b8:	d01c      	beq.n	80050f4 <setvbuf+0x16c>
 80050ba:	07d3      	lsls	r3, r2, #31
 80050bc:	bf41      	itttt	mi
 80050be:	2300      	movmi	r3, #0
 80050c0:	426d      	negmi	r5, r5
 80050c2:	60a3      	strmi	r3, [r4, #8]
 80050c4:	61a5      	strmi	r5, [r4, #24]
 80050c6:	bf58      	it	pl
 80050c8:	60a5      	strpl	r5, [r4, #8]
 80050ca:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80050cc:	f015 0501 	ands.w	r5, r5, #1
 80050d0:	d115      	bne.n	80050fe <setvbuf+0x176>
 80050d2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80050d6:	e7c8      	b.n	800506a <setvbuf+0xe2>
 80050d8:	4648      	mov	r0, r9
 80050da:	f000 fba1 	bl	8005820 <malloc>
 80050de:	4606      	mov	r6, r0
 80050e0:	2800      	cmp	r0, #0
 80050e2:	d0ae      	beq.n	8005042 <setvbuf+0xba>
 80050e4:	464d      	mov	r5, r9
 80050e6:	89a3      	ldrh	r3, [r4, #12]
 80050e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ec:	81a3      	strh	r3, [r4, #12]
 80050ee:	e7d0      	b.n	8005092 <setvbuf+0x10a>
 80050f0:	2500      	movs	r5, #0
 80050f2:	e7a8      	b.n	8005046 <setvbuf+0xbe>
 80050f4:	60a3      	str	r3, [r4, #8]
 80050f6:	e7e8      	b.n	80050ca <setvbuf+0x142>
 80050f8:	f04f 35ff 	mov.w	r5, #4294967295
 80050fc:	e7b9      	b.n	8005072 <setvbuf+0xea>
 80050fe:	2500      	movs	r5, #0
 8005100:	e7b7      	b.n	8005072 <setvbuf+0xea>
 8005102:	bf00      	nop
 8005104:	20000050 	.word	0x20000050
 8005108:	08006af4 	.word	0x08006af4
 800510c:	08006b14 	.word	0x08006b14
 8005110:	08006ad4 	.word	0x08006ad4

08005114 <siscanf>:
 8005114:	b40e      	push	{r1, r2, r3}
 8005116:	b510      	push	{r4, lr}
 8005118:	b09f      	sub	sp, #124	; 0x7c
 800511a:	ac21      	add	r4, sp, #132	; 0x84
 800511c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005120:	f854 2b04 	ldr.w	r2, [r4], #4
 8005124:	9201      	str	r2, [sp, #4]
 8005126:	f8ad 101c 	strh.w	r1, [sp, #28]
 800512a:	9004      	str	r0, [sp, #16]
 800512c:	9008      	str	r0, [sp, #32]
 800512e:	f7fb f85f 	bl	80001f0 <strlen>
 8005132:	4b0c      	ldr	r3, [pc, #48]	; (8005164 <siscanf+0x50>)
 8005134:	9005      	str	r0, [sp, #20]
 8005136:	9009      	str	r0, [sp, #36]	; 0x24
 8005138:	930d      	str	r3, [sp, #52]	; 0x34
 800513a:	480b      	ldr	r0, [pc, #44]	; (8005168 <siscanf+0x54>)
 800513c:	9a01      	ldr	r2, [sp, #4]
 800513e:	6800      	ldr	r0, [r0, #0]
 8005140:	9403      	str	r4, [sp, #12]
 8005142:	2300      	movs	r3, #0
 8005144:	9311      	str	r3, [sp, #68]	; 0x44
 8005146:	9316      	str	r3, [sp, #88]	; 0x58
 8005148:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800514c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005150:	a904      	add	r1, sp, #16
 8005152:	4623      	mov	r3, r4
 8005154:	f000 fca6 	bl	8005aa4 <__ssvfiscanf_r>
 8005158:	b01f      	add	sp, #124	; 0x7c
 800515a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800515e:	b003      	add	sp, #12
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	0800518f 	.word	0x0800518f
 8005168:	20000050 	.word	0x20000050

0800516c <__sread>:
 800516c:	b510      	push	{r4, lr}
 800516e:	460c      	mov	r4, r1
 8005170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005174:	f001 fa4e 	bl	8006614 <_read_r>
 8005178:	2800      	cmp	r0, #0
 800517a:	bfab      	itete	ge
 800517c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800517e:	89a3      	ldrhlt	r3, [r4, #12]
 8005180:	181b      	addge	r3, r3, r0
 8005182:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005186:	bfac      	ite	ge
 8005188:	6563      	strge	r3, [r4, #84]	; 0x54
 800518a:	81a3      	strhlt	r3, [r4, #12]
 800518c:	bd10      	pop	{r4, pc}

0800518e <__seofread>:
 800518e:	2000      	movs	r0, #0
 8005190:	4770      	bx	lr

08005192 <__swrite>:
 8005192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005196:	461f      	mov	r7, r3
 8005198:	898b      	ldrh	r3, [r1, #12]
 800519a:	05db      	lsls	r3, r3, #23
 800519c:	4605      	mov	r5, r0
 800519e:	460c      	mov	r4, r1
 80051a0:	4616      	mov	r6, r2
 80051a2:	d505      	bpl.n	80051b0 <__swrite+0x1e>
 80051a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051a8:	2302      	movs	r3, #2
 80051aa:	2200      	movs	r2, #0
 80051ac:	f000 fac0 	bl	8005730 <_lseek_r>
 80051b0:	89a3      	ldrh	r3, [r4, #12]
 80051b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051ba:	81a3      	strh	r3, [r4, #12]
 80051bc:	4632      	mov	r2, r6
 80051be:	463b      	mov	r3, r7
 80051c0:	4628      	mov	r0, r5
 80051c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051c6:	f000 b869 	b.w	800529c <_write_r>

080051ca <__sseek>:
 80051ca:	b510      	push	{r4, lr}
 80051cc:	460c      	mov	r4, r1
 80051ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d2:	f000 faad 	bl	8005730 <_lseek_r>
 80051d6:	1c43      	adds	r3, r0, #1
 80051d8:	89a3      	ldrh	r3, [r4, #12]
 80051da:	bf15      	itete	ne
 80051dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80051de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051e6:	81a3      	strheq	r3, [r4, #12]
 80051e8:	bf18      	it	ne
 80051ea:	81a3      	strhne	r3, [r4, #12]
 80051ec:	bd10      	pop	{r4, pc}

080051ee <__sclose>:
 80051ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f2:	f000 b8d3 	b.w	800539c <_close_r>
	...

080051f8 <__swbuf_r>:
 80051f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fa:	460e      	mov	r6, r1
 80051fc:	4614      	mov	r4, r2
 80051fe:	4605      	mov	r5, r0
 8005200:	b118      	cbz	r0, 800520a <__swbuf_r+0x12>
 8005202:	6983      	ldr	r3, [r0, #24]
 8005204:	b90b      	cbnz	r3, 800520a <__swbuf_r+0x12>
 8005206:	f000 f9f3 	bl	80055f0 <__sinit>
 800520a:	4b21      	ldr	r3, [pc, #132]	; (8005290 <__swbuf_r+0x98>)
 800520c:	429c      	cmp	r4, r3
 800520e:	d12b      	bne.n	8005268 <__swbuf_r+0x70>
 8005210:	686c      	ldr	r4, [r5, #4]
 8005212:	69a3      	ldr	r3, [r4, #24]
 8005214:	60a3      	str	r3, [r4, #8]
 8005216:	89a3      	ldrh	r3, [r4, #12]
 8005218:	071a      	lsls	r2, r3, #28
 800521a:	d52f      	bpl.n	800527c <__swbuf_r+0x84>
 800521c:	6923      	ldr	r3, [r4, #16]
 800521e:	b36b      	cbz	r3, 800527c <__swbuf_r+0x84>
 8005220:	6923      	ldr	r3, [r4, #16]
 8005222:	6820      	ldr	r0, [r4, #0]
 8005224:	1ac0      	subs	r0, r0, r3
 8005226:	6963      	ldr	r3, [r4, #20]
 8005228:	b2f6      	uxtb	r6, r6
 800522a:	4283      	cmp	r3, r0
 800522c:	4637      	mov	r7, r6
 800522e:	dc04      	bgt.n	800523a <__swbuf_r+0x42>
 8005230:	4621      	mov	r1, r4
 8005232:	4628      	mov	r0, r5
 8005234:	f000 f948 	bl	80054c8 <_fflush_r>
 8005238:	bb30      	cbnz	r0, 8005288 <__swbuf_r+0x90>
 800523a:	68a3      	ldr	r3, [r4, #8]
 800523c:	3b01      	subs	r3, #1
 800523e:	60a3      	str	r3, [r4, #8]
 8005240:	6823      	ldr	r3, [r4, #0]
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	6022      	str	r2, [r4, #0]
 8005246:	701e      	strb	r6, [r3, #0]
 8005248:	6963      	ldr	r3, [r4, #20]
 800524a:	3001      	adds	r0, #1
 800524c:	4283      	cmp	r3, r0
 800524e:	d004      	beq.n	800525a <__swbuf_r+0x62>
 8005250:	89a3      	ldrh	r3, [r4, #12]
 8005252:	07db      	lsls	r3, r3, #31
 8005254:	d506      	bpl.n	8005264 <__swbuf_r+0x6c>
 8005256:	2e0a      	cmp	r6, #10
 8005258:	d104      	bne.n	8005264 <__swbuf_r+0x6c>
 800525a:	4621      	mov	r1, r4
 800525c:	4628      	mov	r0, r5
 800525e:	f000 f933 	bl	80054c8 <_fflush_r>
 8005262:	b988      	cbnz	r0, 8005288 <__swbuf_r+0x90>
 8005264:	4638      	mov	r0, r7
 8005266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005268:	4b0a      	ldr	r3, [pc, #40]	; (8005294 <__swbuf_r+0x9c>)
 800526a:	429c      	cmp	r4, r3
 800526c:	d101      	bne.n	8005272 <__swbuf_r+0x7a>
 800526e:	68ac      	ldr	r4, [r5, #8]
 8005270:	e7cf      	b.n	8005212 <__swbuf_r+0x1a>
 8005272:	4b09      	ldr	r3, [pc, #36]	; (8005298 <__swbuf_r+0xa0>)
 8005274:	429c      	cmp	r4, r3
 8005276:	bf08      	it	eq
 8005278:	68ec      	ldreq	r4, [r5, #12]
 800527a:	e7ca      	b.n	8005212 <__swbuf_r+0x1a>
 800527c:	4621      	mov	r1, r4
 800527e:	4628      	mov	r0, r5
 8005280:	f000 f81e 	bl	80052c0 <__swsetup_r>
 8005284:	2800      	cmp	r0, #0
 8005286:	d0cb      	beq.n	8005220 <__swbuf_r+0x28>
 8005288:	f04f 37ff 	mov.w	r7, #4294967295
 800528c:	e7ea      	b.n	8005264 <__swbuf_r+0x6c>
 800528e:	bf00      	nop
 8005290:	08006af4 	.word	0x08006af4
 8005294:	08006b14 	.word	0x08006b14
 8005298:	08006ad4 	.word	0x08006ad4

0800529c <_write_r>:
 800529c:	b538      	push	{r3, r4, r5, lr}
 800529e:	4d07      	ldr	r5, [pc, #28]	; (80052bc <_write_r+0x20>)
 80052a0:	4604      	mov	r4, r0
 80052a2:	4608      	mov	r0, r1
 80052a4:	4611      	mov	r1, r2
 80052a6:	2200      	movs	r2, #0
 80052a8:	602a      	str	r2, [r5, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	f7fb fdd5 	bl	8000e5a <_write>
 80052b0:	1c43      	adds	r3, r0, #1
 80052b2:	d102      	bne.n	80052ba <_write_r+0x1e>
 80052b4:	682b      	ldr	r3, [r5, #0]
 80052b6:	b103      	cbz	r3, 80052ba <_write_r+0x1e>
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	bd38      	pop	{r3, r4, r5, pc}
 80052bc:	20000698 	.word	0x20000698

080052c0 <__swsetup_r>:
 80052c0:	4b32      	ldr	r3, [pc, #200]	; (800538c <__swsetup_r+0xcc>)
 80052c2:	b570      	push	{r4, r5, r6, lr}
 80052c4:	681d      	ldr	r5, [r3, #0]
 80052c6:	4606      	mov	r6, r0
 80052c8:	460c      	mov	r4, r1
 80052ca:	b125      	cbz	r5, 80052d6 <__swsetup_r+0x16>
 80052cc:	69ab      	ldr	r3, [r5, #24]
 80052ce:	b913      	cbnz	r3, 80052d6 <__swsetup_r+0x16>
 80052d0:	4628      	mov	r0, r5
 80052d2:	f000 f98d 	bl	80055f0 <__sinit>
 80052d6:	4b2e      	ldr	r3, [pc, #184]	; (8005390 <__swsetup_r+0xd0>)
 80052d8:	429c      	cmp	r4, r3
 80052da:	d10f      	bne.n	80052fc <__swsetup_r+0x3c>
 80052dc:	686c      	ldr	r4, [r5, #4]
 80052de:	89a3      	ldrh	r3, [r4, #12]
 80052e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052e4:	0719      	lsls	r1, r3, #28
 80052e6:	d42c      	bmi.n	8005342 <__swsetup_r+0x82>
 80052e8:	06dd      	lsls	r5, r3, #27
 80052ea:	d411      	bmi.n	8005310 <__swsetup_r+0x50>
 80052ec:	2309      	movs	r3, #9
 80052ee:	6033      	str	r3, [r6, #0]
 80052f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80052f4:	81a3      	strh	r3, [r4, #12]
 80052f6:	f04f 30ff 	mov.w	r0, #4294967295
 80052fa:	e03e      	b.n	800537a <__swsetup_r+0xba>
 80052fc:	4b25      	ldr	r3, [pc, #148]	; (8005394 <__swsetup_r+0xd4>)
 80052fe:	429c      	cmp	r4, r3
 8005300:	d101      	bne.n	8005306 <__swsetup_r+0x46>
 8005302:	68ac      	ldr	r4, [r5, #8]
 8005304:	e7eb      	b.n	80052de <__swsetup_r+0x1e>
 8005306:	4b24      	ldr	r3, [pc, #144]	; (8005398 <__swsetup_r+0xd8>)
 8005308:	429c      	cmp	r4, r3
 800530a:	bf08      	it	eq
 800530c:	68ec      	ldreq	r4, [r5, #12]
 800530e:	e7e6      	b.n	80052de <__swsetup_r+0x1e>
 8005310:	0758      	lsls	r0, r3, #29
 8005312:	d512      	bpl.n	800533a <__swsetup_r+0x7a>
 8005314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005316:	b141      	cbz	r1, 800532a <__swsetup_r+0x6a>
 8005318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800531c:	4299      	cmp	r1, r3
 800531e:	d002      	beq.n	8005326 <__swsetup_r+0x66>
 8005320:	4630      	mov	r0, r6
 8005322:	f000 fa85 	bl	8005830 <_free_r>
 8005326:	2300      	movs	r3, #0
 8005328:	6363      	str	r3, [r4, #52]	; 0x34
 800532a:	89a3      	ldrh	r3, [r4, #12]
 800532c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005330:	81a3      	strh	r3, [r4, #12]
 8005332:	2300      	movs	r3, #0
 8005334:	6063      	str	r3, [r4, #4]
 8005336:	6923      	ldr	r3, [r4, #16]
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	89a3      	ldrh	r3, [r4, #12]
 800533c:	f043 0308 	orr.w	r3, r3, #8
 8005340:	81a3      	strh	r3, [r4, #12]
 8005342:	6923      	ldr	r3, [r4, #16]
 8005344:	b94b      	cbnz	r3, 800535a <__swsetup_r+0x9a>
 8005346:	89a3      	ldrh	r3, [r4, #12]
 8005348:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800534c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005350:	d003      	beq.n	800535a <__swsetup_r+0x9a>
 8005352:	4621      	mov	r1, r4
 8005354:	4630      	mov	r0, r6
 8005356:	f000 fa23 	bl	80057a0 <__smakebuf_r>
 800535a:	89a0      	ldrh	r0, [r4, #12]
 800535c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005360:	f010 0301 	ands.w	r3, r0, #1
 8005364:	d00a      	beq.n	800537c <__swsetup_r+0xbc>
 8005366:	2300      	movs	r3, #0
 8005368:	60a3      	str	r3, [r4, #8]
 800536a:	6963      	ldr	r3, [r4, #20]
 800536c:	425b      	negs	r3, r3
 800536e:	61a3      	str	r3, [r4, #24]
 8005370:	6923      	ldr	r3, [r4, #16]
 8005372:	b943      	cbnz	r3, 8005386 <__swsetup_r+0xc6>
 8005374:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005378:	d1ba      	bne.n	80052f0 <__swsetup_r+0x30>
 800537a:	bd70      	pop	{r4, r5, r6, pc}
 800537c:	0781      	lsls	r1, r0, #30
 800537e:	bf58      	it	pl
 8005380:	6963      	ldrpl	r3, [r4, #20]
 8005382:	60a3      	str	r3, [r4, #8]
 8005384:	e7f4      	b.n	8005370 <__swsetup_r+0xb0>
 8005386:	2000      	movs	r0, #0
 8005388:	e7f7      	b.n	800537a <__swsetup_r+0xba>
 800538a:	bf00      	nop
 800538c:	20000050 	.word	0x20000050
 8005390:	08006af4 	.word	0x08006af4
 8005394:	08006b14 	.word	0x08006b14
 8005398:	08006ad4 	.word	0x08006ad4

0800539c <_close_r>:
 800539c:	b538      	push	{r3, r4, r5, lr}
 800539e:	4d06      	ldr	r5, [pc, #24]	; (80053b8 <_close_r+0x1c>)
 80053a0:	2300      	movs	r3, #0
 80053a2:	4604      	mov	r4, r0
 80053a4:	4608      	mov	r0, r1
 80053a6:	602b      	str	r3, [r5, #0]
 80053a8:	f7fb fd73 	bl	8000e92 <_close>
 80053ac:	1c43      	adds	r3, r0, #1
 80053ae:	d102      	bne.n	80053b6 <_close_r+0x1a>
 80053b0:	682b      	ldr	r3, [r5, #0]
 80053b2:	b103      	cbz	r3, 80053b6 <_close_r+0x1a>
 80053b4:	6023      	str	r3, [r4, #0]
 80053b6:	bd38      	pop	{r3, r4, r5, pc}
 80053b8:	20000698 	.word	0x20000698

080053bc <__sflush_r>:
 80053bc:	898a      	ldrh	r2, [r1, #12]
 80053be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053c2:	4605      	mov	r5, r0
 80053c4:	0710      	lsls	r0, r2, #28
 80053c6:	460c      	mov	r4, r1
 80053c8:	d458      	bmi.n	800547c <__sflush_r+0xc0>
 80053ca:	684b      	ldr	r3, [r1, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	dc05      	bgt.n	80053dc <__sflush_r+0x20>
 80053d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	dc02      	bgt.n	80053dc <__sflush_r+0x20>
 80053d6:	2000      	movs	r0, #0
 80053d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053de:	2e00      	cmp	r6, #0
 80053e0:	d0f9      	beq.n	80053d6 <__sflush_r+0x1a>
 80053e2:	2300      	movs	r3, #0
 80053e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053e8:	682f      	ldr	r7, [r5, #0]
 80053ea:	602b      	str	r3, [r5, #0]
 80053ec:	d032      	beq.n	8005454 <__sflush_r+0x98>
 80053ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053f0:	89a3      	ldrh	r3, [r4, #12]
 80053f2:	075a      	lsls	r2, r3, #29
 80053f4:	d505      	bpl.n	8005402 <__sflush_r+0x46>
 80053f6:	6863      	ldr	r3, [r4, #4]
 80053f8:	1ac0      	subs	r0, r0, r3
 80053fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053fc:	b10b      	cbz	r3, 8005402 <__sflush_r+0x46>
 80053fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005400:	1ac0      	subs	r0, r0, r3
 8005402:	2300      	movs	r3, #0
 8005404:	4602      	mov	r2, r0
 8005406:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005408:	6a21      	ldr	r1, [r4, #32]
 800540a:	4628      	mov	r0, r5
 800540c:	47b0      	blx	r6
 800540e:	1c43      	adds	r3, r0, #1
 8005410:	89a3      	ldrh	r3, [r4, #12]
 8005412:	d106      	bne.n	8005422 <__sflush_r+0x66>
 8005414:	6829      	ldr	r1, [r5, #0]
 8005416:	291d      	cmp	r1, #29
 8005418:	d82c      	bhi.n	8005474 <__sflush_r+0xb8>
 800541a:	4a2a      	ldr	r2, [pc, #168]	; (80054c4 <__sflush_r+0x108>)
 800541c:	40ca      	lsrs	r2, r1
 800541e:	07d6      	lsls	r6, r2, #31
 8005420:	d528      	bpl.n	8005474 <__sflush_r+0xb8>
 8005422:	2200      	movs	r2, #0
 8005424:	6062      	str	r2, [r4, #4]
 8005426:	04d9      	lsls	r1, r3, #19
 8005428:	6922      	ldr	r2, [r4, #16]
 800542a:	6022      	str	r2, [r4, #0]
 800542c:	d504      	bpl.n	8005438 <__sflush_r+0x7c>
 800542e:	1c42      	adds	r2, r0, #1
 8005430:	d101      	bne.n	8005436 <__sflush_r+0x7a>
 8005432:	682b      	ldr	r3, [r5, #0]
 8005434:	b903      	cbnz	r3, 8005438 <__sflush_r+0x7c>
 8005436:	6560      	str	r0, [r4, #84]	; 0x54
 8005438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800543a:	602f      	str	r7, [r5, #0]
 800543c:	2900      	cmp	r1, #0
 800543e:	d0ca      	beq.n	80053d6 <__sflush_r+0x1a>
 8005440:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005444:	4299      	cmp	r1, r3
 8005446:	d002      	beq.n	800544e <__sflush_r+0x92>
 8005448:	4628      	mov	r0, r5
 800544a:	f000 f9f1 	bl	8005830 <_free_r>
 800544e:	2000      	movs	r0, #0
 8005450:	6360      	str	r0, [r4, #52]	; 0x34
 8005452:	e7c1      	b.n	80053d8 <__sflush_r+0x1c>
 8005454:	6a21      	ldr	r1, [r4, #32]
 8005456:	2301      	movs	r3, #1
 8005458:	4628      	mov	r0, r5
 800545a:	47b0      	blx	r6
 800545c:	1c41      	adds	r1, r0, #1
 800545e:	d1c7      	bne.n	80053f0 <__sflush_r+0x34>
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0c4      	beq.n	80053f0 <__sflush_r+0x34>
 8005466:	2b1d      	cmp	r3, #29
 8005468:	d001      	beq.n	800546e <__sflush_r+0xb2>
 800546a:	2b16      	cmp	r3, #22
 800546c:	d101      	bne.n	8005472 <__sflush_r+0xb6>
 800546e:	602f      	str	r7, [r5, #0]
 8005470:	e7b1      	b.n	80053d6 <__sflush_r+0x1a>
 8005472:	89a3      	ldrh	r3, [r4, #12]
 8005474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005478:	81a3      	strh	r3, [r4, #12]
 800547a:	e7ad      	b.n	80053d8 <__sflush_r+0x1c>
 800547c:	690f      	ldr	r7, [r1, #16]
 800547e:	2f00      	cmp	r7, #0
 8005480:	d0a9      	beq.n	80053d6 <__sflush_r+0x1a>
 8005482:	0793      	lsls	r3, r2, #30
 8005484:	680e      	ldr	r6, [r1, #0]
 8005486:	bf08      	it	eq
 8005488:	694b      	ldreq	r3, [r1, #20]
 800548a:	600f      	str	r7, [r1, #0]
 800548c:	bf18      	it	ne
 800548e:	2300      	movne	r3, #0
 8005490:	eba6 0807 	sub.w	r8, r6, r7
 8005494:	608b      	str	r3, [r1, #8]
 8005496:	f1b8 0f00 	cmp.w	r8, #0
 800549a:	dd9c      	ble.n	80053d6 <__sflush_r+0x1a>
 800549c:	6a21      	ldr	r1, [r4, #32]
 800549e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80054a0:	4643      	mov	r3, r8
 80054a2:	463a      	mov	r2, r7
 80054a4:	4628      	mov	r0, r5
 80054a6:	47b0      	blx	r6
 80054a8:	2800      	cmp	r0, #0
 80054aa:	dc06      	bgt.n	80054ba <__sflush_r+0xfe>
 80054ac:	89a3      	ldrh	r3, [r4, #12]
 80054ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054b2:	81a3      	strh	r3, [r4, #12]
 80054b4:	f04f 30ff 	mov.w	r0, #4294967295
 80054b8:	e78e      	b.n	80053d8 <__sflush_r+0x1c>
 80054ba:	4407      	add	r7, r0
 80054bc:	eba8 0800 	sub.w	r8, r8, r0
 80054c0:	e7e9      	b.n	8005496 <__sflush_r+0xda>
 80054c2:	bf00      	nop
 80054c4:	20400001 	.word	0x20400001

080054c8 <_fflush_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	690b      	ldr	r3, [r1, #16]
 80054cc:	4605      	mov	r5, r0
 80054ce:	460c      	mov	r4, r1
 80054d0:	b913      	cbnz	r3, 80054d8 <_fflush_r+0x10>
 80054d2:	2500      	movs	r5, #0
 80054d4:	4628      	mov	r0, r5
 80054d6:	bd38      	pop	{r3, r4, r5, pc}
 80054d8:	b118      	cbz	r0, 80054e2 <_fflush_r+0x1a>
 80054da:	6983      	ldr	r3, [r0, #24]
 80054dc:	b90b      	cbnz	r3, 80054e2 <_fflush_r+0x1a>
 80054de:	f000 f887 	bl	80055f0 <__sinit>
 80054e2:	4b14      	ldr	r3, [pc, #80]	; (8005534 <_fflush_r+0x6c>)
 80054e4:	429c      	cmp	r4, r3
 80054e6:	d11b      	bne.n	8005520 <_fflush_r+0x58>
 80054e8:	686c      	ldr	r4, [r5, #4]
 80054ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0ef      	beq.n	80054d2 <_fflush_r+0xa>
 80054f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054f4:	07d0      	lsls	r0, r2, #31
 80054f6:	d404      	bmi.n	8005502 <_fflush_r+0x3a>
 80054f8:	0599      	lsls	r1, r3, #22
 80054fa:	d402      	bmi.n	8005502 <_fflush_r+0x3a>
 80054fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054fe:	f000 f915 	bl	800572c <__retarget_lock_acquire_recursive>
 8005502:	4628      	mov	r0, r5
 8005504:	4621      	mov	r1, r4
 8005506:	f7ff ff59 	bl	80053bc <__sflush_r>
 800550a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800550c:	07da      	lsls	r2, r3, #31
 800550e:	4605      	mov	r5, r0
 8005510:	d4e0      	bmi.n	80054d4 <_fflush_r+0xc>
 8005512:	89a3      	ldrh	r3, [r4, #12]
 8005514:	059b      	lsls	r3, r3, #22
 8005516:	d4dd      	bmi.n	80054d4 <_fflush_r+0xc>
 8005518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800551a:	f000 f908 	bl	800572e <__retarget_lock_release_recursive>
 800551e:	e7d9      	b.n	80054d4 <_fflush_r+0xc>
 8005520:	4b05      	ldr	r3, [pc, #20]	; (8005538 <_fflush_r+0x70>)
 8005522:	429c      	cmp	r4, r3
 8005524:	d101      	bne.n	800552a <_fflush_r+0x62>
 8005526:	68ac      	ldr	r4, [r5, #8]
 8005528:	e7df      	b.n	80054ea <_fflush_r+0x22>
 800552a:	4b04      	ldr	r3, [pc, #16]	; (800553c <_fflush_r+0x74>)
 800552c:	429c      	cmp	r4, r3
 800552e:	bf08      	it	eq
 8005530:	68ec      	ldreq	r4, [r5, #12]
 8005532:	e7da      	b.n	80054ea <_fflush_r+0x22>
 8005534:	08006af4 	.word	0x08006af4
 8005538:	08006b14 	.word	0x08006b14
 800553c:	08006ad4 	.word	0x08006ad4

08005540 <std>:
 8005540:	2300      	movs	r3, #0
 8005542:	b510      	push	{r4, lr}
 8005544:	4604      	mov	r4, r0
 8005546:	e9c0 3300 	strd	r3, r3, [r0]
 800554a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800554e:	6083      	str	r3, [r0, #8]
 8005550:	8181      	strh	r1, [r0, #12]
 8005552:	6643      	str	r3, [r0, #100]	; 0x64
 8005554:	81c2      	strh	r2, [r0, #14]
 8005556:	6183      	str	r3, [r0, #24]
 8005558:	4619      	mov	r1, r3
 800555a:	2208      	movs	r2, #8
 800555c:	305c      	adds	r0, #92	; 0x5c
 800555e:	f7ff fc7d 	bl	8004e5c <memset>
 8005562:	4b05      	ldr	r3, [pc, #20]	; (8005578 <std+0x38>)
 8005564:	6263      	str	r3, [r4, #36]	; 0x24
 8005566:	4b05      	ldr	r3, [pc, #20]	; (800557c <std+0x3c>)
 8005568:	62a3      	str	r3, [r4, #40]	; 0x28
 800556a:	4b05      	ldr	r3, [pc, #20]	; (8005580 <std+0x40>)
 800556c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800556e:	4b05      	ldr	r3, [pc, #20]	; (8005584 <std+0x44>)
 8005570:	6224      	str	r4, [r4, #32]
 8005572:	6323      	str	r3, [r4, #48]	; 0x30
 8005574:	bd10      	pop	{r4, pc}
 8005576:	bf00      	nop
 8005578:	0800516d 	.word	0x0800516d
 800557c:	08005193 	.word	0x08005193
 8005580:	080051cb 	.word	0x080051cb
 8005584:	080051ef 	.word	0x080051ef

08005588 <_cleanup_r>:
 8005588:	4901      	ldr	r1, [pc, #4]	; (8005590 <_cleanup_r+0x8>)
 800558a:	f000 b8af 	b.w	80056ec <_fwalk_reent>
 800558e:	bf00      	nop
 8005590:	080054c9 	.word	0x080054c9

08005594 <__sfmoreglue>:
 8005594:	b570      	push	{r4, r5, r6, lr}
 8005596:	2268      	movs	r2, #104	; 0x68
 8005598:	1e4d      	subs	r5, r1, #1
 800559a:	4355      	muls	r5, r2
 800559c:	460e      	mov	r6, r1
 800559e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80055a2:	f000 f9b1 	bl	8005908 <_malloc_r>
 80055a6:	4604      	mov	r4, r0
 80055a8:	b140      	cbz	r0, 80055bc <__sfmoreglue+0x28>
 80055aa:	2100      	movs	r1, #0
 80055ac:	e9c0 1600 	strd	r1, r6, [r0]
 80055b0:	300c      	adds	r0, #12
 80055b2:	60a0      	str	r0, [r4, #8]
 80055b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80055b8:	f7ff fc50 	bl	8004e5c <memset>
 80055bc:	4620      	mov	r0, r4
 80055be:	bd70      	pop	{r4, r5, r6, pc}

080055c0 <__sfp_lock_acquire>:
 80055c0:	4801      	ldr	r0, [pc, #4]	; (80055c8 <__sfp_lock_acquire+0x8>)
 80055c2:	f000 b8b3 	b.w	800572c <__retarget_lock_acquire_recursive>
 80055c6:	bf00      	nop
 80055c8:	2000068d 	.word	0x2000068d

080055cc <__sfp_lock_release>:
 80055cc:	4801      	ldr	r0, [pc, #4]	; (80055d4 <__sfp_lock_release+0x8>)
 80055ce:	f000 b8ae 	b.w	800572e <__retarget_lock_release_recursive>
 80055d2:	bf00      	nop
 80055d4:	2000068d 	.word	0x2000068d

080055d8 <__sinit_lock_acquire>:
 80055d8:	4801      	ldr	r0, [pc, #4]	; (80055e0 <__sinit_lock_acquire+0x8>)
 80055da:	f000 b8a7 	b.w	800572c <__retarget_lock_acquire_recursive>
 80055de:	bf00      	nop
 80055e0:	2000068e 	.word	0x2000068e

080055e4 <__sinit_lock_release>:
 80055e4:	4801      	ldr	r0, [pc, #4]	; (80055ec <__sinit_lock_release+0x8>)
 80055e6:	f000 b8a2 	b.w	800572e <__retarget_lock_release_recursive>
 80055ea:	bf00      	nop
 80055ec:	2000068e 	.word	0x2000068e

080055f0 <__sinit>:
 80055f0:	b510      	push	{r4, lr}
 80055f2:	4604      	mov	r4, r0
 80055f4:	f7ff fff0 	bl	80055d8 <__sinit_lock_acquire>
 80055f8:	69a3      	ldr	r3, [r4, #24]
 80055fa:	b11b      	cbz	r3, 8005604 <__sinit+0x14>
 80055fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005600:	f7ff bff0 	b.w	80055e4 <__sinit_lock_release>
 8005604:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005608:	6523      	str	r3, [r4, #80]	; 0x50
 800560a:	4b13      	ldr	r3, [pc, #76]	; (8005658 <__sinit+0x68>)
 800560c:	4a13      	ldr	r2, [pc, #76]	; (800565c <__sinit+0x6c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	62a2      	str	r2, [r4, #40]	; 0x28
 8005612:	42a3      	cmp	r3, r4
 8005614:	bf04      	itt	eq
 8005616:	2301      	moveq	r3, #1
 8005618:	61a3      	streq	r3, [r4, #24]
 800561a:	4620      	mov	r0, r4
 800561c:	f000 f820 	bl	8005660 <__sfp>
 8005620:	6060      	str	r0, [r4, #4]
 8005622:	4620      	mov	r0, r4
 8005624:	f000 f81c 	bl	8005660 <__sfp>
 8005628:	60a0      	str	r0, [r4, #8]
 800562a:	4620      	mov	r0, r4
 800562c:	f000 f818 	bl	8005660 <__sfp>
 8005630:	2200      	movs	r2, #0
 8005632:	60e0      	str	r0, [r4, #12]
 8005634:	2104      	movs	r1, #4
 8005636:	6860      	ldr	r0, [r4, #4]
 8005638:	f7ff ff82 	bl	8005540 <std>
 800563c:	68a0      	ldr	r0, [r4, #8]
 800563e:	2201      	movs	r2, #1
 8005640:	2109      	movs	r1, #9
 8005642:	f7ff ff7d 	bl	8005540 <std>
 8005646:	68e0      	ldr	r0, [r4, #12]
 8005648:	2202      	movs	r2, #2
 800564a:	2112      	movs	r1, #18
 800564c:	f7ff ff78 	bl	8005540 <std>
 8005650:	2301      	movs	r3, #1
 8005652:	61a3      	str	r3, [r4, #24]
 8005654:	e7d2      	b.n	80055fc <__sinit+0xc>
 8005656:	bf00      	nop
 8005658:	08006ad0 	.word	0x08006ad0
 800565c:	08005589 	.word	0x08005589

08005660 <__sfp>:
 8005660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005662:	4607      	mov	r7, r0
 8005664:	f7ff ffac 	bl	80055c0 <__sfp_lock_acquire>
 8005668:	4b1e      	ldr	r3, [pc, #120]	; (80056e4 <__sfp+0x84>)
 800566a:	681e      	ldr	r6, [r3, #0]
 800566c:	69b3      	ldr	r3, [r6, #24]
 800566e:	b913      	cbnz	r3, 8005676 <__sfp+0x16>
 8005670:	4630      	mov	r0, r6
 8005672:	f7ff ffbd 	bl	80055f0 <__sinit>
 8005676:	3648      	adds	r6, #72	; 0x48
 8005678:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800567c:	3b01      	subs	r3, #1
 800567e:	d503      	bpl.n	8005688 <__sfp+0x28>
 8005680:	6833      	ldr	r3, [r6, #0]
 8005682:	b30b      	cbz	r3, 80056c8 <__sfp+0x68>
 8005684:	6836      	ldr	r6, [r6, #0]
 8005686:	e7f7      	b.n	8005678 <__sfp+0x18>
 8005688:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800568c:	b9d5      	cbnz	r5, 80056c4 <__sfp+0x64>
 800568e:	4b16      	ldr	r3, [pc, #88]	; (80056e8 <__sfp+0x88>)
 8005690:	60e3      	str	r3, [r4, #12]
 8005692:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005696:	6665      	str	r5, [r4, #100]	; 0x64
 8005698:	f000 f847 	bl	800572a <__retarget_lock_init_recursive>
 800569c:	f7ff ff96 	bl	80055cc <__sfp_lock_release>
 80056a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80056a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80056a8:	6025      	str	r5, [r4, #0]
 80056aa:	61a5      	str	r5, [r4, #24]
 80056ac:	2208      	movs	r2, #8
 80056ae:	4629      	mov	r1, r5
 80056b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80056b4:	f7ff fbd2 	bl	8004e5c <memset>
 80056b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80056bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80056c0:	4620      	mov	r0, r4
 80056c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056c4:	3468      	adds	r4, #104	; 0x68
 80056c6:	e7d9      	b.n	800567c <__sfp+0x1c>
 80056c8:	2104      	movs	r1, #4
 80056ca:	4638      	mov	r0, r7
 80056cc:	f7ff ff62 	bl	8005594 <__sfmoreglue>
 80056d0:	4604      	mov	r4, r0
 80056d2:	6030      	str	r0, [r6, #0]
 80056d4:	2800      	cmp	r0, #0
 80056d6:	d1d5      	bne.n	8005684 <__sfp+0x24>
 80056d8:	f7ff ff78 	bl	80055cc <__sfp_lock_release>
 80056dc:	230c      	movs	r3, #12
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	e7ee      	b.n	80056c0 <__sfp+0x60>
 80056e2:	bf00      	nop
 80056e4:	08006ad0 	.word	0x08006ad0
 80056e8:	ffff0001 	.word	0xffff0001

080056ec <_fwalk_reent>:
 80056ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056f0:	4606      	mov	r6, r0
 80056f2:	4688      	mov	r8, r1
 80056f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80056f8:	2700      	movs	r7, #0
 80056fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056fe:	f1b9 0901 	subs.w	r9, r9, #1
 8005702:	d505      	bpl.n	8005710 <_fwalk_reent+0x24>
 8005704:	6824      	ldr	r4, [r4, #0]
 8005706:	2c00      	cmp	r4, #0
 8005708:	d1f7      	bne.n	80056fa <_fwalk_reent+0xe>
 800570a:	4638      	mov	r0, r7
 800570c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005710:	89ab      	ldrh	r3, [r5, #12]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d907      	bls.n	8005726 <_fwalk_reent+0x3a>
 8005716:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800571a:	3301      	adds	r3, #1
 800571c:	d003      	beq.n	8005726 <_fwalk_reent+0x3a>
 800571e:	4629      	mov	r1, r5
 8005720:	4630      	mov	r0, r6
 8005722:	47c0      	blx	r8
 8005724:	4307      	orrs	r7, r0
 8005726:	3568      	adds	r5, #104	; 0x68
 8005728:	e7e9      	b.n	80056fe <_fwalk_reent+0x12>

0800572a <__retarget_lock_init_recursive>:
 800572a:	4770      	bx	lr

0800572c <__retarget_lock_acquire_recursive>:
 800572c:	4770      	bx	lr

0800572e <__retarget_lock_release_recursive>:
 800572e:	4770      	bx	lr

08005730 <_lseek_r>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	4d07      	ldr	r5, [pc, #28]	; (8005750 <_lseek_r+0x20>)
 8005734:	4604      	mov	r4, r0
 8005736:	4608      	mov	r0, r1
 8005738:	4611      	mov	r1, r2
 800573a:	2200      	movs	r2, #0
 800573c:	602a      	str	r2, [r5, #0]
 800573e:	461a      	mov	r2, r3
 8005740:	f7fb fbce 	bl	8000ee0 <_lseek>
 8005744:	1c43      	adds	r3, r0, #1
 8005746:	d102      	bne.n	800574e <_lseek_r+0x1e>
 8005748:	682b      	ldr	r3, [r5, #0]
 800574a:	b103      	cbz	r3, 800574e <_lseek_r+0x1e>
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	bd38      	pop	{r3, r4, r5, pc}
 8005750:	20000698 	.word	0x20000698

08005754 <__swhatbuf_r>:
 8005754:	b570      	push	{r4, r5, r6, lr}
 8005756:	460e      	mov	r6, r1
 8005758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800575c:	2900      	cmp	r1, #0
 800575e:	b096      	sub	sp, #88	; 0x58
 8005760:	4614      	mov	r4, r2
 8005762:	461d      	mov	r5, r3
 8005764:	da08      	bge.n	8005778 <__swhatbuf_r+0x24>
 8005766:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	602a      	str	r2, [r5, #0]
 800576e:	061a      	lsls	r2, r3, #24
 8005770:	d410      	bmi.n	8005794 <__swhatbuf_r+0x40>
 8005772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005776:	e00e      	b.n	8005796 <__swhatbuf_r+0x42>
 8005778:	466a      	mov	r2, sp
 800577a:	f001 f8d7 	bl	800692c <_fstat_r>
 800577e:	2800      	cmp	r0, #0
 8005780:	dbf1      	blt.n	8005766 <__swhatbuf_r+0x12>
 8005782:	9a01      	ldr	r2, [sp, #4]
 8005784:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005788:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800578c:	425a      	negs	r2, r3
 800578e:	415a      	adcs	r2, r3
 8005790:	602a      	str	r2, [r5, #0]
 8005792:	e7ee      	b.n	8005772 <__swhatbuf_r+0x1e>
 8005794:	2340      	movs	r3, #64	; 0x40
 8005796:	2000      	movs	r0, #0
 8005798:	6023      	str	r3, [r4, #0]
 800579a:	b016      	add	sp, #88	; 0x58
 800579c:	bd70      	pop	{r4, r5, r6, pc}
	...

080057a0 <__smakebuf_r>:
 80057a0:	898b      	ldrh	r3, [r1, #12]
 80057a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057a4:	079d      	lsls	r5, r3, #30
 80057a6:	4606      	mov	r6, r0
 80057a8:	460c      	mov	r4, r1
 80057aa:	d507      	bpl.n	80057bc <__smakebuf_r+0x1c>
 80057ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	6123      	str	r3, [r4, #16]
 80057b4:	2301      	movs	r3, #1
 80057b6:	6163      	str	r3, [r4, #20]
 80057b8:	b002      	add	sp, #8
 80057ba:	bd70      	pop	{r4, r5, r6, pc}
 80057bc:	ab01      	add	r3, sp, #4
 80057be:	466a      	mov	r2, sp
 80057c0:	f7ff ffc8 	bl	8005754 <__swhatbuf_r>
 80057c4:	9900      	ldr	r1, [sp, #0]
 80057c6:	4605      	mov	r5, r0
 80057c8:	4630      	mov	r0, r6
 80057ca:	f000 f89d 	bl	8005908 <_malloc_r>
 80057ce:	b948      	cbnz	r0, 80057e4 <__smakebuf_r+0x44>
 80057d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057d4:	059a      	lsls	r2, r3, #22
 80057d6:	d4ef      	bmi.n	80057b8 <__smakebuf_r+0x18>
 80057d8:	f023 0303 	bic.w	r3, r3, #3
 80057dc:	f043 0302 	orr.w	r3, r3, #2
 80057e0:	81a3      	strh	r3, [r4, #12]
 80057e2:	e7e3      	b.n	80057ac <__smakebuf_r+0xc>
 80057e4:	4b0d      	ldr	r3, [pc, #52]	; (800581c <__smakebuf_r+0x7c>)
 80057e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80057e8:	89a3      	ldrh	r3, [r4, #12]
 80057ea:	6020      	str	r0, [r4, #0]
 80057ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f0:	81a3      	strh	r3, [r4, #12]
 80057f2:	9b00      	ldr	r3, [sp, #0]
 80057f4:	6163      	str	r3, [r4, #20]
 80057f6:	9b01      	ldr	r3, [sp, #4]
 80057f8:	6120      	str	r0, [r4, #16]
 80057fa:	b15b      	cbz	r3, 8005814 <__smakebuf_r+0x74>
 80057fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005800:	4630      	mov	r0, r6
 8005802:	f001 f8a5 	bl	8006950 <_isatty_r>
 8005806:	b128      	cbz	r0, 8005814 <__smakebuf_r+0x74>
 8005808:	89a3      	ldrh	r3, [r4, #12]
 800580a:	f023 0303 	bic.w	r3, r3, #3
 800580e:	f043 0301 	orr.w	r3, r3, #1
 8005812:	81a3      	strh	r3, [r4, #12]
 8005814:	89a0      	ldrh	r0, [r4, #12]
 8005816:	4305      	orrs	r5, r0
 8005818:	81a5      	strh	r5, [r4, #12]
 800581a:	e7cd      	b.n	80057b8 <__smakebuf_r+0x18>
 800581c:	08005589 	.word	0x08005589

08005820 <malloc>:
 8005820:	4b02      	ldr	r3, [pc, #8]	; (800582c <malloc+0xc>)
 8005822:	4601      	mov	r1, r0
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	f000 b86f 	b.w	8005908 <_malloc_r>
 800582a:	bf00      	nop
 800582c:	20000050 	.word	0x20000050

08005830 <_free_r>:
 8005830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005832:	2900      	cmp	r1, #0
 8005834:	d044      	beq.n	80058c0 <_free_r+0x90>
 8005836:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800583a:	9001      	str	r0, [sp, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	f1a1 0404 	sub.w	r4, r1, #4
 8005842:	bfb8      	it	lt
 8005844:	18e4      	addlt	r4, r4, r3
 8005846:	f001 f8a1 	bl	800698c <__malloc_lock>
 800584a:	4a1e      	ldr	r2, [pc, #120]	; (80058c4 <_free_r+0x94>)
 800584c:	9801      	ldr	r0, [sp, #4]
 800584e:	6813      	ldr	r3, [r2, #0]
 8005850:	b933      	cbnz	r3, 8005860 <_free_r+0x30>
 8005852:	6063      	str	r3, [r4, #4]
 8005854:	6014      	str	r4, [r2, #0]
 8005856:	b003      	add	sp, #12
 8005858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800585c:	f001 b89c 	b.w	8006998 <__malloc_unlock>
 8005860:	42a3      	cmp	r3, r4
 8005862:	d908      	bls.n	8005876 <_free_r+0x46>
 8005864:	6825      	ldr	r5, [r4, #0]
 8005866:	1961      	adds	r1, r4, r5
 8005868:	428b      	cmp	r3, r1
 800586a:	bf01      	itttt	eq
 800586c:	6819      	ldreq	r1, [r3, #0]
 800586e:	685b      	ldreq	r3, [r3, #4]
 8005870:	1949      	addeq	r1, r1, r5
 8005872:	6021      	streq	r1, [r4, #0]
 8005874:	e7ed      	b.n	8005852 <_free_r+0x22>
 8005876:	461a      	mov	r2, r3
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	b10b      	cbz	r3, 8005880 <_free_r+0x50>
 800587c:	42a3      	cmp	r3, r4
 800587e:	d9fa      	bls.n	8005876 <_free_r+0x46>
 8005880:	6811      	ldr	r1, [r2, #0]
 8005882:	1855      	adds	r5, r2, r1
 8005884:	42a5      	cmp	r5, r4
 8005886:	d10b      	bne.n	80058a0 <_free_r+0x70>
 8005888:	6824      	ldr	r4, [r4, #0]
 800588a:	4421      	add	r1, r4
 800588c:	1854      	adds	r4, r2, r1
 800588e:	42a3      	cmp	r3, r4
 8005890:	6011      	str	r1, [r2, #0]
 8005892:	d1e0      	bne.n	8005856 <_free_r+0x26>
 8005894:	681c      	ldr	r4, [r3, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	6053      	str	r3, [r2, #4]
 800589a:	4421      	add	r1, r4
 800589c:	6011      	str	r1, [r2, #0]
 800589e:	e7da      	b.n	8005856 <_free_r+0x26>
 80058a0:	d902      	bls.n	80058a8 <_free_r+0x78>
 80058a2:	230c      	movs	r3, #12
 80058a4:	6003      	str	r3, [r0, #0]
 80058a6:	e7d6      	b.n	8005856 <_free_r+0x26>
 80058a8:	6825      	ldr	r5, [r4, #0]
 80058aa:	1961      	adds	r1, r4, r5
 80058ac:	428b      	cmp	r3, r1
 80058ae:	bf04      	itt	eq
 80058b0:	6819      	ldreq	r1, [r3, #0]
 80058b2:	685b      	ldreq	r3, [r3, #4]
 80058b4:	6063      	str	r3, [r4, #4]
 80058b6:	bf04      	itt	eq
 80058b8:	1949      	addeq	r1, r1, r5
 80058ba:	6021      	streq	r1, [r4, #0]
 80058bc:	6054      	str	r4, [r2, #4]
 80058be:	e7ca      	b.n	8005856 <_free_r+0x26>
 80058c0:	b003      	add	sp, #12
 80058c2:	bd30      	pop	{r4, r5, pc}
 80058c4:	20000690 	.word	0x20000690

080058c8 <sbrk_aligned>:
 80058c8:	b570      	push	{r4, r5, r6, lr}
 80058ca:	4e0e      	ldr	r6, [pc, #56]	; (8005904 <sbrk_aligned+0x3c>)
 80058cc:	460c      	mov	r4, r1
 80058ce:	6831      	ldr	r1, [r6, #0]
 80058d0:	4605      	mov	r5, r0
 80058d2:	b911      	cbnz	r1, 80058da <sbrk_aligned+0x12>
 80058d4:	f000 feb0 	bl	8006638 <_sbrk_r>
 80058d8:	6030      	str	r0, [r6, #0]
 80058da:	4621      	mov	r1, r4
 80058dc:	4628      	mov	r0, r5
 80058de:	f000 feab 	bl	8006638 <_sbrk_r>
 80058e2:	1c43      	adds	r3, r0, #1
 80058e4:	d00a      	beq.n	80058fc <sbrk_aligned+0x34>
 80058e6:	1cc4      	adds	r4, r0, #3
 80058e8:	f024 0403 	bic.w	r4, r4, #3
 80058ec:	42a0      	cmp	r0, r4
 80058ee:	d007      	beq.n	8005900 <sbrk_aligned+0x38>
 80058f0:	1a21      	subs	r1, r4, r0
 80058f2:	4628      	mov	r0, r5
 80058f4:	f000 fea0 	bl	8006638 <_sbrk_r>
 80058f8:	3001      	adds	r0, #1
 80058fa:	d101      	bne.n	8005900 <sbrk_aligned+0x38>
 80058fc:	f04f 34ff 	mov.w	r4, #4294967295
 8005900:	4620      	mov	r0, r4
 8005902:	bd70      	pop	{r4, r5, r6, pc}
 8005904:	20000694 	.word	0x20000694

08005908 <_malloc_r>:
 8005908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800590c:	1ccd      	adds	r5, r1, #3
 800590e:	f025 0503 	bic.w	r5, r5, #3
 8005912:	3508      	adds	r5, #8
 8005914:	2d0c      	cmp	r5, #12
 8005916:	bf38      	it	cc
 8005918:	250c      	movcc	r5, #12
 800591a:	2d00      	cmp	r5, #0
 800591c:	4607      	mov	r7, r0
 800591e:	db01      	blt.n	8005924 <_malloc_r+0x1c>
 8005920:	42a9      	cmp	r1, r5
 8005922:	d905      	bls.n	8005930 <_malloc_r+0x28>
 8005924:	230c      	movs	r3, #12
 8005926:	603b      	str	r3, [r7, #0]
 8005928:	2600      	movs	r6, #0
 800592a:	4630      	mov	r0, r6
 800592c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005930:	4e2e      	ldr	r6, [pc, #184]	; (80059ec <_malloc_r+0xe4>)
 8005932:	f001 f82b 	bl	800698c <__malloc_lock>
 8005936:	6833      	ldr	r3, [r6, #0]
 8005938:	461c      	mov	r4, r3
 800593a:	bb34      	cbnz	r4, 800598a <_malloc_r+0x82>
 800593c:	4629      	mov	r1, r5
 800593e:	4638      	mov	r0, r7
 8005940:	f7ff ffc2 	bl	80058c8 <sbrk_aligned>
 8005944:	1c43      	adds	r3, r0, #1
 8005946:	4604      	mov	r4, r0
 8005948:	d14d      	bne.n	80059e6 <_malloc_r+0xde>
 800594a:	6834      	ldr	r4, [r6, #0]
 800594c:	4626      	mov	r6, r4
 800594e:	2e00      	cmp	r6, #0
 8005950:	d140      	bne.n	80059d4 <_malloc_r+0xcc>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	4631      	mov	r1, r6
 8005956:	4638      	mov	r0, r7
 8005958:	eb04 0803 	add.w	r8, r4, r3
 800595c:	f000 fe6c 	bl	8006638 <_sbrk_r>
 8005960:	4580      	cmp	r8, r0
 8005962:	d13a      	bne.n	80059da <_malloc_r+0xd2>
 8005964:	6821      	ldr	r1, [r4, #0]
 8005966:	3503      	adds	r5, #3
 8005968:	1a6d      	subs	r5, r5, r1
 800596a:	f025 0503 	bic.w	r5, r5, #3
 800596e:	3508      	adds	r5, #8
 8005970:	2d0c      	cmp	r5, #12
 8005972:	bf38      	it	cc
 8005974:	250c      	movcc	r5, #12
 8005976:	4629      	mov	r1, r5
 8005978:	4638      	mov	r0, r7
 800597a:	f7ff ffa5 	bl	80058c8 <sbrk_aligned>
 800597e:	3001      	adds	r0, #1
 8005980:	d02b      	beq.n	80059da <_malloc_r+0xd2>
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	442b      	add	r3, r5
 8005986:	6023      	str	r3, [r4, #0]
 8005988:	e00e      	b.n	80059a8 <_malloc_r+0xa0>
 800598a:	6822      	ldr	r2, [r4, #0]
 800598c:	1b52      	subs	r2, r2, r5
 800598e:	d41e      	bmi.n	80059ce <_malloc_r+0xc6>
 8005990:	2a0b      	cmp	r2, #11
 8005992:	d916      	bls.n	80059c2 <_malloc_r+0xba>
 8005994:	1961      	adds	r1, r4, r5
 8005996:	42a3      	cmp	r3, r4
 8005998:	6025      	str	r5, [r4, #0]
 800599a:	bf18      	it	ne
 800599c:	6059      	strne	r1, [r3, #4]
 800599e:	6863      	ldr	r3, [r4, #4]
 80059a0:	bf08      	it	eq
 80059a2:	6031      	streq	r1, [r6, #0]
 80059a4:	5162      	str	r2, [r4, r5]
 80059a6:	604b      	str	r3, [r1, #4]
 80059a8:	4638      	mov	r0, r7
 80059aa:	f104 060b 	add.w	r6, r4, #11
 80059ae:	f000 fff3 	bl	8006998 <__malloc_unlock>
 80059b2:	f026 0607 	bic.w	r6, r6, #7
 80059b6:	1d23      	adds	r3, r4, #4
 80059b8:	1af2      	subs	r2, r6, r3
 80059ba:	d0b6      	beq.n	800592a <_malloc_r+0x22>
 80059bc:	1b9b      	subs	r3, r3, r6
 80059be:	50a3      	str	r3, [r4, r2]
 80059c0:	e7b3      	b.n	800592a <_malloc_r+0x22>
 80059c2:	6862      	ldr	r2, [r4, #4]
 80059c4:	42a3      	cmp	r3, r4
 80059c6:	bf0c      	ite	eq
 80059c8:	6032      	streq	r2, [r6, #0]
 80059ca:	605a      	strne	r2, [r3, #4]
 80059cc:	e7ec      	b.n	80059a8 <_malloc_r+0xa0>
 80059ce:	4623      	mov	r3, r4
 80059d0:	6864      	ldr	r4, [r4, #4]
 80059d2:	e7b2      	b.n	800593a <_malloc_r+0x32>
 80059d4:	4634      	mov	r4, r6
 80059d6:	6876      	ldr	r6, [r6, #4]
 80059d8:	e7b9      	b.n	800594e <_malloc_r+0x46>
 80059da:	230c      	movs	r3, #12
 80059dc:	603b      	str	r3, [r7, #0]
 80059de:	4638      	mov	r0, r7
 80059e0:	f000 ffda 	bl	8006998 <__malloc_unlock>
 80059e4:	e7a1      	b.n	800592a <_malloc_r+0x22>
 80059e6:	6025      	str	r5, [r4, #0]
 80059e8:	e7de      	b.n	80059a8 <_malloc_r+0xa0>
 80059ea:	bf00      	nop
 80059ec:	20000690 	.word	0x20000690

080059f0 <_sungetc_r>:
 80059f0:	b538      	push	{r3, r4, r5, lr}
 80059f2:	1c4b      	adds	r3, r1, #1
 80059f4:	4614      	mov	r4, r2
 80059f6:	d103      	bne.n	8005a00 <_sungetc_r+0x10>
 80059f8:	f04f 35ff 	mov.w	r5, #4294967295
 80059fc:	4628      	mov	r0, r5
 80059fe:	bd38      	pop	{r3, r4, r5, pc}
 8005a00:	8993      	ldrh	r3, [r2, #12]
 8005a02:	f023 0320 	bic.w	r3, r3, #32
 8005a06:	8193      	strh	r3, [r2, #12]
 8005a08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a0a:	6852      	ldr	r2, [r2, #4]
 8005a0c:	b2cd      	uxtb	r5, r1
 8005a0e:	b18b      	cbz	r3, 8005a34 <_sungetc_r+0x44>
 8005a10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a12:	4293      	cmp	r3, r2
 8005a14:	dd08      	ble.n	8005a28 <_sungetc_r+0x38>
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	1e5a      	subs	r2, r3, #1
 8005a1a:	6022      	str	r2, [r4, #0]
 8005a1c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005a20:	6863      	ldr	r3, [r4, #4]
 8005a22:	3301      	adds	r3, #1
 8005a24:	6063      	str	r3, [r4, #4]
 8005a26:	e7e9      	b.n	80059fc <_sungetc_r+0xc>
 8005a28:	4621      	mov	r1, r4
 8005a2a:	f000 ff45 	bl	80068b8 <__submore>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d0f1      	beq.n	8005a16 <_sungetc_r+0x26>
 8005a32:	e7e1      	b.n	80059f8 <_sungetc_r+0x8>
 8005a34:	6921      	ldr	r1, [r4, #16]
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	b151      	cbz	r1, 8005a50 <_sungetc_r+0x60>
 8005a3a:	4299      	cmp	r1, r3
 8005a3c:	d208      	bcs.n	8005a50 <_sungetc_r+0x60>
 8005a3e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005a42:	42a9      	cmp	r1, r5
 8005a44:	d104      	bne.n	8005a50 <_sungetc_r+0x60>
 8005a46:	3b01      	subs	r3, #1
 8005a48:	3201      	adds	r2, #1
 8005a4a:	6023      	str	r3, [r4, #0]
 8005a4c:	6062      	str	r2, [r4, #4]
 8005a4e:	e7d5      	b.n	80059fc <_sungetc_r+0xc>
 8005a50:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005a54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a58:	6363      	str	r3, [r4, #52]	; 0x34
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	63a3      	str	r3, [r4, #56]	; 0x38
 8005a5e:	4623      	mov	r3, r4
 8005a60:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	2301      	movs	r3, #1
 8005a68:	e7dc      	b.n	8005a24 <_sungetc_r+0x34>

08005a6a <__ssrefill_r>:
 8005a6a:	b510      	push	{r4, lr}
 8005a6c:	460c      	mov	r4, r1
 8005a6e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005a70:	b169      	cbz	r1, 8005a8e <__ssrefill_r+0x24>
 8005a72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a76:	4299      	cmp	r1, r3
 8005a78:	d001      	beq.n	8005a7e <__ssrefill_r+0x14>
 8005a7a:	f7ff fed9 	bl	8005830 <_free_r>
 8005a7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a80:	6063      	str	r3, [r4, #4]
 8005a82:	2000      	movs	r0, #0
 8005a84:	6360      	str	r0, [r4, #52]	; 0x34
 8005a86:	b113      	cbz	r3, 8005a8e <__ssrefill_r+0x24>
 8005a88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a8a:	6023      	str	r3, [r4, #0]
 8005a8c:	bd10      	pop	{r4, pc}
 8005a8e:	6923      	ldr	r3, [r4, #16]
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	2300      	movs	r3, #0
 8005a94:	6063      	str	r3, [r4, #4]
 8005a96:	89a3      	ldrh	r3, [r4, #12]
 8005a98:	f043 0320 	orr.w	r3, r3, #32
 8005a9c:	81a3      	strh	r3, [r4, #12]
 8005a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa2:	e7f3      	b.n	8005a8c <__ssrefill_r+0x22>

08005aa4 <__ssvfiscanf_r>:
 8005aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa8:	460c      	mov	r4, r1
 8005aaa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005aae:	2100      	movs	r1, #0
 8005ab0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005ab4:	49a6      	ldr	r1, [pc, #664]	; (8005d50 <__ssvfiscanf_r+0x2ac>)
 8005ab6:	91a0      	str	r1, [sp, #640]	; 0x280
 8005ab8:	f10d 0804 	add.w	r8, sp, #4
 8005abc:	49a5      	ldr	r1, [pc, #660]	; (8005d54 <__ssvfiscanf_r+0x2b0>)
 8005abe:	4fa6      	ldr	r7, [pc, #664]	; (8005d58 <__ssvfiscanf_r+0x2b4>)
 8005ac0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005d5c <__ssvfiscanf_r+0x2b8>
 8005ac4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005ac8:	4606      	mov	r6, r0
 8005aca:	91a1      	str	r1, [sp, #644]	; 0x284
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	7813      	ldrb	r3, [r2, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 815a 	beq.w	8005d8a <__ssvfiscanf_r+0x2e6>
 8005ad6:	5dd9      	ldrb	r1, [r3, r7]
 8005ad8:	f011 0108 	ands.w	r1, r1, #8
 8005adc:	f102 0501 	add.w	r5, r2, #1
 8005ae0:	d019      	beq.n	8005b16 <__ssvfiscanf_r+0x72>
 8005ae2:	6863      	ldr	r3, [r4, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	dd0f      	ble.n	8005b08 <__ssvfiscanf_r+0x64>
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	781a      	ldrb	r2, [r3, #0]
 8005aec:	5cba      	ldrb	r2, [r7, r2]
 8005aee:	0712      	lsls	r2, r2, #28
 8005af0:	d401      	bmi.n	8005af6 <__ssvfiscanf_r+0x52>
 8005af2:	462a      	mov	r2, r5
 8005af4:	e7eb      	b.n	8005ace <__ssvfiscanf_r+0x2a>
 8005af6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005af8:	3201      	adds	r2, #1
 8005afa:	9245      	str	r2, [sp, #276]	; 0x114
 8005afc:	6862      	ldr	r2, [r4, #4]
 8005afe:	3301      	adds	r3, #1
 8005b00:	3a01      	subs	r2, #1
 8005b02:	6062      	str	r2, [r4, #4]
 8005b04:	6023      	str	r3, [r4, #0]
 8005b06:	e7ec      	b.n	8005ae2 <__ssvfiscanf_r+0x3e>
 8005b08:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005b0a:	4621      	mov	r1, r4
 8005b0c:	4630      	mov	r0, r6
 8005b0e:	4798      	blx	r3
 8005b10:	2800      	cmp	r0, #0
 8005b12:	d0e9      	beq.n	8005ae8 <__ssvfiscanf_r+0x44>
 8005b14:	e7ed      	b.n	8005af2 <__ssvfiscanf_r+0x4e>
 8005b16:	2b25      	cmp	r3, #37	; 0x25
 8005b18:	d012      	beq.n	8005b40 <__ssvfiscanf_r+0x9c>
 8005b1a:	469a      	mov	sl, r3
 8005b1c:	6863      	ldr	r3, [r4, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f340 8091 	ble.w	8005c46 <__ssvfiscanf_r+0x1a2>
 8005b24:	6822      	ldr	r2, [r4, #0]
 8005b26:	7813      	ldrb	r3, [r2, #0]
 8005b28:	4553      	cmp	r3, sl
 8005b2a:	f040 812e 	bne.w	8005d8a <__ssvfiscanf_r+0x2e6>
 8005b2e:	6863      	ldr	r3, [r4, #4]
 8005b30:	3b01      	subs	r3, #1
 8005b32:	6063      	str	r3, [r4, #4]
 8005b34:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005b36:	3201      	adds	r2, #1
 8005b38:	3301      	adds	r3, #1
 8005b3a:	6022      	str	r2, [r4, #0]
 8005b3c:	9345      	str	r3, [sp, #276]	; 0x114
 8005b3e:	e7d8      	b.n	8005af2 <__ssvfiscanf_r+0x4e>
 8005b40:	9141      	str	r1, [sp, #260]	; 0x104
 8005b42:	9143      	str	r1, [sp, #268]	; 0x10c
 8005b44:	7853      	ldrb	r3, [r2, #1]
 8005b46:	2b2a      	cmp	r3, #42	; 0x2a
 8005b48:	bf02      	ittt	eq
 8005b4a:	2310      	moveq	r3, #16
 8005b4c:	1c95      	addeq	r5, r2, #2
 8005b4e:	9341      	streq	r3, [sp, #260]	; 0x104
 8005b50:	220a      	movs	r2, #10
 8005b52:	46aa      	mov	sl, r5
 8005b54:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005b58:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005b5c:	2b09      	cmp	r3, #9
 8005b5e:	d91d      	bls.n	8005b9c <__ssvfiscanf_r+0xf8>
 8005b60:	487e      	ldr	r0, [pc, #504]	; (8005d5c <__ssvfiscanf_r+0x2b8>)
 8005b62:	2203      	movs	r2, #3
 8005b64:	f7fa fb4c 	bl	8000200 <memchr>
 8005b68:	b140      	cbz	r0, 8005b7c <__ssvfiscanf_r+0xd8>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	eba0 0009 	sub.w	r0, r0, r9
 8005b70:	fa03 f000 	lsl.w	r0, r3, r0
 8005b74:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005b76:	4318      	orrs	r0, r3
 8005b78:	9041      	str	r0, [sp, #260]	; 0x104
 8005b7a:	4655      	mov	r5, sl
 8005b7c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005b80:	2b78      	cmp	r3, #120	; 0x78
 8005b82:	d806      	bhi.n	8005b92 <__ssvfiscanf_r+0xee>
 8005b84:	2b57      	cmp	r3, #87	; 0x57
 8005b86:	d810      	bhi.n	8005baa <__ssvfiscanf_r+0x106>
 8005b88:	2b25      	cmp	r3, #37	; 0x25
 8005b8a:	d0c6      	beq.n	8005b1a <__ssvfiscanf_r+0x76>
 8005b8c:	d856      	bhi.n	8005c3c <__ssvfiscanf_r+0x198>
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d064      	beq.n	8005c5c <__ssvfiscanf_r+0x1b8>
 8005b92:	2303      	movs	r3, #3
 8005b94:	9347      	str	r3, [sp, #284]	; 0x11c
 8005b96:	230a      	movs	r3, #10
 8005b98:	9342      	str	r3, [sp, #264]	; 0x108
 8005b9a:	e071      	b.n	8005c80 <__ssvfiscanf_r+0x1dc>
 8005b9c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005b9e:	fb02 1103 	mla	r1, r2, r3, r1
 8005ba2:	3930      	subs	r1, #48	; 0x30
 8005ba4:	9143      	str	r1, [sp, #268]	; 0x10c
 8005ba6:	4655      	mov	r5, sl
 8005ba8:	e7d3      	b.n	8005b52 <__ssvfiscanf_r+0xae>
 8005baa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005bae:	2a20      	cmp	r2, #32
 8005bb0:	d8ef      	bhi.n	8005b92 <__ssvfiscanf_r+0xee>
 8005bb2:	a101      	add	r1, pc, #4	; (adr r1, 8005bb8 <__ssvfiscanf_r+0x114>)
 8005bb4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005bb8:	08005c6b 	.word	0x08005c6b
 8005bbc:	08005b93 	.word	0x08005b93
 8005bc0:	08005b93 	.word	0x08005b93
 8005bc4:	08005cc9 	.word	0x08005cc9
 8005bc8:	08005b93 	.word	0x08005b93
 8005bcc:	08005b93 	.word	0x08005b93
 8005bd0:	08005b93 	.word	0x08005b93
 8005bd4:	08005b93 	.word	0x08005b93
 8005bd8:	08005b93 	.word	0x08005b93
 8005bdc:	08005b93 	.word	0x08005b93
 8005be0:	08005b93 	.word	0x08005b93
 8005be4:	08005cdf 	.word	0x08005cdf
 8005be8:	08005cb5 	.word	0x08005cb5
 8005bec:	08005c43 	.word	0x08005c43
 8005bf0:	08005c43 	.word	0x08005c43
 8005bf4:	08005c43 	.word	0x08005c43
 8005bf8:	08005b93 	.word	0x08005b93
 8005bfc:	08005cb9 	.word	0x08005cb9
 8005c00:	08005b93 	.word	0x08005b93
 8005c04:	08005b93 	.word	0x08005b93
 8005c08:	08005b93 	.word	0x08005b93
 8005c0c:	08005b93 	.word	0x08005b93
 8005c10:	08005cef 	.word	0x08005cef
 8005c14:	08005cc1 	.word	0x08005cc1
 8005c18:	08005c63 	.word	0x08005c63
 8005c1c:	08005b93 	.word	0x08005b93
 8005c20:	08005b93 	.word	0x08005b93
 8005c24:	08005ceb 	.word	0x08005ceb
 8005c28:	08005b93 	.word	0x08005b93
 8005c2c:	08005cb5 	.word	0x08005cb5
 8005c30:	08005b93 	.word	0x08005b93
 8005c34:	08005b93 	.word	0x08005b93
 8005c38:	08005c6b 	.word	0x08005c6b
 8005c3c:	3b45      	subs	r3, #69	; 0x45
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d8a7      	bhi.n	8005b92 <__ssvfiscanf_r+0xee>
 8005c42:	2305      	movs	r3, #5
 8005c44:	e01b      	b.n	8005c7e <__ssvfiscanf_r+0x1da>
 8005c46:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005c48:	4621      	mov	r1, r4
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	4798      	blx	r3
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	f43f af68 	beq.w	8005b24 <__ssvfiscanf_r+0x80>
 8005c54:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005c56:	2800      	cmp	r0, #0
 8005c58:	f040 808d 	bne.w	8005d76 <__ssvfiscanf_r+0x2d2>
 8005c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c60:	e08f      	b.n	8005d82 <__ssvfiscanf_r+0x2de>
 8005c62:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005c64:	f042 0220 	orr.w	r2, r2, #32
 8005c68:	9241      	str	r2, [sp, #260]	; 0x104
 8005c6a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c70:	9241      	str	r2, [sp, #260]	; 0x104
 8005c72:	2210      	movs	r2, #16
 8005c74:	2b6f      	cmp	r3, #111	; 0x6f
 8005c76:	9242      	str	r2, [sp, #264]	; 0x108
 8005c78:	bf34      	ite	cc
 8005c7a:	2303      	movcc	r3, #3
 8005c7c:	2304      	movcs	r3, #4
 8005c7e:	9347      	str	r3, [sp, #284]	; 0x11c
 8005c80:	6863      	ldr	r3, [r4, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	dd42      	ble.n	8005d0c <__ssvfiscanf_r+0x268>
 8005c86:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005c88:	0659      	lsls	r1, r3, #25
 8005c8a:	d404      	bmi.n	8005c96 <__ssvfiscanf_r+0x1f2>
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	781a      	ldrb	r2, [r3, #0]
 8005c90:	5cba      	ldrb	r2, [r7, r2]
 8005c92:	0712      	lsls	r2, r2, #28
 8005c94:	d441      	bmi.n	8005d1a <__ssvfiscanf_r+0x276>
 8005c96:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	dc50      	bgt.n	8005d3e <__ssvfiscanf_r+0x29a>
 8005c9c:	466b      	mov	r3, sp
 8005c9e:	4622      	mov	r2, r4
 8005ca0:	a941      	add	r1, sp, #260	; 0x104
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	f000 fb64 	bl	8006370 <_scanf_chars>
 8005ca8:	2801      	cmp	r0, #1
 8005caa:	d06e      	beq.n	8005d8a <__ssvfiscanf_r+0x2e6>
 8005cac:	2802      	cmp	r0, #2
 8005cae:	f47f af20 	bne.w	8005af2 <__ssvfiscanf_r+0x4e>
 8005cb2:	e7cf      	b.n	8005c54 <__ssvfiscanf_r+0x1b0>
 8005cb4:	220a      	movs	r2, #10
 8005cb6:	e7dd      	b.n	8005c74 <__ssvfiscanf_r+0x1d0>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	9342      	str	r3, [sp, #264]	; 0x108
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e7de      	b.n	8005c7e <__ssvfiscanf_r+0x1da>
 8005cc0:	2308      	movs	r3, #8
 8005cc2:	9342      	str	r3, [sp, #264]	; 0x108
 8005cc4:	2304      	movs	r3, #4
 8005cc6:	e7da      	b.n	8005c7e <__ssvfiscanf_r+0x1da>
 8005cc8:	4629      	mov	r1, r5
 8005cca:	4640      	mov	r0, r8
 8005ccc:	f000 fcc4 	bl	8006658 <__sccl>
 8005cd0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cd6:	9341      	str	r3, [sp, #260]	; 0x104
 8005cd8:	4605      	mov	r5, r0
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e7cf      	b.n	8005c7e <__ssvfiscanf_r+0x1da>
 8005cde:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ce4:	9341      	str	r3, [sp, #260]	; 0x104
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	e7c9      	b.n	8005c7e <__ssvfiscanf_r+0x1da>
 8005cea:	2302      	movs	r3, #2
 8005cec:	e7c7      	b.n	8005c7e <__ssvfiscanf_r+0x1da>
 8005cee:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005cf0:	06c3      	lsls	r3, r0, #27
 8005cf2:	f53f aefe 	bmi.w	8005af2 <__ssvfiscanf_r+0x4e>
 8005cf6:	9b00      	ldr	r3, [sp, #0]
 8005cf8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005cfa:	1d19      	adds	r1, r3, #4
 8005cfc:	9100      	str	r1, [sp, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f010 0f01 	tst.w	r0, #1
 8005d04:	bf14      	ite	ne
 8005d06:	801a      	strhne	r2, [r3, #0]
 8005d08:	601a      	streq	r2, [r3, #0]
 8005d0a:	e6f2      	b.n	8005af2 <__ssvfiscanf_r+0x4e>
 8005d0c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005d0e:	4621      	mov	r1, r4
 8005d10:	4630      	mov	r0, r6
 8005d12:	4798      	blx	r3
 8005d14:	2800      	cmp	r0, #0
 8005d16:	d0b6      	beq.n	8005c86 <__ssvfiscanf_r+0x1e2>
 8005d18:	e79c      	b.n	8005c54 <__ssvfiscanf_r+0x1b0>
 8005d1a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005d1c:	3201      	adds	r2, #1
 8005d1e:	9245      	str	r2, [sp, #276]	; 0x114
 8005d20:	6862      	ldr	r2, [r4, #4]
 8005d22:	3a01      	subs	r2, #1
 8005d24:	2a00      	cmp	r2, #0
 8005d26:	6062      	str	r2, [r4, #4]
 8005d28:	dd02      	ble.n	8005d30 <__ssvfiscanf_r+0x28c>
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	6023      	str	r3, [r4, #0]
 8005d2e:	e7ad      	b.n	8005c8c <__ssvfiscanf_r+0x1e8>
 8005d30:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005d32:	4621      	mov	r1, r4
 8005d34:	4630      	mov	r0, r6
 8005d36:	4798      	blx	r3
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	d0a7      	beq.n	8005c8c <__ssvfiscanf_r+0x1e8>
 8005d3c:	e78a      	b.n	8005c54 <__ssvfiscanf_r+0x1b0>
 8005d3e:	2b04      	cmp	r3, #4
 8005d40:	dc0e      	bgt.n	8005d60 <__ssvfiscanf_r+0x2bc>
 8005d42:	466b      	mov	r3, sp
 8005d44:	4622      	mov	r2, r4
 8005d46:	a941      	add	r1, sp, #260	; 0x104
 8005d48:	4630      	mov	r0, r6
 8005d4a:	f000 fb6b 	bl	8006424 <_scanf_i>
 8005d4e:	e7ab      	b.n	8005ca8 <__ssvfiscanf_r+0x204>
 8005d50:	080059f1 	.word	0x080059f1
 8005d54:	08005a6b 	.word	0x08005a6b
 8005d58:	08006b83 	.word	0x08006b83
 8005d5c:	08006b34 	.word	0x08006b34
 8005d60:	4b0b      	ldr	r3, [pc, #44]	; (8005d90 <__ssvfiscanf_r+0x2ec>)
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f43f aec5 	beq.w	8005af2 <__ssvfiscanf_r+0x4e>
 8005d68:	466b      	mov	r3, sp
 8005d6a:	4622      	mov	r2, r4
 8005d6c:	a941      	add	r1, sp, #260	; 0x104
 8005d6e:	4630      	mov	r0, r6
 8005d70:	f3af 8000 	nop.w
 8005d74:	e798      	b.n	8005ca8 <__ssvfiscanf_r+0x204>
 8005d76:	89a3      	ldrh	r3, [r4, #12]
 8005d78:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005d7c:	bf18      	it	ne
 8005d7e:	f04f 30ff 	movne.w	r0, #4294967295
 8005d82:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8005d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d8a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005d8c:	e7f9      	b.n	8005d82 <__ssvfiscanf_r+0x2de>
 8005d8e:	bf00      	nop
 8005d90:	00000000 	.word	0x00000000

08005d94 <__sfputc_r>:
 8005d94:	6893      	ldr	r3, [r2, #8]
 8005d96:	3b01      	subs	r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	b410      	push	{r4}
 8005d9c:	6093      	str	r3, [r2, #8]
 8005d9e:	da08      	bge.n	8005db2 <__sfputc_r+0x1e>
 8005da0:	6994      	ldr	r4, [r2, #24]
 8005da2:	42a3      	cmp	r3, r4
 8005da4:	db01      	blt.n	8005daa <__sfputc_r+0x16>
 8005da6:	290a      	cmp	r1, #10
 8005da8:	d103      	bne.n	8005db2 <__sfputc_r+0x1e>
 8005daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dae:	f7ff ba23 	b.w	80051f8 <__swbuf_r>
 8005db2:	6813      	ldr	r3, [r2, #0]
 8005db4:	1c58      	adds	r0, r3, #1
 8005db6:	6010      	str	r0, [r2, #0]
 8005db8:	7019      	strb	r1, [r3, #0]
 8005dba:	4608      	mov	r0, r1
 8005dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <__sfputs_r>:
 8005dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc4:	4606      	mov	r6, r0
 8005dc6:	460f      	mov	r7, r1
 8005dc8:	4614      	mov	r4, r2
 8005dca:	18d5      	adds	r5, r2, r3
 8005dcc:	42ac      	cmp	r4, r5
 8005dce:	d101      	bne.n	8005dd4 <__sfputs_r+0x12>
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	e007      	b.n	8005de4 <__sfputs_r+0x22>
 8005dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dd8:	463a      	mov	r2, r7
 8005dda:	4630      	mov	r0, r6
 8005ddc:	f7ff ffda 	bl	8005d94 <__sfputc_r>
 8005de0:	1c43      	adds	r3, r0, #1
 8005de2:	d1f3      	bne.n	8005dcc <__sfputs_r+0xa>
 8005de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005de8 <_vfiprintf_r>:
 8005de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dec:	460d      	mov	r5, r1
 8005dee:	b09d      	sub	sp, #116	; 0x74
 8005df0:	4614      	mov	r4, r2
 8005df2:	4698      	mov	r8, r3
 8005df4:	4606      	mov	r6, r0
 8005df6:	b118      	cbz	r0, 8005e00 <_vfiprintf_r+0x18>
 8005df8:	6983      	ldr	r3, [r0, #24]
 8005dfa:	b90b      	cbnz	r3, 8005e00 <_vfiprintf_r+0x18>
 8005dfc:	f7ff fbf8 	bl	80055f0 <__sinit>
 8005e00:	4b89      	ldr	r3, [pc, #548]	; (8006028 <_vfiprintf_r+0x240>)
 8005e02:	429d      	cmp	r5, r3
 8005e04:	d11b      	bne.n	8005e3e <_vfiprintf_r+0x56>
 8005e06:	6875      	ldr	r5, [r6, #4]
 8005e08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e0a:	07d9      	lsls	r1, r3, #31
 8005e0c:	d405      	bmi.n	8005e1a <_vfiprintf_r+0x32>
 8005e0e:	89ab      	ldrh	r3, [r5, #12]
 8005e10:	059a      	lsls	r2, r3, #22
 8005e12:	d402      	bmi.n	8005e1a <_vfiprintf_r+0x32>
 8005e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e16:	f7ff fc89 	bl	800572c <__retarget_lock_acquire_recursive>
 8005e1a:	89ab      	ldrh	r3, [r5, #12]
 8005e1c:	071b      	lsls	r3, r3, #28
 8005e1e:	d501      	bpl.n	8005e24 <_vfiprintf_r+0x3c>
 8005e20:	692b      	ldr	r3, [r5, #16]
 8005e22:	b9eb      	cbnz	r3, 8005e60 <_vfiprintf_r+0x78>
 8005e24:	4629      	mov	r1, r5
 8005e26:	4630      	mov	r0, r6
 8005e28:	f7ff fa4a 	bl	80052c0 <__swsetup_r>
 8005e2c:	b1c0      	cbz	r0, 8005e60 <_vfiprintf_r+0x78>
 8005e2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e30:	07dc      	lsls	r4, r3, #31
 8005e32:	d50e      	bpl.n	8005e52 <_vfiprintf_r+0x6a>
 8005e34:	f04f 30ff 	mov.w	r0, #4294967295
 8005e38:	b01d      	add	sp, #116	; 0x74
 8005e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e3e:	4b7b      	ldr	r3, [pc, #492]	; (800602c <_vfiprintf_r+0x244>)
 8005e40:	429d      	cmp	r5, r3
 8005e42:	d101      	bne.n	8005e48 <_vfiprintf_r+0x60>
 8005e44:	68b5      	ldr	r5, [r6, #8]
 8005e46:	e7df      	b.n	8005e08 <_vfiprintf_r+0x20>
 8005e48:	4b79      	ldr	r3, [pc, #484]	; (8006030 <_vfiprintf_r+0x248>)
 8005e4a:	429d      	cmp	r5, r3
 8005e4c:	bf08      	it	eq
 8005e4e:	68f5      	ldreq	r5, [r6, #12]
 8005e50:	e7da      	b.n	8005e08 <_vfiprintf_r+0x20>
 8005e52:	89ab      	ldrh	r3, [r5, #12]
 8005e54:	0598      	lsls	r0, r3, #22
 8005e56:	d4ed      	bmi.n	8005e34 <_vfiprintf_r+0x4c>
 8005e58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e5a:	f7ff fc68 	bl	800572e <__retarget_lock_release_recursive>
 8005e5e:	e7e9      	b.n	8005e34 <_vfiprintf_r+0x4c>
 8005e60:	2300      	movs	r3, #0
 8005e62:	9309      	str	r3, [sp, #36]	; 0x24
 8005e64:	2320      	movs	r3, #32
 8005e66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e6e:	2330      	movs	r3, #48	; 0x30
 8005e70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006034 <_vfiprintf_r+0x24c>
 8005e74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e78:	f04f 0901 	mov.w	r9, #1
 8005e7c:	4623      	mov	r3, r4
 8005e7e:	469a      	mov	sl, r3
 8005e80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e84:	b10a      	cbz	r2, 8005e8a <_vfiprintf_r+0xa2>
 8005e86:	2a25      	cmp	r2, #37	; 0x25
 8005e88:	d1f9      	bne.n	8005e7e <_vfiprintf_r+0x96>
 8005e8a:	ebba 0b04 	subs.w	fp, sl, r4
 8005e8e:	d00b      	beq.n	8005ea8 <_vfiprintf_r+0xc0>
 8005e90:	465b      	mov	r3, fp
 8005e92:	4622      	mov	r2, r4
 8005e94:	4629      	mov	r1, r5
 8005e96:	4630      	mov	r0, r6
 8005e98:	f7ff ff93 	bl	8005dc2 <__sfputs_r>
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	f000 80aa 	beq.w	8005ff6 <_vfiprintf_r+0x20e>
 8005ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ea4:	445a      	add	r2, fp
 8005ea6:	9209      	str	r2, [sp, #36]	; 0x24
 8005ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 80a2 	beq.w	8005ff6 <_vfiprintf_r+0x20e>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ebc:	f10a 0a01 	add.w	sl, sl, #1
 8005ec0:	9304      	str	r3, [sp, #16]
 8005ec2:	9307      	str	r3, [sp, #28]
 8005ec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ec8:	931a      	str	r3, [sp, #104]	; 0x68
 8005eca:	4654      	mov	r4, sl
 8005ecc:	2205      	movs	r2, #5
 8005ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ed2:	4858      	ldr	r0, [pc, #352]	; (8006034 <_vfiprintf_r+0x24c>)
 8005ed4:	f7fa f994 	bl	8000200 <memchr>
 8005ed8:	9a04      	ldr	r2, [sp, #16]
 8005eda:	b9d8      	cbnz	r0, 8005f14 <_vfiprintf_r+0x12c>
 8005edc:	06d1      	lsls	r1, r2, #27
 8005ede:	bf44      	itt	mi
 8005ee0:	2320      	movmi	r3, #32
 8005ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ee6:	0713      	lsls	r3, r2, #28
 8005ee8:	bf44      	itt	mi
 8005eea:	232b      	movmi	r3, #43	; 0x2b
 8005eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8005ef6:	d015      	beq.n	8005f24 <_vfiprintf_r+0x13c>
 8005ef8:	9a07      	ldr	r2, [sp, #28]
 8005efa:	4654      	mov	r4, sl
 8005efc:	2000      	movs	r0, #0
 8005efe:	f04f 0c0a 	mov.w	ip, #10
 8005f02:	4621      	mov	r1, r4
 8005f04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f08:	3b30      	subs	r3, #48	; 0x30
 8005f0a:	2b09      	cmp	r3, #9
 8005f0c:	d94e      	bls.n	8005fac <_vfiprintf_r+0x1c4>
 8005f0e:	b1b0      	cbz	r0, 8005f3e <_vfiprintf_r+0x156>
 8005f10:	9207      	str	r2, [sp, #28]
 8005f12:	e014      	b.n	8005f3e <_vfiprintf_r+0x156>
 8005f14:	eba0 0308 	sub.w	r3, r0, r8
 8005f18:	fa09 f303 	lsl.w	r3, r9, r3
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	9304      	str	r3, [sp, #16]
 8005f20:	46a2      	mov	sl, r4
 8005f22:	e7d2      	b.n	8005eca <_vfiprintf_r+0xe2>
 8005f24:	9b03      	ldr	r3, [sp, #12]
 8005f26:	1d19      	adds	r1, r3, #4
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	9103      	str	r1, [sp, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	bfbb      	ittet	lt
 8005f30:	425b      	neglt	r3, r3
 8005f32:	f042 0202 	orrlt.w	r2, r2, #2
 8005f36:	9307      	strge	r3, [sp, #28]
 8005f38:	9307      	strlt	r3, [sp, #28]
 8005f3a:	bfb8      	it	lt
 8005f3c:	9204      	strlt	r2, [sp, #16]
 8005f3e:	7823      	ldrb	r3, [r4, #0]
 8005f40:	2b2e      	cmp	r3, #46	; 0x2e
 8005f42:	d10c      	bne.n	8005f5e <_vfiprintf_r+0x176>
 8005f44:	7863      	ldrb	r3, [r4, #1]
 8005f46:	2b2a      	cmp	r3, #42	; 0x2a
 8005f48:	d135      	bne.n	8005fb6 <_vfiprintf_r+0x1ce>
 8005f4a:	9b03      	ldr	r3, [sp, #12]
 8005f4c:	1d1a      	adds	r2, r3, #4
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	9203      	str	r2, [sp, #12]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	bfb8      	it	lt
 8005f56:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f5a:	3402      	adds	r4, #2
 8005f5c:	9305      	str	r3, [sp, #20]
 8005f5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006044 <_vfiprintf_r+0x25c>
 8005f62:	7821      	ldrb	r1, [r4, #0]
 8005f64:	2203      	movs	r2, #3
 8005f66:	4650      	mov	r0, sl
 8005f68:	f7fa f94a 	bl	8000200 <memchr>
 8005f6c:	b140      	cbz	r0, 8005f80 <_vfiprintf_r+0x198>
 8005f6e:	2340      	movs	r3, #64	; 0x40
 8005f70:	eba0 000a 	sub.w	r0, r0, sl
 8005f74:	fa03 f000 	lsl.w	r0, r3, r0
 8005f78:	9b04      	ldr	r3, [sp, #16]
 8005f7a:	4303      	orrs	r3, r0
 8005f7c:	3401      	adds	r4, #1
 8005f7e:	9304      	str	r3, [sp, #16]
 8005f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f84:	482c      	ldr	r0, [pc, #176]	; (8006038 <_vfiprintf_r+0x250>)
 8005f86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f8a:	2206      	movs	r2, #6
 8005f8c:	f7fa f938 	bl	8000200 <memchr>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d03f      	beq.n	8006014 <_vfiprintf_r+0x22c>
 8005f94:	4b29      	ldr	r3, [pc, #164]	; (800603c <_vfiprintf_r+0x254>)
 8005f96:	bb1b      	cbnz	r3, 8005fe0 <_vfiprintf_r+0x1f8>
 8005f98:	9b03      	ldr	r3, [sp, #12]
 8005f9a:	3307      	adds	r3, #7
 8005f9c:	f023 0307 	bic.w	r3, r3, #7
 8005fa0:	3308      	adds	r3, #8
 8005fa2:	9303      	str	r3, [sp, #12]
 8005fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa6:	443b      	add	r3, r7
 8005fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8005faa:	e767      	b.n	8005e7c <_vfiprintf_r+0x94>
 8005fac:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	2001      	movs	r0, #1
 8005fb4:	e7a5      	b.n	8005f02 <_vfiprintf_r+0x11a>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	3401      	adds	r4, #1
 8005fba:	9305      	str	r3, [sp, #20]
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	f04f 0c0a 	mov.w	ip, #10
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fc8:	3a30      	subs	r2, #48	; 0x30
 8005fca:	2a09      	cmp	r2, #9
 8005fcc:	d903      	bls.n	8005fd6 <_vfiprintf_r+0x1ee>
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0c5      	beq.n	8005f5e <_vfiprintf_r+0x176>
 8005fd2:	9105      	str	r1, [sp, #20]
 8005fd4:	e7c3      	b.n	8005f5e <_vfiprintf_r+0x176>
 8005fd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fda:	4604      	mov	r4, r0
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e7f0      	b.n	8005fc2 <_vfiprintf_r+0x1da>
 8005fe0:	ab03      	add	r3, sp, #12
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	462a      	mov	r2, r5
 8005fe6:	4b16      	ldr	r3, [pc, #88]	; (8006040 <_vfiprintf_r+0x258>)
 8005fe8:	a904      	add	r1, sp, #16
 8005fea:	4630      	mov	r0, r6
 8005fec:	f3af 8000 	nop.w
 8005ff0:	4607      	mov	r7, r0
 8005ff2:	1c78      	adds	r0, r7, #1
 8005ff4:	d1d6      	bne.n	8005fa4 <_vfiprintf_r+0x1bc>
 8005ff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ff8:	07d9      	lsls	r1, r3, #31
 8005ffa:	d405      	bmi.n	8006008 <_vfiprintf_r+0x220>
 8005ffc:	89ab      	ldrh	r3, [r5, #12]
 8005ffe:	059a      	lsls	r2, r3, #22
 8006000:	d402      	bmi.n	8006008 <_vfiprintf_r+0x220>
 8006002:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006004:	f7ff fb93 	bl	800572e <__retarget_lock_release_recursive>
 8006008:	89ab      	ldrh	r3, [r5, #12]
 800600a:	065b      	lsls	r3, r3, #25
 800600c:	f53f af12 	bmi.w	8005e34 <_vfiprintf_r+0x4c>
 8006010:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006012:	e711      	b.n	8005e38 <_vfiprintf_r+0x50>
 8006014:	ab03      	add	r3, sp, #12
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	462a      	mov	r2, r5
 800601a:	4b09      	ldr	r3, [pc, #36]	; (8006040 <_vfiprintf_r+0x258>)
 800601c:	a904      	add	r1, sp, #16
 800601e:	4630      	mov	r0, r6
 8006020:	f000 f880 	bl	8006124 <_printf_i>
 8006024:	e7e4      	b.n	8005ff0 <_vfiprintf_r+0x208>
 8006026:	bf00      	nop
 8006028:	08006af4 	.word	0x08006af4
 800602c:	08006b14 	.word	0x08006b14
 8006030:	08006ad4 	.word	0x08006ad4
 8006034:	08006b38 	.word	0x08006b38
 8006038:	08006b3e 	.word	0x08006b3e
 800603c:	00000000 	.word	0x00000000
 8006040:	08005dc3 	.word	0x08005dc3
 8006044:	08006b34 	.word	0x08006b34

08006048 <_printf_common>:
 8006048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800604c:	4616      	mov	r6, r2
 800604e:	4699      	mov	r9, r3
 8006050:	688a      	ldr	r2, [r1, #8]
 8006052:	690b      	ldr	r3, [r1, #16]
 8006054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006058:	4293      	cmp	r3, r2
 800605a:	bfb8      	it	lt
 800605c:	4613      	movlt	r3, r2
 800605e:	6033      	str	r3, [r6, #0]
 8006060:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006064:	4607      	mov	r7, r0
 8006066:	460c      	mov	r4, r1
 8006068:	b10a      	cbz	r2, 800606e <_printf_common+0x26>
 800606a:	3301      	adds	r3, #1
 800606c:	6033      	str	r3, [r6, #0]
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	0699      	lsls	r1, r3, #26
 8006072:	bf42      	ittt	mi
 8006074:	6833      	ldrmi	r3, [r6, #0]
 8006076:	3302      	addmi	r3, #2
 8006078:	6033      	strmi	r3, [r6, #0]
 800607a:	6825      	ldr	r5, [r4, #0]
 800607c:	f015 0506 	ands.w	r5, r5, #6
 8006080:	d106      	bne.n	8006090 <_printf_common+0x48>
 8006082:	f104 0a19 	add.w	sl, r4, #25
 8006086:	68e3      	ldr	r3, [r4, #12]
 8006088:	6832      	ldr	r2, [r6, #0]
 800608a:	1a9b      	subs	r3, r3, r2
 800608c:	42ab      	cmp	r3, r5
 800608e:	dc26      	bgt.n	80060de <_printf_common+0x96>
 8006090:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006094:	1e13      	subs	r3, r2, #0
 8006096:	6822      	ldr	r2, [r4, #0]
 8006098:	bf18      	it	ne
 800609a:	2301      	movne	r3, #1
 800609c:	0692      	lsls	r2, r2, #26
 800609e:	d42b      	bmi.n	80060f8 <_printf_common+0xb0>
 80060a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060a4:	4649      	mov	r1, r9
 80060a6:	4638      	mov	r0, r7
 80060a8:	47c0      	blx	r8
 80060aa:	3001      	adds	r0, #1
 80060ac:	d01e      	beq.n	80060ec <_printf_common+0xa4>
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	68e5      	ldr	r5, [r4, #12]
 80060b2:	6832      	ldr	r2, [r6, #0]
 80060b4:	f003 0306 	and.w	r3, r3, #6
 80060b8:	2b04      	cmp	r3, #4
 80060ba:	bf08      	it	eq
 80060bc:	1aad      	subeq	r5, r5, r2
 80060be:	68a3      	ldr	r3, [r4, #8]
 80060c0:	6922      	ldr	r2, [r4, #16]
 80060c2:	bf0c      	ite	eq
 80060c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060c8:	2500      	movne	r5, #0
 80060ca:	4293      	cmp	r3, r2
 80060cc:	bfc4      	itt	gt
 80060ce:	1a9b      	subgt	r3, r3, r2
 80060d0:	18ed      	addgt	r5, r5, r3
 80060d2:	2600      	movs	r6, #0
 80060d4:	341a      	adds	r4, #26
 80060d6:	42b5      	cmp	r5, r6
 80060d8:	d11a      	bne.n	8006110 <_printf_common+0xc8>
 80060da:	2000      	movs	r0, #0
 80060dc:	e008      	b.n	80060f0 <_printf_common+0xa8>
 80060de:	2301      	movs	r3, #1
 80060e0:	4652      	mov	r2, sl
 80060e2:	4649      	mov	r1, r9
 80060e4:	4638      	mov	r0, r7
 80060e6:	47c0      	blx	r8
 80060e8:	3001      	adds	r0, #1
 80060ea:	d103      	bne.n	80060f4 <_printf_common+0xac>
 80060ec:	f04f 30ff 	mov.w	r0, #4294967295
 80060f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060f4:	3501      	adds	r5, #1
 80060f6:	e7c6      	b.n	8006086 <_printf_common+0x3e>
 80060f8:	18e1      	adds	r1, r4, r3
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	2030      	movs	r0, #48	; 0x30
 80060fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006102:	4422      	add	r2, r4
 8006104:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006108:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800610c:	3302      	adds	r3, #2
 800610e:	e7c7      	b.n	80060a0 <_printf_common+0x58>
 8006110:	2301      	movs	r3, #1
 8006112:	4622      	mov	r2, r4
 8006114:	4649      	mov	r1, r9
 8006116:	4638      	mov	r0, r7
 8006118:	47c0      	blx	r8
 800611a:	3001      	adds	r0, #1
 800611c:	d0e6      	beq.n	80060ec <_printf_common+0xa4>
 800611e:	3601      	adds	r6, #1
 8006120:	e7d9      	b.n	80060d6 <_printf_common+0x8e>
	...

08006124 <_printf_i>:
 8006124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006128:	7e0f      	ldrb	r7, [r1, #24]
 800612a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800612c:	2f78      	cmp	r7, #120	; 0x78
 800612e:	4691      	mov	r9, r2
 8006130:	4680      	mov	r8, r0
 8006132:	460c      	mov	r4, r1
 8006134:	469a      	mov	sl, r3
 8006136:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800613a:	d807      	bhi.n	800614c <_printf_i+0x28>
 800613c:	2f62      	cmp	r7, #98	; 0x62
 800613e:	d80a      	bhi.n	8006156 <_printf_i+0x32>
 8006140:	2f00      	cmp	r7, #0
 8006142:	f000 80d8 	beq.w	80062f6 <_printf_i+0x1d2>
 8006146:	2f58      	cmp	r7, #88	; 0x58
 8006148:	f000 80a3 	beq.w	8006292 <_printf_i+0x16e>
 800614c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006150:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006154:	e03a      	b.n	80061cc <_printf_i+0xa8>
 8006156:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800615a:	2b15      	cmp	r3, #21
 800615c:	d8f6      	bhi.n	800614c <_printf_i+0x28>
 800615e:	a101      	add	r1, pc, #4	; (adr r1, 8006164 <_printf_i+0x40>)
 8006160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006164:	080061bd 	.word	0x080061bd
 8006168:	080061d1 	.word	0x080061d1
 800616c:	0800614d 	.word	0x0800614d
 8006170:	0800614d 	.word	0x0800614d
 8006174:	0800614d 	.word	0x0800614d
 8006178:	0800614d 	.word	0x0800614d
 800617c:	080061d1 	.word	0x080061d1
 8006180:	0800614d 	.word	0x0800614d
 8006184:	0800614d 	.word	0x0800614d
 8006188:	0800614d 	.word	0x0800614d
 800618c:	0800614d 	.word	0x0800614d
 8006190:	080062dd 	.word	0x080062dd
 8006194:	08006201 	.word	0x08006201
 8006198:	080062bf 	.word	0x080062bf
 800619c:	0800614d 	.word	0x0800614d
 80061a0:	0800614d 	.word	0x0800614d
 80061a4:	080062ff 	.word	0x080062ff
 80061a8:	0800614d 	.word	0x0800614d
 80061ac:	08006201 	.word	0x08006201
 80061b0:	0800614d 	.word	0x0800614d
 80061b4:	0800614d 	.word	0x0800614d
 80061b8:	080062c7 	.word	0x080062c7
 80061bc:	682b      	ldr	r3, [r5, #0]
 80061be:	1d1a      	adds	r2, r3, #4
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	602a      	str	r2, [r5, #0]
 80061c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061cc:	2301      	movs	r3, #1
 80061ce:	e0a3      	b.n	8006318 <_printf_i+0x1f4>
 80061d0:	6820      	ldr	r0, [r4, #0]
 80061d2:	6829      	ldr	r1, [r5, #0]
 80061d4:	0606      	lsls	r6, r0, #24
 80061d6:	f101 0304 	add.w	r3, r1, #4
 80061da:	d50a      	bpl.n	80061f2 <_printf_i+0xce>
 80061dc:	680e      	ldr	r6, [r1, #0]
 80061de:	602b      	str	r3, [r5, #0]
 80061e0:	2e00      	cmp	r6, #0
 80061e2:	da03      	bge.n	80061ec <_printf_i+0xc8>
 80061e4:	232d      	movs	r3, #45	; 0x2d
 80061e6:	4276      	negs	r6, r6
 80061e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061ec:	485e      	ldr	r0, [pc, #376]	; (8006368 <_printf_i+0x244>)
 80061ee:	230a      	movs	r3, #10
 80061f0:	e019      	b.n	8006226 <_printf_i+0x102>
 80061f2:	680e      	ldr	r6, [r1, #0]
 80061f4:	602b      	str	r3, [r5, #0]
 80061f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061fa:	bf18      	it	ne
 80061fc:	b236      	sxthne	r6, r6
 80061fe:	e7ef      	b.n	80061e0 <_printf_i+0xbc>
 8006200:	682b      	ldr	r3, [r5, #0]
 8006202:	6820      	ldr	r0, [r4, #0]
 8006204:	1d19      	adds	r1, r3, #4
 8006206:	6029      	str	r1, [r5, #0]
 8006208:	0601      	lsls	r1, r0, #24
 800620a:	d501      	bpl.n	8006210 <_printf_i+0xec>
 800620c:	681e      	ldr	r6, [r3, #0]
 800620e:	e002      	b.n	8006216 <_printf_i+0xf2>
 8006210:	0646      	lsls	r6, r0, #25
 8006212:	d5fb      	bpl.n	800620c <_printf_i+0xe8>
 8006214:	881e      	ldrh	r6, [r3, #0]
 8006216:	4854      	ldr	r0, [pc, #336]	; (8006368 <_printf_i+0x244>)
 8006218:	2f6f      	cmp	r7, #111	; 0x6f
 800621a:	bf0c      	ite	eq
 800621c:	2308      	moveq	r3, #8
 800621e:	230a      	movne	r3, #10
 8006220:	2100      	movs	r1, #0
 8006222:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006226:	6865      	ldr	r5, [r4, #4]
 8006228:	60a5      	str	r5, [r4, #8]
 800622a:	2d00      	cmp	r5, #0
 800622c:	bfa2      	ittt	ge
 800622e:	6821      	ldrge	r1, [r4, #0]
 8006230:	f021 0104 	bicge.w	r1, r1, #4
 8006234:	6021      	strge	r1, [r4, #0]
 8006236:	b90e      	cbnz	r6, 800623c <_printf_i+0x118>
 8006238:	2d00      	cmp	r5, #0
 800623a:	d04d      	beq.n	80062d8 <_printf_i+0x1b4>
 800623c:	4615      	mov	r5, r2
 800623e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006242:	fb03 6711 	mls	r7, r3, r1, r6
 8006246:	5dc7      	ldrb	r7, [r0, r7]
 8006248:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800624c:	4637      	mov	r7, r6
 800624e:	42bb      	cmp	r3, r7
 8006250:	460e      	mov	r6, r1
 8006252:	d9f4      	bls.n	800623e <_printf_i+0x11a>
 8006254:	2b08      	cmp	r3, #8
 8006256:	d10b      	bne.n	8006270 <_printf_i+0x14c>
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	07de      	lsls	r6, r3, #31
 800625c:	d508      	bpl.n	8006270 <_printf_i+0x14c>
 800625e:	6923      	ldr	r3, [r4, #16]
 8006260:	6861      	ldr	r1, [r4, #4]
 8006262:	4299      	cmp	r1, r3
 8006264:	bfde      	ittt	le
 8006266:	2330      	movle	r3, #48	; 0x30
 8006268:	f805 3c01 	strble.w	r3, [r5, #-1]
 800626c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006270:	1b52      	subs	r2, r2, r5
 8006272:	6122      	str	r2, [r4, #16]
 8006274:	f8cd a000 	str.w	sl, [sp]
 8006278:	464b      	mov	r3, r9
 800627a:	aa03      	add	r2, sp, #12
 800627c:	4621      	mov	r1, r4
 800627e:	4640      	mov	r0, r8
 8006280:	f7ff fee2 	bl	8006048 <_printf_common>
 8006284:	3001      	adds	r0, #1
 8006286:	d14c      	bne.n	8006322 <_printf_i+0x1fe>
 8006288:	f04f 30ff 	mov.w	r0, #4294967295
 800628c:	b004      	add	sp, #16
 800628e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006292:	4835      	ldr	r0, [pc, #212]	; (8006368 <_printf_i+0x244>)
 8006294:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006298:	6829      	ldr	r1, [r5, #0]
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	f851 6b04 	ldr.w	r6, [r1], #4
 80062a0:	6029      	str	r1, [r5, #0]
 80062a2:	061d      	lsls	r5, r3, #24
 80062a4:	d514      	bpl.n	80062d0 <_printf_i+0x1ac>
 80062a6:	07df      	lsls	r7, r3, #31
 80062a8:	bf44      	itt	mi
 80062aa:	f043 0320 	orrmi.w	r3, r3, #32
 80062ae:	6023      	strmi	r3, [r4, #0]
 80062b0:	b91e      	cbnz	r6, 80062ba <_printf_i+0x196>
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	f023 0320 	bic.w	r3, r3, #32
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	2310      	movs	r3, #16
 80062bc:	e7b0      	b.n	8006220 <_printf_i+0xfc>
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	f043 0320 	orr.w	r3, r3, #32
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	2378      	movs	r3, #120	; 0x78
 80062c8:	4828      	ldr	r0, [pc, #160]	; (800636c <_printf_i+0x248>)
 80062ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062ce:	e7e3      	b.n	8006298 <_printf_i+0x174>
 80062d0:	0659      	lsls	r1, r3, #25
 80062d2:	bf48      	it	mi
 80062d4:	b2b6      	uxthmi	r6, r6
 80062d6:	e7e6      	b.n	80062a6 <_printf_i+0x182>
 80062d8:	4615      	mov	r5, r2
 80062da:	e7bb      	b.n	8006254 <_printf_i+0x130>
 80062dc:	682b      	ldr	r3, [r5, #0]
 80062de:	6826      	ldr	r6, [r4, #0]
 80062e0:	6961      	ldr	r1, [r4, #20]
 80062e2:	1d18      	adds	r0, r3, #4
 80062e4:	6028      	str	r0, [r5, #0]
 80062e6:	0635      	lsls	r5, r6, #24
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	d501      	bpl.n	80062f0 <_printf_i+0x1cc>
 80062ec:	6019      	str	r1, [r3, #0]
 80062ee:	e002      	b.n	80062f6 <_printf_i+0x1d2>
 80062f0:	0670      	lsls	r0, r6, #25
 80062f2:	d5fb      	bpl.n	80062ec <_printf_i+0x1c8>
 80062f4:	8019      	strh	r1, [r3, #0]
 80062f6:	2300      	movs	r3, #0
 80062f8:	6123      	str	r3, [r4, #16]
 80062fa:	4615      	mov	r5, r2
 80062fc:	e7ba      	b.n	8006274 <_printf_i+0x150>
 80062fe:	682b      	ldr	r3, [r5, #0]
 8006300:	1d1a      	adds	r2, r3, #4
 8006302:	602a      	str	r2, [r5, #0]
 8006304:	681d      	ldr	r5, [r3, #0]
 8006306:	6862      	ldr	r2, [r4, #4]
 8006308:	2100      	movs	r1, #0
 800630a:	4628      	mov	r0, r5
 800630c:	f7f9 ff78 	bl	8000200 <memchr>
 8006310:	b108      	cbz	r0, 8006316 <_printf_i+0x1f2>
 8006312:	1b40      	subs	r0, r0, r5
 8006314:	6060      	str	r0, [r4, #4]
 8006316:	6863      	ldr	r3, [r4, #4]
 8006318:	6123      	str	r3, [r4, #16]
 800631a:	2300      	movs	r3, #0
 800631c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006320:	e7a8      	b.n	8006274 <_printf_i+0x150>
 8006322:	6923      	ldr	r3, [r4, #16]
 8006324:	462a      	mov	r2, r5
 8006326:	4649      	mov	r1, r9
 8006328:	4640      	mov	r0, r8
 800632a:	47d0      	blx	sl
 800632c:	3001      	adds	r0, #1
 800632e:	d0ab      	beq.n	8006288 <_printf_i+0x164>
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	079b      	lsls	r3, r3, #30
 8006334:	d413      	bmi.n	800635e <_printf_i+0x23a>
 8006336:	68e0      	ldr	r0, [r4, #12]
 8006338:	9b03      	ldr	r3, [sp, #12]
 800633a:	4298      	cmp	r0, r3
 800633c:	bfb8      	it	lt
 800633e:	4618      	movlt	r0, r3
 8006340:	e7a4      	b.n	800628c <_printf_i+0x168>
 8006342:	2301      	movs	r3, #1
 8006344:	4632      	mov	r2, r6
 8006346:	4649      	mov	r1, r9
 8006348:	4640      	mov	r0, r8
 800634a:	47d0      	blx	sl
 800634c:	3001      	adds	r0, #1
 800634e:	d09b      	beq.n	8006288 <_printf_i+0x164>
 8006350:	3501      	adds	r5, #1
 8006352:	68e3      	ldr	r3, [r4, #12]
 8006354:	9903      	ldr	r1, [sp, #12]
 8006356:	1a5b      	subs	r3, r3, r1
 8006358:	42ab      	cmp	r3, r5
 800635a:	dcf2      	bgt.n	8006342 <_printf_i+0x21e>
 800635c:	e7eb      	b.n	8006336 <_printf_i+0x212>
 800635e:	2500      	movs	r5, #0
 8006360:	f104 0619 	add.w	r6, r4, #25
 8006364:	e7f5      	b.n	8006352 <_printf_i+0x22e>
 8006366:	bf00      	nop
 8006368:	08006b45 	.word	0x08006b45
 800636c:	08006b56 	.word	0x08006b56

08006370 <_scanf_chars>:
 8006370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006374:	4615      	mov	r5, r2
 8006376:	688a      	ldr	r2, [r1, #8]
 8006378:	4680      	mov	r8, r0
 800637a:	460c      	mov	r4, r1
 800637c:	b932      	cbnz	r2, 800638c <_scanf_chars+0x1c>
 800637e:	698a      	ldr	r2, [r1, #24]
 8006380:	2a00      	cmp	r2, #0
 8006382:	bf0c      	ite	eq
 8006384:	2201      	moveq	r2, #1
 8006386:	f04f 32ff 	movne.w	r2, #4294967295
 800638a:	608a      	str	r2, [r1, #8]
 800638c:	6822      	ldr	r2, [r4, #0]
 800638e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8006420 <_scanf_chars+0xb0>
 8006392:	06d1      	lsls	r1, r2, #27
 8006394:	bf5f      	itttt	pl
 8006396:	681a      	ldrpl	r2, [r3, #0]
 8006398:	1d11      	addpl	r1, r2, #4
 800639a:	6019      	strpl	r1, [r3, #0]
 800639c:	6816      	ldrpl	r6, [r2, #0]
 800639e:	2700      	movs	r7, #0
 80063a0:	69a0      	ldr	r0, [r4, #24]
 80063a2:	b188      	cbz	r0, 80063c8 <_scanf_chars+0x58>
 80063a4:	2801      	cmp	r0, #1
 80063a6:	d107      	bne.n	80063b8 <_scanf_chars+0x48>
 80063a8:	682a      	ldr	r2, [r5, #0]
 80063aa:	7811      	ldrb	r1, [r2, #0]
 80063ac:	6962      	ldr	r2, [r4, #20]
 80063ae:	5c52      	ldrb	r2, [r2, r1]
 80063b0:	b952      	cbnz	r2, 80063c8 <_scanf_chars+0x58>
 80063b2:	2f00      	cmp	r7, #0
 80063b4:	d031      	beq.n	800641a <_scanf_chars+0xaa>
 80063b6:	e022      	b.n	80063fe <_scanf_chars+0x8e>
 80063b8:	2802      	cmp	r0, #2
 80063ba:	d120      	bne.n	80063fe <_scanf_chars+0x8e>
 80063bc:	682b      	ldr	r3, [r5, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80063c4:	071b      	lsls	r3, r3, #28
 80063c6:	d41a      	bmi.n	80063fe <_scanf_chars+0x8e>
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	06da      	lsls	r2, r3, #27
 80063cc:	bf5e      	ittt	pl
 80063ce:	682b      	ldrpl	r3, [r5, #0]
 80063d0:	781b      	ldrbpl	r3, [r3, #0]
 80063d2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80063d6:	682a      	ldr	r2, [r5, #0]
 80063d8:	686b      	ldr	r3, [r5, #4]
 80063da:	3201      	adds	r2, #1
 80063dc:	602a      	str	r2, [r5, #0]
 80063de:	68a2      	ldr	r2, [r4, #8]
 80063e0:	3b01      	subs	r3, #1
 80063e2:	3a01      	subs	r2, #1
 80063e4:	606b      	str	r3, [r5, #4]
 80063e6:	3701      	adds	r7, #1
 80063e8:	60a2      	str	r2, [r4, #8]
 80063ea:	b142      	cbz	r2, 80063fe <_scanf_chars+0x8e>
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	dcd7      	bgt.n	80063a0 <_scanf_chars+0x30>
 80063f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80063f4:	4629      	mov	r1, r5
 80063f6:	4640      	mov	r0, r8
 80063f8:	4798      	blx	r3
 80063fa:	2800      	cmp	r0, #0
 80063fc:	d0d0      	beq.n	80063a0 <_scanf_chars+0x30>
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	f013 0310 	ands.w	r3, r3, #16
 8006404:	d105      	bne.n	8006412 <_scanf_chars+0xa2>
 8006406:	68e2      	ldr	r2, [r4, #12]
 8006408:	3201      	adds	r2, #1
 800640a:	60e2      	str	r2, [r4, #12]
 800640c:	69a2      	ldr	r2, [r4, #24]
 800640e:	b102      	cbz	r2, 8006412 <_scanf_chars+0xa2>
 8006410:	7033      	strb	r3, [r6, #0]
 8006412:	6923      	ldr	r3, [r4, #16]
 8006414:	443b      	add	r3, r7
 8006416:	6123      	str	r3, [r4, #16]
 8006418:	2000      	movs	r0, #0
 800641a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800641e:	bf00      	nop
 8006420:	08006b83 	.word	0x08006b83

08006424 <_scanf_i>:
 8006424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006428:	4698      	mov	r8, r3
 800642a:	4b76      	ldr	r3, [pc, #472]	; (8006604 <_scanf_i+0x1e0>)
 800642c:	460c      	mov	r4, r1
 800642e:	4682      	mov	sl, r0
 8006430:	4616      	mov	r6, r2
 8006432:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006436:	b087      	sub	sp, #28
 8006438:	ab03      	add	r3, sp, #12
 800643a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800643e:	4b72      	ldr	r3, [pc, #456]	; (8006608 <_scanf_i+0x1e4>)
 8006440:	69a1      	ldr	r1, [r4, #24]
 8006442:	4a72      	ldr	r2, [pc, #456]	; (800660c <_scanf_i+0x1e8>)
 8006444:	2903      	cmp	r1, #3
 8006446:	bf18      	it	ne
 8006448:	461a      	movne	r2, r3
 800644a:	68a3      	ldr	r3, [r4, #8]
 800644c:	9201      	str	r2, [sp, #4]
 800644e:	1e5a      	subs	r2, r3, #1
 8006450:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006454:	bf88      	it	hi
 8006456:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800645a:	4627      	mov	r7, r4
 800645c:	bf82      	ittt	hi
 800645e:	eb03 0905 	addhi.w	r9, r3, r5
 8006462:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006466:	60a3      	strhi	r3, [r4, #8]
 8006468:	f857 3b1c 	ldr.w	r3, [r7], #28
 800646c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006470:	bf98      	it	ls
 8006472:	f04f 0900 	movls.w	r9, #0
 8006476:	6023      	str	r3, [r4, #0]
 8006478:	463d      	mov	r5, r7
 800647a:	f04f 0b00 	mov.w	fp, #0
 800647e:	6831      	ldr	r1, [r6, #0]
 8006480:	ab03      	add	r3, sp, #12
 8006482:	7809      	ldrb	r1, [r1, #0]
 8006484:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006488:	2202      	movs	r2, #2
 800648a:	f7f9 feb9 	bl	8000200 <memchr>
 800648e:	b328      	cbz	r0, 80064dc <_scanf_i+0xb8>
 8006490:	f1bb 0f01 	cmp.w	fp, #1
 8006494:	d159      	bne.n	800654a <_scanf_i+0x126>
 8006496:	6862      	ldr	r2, [r4, #4]
 8006498:	b92a      	cbnz	r2, 80064a6 <_scanf_i+0x82>
 800649a:	6822      	ldr	r2, [r4, #0]
 800649c:	2308      	movs	r3, #8
 800649e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064a2:	6063      	str	r3, [r4, #4]
 80064a4:	6022      	str	r2, [r4, #0]
 80064a6:	6822      	ldr	r2, [r4, #0]
 80064a8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80064ac:	6022      	str	r2, [r4, #0]
 80064ae:	68a2      	ldr	r2, [r4, #8]
 80064b0:	1e51      	subs	r1, r2, #1
 80064b2:	60a1      	str	r1, [r4, #8]
 80064b4:	b192      	cbz	r2, 80064dc <_scanf_i+0xb8>
 80064b6:	6832      	ldr	r2, [r6, #0]
 80064b8:	1c51      	adds	r1, r2, #1
 80064ba:	6031      	str	r1, [r6, #0]
 80064bc:	7812      	ldrb	r2, [r2, #0]
 80064be:	f805 2b01 	strb.w	r2, [r5], #1
 80064c2:	6872      	ldr	r2, [r6, #4]
 80064c4:	3a01      	subs	r2, #1
 80064c6:	2a00      	cmp	r2, #0
 80064c8:	6072      	str	r2, [r6, #4]
 80064ca:	dc07      	bgt.n	80064dc <_scanf_i+0xb8>
 80064cc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80064d0:	4631      	mov	r1, r6
 80064d2:	4650      	mov	r0, sl
 80064d4:	4790      	blx	r2
 80064d6:	2800      	cmp	r0, #0
 80064d8:	f040 8085 	bne.w	80065e6 <_scanf_i+0x1c2>
 80064dc:	f10b 0b01 	add.w	fp, fp, #1
 80064e0:	f1bb 0f03 	cmp.w	fp, #3
 80064e4:	d1cb      	bne.n	800647e <_scanf_i+0x5a>
 80064e6:	6863      	ldr	r3, [r4, #4]
 80064e8:	b90b      	cbnz	r3, 80064ee <_scanf_i+0xca>
 80064ea:	230a      	movs	r3, #10
 80064ec:	6063      	str	r3, [r4, #4]
 80064ee:	6863      	ldr	r3, [r4, #4]
 80064f0:	4947      	ldr	r1, [pc, #284]	; (8006610 <_scanf_i+0x1ec>)
 80064f2:	6960      	ldr	r0, [r4, #20]
 80064f4:	1ac9      	subs	r1, r1, r3
 80064f6:	f000 f8af 	bl	8006658 <__sccl>
 80064fa:	f04f 0b00 	mov.w	fp, #0
 80064fe:	68a3      	ldr	r3, [r4, #8]
 8006500:	6822      	ldr	r2, [r4, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d03d      	beq.n	8006582 <_scanf_i+0x15e>
 8006506:	6831      	ldr	r1, [r6, #0]
 8006508:	6960      	ldr	r0, [r4, #20]
 800650a:	f891 c000 	ldrb.w	ip, [r1]
 800650e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006512:	2800      	cmp	r0, #0
 8006514:	d035      	beq.n	8006582 <_scanf_i+0x15e>
 8006516:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800651a:	d124      	bne.n	8006566 <_scanf_i+0x142>
 800651c:	0510      	lsls	r0, r2, #20
 800651e:	d522      	bpl.n	8006566 <_scanf_i+0x142>
 8006520:	f10b 0b01 	add.w	fp, fp, #1
 8006524:	f1b9 0f00 	cmp.w	r9, #0
 8006528:	d003      	beq.n	8006532 <_scanf_i+0x10e>
 800652a:	3301      	adds	r3, #1
 800652c:	f109 39ff 	add.w	r9, r9, #4294967295
 8006530:	60a3      	str	r3, [r4, #8]
 8006532:	6873      	ldr	r3, [r6, #4]
 8006534:	3b01      	subs	r3, #1
 8006536:	2b00      	cmp	r3, #0
 8006538:	6073      	str	r3, [r6, #4]
 800653a:	dd1b      	ble.n	8006574 <_scanf_i+0x150>
 800653c:	6833      	ldr	r3, [r6, #0]
 800653e:	3301      	adds	r3, #1
 8006540:	6033      	str	r3, [r6, #0]
 8006542:	68a3      	ldr	r3, [r4, #8]
 8006544:	3b01      	subs	r3, #1
 8006546:	60a3      	str	r3, [r4, #8]
 8006548:	e7d9      	b.n	80064fe <_scanf_i+0xda>
 800654a:	f1bb 0f02 	cmp.w	fp, #2
 800654e:	d1ae      	bne.n	80064ae <_scanf_i+0x8a>
 8006550:	6822      	ldr	r2, [r4, #0]
 8006552:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006556:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800655a:	d1bf      	bne.n	80064dc <_scanf_i+0xb8>
 800655c:	2310      	movs	r3, #16
 800655e:	6063      	str	r3, [r4, #4]
 8006560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006564:	e7a2      	b.n	80064ac <_scanf_i+0x88>
 8006566:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800656a:	6022      	str	r2, [r4, #0]
 800656c:	780b      	ldrb	r3, [r1, #0]
 800656e:	f805 3b01 	strb.w	r3, [r5], #1
 8006572:	e7de      	b.n	8006532 <_scanf_i+0x10e>
 8006574:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006578:	4631      	mov	r1, r6
 800657a:	4650      	mov	r0, sl
 800657c:	4798      	blx	r3
 800657e:	2800      	cmp	r0, #0
 8006580:	d0df      	beq.n	8006542 <_scanf_i+0x11e>
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	05db      	lsls	r3, r3, #23
 8006586:	d50d      	bpl.n	80065a4 <_scanf_i+0x180>
 8006588:	42bd      	cmp	r5, r7
 800658a:	d909      	bls.n	80065a0 <_scanf_i+0x17c>
 800658c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006590:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006594:	4632      	mov	r2, r6
 8006596:	4650      	mov	r0, sl
 8006598:	4798      	blx	r3
 800659a:	f105 39ff 	add.w	r9, r5, #4294967295
 800659e:	464d      	mov	r5, r9
 80065a0:	42bd      	cmp	r5, r7
 80065a2:	d02d      	beq.n	8006600 <_scanf_i+0x1dc>
 80065a4:	6822      	ldr	r2, [r4, #0]
 80065a6:	f012 0210 	ands.w	r2, r2, #16
 80065aa:	d113      	bne.n	80065d4 <_scanf_i+0x1b0>
 80065ac:	702a      	strb	r2, [r5, #0]
 80065ae:	6863      	ldr	r3, [r4, #4]
 80065b0:	9e01      	ldr	r6, [sp, #4]
 80065b2:	4639      	mov	r1, r7
 80065b4:	4650      	mov	r0, sl
 80065b6:	47b0      	blx	r6
 80065b8:	6821      	ldr	r1, [r4, #0]
 80065ba:	f8d8 3000 	ldr.w	r3, [r8]
 80065be:	f011 0f20 	tst.w	r1, #32
 80065c2:	d013      	beq.n	80065ec <_scanf_i+0x1c8>
 80065c4:	1d1a      	adds	r2, r3, #4
 80065c6:	f8c8 2000 	str.w	r2, [r8]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6018      	str	r0, [r3, #0]
 80065ce:	68e3      	ldr	r3, [r4, #12]
 80065d0:	3301      	adds	r3, #1
 80065d2:	60e3      	str	r3, [r4, #12]
 80065d4:	1bed      	subs	r5, r5, r7
 80065d6:	44ab      	add	fp, r5
 80065d8:	6925      	ldr	r5, [r4, #16]
 80065da:	445d      	add	r5, fp
 80065dc:	6125      	str	r5, [r4, #16]
 80065de:	2000      	movs	r0, #0
 80065e0:	b007      	add	sp, #28
 80065e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e6:	f04f 0b00 	mov.w	fp, #0
 80065ea:	e7ca      	b.n	8006582 <_scanf_i+0x15e>
 80065ec:	1d1a      	adds	r2, r3, #4
 80065ee:	f8c8 2000 	str.w	r2, [r8]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f011 0f01 	tst.w	r1, #1
 80065f8:	bf14      	ite	ne
 80065fa:	8018      	strhne	r0, [r3, #0]
 80065fc:	6018      	streq	r0, [r3, #0]
 80065fe:	e7e6      	b.n	80065ce <_scanf_i+0x1aa>
 8006600:	2001      	movs	r0, #1
 8006602:	e7ed      	b.n	80065e0 <_scanf_i+0x1bc>
 8006604:	08006aa4 	.word	0x08006aa4
 8006608:	080068b5 	.word	0x080068b5
 800660c:	080067cd 	.word	0x080067cd
 8006610:	08006b80 	.word	0x08006b80

08006614 <_read_r>:
 8006614:	b538      	push	{r3, r4, r5, lr}
 8006616:	4d07      	ldr	r5, [pc, #28]	; (8006634 <_read_r+0x20>)
 8006618:	4604      	mov	r4, r0
 800661a:	4608      	mov	r0, r1
 800661c:	4611      	mov	r1, r2
 800661e:	2200      	movs	r2, #0
 8006620:	602a      	str	r2, [r5, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	f7fa fbfc 	bl	8000e20 <_read>
 8006628:	1c43      	adds	r3, r0, #1
 800662a:	d102      	bne.n	8006632 <_read_r+0x1e>
 800662c:	682b      	ldr	r3, [r5, #0]
 800662e:	b103      	cbz	r3, 8006632 <_read_r+0x1e>
 8006630:	6023      	str	r3, [r4, #0]
 8006632:	bd38      	pop	{r3, r4, r5, pc}
 8006634:	20000698 	.word	0x20000698

08006638 <_sbrk_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	4d06      	ldr	r5, [pc, #24]	; (8006654 <_sbrk_r+0x1c>)
 800663c:	2300      	movs	r3, #0
 800663e:	4604      	mov	r4, r0
 8006640:	4608      	mov	r0, r1
 8006642:	602b      	str	r3, [r5, #0]
 8006644:	f7fa fc5a 	bl	8000efc <_sbrk>
 8006648:	1c43      	adds	r3, r0, #1
 800664a:	d102      	bne.n	8006652 <_sbrk_r+0x1a>
 800664c:	682b      	ldr	r3, [r5, #0]
 800664e:	b103      	cbz	r3, 8006652 <_sbrk_r+0x1a>
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	bd38      	pop	{r3, r4, r5, pc}
 8006654:	20000698 	.word	0x20000698

08006658 <__sccl>:
 8006658:	b570      	push	{r4, r5, r6, lr}
 800665a:	780b      	ldrb	r3, [r1, #0]
 800665c:	4604      	mov	r4, r0
 800665e:	2b5e      	cmp	r3, #94	; 0x5e
 8006660:	bf0b      	itete	eq
 8006662:	784b      	ldrbeq	r3, [r1, #1]
 8006664:	1c48      	addne	r0, r1, #1
 8006666:	1c88      	addeq	r0, r1, #2
 8006668:	2200      	movne	r2, #0
 800666a:	bf08      	it	eq
 800666c:	2201      	moveq	r2, #1
 800666e:	1e61      	subs	r1, r4, #1
 8006670:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006674:	f801 2f01 	strb.w	r2, [r1, #1]!
 8006678:	42a9      	cmp	r1, r5
 800667a:	d1fb      	bne.n	8006674 <__sccl+0x1c>
 800667c:	b90b      	cbnz	r3, 8006682 <__sccl+0x2a>
 800667e:	3801      	subs	r0, #1
 8006680:	bd70      	pop	{r4, r5, r6, pc}
 8006682:	f082 0201 	eor.w	r2, r2, #1
 8006686:	54e2      	strb	r2, [r4, r3]
 8006688:	4605      	mov	r5, r0
 800668a:	4628      	mov	r0, r5
 800668c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006690:	292d      	cmp	r1, #45	; 0x2d
 8006692:	d006      	beq.n	80066a2 <__sccl+0x4a>
 8006694:	295d      	cmp	r1, #93	; 0x5d
 8006696:	d0f3      	beq.n	8006680 <__sccl+0x28>
 8006698:	b909      	cbnz	r1, 800669e <__sccl+0x46>
 800669a:	4628      	mov	r0, r5
 800669c:	e7f0      	b.n	8006680 <__sccl+0x28>
 800669e:	460b      	mov	r3, r1
 80066a0:	e7f1      	b.n	8006686 <__sccl+0x2e>
 80066a2:	786e      	ldrb	r6, [r5, #1]
 80066a4:	2e5d      	cmp	r6, #93	; 0x5d
 80066a6:	d0fa      	beq.n	800669e <__sccl+0x46>
 80066a8:	42b3      	cmp	r3, r6
 80066aa:	dcf8      	bgt.n	800669e <__sccl+0x46>
 80066ac:	3502      	adds	r5, #2
 80066ae:	4619      	mov	r1, r3
 80066b0:	3101      	adds	r1, #1
 80066b2:	428e      	cmp	r6, r1
 80066b4:	5462      	strb	r2, [r4, r1]
 80066b6:	dcfb      	bgt.n	80066b0 <__sccl+0x58>
 80066b8:	1af1      	subs	r1, r6, r3
 80066ba:	3901      	subs	r1, #1
 80066bc:	1c58      	adds	r0, r3, #1
 80066be:	42b3      	cmp	r3, r6
 80066c0:	bfa8      	it	ge
 80066c2:	2100      	movge	r1, #0
 80066c4:	1843      	adds	r3, r0, r1
 80066c6:	e7e0      	b.n	800668a <__sccl+0x32>

080066c8 <_strtol_l.constprop.0>:
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ce:	d001      	beq.n	80066d4 <_strtol_l.constprop.0+0xc>
 80066d0:	2b24      	cmp	r3, #36	; 0x24
 80066d2:	d906      	bls.n	80066e2 <_strtol_l.constprop.0+0x1a>
 80066d4:	f7fe fb98 	bl	8004e08 <__errno>
 80066d8:	2316      	movs	r3, #22
 80066da:	6003      	str	r3, [r0, #0]
 80066dc:	2000      	movs	r0, #0
 80066de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80067c8 <_strtol_l.constprop.0+0x100>
 80066e6:	460d      	mov	r5, r1
 80066e8:	462e      	mov	r6, r5
 80066ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 80066f2:	f017 0708 	ands.w	r7, r7, #8
 80066f6:	d1f7      	bne.n	80066e8 <_strtol_l.constprop.0+0x20>
 80066f8:	2c2d      	cmp	r4, #45	; 0x2d
 80066fa:	d132      	bne.n	8006762 <_strtol_l.constprop.0+0x9a>
 80066fc:	782c      	ldrb	r4, [r5, #0]
 80066fe:	2701      	movs	r7, #1
 8006700:	1cb5      	adds	r5, r6, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d05b      	beq.n	80067be <_strtol_l.constprop.0+0xf6>
 8006706:	2b10      	cmp	r3, #16
 8006708:	d109      	bne.n	800671e <_strtol_l.constprop.0+0x56>
 800670a:	2c30      	cmp	r4, #48	; 0x30
 800670c:	d107      	bne.n	800671e <_strtol_l.constprop.0+0x56>
 800670e:	782c      	ldrb	r4, [r5, #0]
 8006710:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006714:	2c58      	cmp	r4, #88	; 0x58
 8006716:	d14d      	bne.n	80067b4 <_strtol_l.constprop.0+0xec>
 8006718:	786c      	ldrb	r4, [r5, #1]
 800671a:	2310      	movs	r3, #16
 800671c:	3502      	adds	r5, #2
 800671e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006722:	f108 38ff 	add.w	r8, r8, #4294967295
 8006726:	f04f 0c00 	mov.w	ip, #0
 800672a:	fbb8 f9f3 	udiv	r9, r8, r3
 800672e:	4666      	mov	r6, ip
 8006730:	fb03 8a19 	mls	sl, r3, r9, r8
 8006734:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006738:	f1be 0f09 	cmp.w	lr, #9
 800673c:	d816      	bhi.n	800676c <_strtol_l.constprop.0+0xa4>
 800673e:	4674      	mov	r4, lr
 8006740:	42a3      	cmp	r3, r4
 8006742:	dd24      	ble.n	800678e <_strtol_l.constprop.0+0xc6>
 8006744:	f1bc 0f00 	cmp.w	ip, #0
 8006748:	db1e      	blt.n	8006788 <_strtol_l.constprop.0+0xc0>
 800674a:	45b1      	cmp	r9, r6
 800674c:	d31c      	bcc.n	8006788 <_strtol_l.constprop.0+0xc0>
 800674e:	d101      	bne.n	8006754 <_strtol_l.constprop.0+0x8c>
 8006750:	45a2      	cmp	sl, r4
 8006752:	db19      	blt.n	8006788 <_strtol_l.constprop.0+0xc0>
 8006754:	fb06 4603 	mla	r6, r6, r3, r4
 8006758:	f04f 0c01 	mov.w	ip, #1
 800675c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006760:	e7e8      	b.n	8006734 <_strtol_l.constprop.0+0x6c>
 8006762:	2c2b      	cmp	r4, #43	; 0x2b
 8006764:	bf04      	itt	eq
 8006766:	782c      	ldrbeq	r4, [r5, #0]
 8006768:	1cb5      	addeq	r5, r6, #2
 800676a:	e7ca      	b.n	8006702 <_strtol_l.constprop.0+0x3a>
 800676c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006770:	f1be 0f19 	cmp.w	lr, #25
 8006774:	d801      	bhi.n	800677a <_strtol_l.constprop.0+0xb2>
 8006776:	3c37      	subs	r4, #55	; 0x37
 8006778:	e7e2      	b.n	8006740 <_strtol_l.constprop.0+0x78>
 800677a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800677e:	f1be 0f19 	cmp.w	lr, #25
 8006782:	d804      	bhi.n	800678e <_strtol_l.constprop.0+0xc6>
 8006784:	3c57      	subs	r4, #87	; 0x57
 8006786:	e7db      	b.n	8006740 <_strtol_l.constprop.0+0x78>
 8006788:	f04f 3cff 	mov.w	ip, #4294967295
 800678c:	e7e6      	b.n	800675c <_strtol_l.constprop.0+0x94>
 800678e:	f1bc 0f00 	cmp.w	ip, #0
 8006792:	da05      	bge.n	80067a0 <_strtol_l.constprop.0+0xd8>
 8006794:	2322      	movs	r3, #34	; 0x22
 8006796:	6003      	str	r3, [r0, #0]
 8006798:	4646      	mov	r6, r8
 800679a:	b942      	cbnz	r2, 80067ae <_strtol_l.constprop.0+0xe6>
 800679c:	4630      	mov	r0, r6
 800679e:	e79e      	b.n	80066de <_strtol_l.constprop.0+0x16>
 80067a0:	b107      	cbz	r7, 80067a4 <_strtol_l.constprop.0+0xdc>
 80067a2:	4276      	negs	r6, r6
 80067a4:	2a00      	cmp	r2, #0
 80067a6:	d0f9      	beq.n	800679c <_strtol_l.constprop.0+0xd4>
 80067a8:	f1bc 0f00 	cmp.w	ip, #0
 80067ac:	d000      	beq.n	80067b0 <_strtol_l.constprop.0+0xe8>
 80067ae:	1e69      	subs	r1, r5, #1
 80067b0:	6011      	str	r1, [r2, #0]
 80067b2:	e7f3      	b.n	800679c <_strtol_l.constprop.0+0xd4>
 80067b4:	2430      	movs	r4, #48	; 0x30
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1b1      	bne.n	800671e <_strtol_l.constprop.0+0x56>
 80067ba:	2308      	movs	r3, #8
 80067bc:	e7af      	b.n	800671e <_strtol_l.constprop.0+0x56>
 80067be:	2c30      	cmp	r4, #48	; 0x30
 80067c0:	d0a5      	beq.n	800670e <_strtol_l.constprop.0+0x46>
 80067c2:	230a      	movs	r3, #10
 80067c4:	e7ab      	b.n	800671e <_strtol_l.constprop.0+0x56>
 80067c6:	bf00      	nop
 80067c8:	08006b83 	.word	0x08006b83

080067cc <_strtol_r>:
 80067cc:	f7ff bf7c 	b.w	80066c8 <_strtol_l.constprop.0>

080067d0 <_strtoul_l.constprop.0>:
 80067d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067d4:	4f36      	ldr	r7, [pc, #216]	; (80068b0 <_strtoul_l.constprop.0+0xe0>)
 80067d6:	4686      	mov	lr, r0
 80067d8:	460d      	mov	r5, r1
 80067da:	4628      	mov	r0, r5
 80067dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067e0:	5de6      	ldrb	r6, [r4, r7]
 80067e2:	f016 0608 	ands.w	r6, r6, #8
 80067e6:	d1f8      	bne.n	80067da <_strtoul_l.constprop.0+0xa>
 80067e8:	2c2d      	cmp	r4, #45	; 0x2d
 80067ea:	d12f      	bne.n	800684c <_strtoul_l.constprop.0+0x7c>
 80067ec:	782c      	ldrb	r4, [r5, #0]
 80067ee:	2601      	movs	r6, #1
 80067f0:	1c85      	adds	r5, r0, #2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d057      	beq.n	80068a6 <_strtoul_l.constprop.0+0xd6>
 80067f6:	2b10      	cmp	r3, #16
 80067f8:	d109      	bne.n	800680e <_strtoul_l.constprop.0+0x3e>
 80067fa:	2c30      	cmp	r4, #48	; 0x30
 80067fc:	d107      	bne.n	800680e <_strtoul_l.constprop.0+0x3e>
 80067fe:	7828      	ldrb	r0, [r5, #0]
 8006800:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006804:	2858      	cmp	r0, #88	; 0x58
 8006806:	d149      	bne.n	800689c <_strtoul_l.constprop.0+0xcc>
 8006808:	786c      	ldrb	r4, [r5, #1]
 800680a:	2310      	movs	r3, #16
 800680c:	3502      	adds	r5, #2
 800680e:	f04f 38ff 	mov.w	r8, #4294967295
 8006812:	2700      	movs	r7, #0
 8006814:	fbb8 f8f3 	udiv	r8, r8, r3
 8006818:	fb03 f908 	mul.w	r9, r3, r8
 800681c:	ea6f 0909 	mvn.w	r9, r9
 8006820:	4638      	mov	r0, r7
 8006822:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006826:	f1bc 0f09 	cmp.w	ip, #9
 800682a:	d814      	bhi.n	8006856 <_strtoul_l.constprop.0+0x86>
 800682c:	4664      	mov	r4, ip
 800682e:	42a3      	cmp	r3, r4
 8006830:	dd22      	ble.n	8006878 <_strtoul_l.constprop.0+0xa8>
 8006832:	2f00      	cmp	r7, #0
 8006834:	db1d      	blt.n	8006872 <_strtoul_l.constprop.0+0xa2>
 8006836:	4580      	cmp	r8, r0
 8006838:	d31b      	bcc.n	8006872 <_strtoul_l.constprop.0+0xa2>
 800683a:	d101      	bne.n	8006840 <_strtoul_l.constprop.0+0x70>
 800683c:	45a1      	cmp	r9, r4
 800683e:	db18      	blt.n	8006872 <_strtoul_l.constprop.0+0xa2>
 8006840:	fb00 4003 	mla	r0, r0, r3, r4
 8006844:	2701      	movs	r7, #1
 8006846:	f815 4b01 	ldrb.w	r4, [r5], #1
 800684a:	e7ea      	b.n	8006822 <_strtoul_l.constprop.0+0x52>
 800684c:	2c2b      	cmp	r4, #43	; 0x2b
 800684e:	bf04      	itt	eq
 8006850:	782c      	ldrbeq	r4, [r5, #0]
 8006852:	1c85      	addeq	r5, r0, #2
 8006854:	e7cd      	b.n	80067f2 <_strtoul_l.constprop.0+0x22>
 8006856:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800685a:	f1bc 0f19 	cmp.w	ip, #25
 800685e:	d801      	bhi.n	8006864 <_strtoul_l.constprop.0+0x94>
 8006860:	3c37      	subs	r4, #55	; 0x37
 8006862:	e7e4      	b.n	800682e <_strtoul_l.constprop.0+0x5e>
 8006864:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006868:	f1bc 0f19 	cmp.w	ip, #25
 800686c:	d804      	bhi.n	8006878 <_strtoul_l.constprop.0+0xa8>
 800686e:	3c57      	subs	r4, #87	; 0x57
 8006870:	e7dd      	b.n	800682e <_strtoul_l.constprop.0+0x5e>
 8006872:	f04f 37ff 	mov.w	r7, #4294967295
 8006876:	e7e6      	b.n	8006846 <_strtoul_l.constprop.0+0x76>
 8006878:	2f00      	cmp	r7, #0
 800687a:	da07      	bge.n	800688c <_strtoul_l.constprop.0+0xbc>
 800687c:	2322      	movs	r3, #34	; 0x22
 800687e:	f8ce 3000 	str.w	r3, [lr]
 8006882:	f04f 30ff 	mov.w	r0, #4294967295
 8006886:	b932      	cbnz	r2, 8006896 <_strtoul_l.constprop.0+0xc6>
 8006888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800688c:	b106      	cbz	r6, 8006890 <_strtoul_l.constprop.0+0xc0>
 800688e:	4240      	negs	r0, r0
 8006890:	2a00      	cmp	r2, #0
 8006892:	d0f9      	beq.n	8006888 <_strtoul_l.constprop.0+0xb8>
 8006894:	b107      	cbz	r7, 8006898 <_strtoul_l.constprop.0+0xc8>
 8006896:	1e69      	subs	r1, r5, #1
 8006898:	6011      	str	r1, [r2, #0]
 800689a:	e7f5      	b.n	8006888 <_strtoul_l.constprop.0+0xb8>
 800689c:	2430      	movs	r4, #48	; 0x30
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1b5      	bne.n	800680e <_strtoul_l.constprop.0+0x3e>
 80068a2:	2308      	movs	r3, #8
 80068a4:	e7b3      	b.n	800680e <_strtoul_l.constprop.0+0x3e>
 80068a6:	2c30      	cmp	r4, #48	; 0x30
 80068a8:	d0a9      	beq.n	80067fe <_strtoul_l.constprop.0+0x2e>
 80068aa:	230a      	movs	r3, #10
 80068ac:	e7af      	b.n	800680e <_strtoul_l.constprop.0+0x3e>
 80068ae:	bf00      	nop
 80068b0:	08006b83 	.word	0x08006b83

080068b4 <_strtoul_r>:
 80068b4:	f7ff bf8c 	b.w	80067d0 <_strtoul_l.constprop.0>

080068b8 <__submore>:
 80068b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068bc:	460c      	mov	r4, r1
 80068be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80068c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068c4:	4299      	cmp	r1, r3
 80068c6:	d11d      	bne.n	8006904 <__submore+0x4c>
 80068c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80068cc:	f7ff f81c 	bl	8005908 <_malloc_r>
 80068d0:	b918      	cbnz	r0, 80068da <__submore+0x22>
 80068d2:	f04f 30ff 	mov.w	r0, #4294967295
 80068d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068de:	63a3      	str	r3, [r4, #56]	; 0x38
 80068e0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80068e4:	6360      	str	r0, [r4, #52]	; 0x34
 80068e6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80068ea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80068ee:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80068f2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80068f6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80068fa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80068fe:	6020      	str	r0, [r4, #0]
 8006900:	2000      	movs	r0, #0
 8006902:	e7e8      	b.n	80068d6 <__submore+0x1e>
 8006904:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006906:	0077      	lsls	r7, r6, #1
 8006908:	463a      	mov	r2, r7
 800690a:	f000 f84b 	bl	80069a4 <_realloc_r>
 800690e:	4605      	mov	r5, r0
 8006910:	2800      	cmp	r0, #0
 8006912:	d0de      	beq.n	80068d2 <__submore+0x1a>
 8006914:	eb00 0806 	add.w	r8, r0, r6
 8006918:	4601      	mov	r1, r0
 800691a:	4632      	mov	r2, r6
 800691c:	4640      	mov	r0, r8
 800691e:	f000 f827 	bl	8006970 <memcpy>
 8006922:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006926:	f8c4 8000 	str.w	r8, [r4]
 800692a:	e7e9      	b.n	8006900 <__submore+0x48>

0800692c <_fstat_r>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	4d07      	ldr	r5, [pc, #28]	; (800694c <_fstat_r+0x20>)
 8006930:	2300      	movs	r3, #0
 8006932:	4604      	mov	r4, r0
 8006934:	4608      	mov	r0, r1
 8006936:	4611      	mov	r1, r2
 8006938:	602b      	str	r3, [r5, #0]
 800693a:	f7fa fab6 	bl	8000eaa <_fstat>
 800693e:	1c43      	adds	r3, r0, #1
 8006940:	d102      	bne.n	8006948 <_fstat_r+0x1c>
 8006942:	682b      	ldr	r3, [r5, #0]
 8006944:	b103      	cbz	r3, 8006948 <_fstat_r+0x1c>
 8006946:	6023      	str	r3, [r4, #0]
 8006948:	bd38      	pop	{r3, r4, r5, pc}
 800694a:	bf00      	nop
 800694c:	20000698 	.word	0x20000698

08006950 <_isatty_r>:
 8006950:	b538      	push	{r3, r4, r5, lr}
 8006952:	4d06      	ldr	r5, [pc, #24]	; (800696c <_isatty_r+0x1c>)
 8006954:	2300      	movs	r3, #0
 8006956:	4604      	mov	r4, r0
 8006958:	4608      	mov	r0, r1
 800695a:	602b      	str	r3, [r5, #0]
 800695c:	f7fa fab5 	bl	8000eca <_isatty>
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	d102      	bne.n	800696a <_isatty_r+0x1a>
 8006964:	682b      	ldr	r3, [r5, #0]
 8006966:	b103      	cbz	r3, 800696a <_isatty_r+0x1a>
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	bd38      	pop	{r3, r4, r5, pc}
 800696c:	20000698 	.word	0x20000698

08006970 <memcpy>:
 8006970:	440a      	add	r2, r1
 8006972:	4291      	cmp	r1, r2
 8006974:	f100 33ff 	add.w	r3, r0, #4294967295
 8006978:	d100      	bne.n	800697c <memcpy+0xc>
 800697a:	4770      	bx	lr
 800697c:	b510      	push	{r4, lr}
 800697e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006982:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006986:	4291      	cmp	r1, r2
 8006988:	d1f9      	bne.n	800697e <memcpy+0xe>
 800698a:	bd10      	pop	{r4, pc}

0800698c <__malloc_lock>:
 800698c:	4801      	ldr	r0, [pc, #4]	; (8006994 <__malloc_lock+0x8>)
 800698e:	f7fe becd 	b.w	800572c <__retarget_lock_acquire_recursive>
 8006992:	bf00      	nop
 8006994:	2000068c 	.word	0x2000068c

08006998 <__malloc_unlock>:
 8006998:	4801      	ldr	r0, [pc, #4]	; (80069a0 <__malloc_unlock+0x8>)
 800699a:	f7fe bec8 	b.w	800572e <__retarget_lock_release_recursive>
 800699e:	bf00      	nop
 80069a0:	2000068c 	.word	0x2000068c

080069a4 <_realloc_r>:
 80069a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069a8:	4680      	mov	r8, r0
 80069aa:	4614      	mov	r4, r2
 80069ac:	460e      	mov	r6, r1
 80069ae:	b921      	cbnz	r1, 80069ba <_realloc_r+0x16>
 80069b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069b4:	4611      	mov	r1, r2
 80069b6:	f7fe bfa7 	b.w	8005908 <_malloc_r>
 80069ba:	b92a      	cbnz	r2, 80069c8 <_realloc_r+0x24>
 80069bc:	f7fe ff38 	bl	8005830 <_free_r>
 80069c0:	4625      	mov	r5, r4
 80069c2:	4628      	mov	r0, r5
 80069c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069c8:	f000 f81b 	bl	8006a02 <_malloc_usable_size_r>
 80069cc:	4284      	cmp	r4, r0
 80069ce:	4607      	mov	r7, r0
 80069d0:	d802      	bhi.n	80069d8 <_realloc_r+0x34>
 80069d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80069d6:	d812      	bhi.n	80069fe <_realloc_r+0x5a>
 80069d8:	4621      	mov	r1, r4
 80069da:	4640      	mov	r0, r8
 80069dc:	f7fe ff94 	bl	8005908 <_malloc_r>
 80069e0:	4605      	mov	r5, r0
 80069e2:	2800      	cmp	r0, #0
 80069e4:	d0ed      	beq.n	80069c2 <_realloc_r+0x1e>
 80069e6:	42bc      	cmp	r4, r7
 80069e8:	4622      	mov	r2, r4
 80069ea:	4631      	mov	r1, r6
 80069ec:	bf28      	it	cs
 80069ee:	463a      	movcs	r2, r7
 80069f0:	f7ff ffbe 	bl	8006970 <memcpy>
 80069f4:	4631      	mov	r1, r6
 80069f6:	4640      	mov	r0, r8
 80069f8:	f7fe ff1a 	bl	8005830 <_free_r>
 80069fc:	e7e1      	b.n	80069c2 <_realloc_r+0x1e>
 80069fe:	4635      	mov	r5, r6
 8006a00:	e7df      	b.n	80069c2 <_realloc_r+0x1e>

08006a02 <_malloc_usable_size_r>:
 8006a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a06:	1f18      	subs	r0, r3, #4
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	bfbc      	itt	lt
 8006a0c:	580b      	ldrlt	r3, [r1, r0]
 8006a0e:	18c0      	addlt	r0, r0, r3
 8006a10:	4770      	bx	lr
	...

08006a14 <_init>:
 8006a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a16:	bf00      	nop
 8006a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a1a:	bc08      	pop	{r3}
 8006a1c:	469e      	mov	lr, r3
 8006a1e:	4770      	bx	lr

08006a20 <_fini>:
 8006a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a22:	bf00      	nop
 8006a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a26:	bc08      	pop	{r3}
 8006a28:	469e      	mov	lr, r3
 8006a2a:	4770      	bx	lr
