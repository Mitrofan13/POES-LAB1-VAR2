
LAB1_VAR2_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006788  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08006938  08006938  00016938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b90  08006b90  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006b90  08006b90  00016b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b98  08006b98  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b98  08006b98  00016b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b9c  08006b9c  00016b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000005e0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000654  20000654  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011b6d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028bd  00000000  00000000  00031c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e28  00000000  00000000  000344d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d00  00000000  00000000  000352f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025159  00000000  00000000  00035ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b28  00000000  00000000  0005b151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dba61  00000000  00000000  0006cc79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001486da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044c0  00000000  00000000  0014872c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006920 	.word	0x08006920

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08006920 	.word	0x08006920

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <MX_DMA_Init+0x4c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a0f      	ldr	r2, [pc, #60]	; (80005f0 <MX_DMA_Init+0x4c>)
 80005b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <MX_DMA_Init+0x4c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	200c      	movs	r0, #12
 80005cc:	f000 ffd9 	bl	8001582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80005d0:	200c      	movs	r0, #12
 80005d2:	f000 fff2 	bl	80015ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2100      	movs	r1, #0
 80005da:	200e      	movs	r0, #14
 80005dc:	f000 ffd1 	bl	8001582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80005e0:	200e      	movs	r0, #14
 80005e2:	f000 ffea 	bl	80015ba <HAL_NVIC_EnableIRQ>

}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800

080005f4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000602:	2b00      	cmp	r3, #0
 8000604:	db0c      	blt.n	8000620 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	f003 021f 	and.w	r2, r3, #31
 800060c:	4907      	ldr	r1, [pc, #28]	; (800062c <__NVIC_ClearPendingIRQ+0x38>)
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	095b      	lsrs	r3, r3, #5
 8000614:	2001      	movs	r0, #1
 8000616:	fa00 f202 	lsl.w	r2, r0, r2
 800061a:	3360      	adds	r3, #96	; 0x60
 800061c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000e100 	.word	0xe000e100

08000630 <HAL_TIM_PeriodElapsedCallback>:

extern TIM_HandleTypeDef htim1;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM1)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d12a      	bne.n	8000698 <HAL_TIM_PeriodElapsedCallback+0x68>
	{
		HAL_TIM_Base_Stop_IT(&htim1); // останавливаем таймер
 8000642:	4818      	ldr	r0, [pc, #96]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000644:	f002 faa2 	bl	8002b8c <HAL_TIM_Base_Stop_IT>
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON_EXTI_Pin);  // очищаем бит EXTI_PR (бит прерывания)
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800064a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800064e:	615a      	str	r2, [r3, #20]
		NVIC_ClearPendingIRQ(EXTI15_10_IRQn); // очищаем бит NVIC_ICPRx (бит очереди)
 8000650:	2028      	movs	r0, #40	; 0x28
 8000652:	f7ff ffcf 	bl	80005f4 <__NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);   // включаем внешнее прерывание
 8000656:	2028      	movs	r0, #40	; 0x28
 8000658:	f000 ffaf 	bl	80015ba <HAL_NVIC_EnableIRQ>
		btn_cur = HAL_GPIO_ReadPin(BUTTON_EXTI_GPIO_Port, BUTTON_EXTI_Pin);
 800065c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000660:	4812      	ldr	r0, [pc, #72]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000662:	f001 fcfb 	bl	800205c <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	461a      	mov	r2, r3
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800066c:	701a      	strb	r2, [r3, #0]
		if((btn_prev == 0) && (btn_cur != 0))
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d110      	bne.n	8000698 <HAL_TIM_PeriodElapsedCallback+0x68>
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d00c      	beq.n	8000698 <HAL_TIM_PeriodElapsedCallback+0x68>
		{
			count++;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	3301      	adds	r3, #1
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000688:	701a      	strb	r2, [r3, #0]
			if(count == 4)
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b04      	cmp	r3, #4
 8000690:	d102      	bne.n	8000698 <HAL_TIM_PeriodElapsedCallback+0x68>
			{
				count = 0;
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40010000 	.word	0x40010000
 80006a4:	200004ac 	.word	0x200004ac
 80006a8:	40013c00 	.word	0x40013c00
 80006ac:	40020800 	.word	0x40020800
 80006b0:	20000091 	.word	0x20000091
 80006b4:	20000092 	.word	0x20000092
 80006b8:	20000090 	.word	0x20000090

080006bc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_EXTI_Pin)
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006cc:	d105      	bne.n	80006da <HAL_GPIO_EXTI_Callback+0x1e>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // сразу же отключаем прерывания на этом пине
 80006ce:	2028      	movs	r0, #40	; 0x28
 80006d0:	f000 ff81 	bl	80015d6 <HAL_NVIC_DisableIRQ>
		// либо выполняем какое-то действие прямо тут, либо поднимаем флажок
		HAL_TIM_Base_Start_IT(&htim1); // запускаем таймер
 80006d4:	4803      	ldr	r0, [pc, #12]	; (80006e4 <HAL_GPIO_EXTI_Callback+0x28>)
 80006d6:	f002 f9e9 	bl	8002aac <HAL_TIM_Base_Start_IT>
	}
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200004ac 	.word	0x200004ac

080006e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	4b35      	ldr	r3, [pc, #212]	; (80007d8 <MX_GPIO_Init+0xf0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a34      	ldr	r2, [pc, #208]	; (80007d8 <MX_GPIO_Init+0xf0>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <MX_GPIO_Init+0xf0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	4b2e      	ldr	r3, [pc, #184]	; (80007d8 <MX_GPIO_Init+0xf0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a2d      	ldr	r2, [pc, #180]	; (80007d8 <MX_GPIO_Init+0xf0>)
 8000724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b2b      	ldr	r3, [pc, #172]	; (80007d8 <MX_GPIO_Init+0xf0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <MX_GPIO_Init+0xf0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a26      	ldr	r2, [pc, #152]	; (80007d8 <MX_GPIO_Init+0xf0>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <MX_GPIO_Init+0xf0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <MX_GPIO_Init+0xf0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a1f      	ldr	r2, [pc, #124]	; (80007d8 <MX_GPIO_Init+0xf0>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <MX_GPIO_Init+0xf0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <MX_GPIO_Init+0xf0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a18      	ldr	r2, [pc, #96]	; (80007d8 <MX_GPIO_Init+0xf0>)
 8000778:	f043 0308 	orr.w	r3, r3, #8
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <MX_GPIO_Init+0xf0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0308 	and.w	r3, r3, #8
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_EXTI_Pin;
 800078a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000790:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000796:	2302      	movs	r3, #2
 8000798:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	480e      	ldr	r0, [pc, #56]	; (80007dc <MX_GPIO_Init+0xf4>)
 80007a2:	f001 faaf 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80007a6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007b0:	2302      	movs	r3, #2
 80007b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	4619      	mov	r1, r3
 80007ba:	4809      	ldr	r0, [pc, #36]	; (80007e0 <MX_GPIO_Init+0xf8>)
 80007bc:	f001 faa2 	bl	8001d04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2100      	movs	r1, #0
 80007c4:	2028      	movs	r0, #40	; 0x28
 80007c6:	f000 fedc 	bl	8001582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007ca:	2028      	movs	r0, #40	; 0x28
 80007cc:	f000 fef5 	bl	80015ba <HAL_NVIC_EnableIRQ>

}
 80007d0:	bf00      	nop
 80007d2:	3728      	adds	r7, #40	; 0x28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020800 	.word	0x40020800
 80007e0:	40020400 	.word	0x40020400

080007e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e8:	f000 fd36 	bl	8001258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ec:	f000 f8b8 	bl	8000960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f0:	f7ff ff7a 	bl	80006e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80007f4:	f7ff fed6 	bl	80005a4 <MX_DMA_Init>
  MX_TIM1_Init();
 80007f8:	f000 fa6a 	bl	8000cd0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007fc:	f000 faba 	bl	8000d74 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000800:	f000 fbb4 	bl	8000f6c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

	setvbuf(stdin, NULL, _IONBF, 0); // определение нулевого буфера
 8000804:	4b45      	ldr	r3, [pc, #276]	; (800091c <main+0x138>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	6858      	ldr	r0, [r3, #4]
 800080a:	2300      	movs	r3, #0
 800080c:	2202      	movs	r2, #2
 800080e:	2100      	movs	r1, #0
 8000810:	f004 fb40 	bl	8004e94 <setvbuf>

	HAL_UART_Receive_IT(&huart3, &value, 1); //запу�?каем UART по прерыванию
 8000814:	2201      	movs	r2, #1
 8000816:	4942      	ldr	r1, [pc, #264]	; (8000920 <main+0x13c>)
 8000818:	4842      	ldr	r0, [pc, #264]	; (8000924 <main+0x140>)
 800081a:	f003 fae2 	bl	8003de2 <HAL_UART_Receive_IT>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800081e:	2100      	movs	r1, #0
 8000820:	4841      	ldr	r0, [pc, #260]	; (8000928 <main+0x144>)
 8000822:	f002 fa3b 	bl	8002c9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000826:	2104      	movs	r1, #4
 8000828:	483f      	ldr	r0, [pc, #252]	; (8000928 <main+0x144>)
 800082a:	f002 fa37 	bl	8002c9c <HAL_TIM_PWM_Start>

	printf("PRINT BRIGHTNESS FOR LED In range from 0 to 100->>>>!\r\n");
 800082e:	483f      	ldr	r0, [pc, #252]	; (800092c <main+0x148>)
 8000830:	f004 fb28 	bl	8004e84 <puts>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (flag == 1)
 8000834:	4b3e      	ldr	r3, [pc, #248]	; (8000930 <main+0x14c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b01      	cmp	r3, #1
 800083c:	d121      	bne.n	8000882 <main+0x9e>
		{
			sscanf(&buff[0], "%d", &str[0]);
 800083e:	4a3d      	ldr	r2, [pc, #244]	; (8000934 <main+0x150>)
 8000840:	493d      	ldr	r1, [pc, #244]	; (8000938 <main+0x154>)
 8000842:	483e      	ldr	r0, [pc, #248]	; (800093c <main+0x158>)
 8000844:	f004 fbec 	bl	8005020 <siscanf>
			if ((str[0] > 100) || (str[0] < 0))
 8000848:	4b3a      	ldr	r3, [pc, #232]	; (8000934 <main+0x150>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b64      	cmp	r3, #100	; 0x64
 800084e:	dc03      	bgt.n	8000858 <main+0x74>
 8000850:	4b38      	ldr	r3, [pc, #224]	; (8000934 <main+0x150>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	da03      	bge.n	8000860 <main+0x7c>
			{
				printf("Error. Please enter correct value!\r\n");
 8000858:	4839      	ldr	r0, [pc, #228]	; (8000940 <main+0x15c>)
 800085a:	f004 fb13 	bl	8004e84 <puts>
 800085e:	e00d      	b.n	800087c <main+0x98>
			}
			else
			{
				active_brightness = str[0];
 8000860:	4b34      	ldr	r3, [pc, #208]	; (8000934 <main+0x150>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4b37      	ldr	r3, [pc, #220]	; (8000944 <main+0x160>)
 8000868:	701a      	strb	r2, [r3, #0]
				printf("You enter %d value\r\n", active_brightness);
 800086a:	4b36      	ldr	r3, [pc, #216]	; (8000944 <main+0x160>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	4619      	mov	r1, r3
 8000870:	4835      	ldr	r0, [pc, #212]	; (8000948 <main+0x164>)
 8000872:	f004 fa81 	bl	8004d78 <iprintf>
				printf(
 8000876:	482d      	ldr	r0, [pc, #180]	; (800092c <main+0x148>)
 8000878:	f004 fb04 	bl	8004e84 <puts>
						"PRINT BRIGHTNESS FOR LED In range from 0 to 100->>>>!\r\n");
			}
			flag = 0;
 800087c:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <main+0x14c>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
		}

		btn_cur = HAL_GPIO_ReadPin(BUTTON_EXTI_GPIO_Port, BUTTON_EXTI_Pin);
 8000882:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000886:	4831      	ldr	r0, [pc, #196]	; (800094c <main+0x168>)
 8000888:	f001 fbe8 	bl	800205c <HAL_GPIO_ReadPin>
 800088c:	4603      	mov	r3, r0
 800088e:	461a      	mov	r2, r3
 8000890:	4b2f      	ldr	r3, [pc, #188]	; (8000950 <main+0x16c>)
 8000892:	701a      	strb	r2, [r3, #0]
		switch (count)
 8000894:	4b2f      	ldr	r3, [pc, #188]	; (8000954 <main+0x170>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b03      	cmp	r3, #3
 800089a:	d837      	bhi.n	800090c <main+0x128>
 800089c:	a201      	add	r2, pc, #4	; (adr r2, 80008a4 <main+0xc0>)
 800089e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a2:	bf00      	nop
 80008a4:	080008b5 	.word	0x080008b5
 80008a8:	080008cb 	.word	0x080008cb
 80008ac:	080008e1 	.word	0x080008e1
 80008b0:	080008f7 	.word	0x080008f7
		{
		case 0:
		{
			TIM2->CCR1 = off_brightness;
 80008b4:	4b28      	ldr	r3, [pc, #160]	; (8000958 <main+0x174>)
 80008b6:	781a      	ldrb	r2, [r3, #0]
 80008b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008bc:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = off_brightness;
 80008be:	4b26      	ldr	r3, [pc, #152]	; (8000958 <main+0x174>)
 80008c0:	781a      	ldrb	r2, [r3, #0]
 80008c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008c6:	639a      	str	r2, [r3, #56]	; 0x38
		}
			break;
 80008c8:	e020      	b.n	800090c <main+0x128>
		case 1:
		{
			TIM2->CCR1 = active_brightness;
 80008ca:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <main+0x160>)
 80008cc:	781a      	ldrb	r2, [r3, #0]
 80008ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008d2:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = off_brightness;
 80008d4:	4b20      	ldr	r3, [pc, #128]	; (8000958 <main+0x174>)
 80008d6:	781a      	ldrb	r2, [r3, #0]
 80008d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008dc:	639a      	str	r2, [r3, #56]	; 0x38

		}
			break;
 80008de:	e015      	b.n	800090c <main+0x128>
		case 2:
		{
			TIM2->CCR1 = off_brightness;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <main+0x174>)
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008e8:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = active_brightness;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <main+0x160>)
 80008ec:	781a      	ldrb	r2, [r3, #0]
 80008ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008f2:	639a      	str	r2, [r3, #56]	; 0x38
		}
			break;
 80008f4:	e00a      	b.n	800090c <main+0x128>
		case 3:
		{
			TIM2->CCR1 = active_brightness;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <main+0x160>)
 80008f8:	781a      	ldrb	r2, [r3, #0]
 80008fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008fe:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = active_brightness;
 8000900:	4b10      	ldr	r3, [pc, #64]	; (8000944 <main+0x160>)
 8000902:	781a      	ldrb	r2, [r3, #0]
 8000904:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000908:	639a      	str	r2, [r3, #56]	; 0x38
		}
			break;
 800090a:	bf00      	nop
		}
		HAL_Delay(5);
 800090c:	2005      	movs	r0, #5
 800090e:	f000 fd15 	bl	800133c <HAL_Delay>
		btn_prev = btn_cur;
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <main+0x16c>)
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <main+0x178>)
 8000918:	701a      	strb	r2, [r3, #0]
		if (flag == 1)
 800091a:	e78b      	b.n	8000834 <main+0x50>
 800091c:	20000010 	.word	0x20000010
 8000920:	200000a8 	.word	0x200000a8
 8000924:	2000053c 	.word	0x2000053c
 8000928:	200004f4 	.word	0x200004f4
 800092c:	08006938 	.word	0x08006938
 8000930:	200000a9 	.word	0x200000a9
 8000934:	200000ac 	.word	0x200000ac
 8000938:	08006970 	.word	0x08006970
 800093c:	20000098 	.word	0x20000098
 8000940:	08006974 	.word	0x08006974
 8000944:	20000000 	.word	0x20000000
 8000948:	08006998 	.word	0x08006998
 800094c:	40020800 	.word	0x40020800
 8000950:	20000091 	.word	0x20000091
 8000954:	20000090 	.word	0x20000090
 8000958:	20000093 	.word	0x20000093
 800095c:	20000092 	.word	0x20000092

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b094      	sub	sp, #80	; 0x50
 8000964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000966:	f107 0320 	add.w	r3, r7, #32
 800096a:	2230      	movs	r2, #48	; 0x30
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f004 f9fa 	bl	8004d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <SystemClock_Config+0xd8>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	4a2a      	ldr	r2, [pc, #168]	; (8000a38 <SystemClock_Config+0xd8>)
 800098e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000992:	6413      	str	r3, [r2, #64]	; 0x40
 8000994:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <SystemClock_Config+0xd8>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <SystemClock_Config+0xdc>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a24      	ldr	r2, [pc, #144]	; (8000a3c <SystemClock_Config+0xdc>)
 80009aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ae:	6013      	str	r3, [r2, #0]
 80009b0:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <SystemClock_Config+0xdc>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009bc:	2302      	movs	r3, #2
 80009be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c0:	2301      	movs	r3, #1
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c4:	2310      	movs	r3, #16
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c8:	2302      	movs	r3, #2
 80009ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009cc:	2300      	movs	r3, #0
 80009ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009d0:	2308      	movs	r3, #8
 80009d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009d4:	23b4      	movs	r3, #180	; 0xb4
 80009d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d8:	2302      	movs	r3, #2
 80009da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009dc:	2304      	movs	r3, #4
 80009de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e0:	f107 0320 	add.w	r3, r7, #32
 80009e4:	4618      	mov	r0, r3
 80009e6:	f001 fbb9 	bl	800215c <HAL_RCC_OscConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009f0:	f000 f826 	bl	8000a40 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009f4:	f001 fb62 	bl	80020bc <HAL_PWREx_EnableOverDrive>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80009fe:	f000 f81f 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a02:	230f      	movs	r3, #15
 8000a04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a06:	2302      	movs	r3, #2
 8000a08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	2105      	movs	r1, #5
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 fe13 	bl	800264c <HAL_RCC_ClockConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a2c:	f000 f808 	bl	8000a40 <Error_Handler>
  }
}
 8000a30:	bf00      	nop
 8000a32:	3750      	adds	r7, #80	; 0x50
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40007000 	.word	0x40007000

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a44:	b672      	cpsid	i
}
 8000a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a48:	e7fe      	b.n	8000a48 <Error_Handler+0x8>
	...

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	4a0f      	ldr	r2, [pc, #60]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a60:	6453      	str	r3, [r2, #68]	; 0x44
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <MemManage_Handler+0x4>

08000aae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae8:	f000 fc08 	bl	80012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <DMA1_Stream1_IRQHandler+0x10>)
 8000af6:	f000 fec9 	bl	800188c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200005e0 	.word	0x200005e0

08000b04 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <DMA1_Stream3_IRQHandler+0x10>)
 8000b0a:	f000 febf 	bl	800188c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000580 	.word	0x20000580

08000b18 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b1e:	f002 f985 	bl	8002e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200004ac 	.word	0x200004ac

08000b2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <TIM2_IRQHandler+0x10>)
 8000b32:	f002 f97b 	bl	8002e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200004f4 	.word	0x200004f4

08000b40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <USART3_IRQHandler+0x10>)
 8000b46:	f003 f97d 	bl	8003e44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	2000053c 	.word	0x2000053c

08000b54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI_Pin);
 8000b58:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b5c:	f001 fa96 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	e00a      	b.n	8000b8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b76:	f000 faeb 	bl	8001150 <__io_getchar>
 8000b7a:	4601      	mov	r1, r0
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	60ba      	str	r2, [r7, #8]
 8000b82:	b2ca      	uxtb	r2, r1
 8000b84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dbf0      	blt.n	8000b76 <_read+0x12>
	}

return len;
 8000b94:	687b      	ldr	r3, [r7, #4]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	60f8      	str	r0, [r7, #12]
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	e009      	b.n	8000bc4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	1c5a      	adds	r2, r3, #1
 8000bb4:	60ba      	str	r2, [r7, #8]
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 fab7 	bl	800112c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	dbf1      	blt.n	8000bb0 <_write+0x12>
	}
	return len;
 8000bcc:	687b      	ldr	r3, [r7, #4]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <_close>:

int _close(int file)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
	return -1;
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
 8000bf6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bfe:	605a      	str	r2, [r3, #4]
	return 0;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <_isatty>:

int _isatty(int file)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
	return 1;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
	...

08000c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c48:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <_sbrk+0x5c>)
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <_sbrk+0x60>)
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d102      	bne.n	8000c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <_sbrk+0x64>)
 8000c5e:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <_sbrk+0x68>)
 8000c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d207      	bcs.n	8000c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c70:	f004 f850 	bl	8004d14 <__errno>
 8000c74:	4603      	mov	r3, r0
 8000c76:	220c      	movs	r2, #12
 8000c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	e009      	b.n	8000c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <_sbrk+0x64>)
 8000c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20030000 	.word	0x20030000
 8000ca0:	00000400 	.word	0x00000400
 8000ca4:	200004a8 	.word	0x200004a8
 8000ca8:	20000658 	.word	0x20000658

08000cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <SystemInit+0x20>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <SystemInit+0x20>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cec:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <MX_TIM1_Init+0x9c>)
 8000cee:	4a20      	ldr	r2, [pc, #128]	; (8000d70 <MX_TIM1_Init+0xa0>)
 8000cf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 900-1;
 8000cf2:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <MX_TIM1_Init+0x9c>)
 8000cf4:	f240 3283 	movw	r2, #899	; 0x383
 8000cf8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <MX_TIM1_Init+0x9c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000d00:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <MX_TIM1_Init+0x9c>)
 8000d02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <MX_TIM1_Init+0x9c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <MX_TIM1_Init+0x9c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <MX_TIM1_Init+0x9c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d1a:	4814      	ldr	r0, [pc, #80]	; (8000d6c <MX_TIM1_Init+0x9c>)
 8000d1c:	f001 fe76 	bl	8002a0c <HAL_TIM_Base_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d26:	f7ff fe8b 	bl	8000a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d30:	f107 0308 	add.w	r3, r7, #8
 8000d34:	4619      	mov	r1, r3
 8000d36:	480d      	ldr	r0, [pc, #52]	; (8000d6c <MX_TIM1_Init+0x9c>)
 8000d38:	f002 fa42 	bl	80031c0 <HAL_TIM_ConfigClockSource>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d42:	f7ff fe7d 	bl	8000a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d46:	2300      	movs	r3, #0
 8000d48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d4e:	463b      	mov	r3, r7
 8000d50:	4619      	mov	r1, r3
 8000d52:	4806      	ldr	r0, [pc, #24]	; (8000d6c <MX_TIM1_Init+0x9c>)
 8000d54:	f002 fe34 	bl	80039c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000d5e:	f7ff fe6f 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200004ac 	.word	0x200004ac
 8000d70:	40010000 	.word	0x40010000

08000d74 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08e      	sub	sp, #56	; 0x38
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d88:	f107 0320 	add.w	r3, r7, #32
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
 8000da0:	615a      	str	r2, [r3, #20]
 8000da2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000da4:	4b32      	ldr	r3, [pc, #200]	; (8000e70 <MX_TIM2_Init+0xfc>)
 8000da6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000daa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 18000-1;
 8000dac:	4b30      	ldr	r3, [pc, #192]	; (8000e70 <MX_TIM2_Init+0xfc>)
 8000dae:	f244 624f 	movw	r2, #17999	; 0x464f
 8000db2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db4:	4b2e      	ldr	r3, [pc, #184]	; (8000e70 <MX_TIM2_Init+0xfc>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000dba:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <MX_TIM2_Init+0xfc>)
 8000dbc:	2263      	movs	r2, #99	; 0x63
 8000dbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc0:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <MX_TIM2_Init+0xfc>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <MX_TIM2_Init+0xfc>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dcc:	4828      	ldr	r0, [pc, #160]	; (8000e70 <MX_TIM2_Init+0xfc>)
 8000dce:	f001 fe1d 	bl	8002a0c <HAL_TIM_Base_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000dd8:	f7ff fe32 	bl	8000a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000de2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de6:	4619      	mov	r1, r3
 8000de8:	4821      	ldr	r0, [pc, #132]	; (8000e70 <MX_TIM2_Init+0xfc>)
 8000dea:	f002 f9e9 	bl	80031c0 <HAL_TIM_ConfigClockSource>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000df4:	f7ff fe24 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000df8:	481d      	ldr	r0, [pc, #116]	; (8000e70 <MX_TIM2_Init+0xfc>)
 8000dfa:	f001 fef6 	bl	8002bea <HAL_TIM_PWM_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000e04:	f7ff fe1c 	bl	8000a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e10:	f107 0320 	add.w	r3, r7, #32
 8000e14:	4619      	mov	r1, r3
 8000e16:	4816      	ldr	r0, [pc, #88]	; (8000e70 <MX_TIM2_Init+0xfc>)
 8000e18:	f002 fdd2 	bl	80039c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000e22:	f7ff fe0d 	bl	8000a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e26:	2360      	movs	r3, #96	; 0x60
 8000e28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <MX_TIM2_Init+0xfc>)
 8000e3e:	f002 f8fd 	bl	800303c <HAL_TIM_PWM_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000e48:	f7ff fdfa 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2204      	movs	r2, #4
 8000e50:	4619      	mov	r1, r3
 8000e52:	4807      	ldr	r0, [pc, #28]	; (8000e70 <MX_TIM2_Init+0xfc>)
 8000e54:	f002 f8f2 	bl	800303c <HAL_TIM_PWM_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000e5e:	f7ff fdef 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e62:	4803      	ldr	r0, [pc, #12]	; (8000e70 <MX_TIM2_Init+0xfc>)
 8000e64:	f000 f84a 	bl	8000efc <HAL_TIM_MspPostInit>

}
 8000e68:	bf00      	nop
 8000e6a:	3738      	adds	r7, #56	; 0x38
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200004f4 	.word	0x200004f4

08000e74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <HAL_TIM_Base_MspInit+0x80>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d116      	bne.n	8000eb4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <HAL_TIM_Base_MspInit+0x84>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a1a      	ldr	r2, [pc, #104]	; (8000ef8 <HAL_TIM_Base_MspInit+0x84>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <HAL_TIM_Base_MspInit+0x84>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2019      	movs	r0, #25
 8000ea8:	f000 fb6b 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000eac:	2019      	movs	r0, #25
 8000eae:	f000 fb84 	bl	80015ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000eb2:	e01a      	b.n	8000eea <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM2)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ebc:	d115      	bne.n	8000eea <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <HAL_TIM_Base_MspInit+0x84>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	4a0c      	ldr	r2, [pc, #48]	; (8000ef8 <HAL_TIM_Base_MspInit+0x84>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_TIM_Base_MspInit+0x84>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	201c      	movs	r0, #28
 8000ee0:	f000 fb4f 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ee4:	201c      	movs	r0, #28
 8000ee6:	f000 fb68 	bl	80015ba <HAL_NVIC_EnableIRQ>
}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40010000 	.word	0x40010000
 8000ef8:	40023800 	.word	0x40023800

08000efc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f1c:	d11d      	bne.n	8000f5a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <HAL_TIM_MspPostInit+0x68>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a0f      	ldr	r2, [pc, #60]	; (8000f64 <HAL_TIM_MspPostInit+0x68>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <HAL_TIM_MspPostInit+0x68>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	4619      	mov	r1, r3
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <HAL_TIM_MspPostInit+0x6c>)
 8000f56:	f000 fed5 	bl	8001d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3720      	adds	r7, #32
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020000 	.word	0x40020000

08000f6c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_USART3_UART_Init+0x4c>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <MX_USART3_UART_Init+0x50>)
 8000f74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <MX_USART3_UART_Init+0x4c>)
 8000f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_USART3_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_USART3_UART_Init+0x4c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <MX_USART3_UART_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_USART3_UART_Init+0x4c>)
 8000f92:	220c      	movs	r2, #12
 8000f94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <MX_USART3_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_USART3_UART_Init+0x4c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_USART3_UART_Init+0x4c>)
 8000fa4:	f002 fd9c 	bl	8003ae0 <HAL_UART_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fae:	f7ff fd47 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000053c 	.word	0x2000053c
 8000fbc:	40004800 	.word	0x40004800

08000fc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a4c      	ldr	r2, [pc, #304]	; (8001110 <HAL_UART_MspInit+0x150>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	f040 8091 	bne.w	8001106 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	4b4a      	ldr	r3, [pc, #296]	; (8001114 <HAL_UART_MspInit+0x154>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	4a49      	ldr	r2, [pc, #292]	; (8001114 <HAL_UART_MspInit+0x154>)
 8000fee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff4:	4b47      	ldr	r3, [pc, #284]	; (8001114 <HAL_UART_MspInit+0x154>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	4b43      	ldr	r3, [pc, #268]	; (8001114 <HAL_UART_MspInit+0x154>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001008:	4a42      	ldr	r2, [pc, #264]	; (8001114 <HAL_UART_MspInit+0x154>)
 800100a:	f043 0308 	orr.w	r3, r3, #8
 800100e:	6313      	str	r3, [r2, #48]	; 0x30
 8001010:	4b40      	ldr	r3, [pc, #256]	; (8001114 <HAL_UART_MspInit+0x154>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	f003 0308 	and.w	r3, r3, #8
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800101c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102a:	2303      	movs	r3, #3
 800102c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800102e:	2307      	movs	r3, #7
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	4837      	ldr	r0, [pc, #220]	; (8001118 <HAL_UART_MspInit+0x158>)
 800103a:	f000 fe63 	bl	8001d04 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800103e:	4b37      	ldr	r3, [pc, #220]	; (800111c <HAL_UART_MspInit+0x15c>)
 8001040:	4a37      	ldr	r2, [pc, #220]	; (8001120 <HAL_UART_MspInit+0x160>)
 8001042:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001044:	4b35      	ldr	r3, [pc, #212]	; (800111c <HAL_UART_MspInit+0x15c>)
 8001046:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800104a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800104c:	4b33      	ldr	r3, [pc, #204]	; (800111c <HAL_UART_MspInit+0x15c>)
 800104e:	2240      	movs	r2, #64	; 0x40
 8001050:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001052:	4b32      	ldr	r3, [pc, #200]	; (800111c <HAL_UART_MspInit+0x15c>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001058:	4b30      	ldr	r3, [pc, #192]	; (800111c <HAL_UART_MspInit+0x15c>)
 800105a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800105e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001060:	4b2e      	ldr	r3, [pc, #184]	; (800111c <HAL_UART_MspInit+0x15c>)
 8001062:	2200      	movs	r2, #0
 8001064:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001066:	4b2d      	ldr	r3, [pc, #180]	; (800111c <HAL_UART_MspInit+0x15c>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800106c:	4b2b      	ldr	r3, [pc, #172]	; (800111c <HAL_UART_MspInit+0x15c>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001072:	4b2a      	ldr	r3, [pc, #168]	; (800111c <HAL_UART_MspInit+0x15c>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001078:	4b28      	ldr	r3, [pc, #160]	; (800111c <HAL_UART_MspInit+0x15c>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800107e:	4827      	ldr	r0, [pc, #156]	; (800111c <HAL_UART_MspInit+0x15c>)
 8001080:	f000 fac4 	bl	800160c <HAL_DMA_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800108a:	f7ff fcd9 	bl	8000a40 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a22      	ldr	r2, [pc, #136]	; (800111c <HAL_UART_MspInit+0x15c>)
 8001092:	635a      	str	r2, [r3, #52]	; 0x34
 8001094:	4a21      	ldr	r2, [pc, #132]	; (800111c <HAL_UART_MspInit+0x15c>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800109a:	4b22      	ldr	r3, [pc, #136]	; (8001124 <HAL_UART_MspInit+0x164>)
 800109c:	4a22      	ldr	r2, [pc, #136]	; (8001128 <HAL_UART_MspInit+0x168>)
 800109e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80010a0:	4b20      	ldr	r3, [pc, #128]	; (8001124 <HAL_UART_MspInit+0x164>)
 80010a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010a6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010a8:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <HAL_UART_MspInit+0x164>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <HAL_UART_MspInit+0x164>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <HAL_UART_MspInit+0x164>)
 80010b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ba:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010bc:	4b19      	ldr	r3, [pc, #100]	; (8001124 <HAL_UART_MspInit+0x164>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <HAL_UART_MspInit+0x164>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80010c8:	4b16      	ldr	r3, [pc, #88]	; (8001124 <HAL_UART_MspInit+0x164>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_UART_MspInit+0x164>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <HAL_UART_MspInit+0x164>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80010da:	4812      	ldr	r0, [pc, #72]	; (8001124 <HAL_UART_MspInit+0x164>)
 80010dc:	f000 fa96 	bl	800160c <HAL_DMA_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80010e6:	f7ff fcab 	bl	8000a40 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <HAL_UART_MspInit+0x164>)
 80010ee:	639a      	str	r2, [r3, #56]	; 0x38
 80010f0:	4a0c      	ldr	r2, [pc, #48]	; (8001124 <HAL_UART_MspInit+0x164>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	2027      	movs	r0, #39	; 0x27
 80010fc:	f000 fa41 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001100:	2027      	movs	r0, #39	; 0x27
 8001102:	f000 fa5a 	bl	80015ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001106:	bf00      	nop
 8001108:	3728      	adds	r7, #40	; 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40004800 	.word	0x40004800
 8001114:	40023800 	.word	0x40023800
 8001118:	40020c00 	.word	0x40020c00
 800111c:	20000580 	.word	0x20000580
 8001120:	40026058 	.word	0x40026058
 8001124:	200005e0 	.word	0x200005e0
 8001128:	40026028 	.word	0x40026028

0800112c <__io_putchar>:
extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_tx;
extern DMA_HandleTypeDef hdma_usart3_rx;

int __io_putchar(int ch)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001134:	1d39      	adds	r1, r7, #4
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	2201      	movs	r2, #1
 800113c:	4803      	ldr	r0, [pc, #12]	; (800114c <__io_putchar+0x20>)
 800113e:	f002 fd1c 	bl	8003b7a <HAL_UART_Transmit>
	return 0;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000053c 	.word	0x2000053c

08001150 <__io_getchar>:
//Receive one char in blocking mode
int __io_getchar(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
	uint8_t result;
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8001156:	2300      	movs	r3, #0
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <__io_getchar+0x40>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	603b      	str	r3, [r7, #0]
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <__io_getchar+0x40>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	683b      	ldr	r3, [r7, #0]
	HAL_UART_Receive(&huart3, &result, 1, HAL_MAX_DELAY);
 800116c:	1df9      	adds	r1, r7, #7
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	2201      	movs	r2, #1
 8001174:	4806      	ldr	r0, [pc, #24]	; (8001190 <__io_getchar+0x40>)
 8001176:	f002 fd92 	bl	8003c9e <HAL_UART_Receive>
	if (result == '\r')
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	2b0d      	cmp	r3, #13
 800117e:	d101      	bne.n	8001184 <__io_getchar+0x34>
		result = '\n'; // Dirty hack. Replace "return" character with "new line" character
 8001180:	230a      	movs	r3, #10
 8001182:	71fb      	strb	r3, [r7, #7]
	return (int) result;
 8001184:	79fb      	ldrb	r3, [r7, #7]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2000053c 	.word	0x2000053c

08001194 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <HAL_UART_RxCpltCallback+0x5c>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d120      	bne.n	80011e6 <HAL_UART_RxCpltCallback+0x52>
	{
		HAL_UART_Receive_IT(&huart3, &value, 1);
 80011a4:	2201      	movs	r2, #1
 80011a6:	4913      	ldr	r1, [pc, #76]	; (80011f4 <HAL_UART_RxCpltCallback+0x60>)
 80011a8:	4811      	ldr	r0, [pc, #68]	; (80011f0 <HAL_UART_RxCpltCallback+0x5c>)
 80011aa:	f002 fe1a 	bl	8003de2 <HAL_UART_Receive_IT>
		//	sscanf(value,"%d",&buff[counter]);
		buff[counter] = value;
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_UART_RxCpltCallback+0x64>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <HAL_UART_RxCpltCallback+0x60>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b2d9      	uxtb	r1, r3
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_UART_RxCpltCallback+0x68>)
 80011be:	5499      	strb	r1, [r3, r2]

		if (value == '\r')
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <HAL_UART_RxCpltCallback+0x60>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b0d      	cmp	r3, #13
 80011c8:	d106      	bne.n	80011d8 <HAL_UART_RxCpltCallback+0x44>
		{
			counter = 0;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <HAL_UART_RxCpltCallback+0x64>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
			flag = 1;
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_UART_RxCpltCallback+0x6c>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
		}
		else
			counter++;
	}
}
 80011d6:	e006      	b.n	80011e6 <HAL_UART_RxCpltCallback+0x52>
			counter++;
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <HAL_UART_RxCpltCallback+0x64>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <HAL_UART_RxCpltCallback+0x64>)
 80011e4:	701a      	strb	r2, [r3, #0]
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000053c 	.word	0x2000053c
 80011f4:	200000a8 	.word	0x200000a8
 80011f8:	20000094 	.word	0x20000094
 80011fc:	20000098 	.word	0x20000098
 8001200:	200000a9 	.word	0x200000a9

08001204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800123c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800120a:	490e      	ldr	r1, [pc, #56]	; (8001244 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800120c:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001210:	e002      	b.n	8001218 <LoopCopyDataInit>

08001212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001216:	3304      	adds	r3, #4

08001218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800121c:	d3f9      	bcc.n	8001212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001220:	4c0b      	ldr	r4, [pc, #44]	; (8001250 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001224:	e001      	b.n	800122a <LoopFillZerobss>

08001226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001228:	3204      	adds	r2, #4

0800122a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800122c:	d3fb      	bcc.n	8001226 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800122e:	f7ff fd3d 	bl	8000cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001232:	f003 fd75 	bl	8004d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001236:	f7ff fad5 	bl	80007e4 <main>
  bx  lr    
 800123a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800123c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001244:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001248:	08006ba0 	.word	0x08006ba0
  ldr r2, =_sbss
 800124c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001250:	20000654 	.word	0x20000654

08001254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001254:	e7fe      	b.n	8001254 <ADC_IRQHandler>
	...

08001258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_Init+0x40>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <HAL_Init+0x40>)
 8001262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001266:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_Init+0x40>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <HAL_Init+0x40>)
 800126e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001272:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_Init+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a07      	ldr	r2, [pc, #28]	; (8001298 <HAL_Init+0x40>)
 800127a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001280:	2003      	movs	r0, #3
 8001282:	f000 f973 	bl	800156c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001286:	200f      	movs	r0, #15
 8001288:	f000 f808 	bl	800129c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800128c:	f7ff fbde 	bl	8000a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023c00 	.word	0x40023c00

0800129c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_InitTick+0x54>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_InitTick+0x58>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f999 	bl	80015f2 <HAL_SYSTICK_Config>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00e      	b.n	80012e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b0f      	cmp	r3, #15
 80012ce:	d80a      	bhi.n	80012e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d0:	2200      	movs	r2, #0
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f000 f953 	bl	8001582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012dc:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <HAL_InitTick+0x5c>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e000      	b.n	80012e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000004 	.word	0x20000004
 80012f4:	2000000c 	.word	0x2000000c
 80012f8:	20000008 	.word	0x20000008

080012fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x20>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x24>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <HAL_IncTick+0x24>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	2000000c 	.word	0x2000000c
 8001320:	20000640 	.word	0x20000640

08001324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <HAL_GetTick+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000640 	.word	0x20000640

0800133c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001344:	f7ff ffee 	bl	8001324 <HAL_GetTick>
 8001348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001354:	d005      	beq.n	8001362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <HAL_Delay+0x44>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001362:	bf00      	nop
 8001364:	f7ff ffde 	bl	8001324 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	429a      	cmp	r2, r3
 8001372:	d8f7      	bhi.n	8001364 <HAL_Delay+0x28>
  {
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2000000c 	.word	0x2000000c

08001384 <__NVIC_SetPriorityGrouping>:
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a0:	4013      	ands	r3, r2
 80013a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b6:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	60d3      	str	r3, [r2, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_GetPriorityGrouping>:
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <__NVIC_GetPriorityGrouping+0x18>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	f003 0307 	and.w	r3, r3, #7
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_EnableIRQ>:
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	db0b      	blt.n	8001412 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	f003 021f 	and.w	r2, r3, #31
 8001400:	4907      	ldr	r1, [pc, #28]	; (8001420 <__NVIC_EnableIRQ+0x38>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	095b      	lsrs	r3, r3, #5
 8001408:	2001      	movs	r0, #1
 800140a:	fa00 f202 	lsl.w	r2, r0, r2
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000e100 	.word	0xe000e100

08001424 <__NVIC_DisableIRQ>:
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	db12      	blt.n	800145c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	f003 021f 	and.w	r2, r3, #31
 800143c:	490a      	ldr	r1, [pc, #40]	; (8001468 <__NVIC_DisableIRQ+0x44>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	095b      	lsrs	r3, r3, #5
 8001444:	2001      	movs	r0, #1
 8001446:	fa00 f202 	lsl.w	r2, r0, r2
 800144a:	3320      	adds	r3, #32
 800144c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001450:	f3bf 8f4f 	dsb	sy
}
 8001454:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001456:	f3bf 8f6f 	isb	sy
}
 800145a:	bf00      	nop
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000e100 	.word	0xe000e100

0800146c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	db0a      	blt.n	8001496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	490c      	ldr	r1, [pc, #48]	; (80014b8 <__NVIC_SetPriority+0x4c>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	440b      	add	r3, r1
 8001490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001494:	e00a      	b.n	80014ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4908      	ldr	r1, [pc, #32]	; (80014bc <__NVIC_SetPriority+0x50>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	3b04      	subs	r3, #4
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	440b      	add	r3, r1
 80014aa:	761a      	strb	r2, [r3, #24]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f1c3 0307 	rsb	r3, r3, #7
 80014da:	2b04      	cmp	r3, #4
 80014dc:	bf28      	it	cs
 80014de:	2304      	movcs	r3, #4
 80014e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3304      	adds	r3, #4
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d902      	bls.n	80014f0 <NVIC_EncodePriority+0x30>
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3b03      	subs	r3, #3
 80014ee:	e000      	b.n	80014f2 <NVIC_EncodePriority+0x32>
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	401a      	ands	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001508:	f04f 31ff 	mov.w	r1, #4294967295
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43d9      	mvns	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	4313      	orrs	r3, r2
         );
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	; 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001538:	d301      	bcc.n	800153e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153a:	2301      	movs	r3, #1
 800153c:	e00f      	b.n	800155e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <SysTick_Config+0x40>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001546:	210f      	movs	r1, #15
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f7ff ff8e 	bl	800146c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <SysTick_Config+0x40>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <SysTick_Config+0x40>)
 8001558:	2207      	movs	r2, #7
 800155a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	e000e010 	.word	0xe000e010

0800156c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff05 	bl	8001384 <__NVIC_SetPriorityGrouping>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001594:	f7ff ff1a 	bl	80013cc <__NVIC_GetPriorityGrouping>
 8001598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ff8e 	bl	80014c0 <NVIC_EncodePriority>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff5d 	bl	800146c <__NVIC_SetPriority>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff0d 	bl	80013e8 <__NVIC_EnableIRQ>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff1d 	bl	8001424 <__NVIC_DisableIRQ>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ff94 	bl	8001528 <SysTick_Config>
 8001600:	4603      	mov	r3, r0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001618:	f7ff fe84 	bl	8001324 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e099      	b.n	800175c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2202      	movs	r2, #2
 800162c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0201 	bic.w	r2, r2, #1
 8001646:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001648:	e00f      	b.n	800166a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800164a:	f7ff fe6b 	bl	8001324 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b05      	cmp	r3, #5
 8001656:	d908      	bls.n	800166a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2220      	movs	r2, #32
 800165c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2203      	movs	r2, #3
 8001662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e078      	b.n	800175c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1e8      	bne.n	800164a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	4b38      	ldr	r3, [pc, #224]	; (8001764 <HAL_DMA_Init+0x158>)
 8001684:	4013      	ands	r3, r2
 8001686:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001696:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d107      	bne.n	80016d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	4313      	orrs	r3, r2
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f023 0307 	bic.w	r3, r3, #7
 80016ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	d117      	bne.n	800172e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	4313      	orrs	r3, r2
 8001706:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00e      	beq.n	800172e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 fa7b 	bl	8001c0c <DMA_CheckFifoParam>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2240      	movs	r2, #64	; 0x40
 8001720:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800172a:	2301      	movs	r3, #1
 800172c:	e016      	b.n	800175c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 fa32 	bl	8001ba0 <DMA_CalcBaseAndBitshift>
 800173c:	4603      	mov	r3, r0
 800173e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001744:	223f      	movs	r2, #63	; 0x3f
 8001746:	409a      	lsls	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	f010803f 	.word	0xf010803f

08001768 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001774:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001776:	f7ff fdd5 	bl	8001324 <HAL_GetTick>
 800177a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d008      	beq.n	800179a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2280      	movs	r2, #128	; 0x80
 800178c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e052      	b.n	8001840 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0216 	bic.w	r2, r2, #22
 80017a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	695a      	ldr	r2, [r3, #20]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d103      	bne.n	80017ca <HAL_DMA_Abort+0x62>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 0208 	bic.w	r2, r2, #8
 80017d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0201 	bic.w	r2, r2, #1
 80017e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ea:	e013      	b.n	8001814 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017ec:	f7ff fd9a 	bl	8001324 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b05      	cmp	r3, #5
 80017f8:	d90c      	bls.n	8001814 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2220      	movs	r2, #32
 80017fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2203      	movs	r2, #3
 8001804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e015      	b.n	8001840 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1e4      	bne.n	80017ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001826:	223f      	movs	r2, #63	; 0x3f
 8001828:	409a      	lsls	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d004      	beq.n	8001866 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2280      	movs	r2, #128	; 0x80
 8001860:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e00c      	b.n	8001880 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2205      	movs	r2, #5
 800186a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0201 	bic.w	r2, r2, #1
 800187c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001898:	4b8e      	ldr	r3, [pc, #568]	; (8001ad4 <HAL_DMA_IRQHandler+0x248>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a8e      	ldr	r2, [pc, #568]	; (8001ad8 <HAL_DMA_IRQHandler+0x24c>)
 800189e:	fba2 2303 	umull	r2, r3, r2, r3
 80018a2:	0a9b      	lsrs	r3, r3, #10
 80018a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b6:	2208      	movs	r2, #8
 80018b8:	409a      	lsls	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4013      	ands	r3, r2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d01a      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d013      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0204 	bic.w	r2, r2, #4
 80018de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e4:	2208      	movs	r2, #8
 80018e6:	409a      	lsls	r2, r3
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f0:	f043 0201 	orr.w	r2, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fc:	2201      	movs	r2, #1
 80018fe:	409a      	lsls	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4013      	ands	r3, r2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d012      	beq.n	800192e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00b      	beq.n	800192e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191a:	2201      	movs	r2, #1
 800191c:	409a      	lsls	r2, r3
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001926:	f043 0202 	orr.w	r2, r3, #2
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001932:	2204      	movs	r2, #4
 8001934:	409a      	lsls	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4013      	ands	r3, r2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d012      	beq.n	8001964 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00b      	beq.n	8001964 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001950:	2204      	movs	r2, #4
 8001952:	409a      	lsls	r2, r3
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195c:	f043 0204 	orr.w	r2, r3, #4
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001968:	2210      	movs	r2, #16
 800196a:	409a      	lsls	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d043      	beq.n	80019fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	2b00      	cmp	r3, #0
 8001980:	d03c      	beq.n	80019fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001986:	2210      	movs	r2, #16
 8001988:	409a      	lsls	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d018      	beq.n	80019ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d108      	bne.n	80019bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d024      	beq.n	80019fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	4798      	blx	r3
 80019ba:	e01f      	b.n	80019fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d01b      	beq.n	80019fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	4798      	blx	r3
 80019cc:	e016      	b.n	80019fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d107      	bne.n	80019ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0208 	bic.w	r2, r2, #8
 80019ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a00:	2220      	movs	r2, #32
 8001a02:	409a      	lsls	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4013      	ands	r3, r2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 808f 	beq.w	8001b2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0310 	and.w	r3, r3, #16
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 8087 	beq.w	8001b2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a22:	2220      	movs	r2, #32
 8001a24:	409a      	lsls	r2, r3
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d136      	bne.n	8001aa4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0216 	bic.w	r2, r2, #22
 8001a44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695a      	ldr	r2, [r3, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d103      	bne.n	8001a66 <HAL_DMA_IRQHandler+0x1da>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d007      	beq.n	8001a76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0208 	bic.w	r2, r2, #8
 8001a74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7a:	223f      	movs	r2, #63	; 0x3f
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d07e      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	4798      	blx	r3
        }
        return;
 8001aa2:	e079      	b.n	8001b98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d01d      	beq.n	8001aee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10d      	bne.n	8001adc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d031      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	4798      	blx	r3
 8001ad0:	e02c      	b.n	8001b2c <HAL_DMA_IRQHandler+0x2a0>
 8001ad2:	bf00      	nop
 8001ad4:	20000004 	.word	0x20000004
 8001ad8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d023      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	4798      	blx	r3
 8001aec:	e01e      	b.n	8001b2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10f      	bne.n	8001b1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0210 	bic.w	r2, r2, #16
 8001b0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d032      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d022      	beq.n	8001b86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2205      	movs	r2, #5
 8001b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0201 	bic.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d307      	bcc.n	8001b74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f2      	bne.n	8001b58 <HAL_DMA_IRQHandler+0x2cc>
 8001b72:	e000      	b.n	8001b76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d005      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	4798      	blx	r3
 8001b96:	e000      	b.n	8001b9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b98:	bf00      	nop
    }
  }
}
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	3b10      	subs	r3, #16
 8001bb0:	4a14      	ldr	r2, [pc, #80]	; (8001c04 <DMA_CalcBaseAndBitshift+0x64>)
 8001bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb6:	091b      	lsrs	r3, r3, #4
 8001bb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bba:	4a13      	ldr	r2, [pc, #76]	; (8001c08 <DMA_CalcBaseAndBitshift+0x68>)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d909      	bls.n	8001be2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bd6:	f023 0303 	bic.w	r3, r3, #3
 8001bda:	1d1a      	adds	r2, r3, #4
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	659a      	str	r2, [r3, #88]	; 0x58
 8001be0:	e007      	b.n	8001bf2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bea:	f023 0303 	bic.w	r3, r3, #3
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	aaaaaaab 	.word	0xaaaaaaab
 8001c08:	080069d4 	.word	0x080069d4

08001c0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d11f      	bne.n	8001c66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d856      	bhi.n	8001cda <DMA_CheckFifoParam+0xce>
 8001c2c:	a201      	add	r2, pc, #4	; (adr r2, 8001c34 <DMA_CheckFifoParam+0x28>)
 8001c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c32:	bf00      	nop
 8001c34:	08001c45 	.word	0x08001c45
 8001c38:	08001c57 	.word	0x08001c57
 8001c3c:	08001c45 	.word	0x08001c45
 8001c40:	08001cdb 	.word	0x08001cdb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d046      	beq.n	8001cde <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c54:	e043      	b.n	8001cde <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c5e:	d140      	bne.n	8001ce2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c64:	e03d      	b.n	8001ce2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c6e:	d121      	bne.n	8001cb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	d837      	bhi.n	8001ce6 <DMA_CheckFifoParam+0xda>
 8001c76:	a201      	add	r2, pc, #4	; (adr r2, 8001c7c <DMA_CheckFifoParam+0x70>)
 8001c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7c:	08001c8d 	.word	0x08001c8d
 8001c80:	08001c93 	.word	0x08001c93
 8001c84:	08001c8d 	.word	0x08001c8d
 8001c88:	08001ca5 	.word	0x08001ca5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8001c90:	e030      	b.n	8001cf4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d025      	beq.n	8001cea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ca2:	e022      	b.n	8001cea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cac:	d11f      	bne.n	8001cee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cb2:	e01c      	b.n	8001cee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d903      	bls.n	8001cc2 <DMA_CheckFifoParam+0xb6>
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d003      	beq.n	8001cc8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cc0:	e018      	b.n	8001cf4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	73fb      	strb	r3, [r7, #15]
      break;
 8001cc6:	e015      	b.n	8001cf4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00e      	beq.n	8001cf2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8001cd8:	e00b      	b.n	8001cf2 <DMA_CheckFifoParam+0xe6>
      break;
 8001cda:	bf00      	nop
 8001cdc:	e00a      	b.n	8001cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8001cde:	bf00      	nop
 8001ce0:	e008      	b.n	8001cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ce2:	bf00      	nop
 8001ce4:	e006      	b.n	8001cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ce6:	bf00      	nop
 8001ce8:	e004      	b.n	8001cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8001cea:	bf00      	nop
 8001cec:	e002      	b.n	8001cf4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001cee:	bf00      	nop
 8001cf0:	e000      	b.n	8001cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8001cf2:	bf00      	nop
    }
  } 
  
  return status; 
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop

08001d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	e177      	b.n	8002010 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d20:	2201      	movs	r2, #1
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	f040 8166 	bne.w	800200a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d005      	beq.n	8001d56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d130      	bne.n	8001db8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	2203      	movs	r2, #3
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	f003 0201 	and.w	r2, r3, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d017      	beq.n	8001df4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	2203      	movs	r2, #3
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d123      	bne.n	8001e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	08da      	lsrs	r2, r3, #3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3208      	adds	r2, #8
 8001e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	220f      	movs	r2, #15
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	08da      	lsrs	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3208      	adds	r2, #8
 8001e42:	69b9      	ldr	r1, [r7, #24]
 8001e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	2203      	movs	r2, #3
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0203 	and.w	r2, r3, #3
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80c0 	beq.w	800200a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4b66      	ldr	r3, [pc, #408]	; (8002028 <HAL_GPIO_Init+0x324>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	4a65      	ldr	r2, [pc, #404]	; (8002028 <HAL_GPIO_Init+0x324>)
 8001e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e98:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9a:	4b63      	ldr	r3, [pc, #396]	; (8002028 <HAL_GPIO_Init+0x324>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ea6:	4a61      	ldr	r2, [pc, #388]	; (800202c <HAL_GPIO_Init+0x328>)
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	089b      	lsrs	r3, r3, #2
 8001eac:	3302      	adds	r3, #2
 8001eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	220f      	movs	r2, #15
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a58      	ldr	r2, [pc, #352]	; (8002030 <HAL_GPIO_Init+0x32c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d037      	beq.n	8001f42 <HAL_GPIO_Init+0x23e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a57      	ldr	r2, [pc, #348]	; (8002034 <HAL_GPIO_Init+0x330>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d031      	beq.n	8001f3e <HAL_GPIO_Init+0x23a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a56      	ldr	r2, [pc, #344]	; (8002038 <HAL_GPIO_Init+0x334>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d02b      	beq.n	8001f3a <HAL_GPIO_Init+0x236>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a55      	ldr	r2, [pc, #340]	; (800203c <HAL_GPIO_Init+0x338>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d025      	beq.n	8001f36 <HAL_GPIO_Init+0x232>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a54      	ldr	r2, [pc, #336]	; (8002040 <HAL_GPIO_Init+0x33c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d01f      	beq.n	8001f32 <HAL_GPIO_Init+0x22e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a53      	ldr	r2, [pc, #332]	; (8002044 <HAL_GPIO_Init+0x340>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d019      	beq.n	8001f2e <HAL_GPIO_Init+0x22a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a52      	ldr	r2, [pc, #328]	; (8002048 <HAL_GPIO_Init+0x344>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d013      	beq.n	8001f2a <HAL_GPIO_Init+0x226>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a51      	ldr	r2, [pc, #324]	; (800204c <HAL_GPIO_Init+0x348>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00d      	beq.n	8001f26 <HAL_GPIO_Init+0x222>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a50      	ldr	r2, [pc, #320]	; (8002050 <HAL_GPIO_Init+0x34c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d007      	beq.n	8001f22 <HAL_GPIO_Init+0x21e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a4f      	ldr	r2, [pc, #316]	; (8002054 <HAL_GPIO_Init+0x350>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d101      	bne.n	8001f1e <HAL_GPIO_Init+0x21a>
 8001f1a:	2309      	movs	r3, #9
 8001f1c:	e012      	b.n	8001f44 <HAL_GPIO_Init+0x240>
 8001f1e:	230a      	movs	r3, #10
 8001f20:	e010      	b.n	8001f44 <HAL_GPIO_Init+0x240>
 8001f22:	2308      	movs	r3, #8
 8001f24:	e00e      	b.n	8001f44 <HAL_GPIO_Init+0x240>
 8001f26:	2307      	movs	r3, #7
 8001f28:	e00c      	b.n	8001f44 <HAL_GPIO_Init+0x240>
 8001f2a:	2306      	movs	r3, #6
 8001f2c:	e00a      	b.n	8001f44 <HAL_GPIO_Init+0x240>
 8001f2e:	2305      	movs	r3, #5
 8001f30:	e008      	b.n	8001f44 <HAL_GPIO_Init+0x240>
 8001f32:	2304      	movs	r3, #4
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x240>
 8001f36:	2303      	movs	r3, #3
 8001f38:	e004      	b.n	8001f44 <HAL_GPIO_Init+0x240>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e002      	b.n	8001f44 <HAL_GPIO_Init+0x240>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <HAL_GPIO_Init+0x240>
 8001f42:	2300      	movs	r3, #0
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	f002 0203 	and.w	r2, r2, #3
 8001f4a:	0092      	lsls	r2, r2, #2
 8001f4c:	4093      	lsls	r3, r2
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f54:	4935      	ldr	r1, [pc, #212]	; (800202c <HAL_GPIO_Init+0x328>)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f62:	4b3d      	ldr	r3, [pc, #244]	; (8002058 <HAL_GPIO_Init+0x354>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f86:	4a34      	ldr	r2, [pc, #208]	; (8002058 <HAL_GPIO_Init+0x354>)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f8c:	4b32      	ldr	r3, [pc, #200]	; (8002058 <HAL_GPIO_Init+0x354>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb0:	4a29      	ldr	r2, [pc, #164]	; (8002058 <HAL_GPIO_Init+0x354>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fb6:	4b28      	ldr	r3, [pc, #160]	; (8002058 <HAL_GPIO_Init+0x354>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fda:	4a1f      	ldr	r2, [pc, #124]	; (8002058 <HAL_GPIO_Init+0x354>)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fe0:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <HAL_GPIO_Init+0x354>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002004:	4a14      	ldr	r2, [pc, #80]	; (8002058 <HAL_GPIO_Init+0x354>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3301      	adds	r3, #1
 800200e:	61fb      	str	r3, [r7, #28]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	2b0f      	cmp	r3, #15
 8002014:	f67f ae84 	bls.w	8001d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3724      	adds	r7, #36	; 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40023800 	.word	0x40023800
 800202c:	40013800 	.word	0x40013800
 8002030:	40020000 	.word	0x40020000
 8002034:	40020400 	.word	0x40020400
 8002038:	40020800 	.word	0x40020800
 800203c:	40020c00 	.word	0x40020c00
 8002040:	40021000 	.word	0x40021000
 8002044:	40021400 	.word	0x40021400
 8002048:	40021800 	.word	0x40021800
 800204c:	40021c00 	.word	0x40021c00
 8002050:	40022000 	.word	0x40022000
 8002054:	40022400 	.word	0x40022400
 8002058:	40013c00 	.word	0x40013c00

0800205c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	887b      	ldrh	r3, [r7, #2]
 800206e:	4013      	ands	r3, r2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	e001      	b.n	800207e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800207a:	2300      	movs	r3, #0
 800207c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800207e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d006      	beq.n	80020b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020a4:	88fb      	ldrh	r3, [r7, #6]
 80020a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fb06 	bl	80006bc <HAL_GPIO_EXTI_Callback>
  }
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40013c00 	.word	0x40013c00

080020bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	4b20      	ldr	r3, [pc, #128]	; (800214c <HAL_PWREx_EnableOverDrive+0x90>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	4a1f      	ldr	r2, [pc, #124]	; (800214c <HAL_PWREx_EnableOverDrive+0x90>)
 80020d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d4:	6413      	str	r3, [r2, #64]	; 0x40
 80020d6:	4b1d      	ldr	r3, [pc, #116]	; (800214c <HAL_PWREx_EnableOverDrive+0x90>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020e2:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <HAL_PWREx_EnableOverDrive+0x94>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020e8:	f7ff f91c 	bl	8001324 <HAL_GetTick>
 80020ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020ee:	e009      	b.n	8002104 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020f0:	f7ff f918 	bl	8001324 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020fe:	d901      	bls.n	8002104 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e01f      	b.n	8002144 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002104:	4b13      	ldr	r3, [pc, #76]	; (8002154 <HAL_PWREx_EnableOverDrive+0x98>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002110:	d1ee      	bne.n	80020f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002114:	2201      	movs	r2, #1
 8002116:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002118:	f7ff f904 	bl	8001324 <HAL_GetTick>
 800211c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800211e:	e009      	b.n	8002134 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002120:	f7ff f900 	bl	8001324 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800212e:	d901      	bls.n	8002134 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e007      	b.n	8002144 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002134:	4b07      	ldr	r3, [pc, #28]	; (8002154 <HAL_PWREx_EnableOverDrive+0x98>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002140:	d1ee      	bne.n	8002120 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40023800 	.word	0x40023800
 8002150:	420e0040 	.word	0x420e0040
 8002154:	40007000 	.word	0x40007000
 8002158:	420e0044 	.word	0x420e0044

0800215c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e267      	b.n	800263e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d075      	beq.n	8002266 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800217a:	4b88      	ldr	r3, [pc, #544]	; (800239c <HAL_RCC_OscConfig+0x240>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	2b04      	cmp	r3, #4
 8002184:	d00c      	beq.n	80021a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002186:	4b85      	ldr	r3, [pc, #532]	; (800239c <HAL_RCC_OscConfig+0x240>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800218e:	2b08      	cmp	r3, #8
 8002190:	d112      	bne.n	80021b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002192:	4b82      	ldr	r3, [pc, #520]	; (800239c <HAL_RCC_OscConfig+0x240>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800219e:	d10b      	bne.n	80021b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a0:	4b7e      	ldr	r3, [pc, #504]	; (800239c <HAL_RCC_OscConfig+0x240>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d05b      	beq.n	8002264 <HAL_RCC_OscConfig+0x108>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d157      	bne.n	8002264 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e242      	b.n	800263e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c0:	d106      	bne.n	80021d0 <HAL_RCC_OscConfig+0x74>
 80021c2:	4b76      	ldr	r3, [pc, #472]	; (800239c <HAL_RCC_OscConfig+0x240>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a75      	ldr	r2, [pc, #468]	; (800239c <HAL_RCC_OscConfig+0x240>)
 80021c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	e01d      	b.n	800220c <HAL_RCC_OscConfig+0xb0>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021d8:	d10c      	bne.n	80021f4 <HAL_RCC_OscConfig+0x98>
 80021da:	4b70      	ldr	r3, [pc, #448]	; (800239c <HAL_RCC_OscConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a6f      	ldr	r2, [pc, #444]	; (800239c <HAL_RCC_OscConfig+0x240>)
 80021e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	4b6d      	ldr	r3, [pc, #436]	; (800239c <HAL_RCC_OscConfig+0x240>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a6c      	ldr	r2, [pc, #432]	; (800239c <HAL_RCC_OscConfig+0x240>)
 80021ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	e00b      	b.n	800220c <HAL_RCC_OscConfig+0xb0>
 80021f4:	4b69      	ldr	r3, [pc, #420]	; (800239c <HAL_RCC_OscConfig+0x240>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a68      	ldr	r2, [pc, #416]	; (800239c <HAL_RCC_OscConfig+0x240>)
 80021fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	4b66      	ldr	r3, [pc, #408]	; (800239c <HAL_RCC_OscConfig+0x240>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a65      	ldr	r2, [pc, #404]	; (800239c <HAL_RCC_OscConfig+0x240>)
 8002206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800220a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d013      	beq.n	800223c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002214:	f7ff f886 	bl	8001324 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800221c:	f7ff f882 	bl	8001324 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b64      	cmp	r3, #100	; 0x64
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e207      	b.n	800263e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222e:	4b5b      	ldr	r3, [pc, #364]	; (800239c <HAL_RCC_OscConfig+0x240>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f0      	beq.n	800221c <HAL_RCC_OscConfig+0xc0>
 800223a:	e014      	b.n	8002266 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7ff f872 	bl	8001324 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002244:	f7ff f86e 	bl	8001324 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	; 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e1f3      	b.n	800263e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002256:	4b51      	ldr	r3, [pc, #324]	; (800239c <HAL_RCC_OscConfig+0x240>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0xe8>
 8002262:	e000      	b.n	8002266 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d063      	beq.n	800233a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002272:	4b4a      	ldr	r3, [pc, #296]	; (800239c <HAL_RCC_OscConfig+0x240>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00b      	beq.n	8002296 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800227e:	4b47      	ldr	r3, [pc, #284]	; (800239c <HAL_RCC_OscConfig+0x240>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002286:	2b08      	cmp	r3, #8
 8002288:	d11c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800228a:	4b44      	ldr	r3, [pc, #272]	; (800239c <HAL_RCC_OscConfig+0x240>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d116      	bne.n	80022c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002296:	4b41      	ldr	r3, [pc, #260]	; (800239c <HAL_RCC_OscConfig+0x240>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <HAL_RCC_OscConfig+0x152>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d001      	beq.n	80022ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e1c7      	b.n	800263e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ae:	4b3b      	ldr	r3, [pc, #236]	; (800239c <HAL_RCC_OscConfig+0x240>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4937      	ldr	r1, [pc, #220]	; (800239c <HAL_RCC_OscConfig+0x240>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c2:	e03a      	b.n	800233a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d020      	beq.n	800230e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022cc:	4b34      	ldr	r3, [pc, #208]	; (80023a0 <HAL_RCC_OscConfig+0x244>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d2:	f7ff f827 	bl	8001324 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022da:	f7ff f823 	bl	8001324 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e1a8      	b.n	800263e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ec:	4b2b      	ldr	r3, [pc, #172]	; (800239c <HAL_RCC_OscConfig+0x240>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f0      	beq.n	80022da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f8:	4b28      	ldr	r3, [pc, #160]	; (800239c <HAL_RCC_OscConfig+0x240>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4925      	ldr	r1, [pc, #148]	; (800239c <HAL_RCC_OscConfig+0x240>)
 8002308:	4313      	orrs	r3, r2
 800230a:	600b      	str	r3, [r1, #0]
 800230c:	e015      	b.n	800233a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800230e:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <HAL_RCC_OscConfig+0x244>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7ff f806 	bl	8001324 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800231c:	f7ff f802 	bl	8001324 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e187      	b.n	800263e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232e:	4b1b      	ldr	r3, [pc, #108]	; (800239c <HAL_RCC_OscConfig+0x240>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d036      	beq.n	80023b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d016      	beq.n	800237c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_RCC_OscConfig+0x248>)
 8002350:	2201      	movs	r2, #1
 8002352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002354:	f7fe ffe6 	bl	8001324 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800235c:	f7fe ffe2 	bl	8001324 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e167      	b.n	800263e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_OscConfig+0x240>)
 8002370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0x200>
 800237a:	e01b      	b.n	80023b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <HAL_RCC_OscConfig+0x248>)
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002382:	f7fe ffcf 	bl	8001324 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002388:	e00e      	b.n	80023a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800238a:	f7fe ffcb 	bl	8001324 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d907      	bls.n	80023a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e150      	b.n	800263e <HAL_RCC_OscConfig+0x4e2>
 800239c:	40023800 	.word	0x40023800
 80023a0:	42470000 	.word	0x42470000
 80023a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a8:	4b88      	ldr	r3, [pc, #544]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 80023aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1ea      	bne.n	800238a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 8097 	beq.w	80024f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c2:	2300      	movs	r3, #0
 80023c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c6:	4b81      	ldr	r3, [pc, #516]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10f      	bne.n	80023f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	4b7d      	ldr	r3, [pc, #500]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	4a7c      	ldr	r2, [pc, #496]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 80023dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e0:	6413      	str	r3, [r2, #64]	; 0x40
 80023e2:	4b7a      	ldr	r3, [pc, #488]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ee:	2301      	movs	r3, #1
 80023f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f2:	4b77      	ldr	r3, [pc, #476]	; (80025d0 <HAL_RCC_OscConfig+0x474>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d118      	bne.n	8002430 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fe:	4b74      	ldr	r3, [pc, #464]	; (80025d0 <HAL_RCC_OscConfig+0x474>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a73      	ldr	r2, [pc, #460]	; (80025d0 <HAL_RCC_OscConfig+0x474>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240a:	f7fe ff8b 	bl	8001324 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe ff87 	bl	8001324 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e10c      	b.n	800263e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002424:	4b6a      	ldr	r3, [pc, #424]	; (80025d0 <HAL_RCC_OscConfig+0x474>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d106      	bne.n	8002446 <HAL_RCC_OscConfig+0x2ea>
 8002438:	4b64      	ldr	r3, [pc, #400]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	4a63      	ldr	r2, [pc, #396]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	6713      	str	r3, [r2, #112]	; 0x70
 8002444:	e01c      	b.n	8002480 <HAL_RCC_OscConfig+0x324>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b05      	cmp	r3, #5
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0x30c>
 800244e:	4b5f      	ldr	r3, [pc, #380]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 8002450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002452:	4a5e      	ldr	r2, [pc, #376]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 8002454:	f043 0304 	orr.w	r3, r3, #4
 8002458:	6713      	str	r3, [r2, #112]	; 0x70
 800245a:	4b5c      	ldr	r3, [pc, #368]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 800245c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245e:	4a5b      	ldr	r2, [pc, #364]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6713      	str	r3, [r2, #112]	; 0x70
 8002466:	e00b      	b.n	8002480 <HAL_RCC_OscConfig+0x324>
 8002468:	4b58      	ldr	r3, [pc, #352]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	4a57      	ldr	r2, [pc, #348]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 800246e:	f023 0301 	bic.w	r3, r3, #1
 8002472:	6713      	str	r3, [r2, #112]	; 0x70
 8002474:	4b55      	ldr	r3, [pc, #340]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002478:	4a54      	ldr	r2, [pc, #336]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 800247a:	f023 0304 	bic.w	r3, r3, #4
 800247e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d015      	beq.n	80024b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002488:	f7fe ff4c 	bl	8001324 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248e:	e00a      	b.n	80024a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002490:	f7fe ff48 	bl	8001324 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	; 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e0cb      	b.n	800263e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a6:	4b49      	ldr	r3, [pc, #292]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 80024a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0ee      	beq.n	8002490 <HAL_RCC_OscConfig+0x334>
 80024b2:	e014      	b.n	80024de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b4:	f7fe ff36 	bl	8001324 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ba:	e00a      	b.n	80024d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024bc:	f7fe ff32 	bl	8001324 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e0b5      	b.n	800263e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d2:	4b3e      	ldr	r3, [pc, #248]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1ee      	bne.n	80024bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024de:	7dfb      	ldrb	r3, [r7, #23]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d105      	bne.n	80024f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e4:	4b39      	ldr	r3, [pc, #228]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	4a38      	ldr	r2, [pc, #224]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 80024ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 80a1 	beq.w	800263c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024fa:	4b34      	ldr	r3, [pc, #208]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b08      	cmp	r3, #8
 8002504:	d05c      	beq.n	80025c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d141      	bne.n	8002592 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250e:	4b31      	ldr	r3, [pc, #196]	; (80025d4 <HAL_RCC_OscConfig+0x478>)
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002514:	f7fe ff06 	bl	8001324 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251c:	f7fe ff02 	bl	8001324 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e087      	b.n	800263e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252e:	4b27      	ldr	r3, [pc, #156]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69da      	ldr	r2, [r3, #28]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	019b      	lsls	r3, r3, #6
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002550:	085b      	lsrs	r3, r3, #1
 8002552:	3b01      	subs	r3, #1
 8002554:	041b      	lsls	r3, r3, #16
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	061b      	lsls	r3, r3, #24
 800255e:	491b      	ldr	r1, [pc, #108]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 8002560:	4313      	orrs	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002564:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <HAL_RCC_OscConfig+0x478>)
 8002566:	2201      	movs	r2, #1
 8002568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256a:	f7fe fedb 	bl	8001324 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002572:	f7fe fed7 	bl	8001324 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e05c      	b.n	800263e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x416>
 8002590:	e054      	b.n	800263c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002592:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <HAL_RCC_OscConfig+0x478>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7fe fec4 	bl	8001324 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a0:	f7fe fec0 	bl	8001324 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e045      	b.n	800263e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_RCC_OscConfig+0x470>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x444>
 80025be:	e03d      	b.n	800263c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d107      	bne.n	80025d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e038      	b.n	800263e <HAL_RCC_OscConfig+0x4e2>
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40007000 	.word	0x40007000
 80025d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025d8:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <HAL_RCC_OscConfig+0x4ec>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d028      	beq.n	8002638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d121      	bne.n	8002638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d11a      	bne.n	8002638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002608:	4013      	ands	r3, r2
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800260e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002610:	4293      	cmp	r3, r2
 8002612:	d111      	bne.n	8002638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261e:	085b      	lsrs	r3, r3, #1
 8002620:	3b01      	subs	r3, #1
 8002622:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002624:	429a      	cmp	r2, r3
 8002626:	d107      	bne.n	8002638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002634:	429a      	cmp	r2, r3
 8002636:	d001      	beq.n	800263c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800

0800264c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0cc      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002660:	4b68      	ldr	r3, [pc, #416]	; (8002804 <HAL_RCC_ClockConfig+0x1b8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d90c      	bls.n	8002688 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266e:	4b65      	ldr	r3, [pc, #404]	; (8002804 <HAL_RCC_ClockConfig+0x1b8>)
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002676:	4b63      	ldr	r3, [pc, #396]	; (8002804 <HAL_RCC_ClockConfig+0x1b8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0b8      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d020      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a0:	4b59      	ldr	r3, [pc, #356]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	4a58      	ldr	r2, [pc, #352]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026b8:	4b53      	ldr	r3, [pc, #332]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	4a52      	ldr	r2, [pc, #328]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c4:	4b50      	ldr	r3, [pc, #320]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	494d      	ldr	r1, [pc, #308]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d044      	beq.n	800276c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	4b47      	ldr	r3, [pc, #284]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d119      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e07f      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d003      	beq.n	800270a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002706:	2b03      	cmp	r3, #3
 8002708:	d107      	bne.n	800271a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270a:	4b3f      	ldr	r3, [pc, #252]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e06f      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271a:	4b3b      	ldr	r3, [pc, #236]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e067      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800272a:	4b37      	ldr	r3, [pc, #220]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f023 0203 	bic.w	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	4934      	ldr	r1, [pc, #208]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 8002738:	4313      	orrs	r3, r2
 800273a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800273c:	f7fe fdf2 	bl	8001324 <HAL_GetTick>
 8002740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002742:	e00a      	b.n	800275a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002744:	f7fe fdee 	bl	8001324 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e04f      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275a:	4b2b      	ldr	r3, [pc, #172]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 020c 	and.w	r2, r3, #12
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	429a      	cmp	r2, r3
 800276a:	d1eb      	bne.n	8002744 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800276c:	4b25      	ldr	r3, [pc, #148]	; (8002804 <HAL_RCC_ClockConfig+0x1b8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 030f 	and.w	r3, r3, #15
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d20c      	bcs.n	8002794 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277a:	4b22      	ldr	r3, [pc, #136]	; (8002804 <HAL_RCC_ClockConfig+0x1b8>)
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002782:	4b20      	ldr	r3, [pc, #128]	; (8002804 <HAL_RCC_ClockConfig+0x1b8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e032      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a0:	4b19      	ldr	r3, [pc, #100]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	4916      	ldr	r1, [pc, #88]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d009      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027be:	4b12      	ldr	r3, [pc, #72]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	490e      	ldr	r1, [pc, #56]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027d2:	f000 f821 	bl	8002818 <HAL_RCC_GetSysClockFreq>
 80027d6:	4602      	mov	r2, r0
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	091b      	lsrs	r3, r3, #4
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	490a      	ldr	r1, [pc, #40]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 80027e4:	5ccb      	ldrb	r3, [r1, r3]
 80027e6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ea:	4a09      	ldr	r2, [pc, #36]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027ee:	4b09      	ldr	r3, [pc, #36]	; (8002814 <HAL_RCC_ClockConfig+0x1c8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fd52 	bl	800129c <HAL_InitTick>

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40023c00 	.word	0x40023c00
 8002808:	40023800 	.word	0x40023800
 800280c:	080069bc 	.word	0x080069bc
 8002810:	20000004 	.word	0x20000004
 8002814:	20000008 	.word	0x20000008

08002818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800281c:	b090      	sub	sp, #64	; 0x40
 800281e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	637b      	str	r3, [r7, #52]	; 0x34
 8002824:	2300      	movs	r3, #0
 8002826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002828:	2300      	movs	r3, #0
 800282a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002830:	4b59      	ldr	r3, [pc, #356]	; (8002998 <HAL_RCC_GetSysClockFreq+0x180>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 030c 	and.w	r3, r3, #12
 8002838:	2b08      	cmp	r3, #8
 800283a:	d00d      	beq.n	8002858 <HAL_RCC_GetSysClockFreq+0x40>
 800283c:	2b08      	cmp	r3, #8
 800283e:	f200 80a1 	bhi.w	8002984 <HAL_RCC_GetSysClockFreq+0x16c>
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x34>
 8002846:	2b04      	cmp	r3, #4
 8002848:	d003      	beq.n	8002852 <HAL_RCC_GetSysClockFreq+0x3a>
 800284a:	e09b      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800284c:	4b53      	ldr	r3, [pc, #332]	; (800299c <HAL_RCC_GetSysClockFreq+0x184>)
 800284e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002850:	e09b      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002852:	4b53      	ldr	r3, [pc, #332]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002854:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002856:	e098      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002858:	4b4f      	ldr	r3, [pc, #316]	; (8002998 <HAL_RCC_GetSysClockFreq+0x180>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002860:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002862:	4b4d      	ldr	r3, [pc, #308]	; (8002998 <HAL_RCC_GetSysClockFreq+0x180>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d028      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800286e:	4b4a      	ldr	r3, [pc, #296]	; (8002998 <HAL_RCC_GetSysClockFreq+0x180>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	099b      	lsrs	r3, r3, #6
 8002874:	2200      	movs	r2, #0
 8002876:	623b      	str	r3, [r7, #32]
 8002878:	627a      	str	r2, [r7, #36]	; 0x24
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002880:	2100      	movs	r1, #0
 8002882:	4b47      	ldr	r3, [pc, #284]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002884:	fb03 f201 	mul.w	r2, r3, r1
 8002888:	2300      	movs	r3, #0
 800288a:	fb00 f303 	mul.w	r3, r0, r3
 800288e:	4413      	add	r3, r2
 8002890:	4a43      	ldr	r2, [pc, #268]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002892:	fba0 1202 	umull	r1, r2, r0, r2
 8002896:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002898:	460a      	mov	r2, r1
 800289a:	62ba      	str	r2, [r7, #40]	; 0x28
 800289c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800289e:	4413      	add	r3, r2
 80028a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a4:	2200      	movs	r2, #0
 80028a6:	61bb      	str	r3, [r7, #24]
 80028a8:	61fa      	str	r2, [r7, #28]
 80028aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80028b2:	f7fd fcf5 	bl	80002a0 <__aeabi_uldivmod>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4613      	mov	r3, r2
 80028bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028be:	e053      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c0:	4b35      	ldr	r3, [pc, #212]	; (8002998 <HAL_RCC_GetSysClockFreq+0x180>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	099b      	lsrs	r3, r3, #6
 80028c6:	2200      	movs	r2, #0
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	617a      	str	r2, [r7, #20]
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028d2:	f04f 0b00 	mov.w	fp, #0
 80028d6:	4652      	mov	r2, sl
 80028d8:	465b      	mov	r3, fp
 80028da:	f04f 0000 	mov.w	r0, #0
 80028de:	f04f 0100 	mov.w	r1, #0
 80028e2:	0159      	lsls	r1, r3, #5
 80028e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028e8:	0150      	lsls	r0, r2, #5
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	ebb2 080a 	subs.w	r8, r2, sl
 80028f2:	eb63 090b 	sbc.w	r9, r3, fp
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	f04f 0300 	mov.w	r3, #0
 80028fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002902:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002906:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800290a:	ebb2 0408 	subs.w	r4, r2, r8
 800290e:	eb63 0509 	sbc.w	r5, r3, r9
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	00eb      	lsls	r3, r5, #3
 800291c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002920:	00e2      	lsls	r2, r4, #3
 8002922:	4614      	mov	r4, r2
 8002924:	461d      	mov	r5, r3
 8002926:	eb14 030a 	adds.w	r3, r4, sl
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	eb45 030b 	adc.w	r3, r5, fp
 8002930:	607b      	str	r3, [r7, #4]
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800293e:	4629      	mov	r1, r5
 8002940:	028b      	lsls	r3, r1, #10
 8002942:	4621      	mov	r1, r4
 8002944:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002948:	4621      	mov	r1, r4
 800294a:	028a      	lsls	r2, r1, #10
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
 8002950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002952:	2200      	movs	r2, #0
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	60fa      	str	r2, [r7, #12]
 8002958:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800295c:	f7fd fca0 	bl	80002a0 <__aeabi_uldivmod>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4613      	mov	r3, r2
 8002966:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_RCC_GetSysClockFreq+0x180>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	0c1b      	lsrs	r3, r3, #16
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	3301      	adds	r3, #1
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002978:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002980:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002982:	e002      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <HAL_RCC_GetSysClockFreq+0x184>)
 8002986:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800298a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800298c:	4618      	mov	r0, r3
 800298e:	3740      	adds	r7, #64	; 0x40
 8002990:	46bd      	mov	sp, r7
 8002992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800
 800299c:	00f42400 	.word	0x00f42400
 80029a0:	017d7840 	.word	0x017d7840

080029a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029a8:	4b03      	ldr	r3, [pc, #12]	; (80029b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029aa:	681b      	ldr	r3, [r3, #0]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20000004 	.word	0x20000004

080029bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029c0:	f7ff fff0 	bl	80029a4 <HAL_RCC_GetHCLKFreq>
 80029c4:	4602      	mov	r2, r0
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	0a9b      	lsrs	r3, r3, #10
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	4903      	ldr	r1, [pc, #12]	; (80029e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d2:	5ccb      	ldrb	r3, [r1, r3]
 80029d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d8:	4618      	mov	r0, r3
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40023800 	.word	0x40023800
 80029e0:	080069cc 	.word	0x080069cc

080029e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029e8:	f7ff ffdc 	bl	80029a4 <HAL_RCC_GetHCLKFreq>
 80029ec:	4602      	mov	r2, r0
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	0b5b      	lsrs	r3, r3, #13
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	4903      	ldr	r1, [pc, #12]	; (8002a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029fa:	5ccb      	ldrb	r3, [r1, r3]
 80029fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40023800 	.word	0x40023800
 8002a08:	080069cc 	.word	0x080069cc

08002a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e041      	b.n	8002aa2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d106      	bne.n	8002a38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7fe fa1e 	bl	8000e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3304      	adds	r3, #4
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	f000 fca8 	bl	80033a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d001      	beq.n	8002ac4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e04e      	b.n	8002b62 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a23      	ldr	r2, [pc, #140]	; (8002b70 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d022      	beq.n	8002b2c <HAL_TIM_Base_Start_IT+0x80>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aee:	d01d      	beq.n	8002b2c <HAL_TIM_Base_Start_IT+0x80>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a1f      	ldr	r2, [pc, #124]	; (8002b74 <HAL_TIM_Base_Start_IT+0xc8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d018      	beq.n	8002b2c <HAL_TIM_Base_Start_IT+0x80>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a1e      	ldr	r2, [pc, #120]	; (8002b78 <HAL_TIM_Base_Start_IT+0xcc>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d013      	beq.n	8002b2c <HAL_TIM_Base_Start_IT+0x80>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1c      	ldr	r2, [pc, #112]	; (8002b7c <HAL_TIM_Base_Start_IT+0xd0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00e      	beq.n	8002b2c <HAL_TIM_Base_Start_IT+0x80>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1b      	ldr	r2, [pc, #108]	; (8002b80 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d009      	beq.n	8002b2c <HAL_TIM_Base_Start_IT+0x80>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a19      	ldr	r2, [pc, #100]	; (8002b84 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d004      	beq.n	8002b2c <HAL_TIM_Base_Start_IT+0x80>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a18      	ldr	r2, [pc, #96]	; (8002b88 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d111      	bne.n	8002b50 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b06      	cmp	r3, #6
 8002b3c:	d010      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0201 	orr.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b4e:	e007      	b.n	8002b60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40010000 	.word	0x40010000
 8002b74:	40000400 	.word	0x40000400
 8002b78:	40000800 	.word	0x40000800
 8002b7c:	40000c00 	.word	0x40000c00
 8002b80:	40010400 	.word	0x40010400
 8002b84:	40014000 	.word	0x40014000
 8002b88:	40001800 	.word	0x40001800

08002b8c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0201 	bic.w	r2, r2, #1
 8002ba2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6a1a      	ldr	r2, [r3, #32]
 8002baa:	f241 1311 	movw	r3, #4369	; 0x1111
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10f      	bne.n	8002bd4 <HAL_TIM_Base_Stop_IT+0x48>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6a1a      	ldr	r2, [r3, #32]
 8002bba:	f240 4344 	movw	r3, #1092	; 0x444
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d107      	bne.n	8002bd4 <HAL_TIM_Base_Stop_IT+0x48>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0201 	bic.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e041      	b.n	8002c80 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d106      	bne.n	8002c16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f839 	bl	8002c88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3304      	adds	r3, #4
 8002c26:	4619      	mov	r1, r3
 8002c28:	4610      	mov	r0, r2
 8002c2a:	f000 fbb9 	bl	80033a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d109      	bne.n	8002cc0 <HAL_TIM_PWM_Start+0x24>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	bf14      	ite	ne
 8002cb8:	2301      	movne	r3, #1
 8002cba:	2300      	moveq	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	e022      	b.n	8002d06 <HAL_TIM_PWM_Start+0x6a>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d109      	bne.n	8002cda <HAL_TIM_PWM_Start+0x3e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	bf14      	ite	ne
 8002cd2:	2301      	movne	r3, #1
 8002cd4:	2300      	moveq	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	e015      	b.n	8002d06 <HAL_TIM_PWM_Start+0x6a>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d109      	bne.n	8002cf4 <HAL_TIM_PWM_Start+0x58>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	bf14      	ite	ne
 8002cec:	2301      	movne	r3, #1
 8002cee:	2300      	moveq	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	e008      	b.n	8002d06 <HAL_TIM_PWM_Start+0x6a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	bf14      	ite	ne
 8002d00:	2301      	movne	r3, #1
 8002d02:	2300      	moveq	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e07c      	b.n	8002e08 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d104      	bne.n	8002d1e <HAL_TIM_PWM_Start+0x82>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d1c:	e013      	b.n	8002d46 <HAL_TIM_PWM_Start+0xaa>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d104      	bne.n	8002d2e <HAL_TIM_PWM_Start+0x92>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d2c:	e00b      	b.n	8002d46 <HAL_TIM_PWM_Start+0xaa>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d104      	bne.n	8002d3e <HAL_TIM_PWM_Start+0xa2>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d3c:	e003      	b.n	8002d46 <HAL_TIM_PWM_Start+0xaa>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2202      	movs	r2, #2
 8002d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	6839      	ldr	r1, [r7, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fe10 	bl	8003974 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a2d      	ldr	r2, [pc, #180]	; (8002e10 <HAL_TIM_PWM_Start+0x174>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d004      	beq.n	8002d68 <HAL_TIM_PWM_Start+0xcc>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a2c      	ldr	r2, [pc, #176]	; (8002e14 <HAL_TIM_PWM_Start+0x178>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d101      	bne.n	8002d6c <HAL_TIM_PWM_Start+0xd0>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <HAL_TIM_PWM_Start+0xd2>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d007      	beq.n	8002d82 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a22      	ldr	r2, [pc, #136]	; (8002e10 <HAL_TIM_PWM_Start+0x174>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d022      	beq.n	8002dd2 <HAL_TIM_PWM_Start+0x136>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d94:	d01d      	beq.n	8002dd2 <HAL_TIM_PWM_Start+0x136>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1f      	ldr	r2, [pc, #124]	; (8002e18 <HAL_TIM_PWM_Start+0x17c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d018      	beq.n	8002dd2 <HAL_TIM_PWM_Start+0x136>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a1d      	ldr	r2, [pc, #116]	; (8002e1c <HAL_TIM_PWM_Start+0x180>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d013      	beq.n	8002dd2 <HAL_TIM_PWM_Start+0x136>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a1c      	ldr	r2, [pc, #112]	; (8002e20 <HAL_TIM_PWM_Start+0x184>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00e      	beq.n	8002dd2 <HAL_TIM_PWM_Start+0x136>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a16      	ldr	r2, [pc, #88]	; (8002e14 <HAL_TIM_PWM_Start+0x178>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d009      	beq.n	8002dd2 <HAL_TIM_PWM_Start+0x136>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a18      	ldr	r2, [pc, #96]	; (8002e24 <HAL_TIM_PWM_Start+0x188>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d004      	beq.n	8002dd2 <HAL_TIM_PWM_Start+0x136>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a16      	ldr	r2, [pc, #88]	; (8002e28 <HAL_TIM_PWM_Start+0x18c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d111      	bne.n	8002df6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b06      	cmp	r3, #6
 8002de2:	d010      	beq.n	8002e06 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df4:	e007      	b.n	8002e06 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0201 	orr.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40010000 	.word	0x40010000
 8002e14:	40010400 	.word	0x40010400
 8002e18:	40000400 	.word	0x40000400
 8002e1c:	40000800 	.word	0x40000800
 8002e20:	40000c00 	.word	0x40000c00
 8002e24:	40014000 	.word	0x40014000
 8002e28:	40001800 	.word	0x40001800

08002e2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d122      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d11b      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f06f 0202 	mvn.w	r2, #2
 8002e58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fa77 	bl	8003362 <HAL_TIM_IC_CaptureCallback>
 8002e74:	e005      	b.n	8002e82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fa69 	bl	800334e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 fa7a 	bl	8003376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d122      	bne.n	8002edc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d11b      	bne.n	8002edc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 0204 	mvn.w	r2, #4
 8002eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 fa4d 	bl	8003362 <HAL_TIM_IC_CaptureCallback>
 8002ec8:	e005      	b.n	8002ed6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fa3f 	bl	800334e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 fa50 	bl	8003376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d122      	bne.n	8002f30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d11b      	bne.n	8002f30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f06f 0208 	mvn.w	r2, #8
 8002f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2204      	movs	r2, #4
 8002f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fa23 	bl	8003362 <HAL_TIM_IC_CaptureCallback>
 8002f1c:	e005      	b.n	8002f2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fa15 	bl	800334e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 fa26 	bl	8003376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f003 0310 	and.w	r3, r3, #16
 8002f3a:	2b10      	cmp	r3, #16
 8002f3c:	d122      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	2b10      	cmp	r3, #16
 8002f4a:	d11b      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f06f 0210 	mvn.w	r2, #16
 8002f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2208      	movs	r2, #8
 8002f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f9f9 	bl	8003362 <HAL_TIM_IC_CaptureCallback>
 8002f70:	e005      	b.n	8002f7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f9eb 	bl	800334e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f9fc 	bl	8003376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d10e      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d107      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0201 	mvn.w	r2, #1
 8002fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fd fb40 	bl	8000630 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fba:	2b80      	cmp	r3, #128	; 0x80
 8002fbc:	d10e      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc8:	2b80      	cmp	r3, #128	; 0x80
 8002fca:	d107      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fd78 	bl	8003acc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe6:	2b40      	cmp	r3, #64	; 0x40
 8002fe8:	d10e      	bne.n	8003008 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff4:	2b40      	cmp	r3, #64	; 0x40
 8002ff6:	d107      	bne.n	8003008 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f9c1 	bl	800338a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b20      	cmp	r3, #32
 8003014:	d10e      	bne.n	8003034 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f003 0320 	and.w	r3, r3, #32
 8003020:	2b20      	cmp	r3, #32
 8003022:	d107      	bne.n	8003034 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0220 	mvn.w	r2, #32
 800302c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fd42 	bl	8003ab8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003056:	2302      	movs	r3, #2
 8003058:	e0ae      	b.n	80031b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b0c      	cmp	r3, #12
 8003066:	f200 809f 	bhi.w	80031a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800306a:	a201      	add	r2, pc, #4	; (adr r2, 8003070 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800306c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003070:	080030a5 	.word	0x080030a5
 8003074:	080031a9 	.word	0x080031a9
 8003078:	080031a9 	.word	0x080031a9
 800307c:	080031a9 	.word	0x080031a9
 8003080:	080030e5 	.word	0x080030e5
 8003084:	080031a9 	.word	0x080031a9
 8003088:	080031a9 	.word	0x080031a9
 800308c:	080031a9 	.word	0x080031a9
 8003090:	08003127 	.word	0x08003127
 8003094:	080031a9 	.word	0x080031a9
 8003098:	080031a9 	.word	0x080031a9
 800309c:	080031a9 	.word	0x080031a9
 80030a0:	08003167 	.word	0x08003167
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 fa18 	bl	80034e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699a      	ldr	r2, [r3, #24]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0208 	orr.w	r2, r2, #8
 80030be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0204 	bic.w	r2, r2, #4
 80030ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6999      	ldr	r1, [r3, #24]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	619a      	str	r2, [r3, #24]
      break;
 80030e2:	e064      	b.n	80031ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 fa68 	bl	80035c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800310e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6999      	ldr	r1, [r3, #24]
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	021a      	lsls	r2, r3, #8
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	619a      	str	r2, [r3, #24]
      break;
 8003124:	e043      	b.n	80031ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68b9      	ldr	r1, [r7, #8]
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fabd 	bl	80036ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	69da      	ldr	r2, [r3, #28]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 0208 	orr.w	r2, r2, #8
 8003140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69da      	ldr	r2, [r3, #28]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0204 	bic.w	r2, r2, #4
 8003150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69d9      	ldr	r1, [r3, #28]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	61da      	str	r2, [r3, #28]
      break;
 8003164:	e023      	b.n	80031ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	4618      	mov	r0, r3
 800316e:	f000 fb11 	bl	8003794 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69da      	ldr	r2, [r3, #28]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69da      	ldr	r2, [r3, #28]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69d9      	ldr	r1, [r3, #28]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	021a      	lsls	r2, r3, #8
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	61da      	str	r2, [r3, #28]
      break;
 80031a6:	e002      	b.n	80031ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	75fb      	strb	r3, [r7, #23]
      break;
 80031ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_TIM_ConfigClockSource+0x1c>
 80031d8:	2302      	movs	r3, #2
 80031da:	e0b4      	b.n	8003346 <HAL_TIM_ConfigClockSource+0x186>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003202:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003214:	d03e      	beq.n	8003294 <HAL_TIM_ConfigClockSource+0xd4>
 8003216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800321a:	f200 8087 	bhi.w	800332c <HAL_TIM_ConfigClockSource+0x16c>
 800321e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003222:	f000 8086 	beq.w	8003332 <HAL_TIM_ConfigClockSource+0x172>
 8003226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800322a:	d87f      	bhi.n	800332c <HAL_TIM_ConfigClockSource+0x16c>
 800322c:	2b70      	cmp	r3, #112	; 0x70
 800322e:	d01a      	beq.n	8003266 <HAL_TIM_ConfigClockSource+0xa6>
 8003230:	2b70      	cmp	r3, #112	; 0x70
 8003232:	d87b      	bhi.n	800332c <HAL_TIM_ConfigClockSource+0x16c>
 8003234:	2b60      	cmp	r3, #96	; 0x60
 8003236:	d050      	beq.n	80032da <HAL_TIM_ConfigClockSource+0x11a>
 8003238:	2b60      	cmp	r3, #96	; 0x60
 800323a:	d877      	bhi.n	800332c <HAL_TIM_ConfigClockSource+0x16c>
 800323c:	2b50      	cmp	r3, #80	; 0x50
 800323e:	d03c      	beq.n	80032ba <HAL_TIM_ConfigClockSource+0xfa>
 8003240:	2b50      	cmp	r3, #80	; 0x50
 8003242:	d873      	bhi.n	800332c <HAL_TIM_ConfigClockSource+0x16c>
 8003244:	2b40      	cmp	r3, #64	; 0x40
 8003246:	d058      	beq.n	80032fa <HAL_TIM_ConfigClockSource+0x13a>
 8003248:	2b40      	cmp	r3, #64	; 0x40
 800324a:	d86f      	bhi.n	800332c <HAL_TIM_ConfigClockSource+0x16c>
 800324c:	2b30      	cmp	r3, #48	; 0x30
 800324e:	d064      	beq.n	800331a <HAL_TIM_ConfigClockSource+0x15a>
 8003250:	2b30      	cmp	r3, #48	; 0x30
 8003252:	d86b      	bhi.n	800332c <HAL_TIM_ConfigClockSource+0x16c>
 8003254:	2b20      	cmp	r3, #32
 8003256:	d060      	beq.n	800331a <HAL_TIM_ConfigClockSource+0x15a>
 8003258:	2b20      	cmp	r3, #32
 800325a:	d867      	bhi.n	800332c <HAL_TIM_ConfigClockSource+0x16c>
 800325c:	2b00      	cmp	r3, #0
 800325e:	d05c      	beq.n	800331a <HAL_TIM_ConfigClockSource+0x15a>
 8003260:	2b10      	cmp	r3, #16
 8003262:	d05a      	beq.n	800331a <HAL_TIM_ConfigClockSource+0x15a>
 8003264:	e062      	b.n	800332c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	6899      	ldr	r1, [r3, #8]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f000 fb5d 	bl	8003934 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003288:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	609a      	str	r2, [r3, #8]
      break;
 8003292:	e04f      	b.n	8003334 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	6899      	ldr	r1, [r3, #8]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f000 fb46 	bl	8003934 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032b6:	609a      	str	r2, [r3, #8]
      break;
 80032b8:	e03c      	b.n	8003334 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	6859      	ldr	r1, [r3, #4]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	461a      	mov	r2, r3
 80032c8:	f000 faba 	bl	8003840 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2150      	movs	r1, #80	; 0x50
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fb13 	bl	80038fe <TIM_ITRx_SetConfig>
      break;
 80032d8:	e02c      	b.n	8003334 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6818      	ldr	r0, [r3, #0]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	6859      	ldr	r1, [r3, #4]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	461a      	mov	r2, r3
 80032e8:	f000 fad9 	bl	800389e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2160      	movs	r1, #96	; 0x60
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fb03 	bl	80038fe <TIM_ITRx_SetConfig>
      break;
 80032f8:	e01c      	b.n	8003334 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	6859      	ldr	r1, [r3, #4]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	461a      	mov	r2, r3
 8003308:	f000 fa9a 	bl	8003840 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2140      	movs	r1, #64	; 0x40
 8003312:	4618      	mov	r0, r3
 8003314:	f000 faf3 	bl	80038fe <TIM_ITRx_SetConfig>
      break;
 8003318:	e00c      	b.n	8003334 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4619      	mov	r1, r3
 8003324:	4610      	mov	r0, r2
 8003326:	f000 faea 	bl	80038fe <TIM_ITRx_SetConfig>
      break;
 800332a:	e003      	b.n	8003334 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
      break;
 8003330:	e000      	b.n	8003334 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003332:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003344:	7bfb      	ldrb	r3, [r7, #15]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
	...

080033a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a40      	ldr	r2, [pc, #256]	; (80034b4 <TIM_Base_SetConfig+0x114>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d013      	beq.n	80033e0 <TIM_Base_SetConfig+0x40>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033be:	d00f      	beq.n	80033e0 <TIM_Base_SetConfig+0x40>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a3d      	ldr	r2, [pc, #244]	; (80034b8 <TIM_Base_SetConfig+0x118>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00b      	beq.n	80033e0 <TIM_Base_SetConfig+0x40>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a3c      	ldr	r2, [pc, #240]	; (80034bc <TIM_Base_SetConfig+0x11c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d007      	beq.n	80033e0 <TIM_Base_SetConfig+0x40>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a3b      	ldr	r2, [pc, #236]	; (80034c0 <TIM_Base_SetConfig+0x120>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d003      	beq.n	80033e0 <TIM_Base_SetConfig+0x40>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a3a      	ldr	r2, [pc, #232]	; (80034c4 <TIM_Base_SetConfig+0x124>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d108      	bne.n	80033f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a2f      	ldr	r2, [pc, #188]	; (80034b4 <TIM_Base_SetConfig+0x114>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d02b      	beq.n	8003452 <TIM_Base_SetConfig+0xb2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003400:	d027      	beq.n	8003452 <TIM_Base_SetConfig+0xb2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a2c      	ldr	r2, [pc, #176]	; (80034b8 <TIM_Base_SetConfig+0x118>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d023      	beq.n	8003452 <TIM_Base_SetConfig+0xb2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a2b      	ldr	r2, [pc, #172]	; (80034bc <TIM_Base_SetConfig+0x11c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d01f      	beq.n	8003452 <TIM_Base_SetConfig+0xb2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a2a      	ldr	r2, [pc, #168]	; (80034c0 <TIM_Base_SetConfig+0x120>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d01b      	beq.n	8003452 <TIM_Base_SetConfig+0xb2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a29      	ldr	r2, [pc, #164]	; (80034c4 <TIM_Base_SetConfig+0x124>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d017      	beq.n	8003452 <TIM_Base_SetConfig+0xb2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a28      	ldr	r2, [pc, #160]	; (80034c8 <TIM_Base_SetConfig+0x128>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d013      	beq.n	8003452 <TIM_Base_SetConfig+0xb2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a27      	ldr	r2, [pc, #156]	; (80034cc <TIM_Base_SetConfig+0x12c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d00f      	beq.n	8003452 <TIM_Base_SetConfig+0xb2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a26      	ldr	r2, [pc, #152]	; (80034d0 <TIM_Base_SetConfig+0x130>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d00b      	beq.n	8003452 <TIM_Base_SetConfig+0xb2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a25      	ldr	r2, [pc, #148]	; (80034d4 <TIM_Base_SetConfig+0x134>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d007      	beq.n	8003452 <TIM_Base_SetConfig+0xb2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a24      	ldr	r2, [pc, #144]	; (80034d8 <TIM_Base_SetConfig+0x138>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d003      	beq.n	8003452 <TIM_Base_SetConfig+0xb2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a23      	ldr	r2, [pc, #140]	; (80034dc <TIM_Base_SetConfig+0x13c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d108      	bne.n	8003464 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <TIM_Base_SetConfig+0x114>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d003      	beq.n	8003498 <TIM_Base_SetConfig+0xf8>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a0c      	ldr	r2, [pc, #48]	; (80034c4 <TIM_Base_SetConfig+0x124>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d103      	bne.n	80034a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	615a      	str	r2, [r3, #20]
}
 80034a6:	bf00      	nop
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40010000 	.word	0x40010000
 80034b8:	40000400 	.word	0x40000400
 80034bc:	40000800 	.word	0x40000800
 80034c0:	40000c00 	.word	0x40000c00
 80034c4:	40010400 	.word	0x40010400
 80034c8:	40014000 	.word	0x40014000
 80034cc:	40014400 	.word	0x40014400
 80034d0:	40014800 	.word	0x40014800
 80034d4:	40001800 	.word	0x40001800
 80034d8:	40001c00 	.word	0x40001c00
 80034dc:	40002000 	.word	0x40002000

080034e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b087      	sub	sp, #28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	f023 0201 	bic.w	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f023 0303 	bic.w	r3, r3, #3
 8003516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f023 0302 	bic.w	r3, r3, #2
 8003528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a20      	ldr	r2, [pc, #128]	; (80035b8 <TIM_OC1_SetConfig+0xd8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d003      	beq.n	8003544 <TIM_OC1_SetConfig+0x64>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a1f      	ldr	r2, [pc, #124]	; (80035bc <TIM_OC1_SetConfig+0xdc>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d10c      	bne.n	800355e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f023 0308 	bic.w	r3, r3, #8
 800354a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f023 0304 	bic.w	r3, r3, #4
 800355c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a15      	ldr	r2, [pc, #84]	; (80035b8 <TIM_OC1_SetConfig+0xd8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d003      	beq.n	800356e <TIM_OC1_SetConfig+0x8e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a14      	ldr	r2, [pc, #80]	; (80035bc <TIM_OC1_SetConfig+0xdc>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d111      	bne.n	8003592 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800357c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	621a      	str	r2, [r3, #32]
}
 80035ac:	bf00      	nop
 80035ae:	371c      	adds	r7, #28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	40010000 	.word	0x40010000
 80035bc:	40010400 	.word	0x40010400

080035c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	f023 0210 	bic.w	r2, r3, #16
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4313      	orrs	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f023 0320 	bic.w	r3, r3, #32
 800360a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a22      	ldr	r2, [pc, #136]	; (80036a4 <TIM_OC2_SetConfig+0xe4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d003      	beq.n	8003628 <TIM_OC2_SetConfig+0x68>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a21      	ldr	r2, [pc, #132]	; (80036a8 <TIM_OC2_SetConfig+0xe8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d10d      	bne.n	8003644 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800362e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003642:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a17      	ldr	r2, [pc, #92]	; (80036a4 <TIM_OC2_SetConfig+0xe4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d003      	beq.n	8003654 <TIM_OC2_SetConfig+0x94>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a16      	ldr	r2, [pc, #88]	; (80036a8 <TIM_OC2_SetConfig+0xe8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d113      	bne.n	800367c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800365a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003662:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	621a      	str	r2, [r3, #32]
}
 8003696:	bf00      	nop
 8003698:	371c      	adds	r7, #28
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	40010000 	.word	0x40010000
 80036a8:	40010400 	.word	0x40010400

080036ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0303 	bic.w	r3, r3, #3
 80036e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	4313      	orrs	r3, r2
 8003700:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a21      	ldr	r2, [pc, #132]	; (800378c <TIM_OC3_SetConfig+0xe0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d003      	beq.n	8003712 <TIM_OC3_SetConfig+0x66>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a20      	ldr	r2, [pc, #128]	; (8003790 <TIM_OC3_SetConfig+0xe4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d10d      	bne.n	800372e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003718:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	4313      	orrs	r3, r2
 8003724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800372c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a16      	ldr	r2, [pc, #88]	; (800378c <TIM_OC3_SetConfig+0xe0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d003      	beq.n	800373e <TIM_OC3_SetConfig+0x92>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a15      	ldr	r2, [pc, #84]	; (8003790 <TIM_OC3_SetConfig+0xe4>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d113      	bne.n	8003766 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800374c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	621a      	str	r2, [r3, #32]
}
 8003780:	bf00      	nop
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	40010000 	.word	0x40010000
 8003790:	40010400 	.word	0x40010400

08003794 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	021b      	lsls	r3, r3, #8
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	031b      	lsls	r3, r3, #12
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a12      	ldr	r2, [pc, #72]	; (8003838 <TIM_OC4_SetConfig+0xa4>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d003      	beq.n	80037fc <TIM_OC4_SetConfig+0x68>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a11      	ldr	r2, [pc, #68]	; (800383c <TIM_OC4_SetConfig+0xa8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d109      	bne.n	8003810 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003802:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	019b      	lsls	r3, r3, #6
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	621a      	str	r2, [r3, #32]
}
 800382a:	bf00      	nop
 800382c:	371c      	adds	r7, #28
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40010000 	.word	0x40010000
 800383c:	40010400 	.word	0x40010400

08003840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	f023 0201 	bic.w	r2, r3, #1
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800386a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f023 030a 	bic.w	r3, r3, #10
 800387c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	621a      	str	r2, [r3, #32]
}
 8003892:	bf00      	nop
 8003894:	371c      	adds	r7, #28
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800389e:	b480      	push	{r7}
 80038a0:	b087      	sub	sp, #28
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	f023 0210 	bic.w	r2, r3, #16
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	031b      	lsls	r3, r3, #12
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	621a      	str	r2, [r3, #32]
}
 80038f2:	bf00      	nop
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038fe:	b480      	push	{r7}
 8003900:	b085      	sub	sp, #20
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003914:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4313      	orrs	r3, r2
 800391c:	f043 0307 	orr.w	r3, r3, #7
 8003920:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	609a      	str	r2, [r3, #8]
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800394e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	021a      	lsls	r2, r3, #8
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	431a      	orrs	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	4313      	orrs	r3, r2
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	609a      	str	r2, [r3, #8]
}
 8003968:	bf00      	nop
 800396a:	371c      	adds	r7, #28
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f003 031f 	and.w	r3, r3, #31
 8003986:	2201      	movs	r2, #1
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a1a      	ldr	r2, [r3, #32]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	43db      	mvns	r3, r3
 8003996:	401a      	ands	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a1a      	ldr	r2, [r3, #32]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f003 031f 	and.w	r3, r3, #31
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ac:	431a      	orrs	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	621a      	str	r2, [r3, #32]
}
 80039b2:	bf00      	nop
 80039b4:	371c      	adds	r7, #28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
	...

080039c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e05a      	b.n	8003a8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a21      	ldr	r2, [pc, #132]	; (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d022      	beq.n	8003a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a24:	d01d      	beq.n	8003a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1d      	ldr	r2, [pc, #116]	; (8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d018      	beq.n	8003a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1b      	ldr	r2, [pc, #108]	; (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d013      	beq.n	8003a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1a      	ldr	r2, [pc, #104]	; (8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d00e      	beq.n	8003a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a18      	ldr	r2, [pc, #96]	; (8003aac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d009      	beq.n	8003a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a17      	ldr	r2, [pc, #92]	; (8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d004      	beq.n	8003a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a15      	ldr	r2, [pc, #84]	; (8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d10c      	bne.n	8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40010000 	.word	0x40010000
 8003aa0:	40000400 	.word	0x40000400
 8003aa4:	40000800 	.word	0x40000800
 8003aa8:	40000c00 	.word	0x40000c00
 8003aac:	40010400 	.word	0x40010400
 8003ab0:	40014000 	.word	0x40014000
 8003ab4:	40001800 	.word	0x40001800

08003ab8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e03f      	b.n	8003b72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d106      	bne.n	8003b0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fd fa5a 	bl	8000fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2224      	movs	r2, #36	; 0x24
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 fe81 	bl	800482c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695a      	ldr	r2, [r3, #20]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b08a      	sub	sp, #40	; 0x28
 8003b7e:	af02      	add	r7, sp, #8
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	603b      	str	r3, [r7, #0]
 8003b86:	4613      	mov	r3, r2
 8003b88:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	d17c      	bne.n	8003c94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <HAL_UART_Transmit+0x2c>
 8003ba0:	88fb      	ldrh	r3, [r7, #6]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e075      	b.n	8003c96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_UART_Transmit+0x3e>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e06e      	b.n	8003c96 <HAL_UART_Transmit+0x11c>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2221      	movs	r2, #33	; 0x21
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bce:	f7fd fba9 	bl	8001324 <HAL_GetTick>
 8003bd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	88fa      	ldrh	r2, [r7, #6]
 8003bd8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	88fa      	ldrh	r2, [r7, #6]
 8003bde:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be8:	d108      	bne.n	8003bfc <HAL_UART_Transmit+0x82>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d104      	bne.n	8003bfc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	61bb      	str	r3, [r7, #24]
 8003bfa:	e003      	b.n	8003c04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c00:	2300      	movs	r3, #0
 8003c02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c0c:	e02a      	b.n	8003c64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2200      	movs	r2, #0
 8003c16:	2180      	movs	r1, #128	; 0x80
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 fbc1 	bl	80043a0 <UART_WaitOnFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e036      	b.n	8003c96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10b      	bne.n	8003c46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	3302      	adds	r3, #2
 8003c42:	61bb      	str	r3, [r7, #24]
 8003c44:	e007      	b.n	8003c56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	781a      	ldrb	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	3301      	adds	r3, #1
 8003c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1cf      	bne.n	8003c0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2200      	movs	r2, #0
 8003c76:	2140      	movs	r1, #64	; 0x40
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 fb91 	bl	80043a0 <UART_WaitOnFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e006      	b.n	8003c96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	e000      	b.n	8003c96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c94:	2302      	movs	r3, #2
  }
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3720      	adds	r7, #32
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b08a      	sub	sp, #40	; 0x28
 8003ca2:	af02      	add	r7, sp, #8
 8003ca4:	60f8      	str	r0, [r7, #12]
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	603b      	str	r3, [r7, #0]
 8003caa:	4613      	mov	r3, r2
 8003cac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	f040 808c 	bne.w	8003dd8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <HAL_UART_Receive+0x2e>
 8003cc6:	88fb      	ldrh	r3, [r7, #6]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e084      	b.n	8003dda <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_UART_Receive+0x40>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e07d      	b.n	8003dda <HAL_UART_Receive+0x13c>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2222      	movs	r2, #34	; 0x22
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cfa:	f7fd fb13 	bl	8001324 <HAL_GetTick>
 8003cfe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	88fa      	ldrh	r2, [r7, #6]
 8003d04:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	88fa      	ldrh	r2, [r7, #6]
 8003d0a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d14:	d108      	bne.n	8003d28 <HAL_UART_Receive+0x8a>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d104      	bne.n	8003d28 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	e003      	b.n	8003d30 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003d38:	e043      	b.n	8003dc2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2200      	movs	r2, #0
 8003d42:	2120      	movs	r1, #32
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 fb2b 	bl	80043a0 <UART_WaitOnFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e042      	b.n	8003dda <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10c      	bne.n	8003d74 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	3302      	adds	r3, #2
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	e01f      	b.n	8003db4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d7c:	d007      	beq.n	8003d8e <HAL_UART_Receive+0xf0>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10a      	bne.n	8003d9c <HAL_UART_Receive+0xfe>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	e008      	b.n	8003dae <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3301      	adds	r3, #1
 8003db2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1b6      	bne.n	8003d3a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	e000      	b.n	8003dda <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003dd8:	2302      	movs	r3, #2
  }
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3720      	adds	r7, #32
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	4613      	mov	r3, r2
 8003dee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b20      	cmp	r3, #32
 8003dfa:	d11d      	bne.n	8003e38 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <HAL_UART_Receive_IT+0x26>
 8003e02:	88fb      	ldrh	r3, [r7, #6]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e016      	b.n	8003e3a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d101      	bne.n	8003e1a <HAL_UART_Receive_IT+0x38>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e00f      	b.n	8003e3a <HAL_UART_Receive_IT+0x58>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e28:	88fb      	ldrh	r3, [r7, #6]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	68b9      	ldr	r1, [r7, #8]
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 fb24 	bl	800447c <UART_Start_Receive_IT>
 8003e34:	4603      	mov	r3, r0
 8003e36:	e000      	b.n	8003e3a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e38:	2302      	movs	r3, #2
  }
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b0ba      	sub	sp, #232	; 0xe8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10f      	bne.n	8003eaa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d009      	beq.n	8003eaa <HAL_UART_IRQHandler+0x66>
 8003e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fc07 	bl	80046b6 <UART_Receive_IT>
      return;
 8003ea8:	e256      	b.n	8004358 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003eaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 80de 	beq.w	8004070 <HAL_UART_IRQHandler+0x22c>
 8003eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d106      	bne.n	8003ece <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ec4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 80d1 	beq.w	8004070 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00b      	beq.n	8003ef2 <HAL_UART_IRQHandler+0xae>
 8003eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	f043 0201 	orr.w	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <HAL_UART_IRQHandler+0xd2>
 8003efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f043 0202 	orr.w	r2, r3, #2
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00b      	beq.n	8003f3a <HAL_UART_IRQHandler+0xf6>
 8003f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f043 0204 	orr.w	r2, r3, #4
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d011      	beq.n	8003f6a <HAL_UART_IRQHandler+0x126>
 8003f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f4a:	f003 0320 	and.w	r3, r3, #32
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d105      	bne.n	8003f5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f043 0208 	orr.w	r2, r3, #8
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 81ed 	beq.w	800434e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f78:	f003 0320 	and.w	r3, r3, #32
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_UART_IRQHandler+0x14e>
 8003f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fb92 	bl	80046b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9c:	2b40      	cmp	r3, #64	; 0x40
 8003f9e:	bf0c      	ite	eq
 8003fa0:	2301      	moveq	r3, #1
 8003fa2:	2300      	movne	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d103      	bne.n	8003fbe <HAL_UART_IRQHandler+0x17a>
 8003fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d04f      	beq.n	800405e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fa9a 	bl	80044f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fce:	2b40      	cmp	r3, #64	; 0x40
 8003fd0:	d141      	bne.n	8004056 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	3314      	adds	r3, #20
 8003fd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fe0:	e853 3f00 	ldrex	r3, [r3]
 8003fe4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003fe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3314      	adds	r3, #20
 8003ffa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ffe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004002:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800400a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1d9      	bne.n	8003fd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004022:	2b00      	cmp	r3, #0
 8004024:	d013      	beq.n	800404e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402a:	4a7d      	ldr	r2, [pc, #500]	; (8004220 <HAL_UART_IRQHandler+0x3dc>)
 800402c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004032:	4618      	mov	r0, r3
 8004034:	f7fd fc08 	bl	8001848 <HAL_DMA_Abort_IT>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d016      	beq.n	800406c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004048:	4610      	mov	r0, r2
 800404a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800404c:	e00e      	b.n	800406c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f990 	bl	8004374 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004054:	e00a      	b.n	800406c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f98c 	bl	8004374 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800405c:	e006      	b.n	800406c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f988 	bl	8004374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800406a:	e170      	b.n	800434e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800406c:	bf00      	nop
    return;
 800406e:	e16e      	b.n	800434e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	2b01      	cmp	r3, #1
 8004076:	f040 814a 	bne.w	800430e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800407a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407e:	f003 0310 	and.w	r3, r3, #16
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 8143 	beq.w	800430e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 813c 	beq.w	800430e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	60bb      	str	r3, [r7, #8]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b6:	2b40      	cmp	r3, #64	; 0x40
 80040b8:	f040 80b4 	bne.w	8004224 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 8140 	beq.w	8004352 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040da:	429a      	cmp	r2, r3
 80040dc:	f080 8139 	bcs.w	8004352 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f2:	f000 8088 	beq.w	8004206 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	330c      	adds	r3, #12
 80040fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004104:	e853 3f00 	ldrex	r3, [r3]
 8004108:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800410c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004114:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	330c      	adds	r3, #12
 800411e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004122:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800412e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004132:	e841 2300 	strex	r3, r2, [r1]
 8004136:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800413a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1d9      	bne.n	80040f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3314      	adds	r3, #20
 8004148:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004152:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004154:	f023 0301 	bic.w	r3, r3, #1
 8004158:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3314      	adds	r3, #20
 8004162:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004166:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800416a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800416e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004172:	e841 2300 	strex	r3, r2, [r1]
 8004176:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004178:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1e1      	bne.n	8004142 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3314      	adds	r3, #20
 8004184:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800418e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004194:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3314      	adds	r3, #20
 800419e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e3      	bne.n	800417e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	330c      	adds	r3, #12
 80041ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ce:	e853 3f00 	ldrex	r3, [r3]
 80041d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041d6:	f023 0310 	bic.w	r3, r3, #16
 80041da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	330c      	adds	r3, #12
 80041e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80041e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80041ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041f0:	e841 2300 	strex	r3, r2, [r1]
 80041f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e3      	bne.n	80041c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	4618      	mov	r0, r3
 8004202:	f7fd fab1 	bl	8001768 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800420e:	b29b      	uxth	r3, r3
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	b29b      	uxth	r3, r3
 8004214:	4619      	mov	r1, r3
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f8b6 	bl	8004388 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800421c:	e099      	b.n	8004352 <HAL_UART_IRQHandler+0x50e>
 800421e:	bf00      	nop
 8004220:	080045bf 	.word	0x080045bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800422c:	b29b      	uxth	r3, r3
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 808b 	beq.w	8004356 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004240:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8086 	beq.w	8004356 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	330c      	adds	r3, #12
 8004250:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004254:	e853 3f00 	ldrex	r3, [r3]
 8004258:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800425a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800425c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004260:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	330c      	adds	r3, #12
 800426a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800426e:	647a      	str	r2, [r7, #68]	; 0x44
 8004270:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004274:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800427c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e3      	bne.n	800424a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3314      	adds	r3, #20
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	e853 3f00 	ldrex	r3, [r3]
 8004290:	623b      	str	r3, [r7, #32]
   return(result);
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	f023 0301 	bic.w	r3, r3, #1
 8004298:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3314      	adds	r3, #20
 80042a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042a6:	633a      	str	r2, [r7, #48]	; 0x30
 80042a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ae:	e841 2300 	strex	r3, r2, [r1]
 80042b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1e3      	bne.n	8004282 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	330c      	adds	r3, #12
 80042ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0310 	bic.w	r3, r3, #16
 80042de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	330c      	adds	r3, #12
 80042e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80042ec:	61fa      	str	r2, [r7, #28]
 80042ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f0:	69b9      	ldr	r1, [r7, #24]
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	617b      	str	r3, [r7, #20]
   return(result);
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e3      	bne.n	80042c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004300:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004304:	4619      	mov	r1, r3
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f83e 	bl	8004388 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800430c:	e023      	b.n	8004356 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800430e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004316:	2b00      	cmp	r3, #0
 8004318:	d009      	beq.n	800432e <HAL_UART_IRQHandler+0x4ea>
 800431a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f95d 	bl	80045e6 <UART_Transmit_IT>
    return;
 800432c:	e014      	b.n	8004358 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800432e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00e      	beq.n	8004358 <HAL_UART_IRQHandler+0x514>
 800433a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800433e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004342:	2b00      	cmp	r3, #0
 8004344:	d008      	beq.n	8004358 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f99d 	bl	8004686 <UART_EndTransmit_IT>
    return;
 800434c:	e004      	b.n	8004358 <HAL_UART_IRQHandler+0x514>
    return;
 800434e:	bf00      	nop
 8004350:	e002      	b.n	8004358 <HAL_UART_IRQHandler+0x514>
      return;
 8004352:	bf00      	nop
 8004354:	e000      	b.n	8004358 <HAL_UART_IRQHandler+0x514>
      return;
 8004356:	bf00      	nop
  }
}
 8004358:	37e8      	adds	r7, #232	; 0xe8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop

08004360 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b090      	sub	sp, #64	; 0x40
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	603b      	str	r3, [r7, #0]
 80043ac:	4613      	mov	r3, r2
 80043ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b0:	e050      	b.n	8004454 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b8:	d04c      	beq.n	8004454 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d007      	beq.n	80043d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80043c0:	f7fc ffb0 	bl	8001324 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d241      	bcs.n	8004454 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	330c      	adds	r3, #12
 80043d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043da:	e853 3f00 	ldrex	r3, [r3]
 80043de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	330c      	adds	r3, #12
 80043ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043f0:	637a      	str	r2, [r7, #52]	; 0x34
 80043f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043f8:	e841 2300 	strex	r3, r2, [r1]
 80043fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e5      	bne.n	80043d0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3314      	adds	r3, #20
 800440a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	e853 3f00 	ldrex	r3, [r3]
 8004412:	613b      	str	r3, [r7, #16]
   return(result);
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f023 0301 	bic.w	r3, r3, #1
 800441a:	63bb      	str	r3, [r7, #56]	; 0x38
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3314      	adds	r3, #20
 8004422:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004424:	623a      	str	r2, [r7, #32]
 8004426:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	69f9      	ldr	r1, [r7, #28]
 800442a:	6a3a      	ldr	r2, [r7, #32]
 800442c:	e841 2300 	strex	r3, r2, [r1]
 8004430:	61bb      	str	r3, [r7, #24]
   return(result);
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e5      	bne.n	8004404 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e00f      	b.n	8004474 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	4013      	ands	r3, r2
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	429a      	cmp	r2, r3
 8004462:	bf0c      	ite	eq
 8004464:	2301      	moveq	r3, #1
 8004466:	2300      	movne	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	461a      	mov	r2, r3
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	429a      	cmp	r2, r3
 8004470:	d09f      	beq.n	80043b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3740      	adds	r7, #64	; 0x40
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	4613      	mov	r3, r2
 8004488:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	88fa      	ldrh	r2, [r7, #6]
 8004494:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	88fa      	ldrh	r2, [r7, #6]
 800449a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2222      	movs	r2, #34	; 0x22
 80044a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d007      	beq.n	80044ca <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044c8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695a      	ldr	r2, [r3, #20]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0201 	orr.w	r2, r2, #1
 80044d8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f042 0220 	orr.w	r2, r2, #32
 80044e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b095      	sub	sp, #84	; 0x54
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	330c      	adds	r3, #12
 8004506:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800450a:	e853 3f00 	ldrex	r3, [r3]
 800450e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004512:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	330c      	adds	r3, #12
 800451e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004520:	643a      	str	r2, [r7, #64]	; 0x40
 8004522:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004526:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800452e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e5      	bne.n	8004500 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3314      	adds	r3, #20
 800453a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	e853 3f00 	ldrex	r3, [r3]
 8004542:	61fb      	str	r3, [r7, #28]
   return(result);
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f023 0301 	bic.w	r3, r3, #1
 800454a:	64bb      	str	r3, [r7, #72]	; 0x48
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3314      	adds	r3, #20
 8004552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004554:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800455a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800455c:	e841 2300 	strex	r3, r2, [r1]
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e5      	bne.n	8004534 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	2b01      	cmp	r3, #1
 800456e:	d119      	bne.n	80045a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	330c      	adds	r3, #12
 8004576:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	e853 3f00 	ldrex	r3, [r3]
 800457e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f023 0310 	bic.w	r3, r3, #16
 8004586:	647b      	str	r3, [r7, #68]	; 0x44
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	330c      	adds	r3, #12
 800458e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004590:	61ba      	str	r2, [r7, #24]
 8004592:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	6979      	ldr	r1, [r7, #20]
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	613b      	str	r3, [r7, #16]
   return(result);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e5      	bne.n	8004570 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045b2:	bf00      	nop
 80045b4:	3754      	adds	r7, #84	; 0x54
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7ff fecb 	bl	8004374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045de:	bf00      	nop
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b21      	cmp	r3, #33	; 0x21
 80045f8:	d13e      	bne.n	8004678 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004602:	d114      	bne.n	800462e <UART_Transmit_IT+0x48>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d110      	bne.n	800462e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	461a      	mov	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004620:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	1c9a      	adds	r2, r3, #2
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	621a      	str	r2, [r3, #32]
 800462c:	e008      	b.n	8004640 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	1c59      	adds	r1, r3, #1
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6211      	str	r1, [r2, #32]
 8004638:	781a      	ldrb	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b01      	subs	r3, #1
 8004648:	b29b      	uxth	r3, r3
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	4619      	mov	r1, r3
 800464e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10f      	bne.n	8004674 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004662:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004672:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	e000      	b.n	800467a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004678:	2302      	movs	r3, #2
  }
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800469c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7ff fe5a 	bl	8004360 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b08c      	sub	sp, #48	; 0x30
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b22      	cmp	r3, #34	; 0x22
 80046c8:	f040 80ab 	bne.w	8004822 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d4:	d117      	bne.n	8004706 <UART_Receive_IT+0x50>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d113      	bne.n	8004706 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046de:	2300      	movs	r3, #0
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fe:	1c9a      	adds	r2, r3, #2
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	629a      	str	r2, [r3, #40]	; 0x28
 8004704:	e026      	b.n	8004754 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800470c:	2300      	movs	r3, #0
 800470e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004718:	d007      	beq.n	800472a <UART_Receive_IT+0x74>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <UART_Receive_IT+0x82>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	b2da      	uxtb	r2, r3
 8004732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004734:	701a      	strb	r2, [r3, #0]
 8004736:	e008      	b.n	800474a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004744:	b2da      	uxtb	r2, r3
 8004746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004748:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b29b      	uxth	r3, r3
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	4619      	mov	r1, r3
 8004762:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004764:	2b00      	cmp	r3, #0
 8004766:	d15a      	bne.n	800481e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0220 	bic.w	r2, r2, #32
 8004776:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004786:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695a      	ldr	r2, [r3, #20]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0201 	bic.w	r2, r2, #1
 8004796:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d135      	bne.n	8004814 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	330c      	adds	r3, #12
 80047b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	613b      	str	r3, [r7, #16]
   return(result);
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f023 0310 	bic.w	r3, r3, #16
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	330c      	adds	r3, #12
 80047cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ce:	623a      	str	r2, [r7, #32]
 80047d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d2:	69f9      	ldr	r1, [r7, #28]
 80047d4:	6a3a      	ldr	r2, [r7, #32]
 80047d6:	e841 2300 	strex	r3, r2, [r1]
 80047da:	61bb      	str	r3, [r7, #24]
   return(result);
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1e5      	bne.n	80047ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	2b10      	cmp	r3, #16
 80047ee:	d10a      	bne.n	8004806 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047f0:	2300      	movs	r3, #0
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800480a:	4619      	mov	r1, r3
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff fdbb 	bl	8004388 <HAL_UARTEx_RxEventCallback>
 8004812:	e002      	b.n	800481a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7fc fcbd 	bl	8001194 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	e002      	b.n	8004824 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	e000      	b.n	8004824 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004822:	2302      	movs	r3, #2
  }
}
 8004824:	4618      	mov	r0, r3
 8004826:	3730      	adds	r7, #48	; 0x30
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800482c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004830:	b0c0      	sub	sp, #256	; 0x100
 8004832:	af00      	add	r7, sp, #0
 8004834:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004848:	68d9      	ldr	r1, [r3, #12]
 800484a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	ea40 0301 	orr.w	r3, r0, r1
 8004854:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	431a      	orrs	r2, r3
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	431a      	orrs	r2, r3
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004884:	f021 010c 	bic.w	r1, r1, #12
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004892:	430b      	orrs	r3, r1
 8004894:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a6:	6999      	ldr	r1, [r3, #24]
 80048a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	ea40 0301 	orr.w	r3, r0, r1
 80048b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4b8f      	ldr	r3, [pc, #572]	; (8004af8 <UART_SetConfig+0x2cc>)
 80048bc:	429a      	cmp	r2, r3
 80048be:	d005      	beq.n	80048cc <UART_SetConfig+0xa0>
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	4b8d      	ldr	r3, [pc, #564]	; (8004afc <UART_SetConfig+0x2d0>)
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d104      	bne.n	80048d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048cc:	f7fe f88a 	bl	80029e4 <HAL_RCC_GetPCLK2Freq>
 80048d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048d4:	e003      	b.n	80048de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048d6:	f7fe f871 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 80048da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048e8:	f040 810c 	bne.w	8004b04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048f0:	2200      	movs	r2, #0
 80048f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80048fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048fe:	4622      	mov	r2, r4
 8004900:	462b      	mov	r3, r5
 8004902:	1891      	adds	r1, r2, r2
 8004904:	65b9      	str	r1, [r7, #88]	; 0x58
 8004906:	415b      	adcs	r3, r3
 8004908:	65fb      	str	r3, [r7, #92]	; 0x5c
 800490a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800490e:	4621      	mov	r1, r4
 8004910:	eb12 0801 	adds.w	r8, r2, r1
 8004914:	4629      	mov	r1, r5
 8004916:	eb43 0901 	adc.w	r9, r3, r1
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004926:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800492a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800492e:	4690      	mov	r8, r2
 8004930:	4699      	mov	r9, r3
 8004932:	4623      	mov	r3, r4
 8004934:	eb18 0303 	adds.w	r3, r8, r3
 8004938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800493c:	462b      	mov	r3, r5
 800493e:	eb49 0303 	adc.w	r3, r9, r3
 8004942:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004952:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004956:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800495a:	460b      	mov	r3, r1
 800495c:	18db      	adds	r3, r3, r3
 800495e:	653b      	str	r3, [r7, #80]	; 0x50
 8004960:	4613      	mov	r3, r2
 8004962:	eb42 0303 	adc.w	r3, r2, r3
 8004966:	657b      	str	r3, [r7, #84]	; 0x54
 8004968:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800496c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004970:	f7fb fc96 	bl	80002a0 <__aeabi_uldivmod>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4b61      	ldr	r3, [pc, #388]	; (8004b00 <UART_SetConfig+0x2d4>)
 800497a:	fba3 2302 	umull	r2, r3, r3, r2
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	011c      	lsls	r4, r3, #4
 8004982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004986:	2200      	movs	r2, #0
 8004988:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800498c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004990:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004994:	4642      	mov	r2, r8
 8004996:	464b      	mov	r3, r9
 8004998:	1891      	adds	r1, r2, r2
 800499a:	64b9      	str	r1, [r7, #72]	; 0x48
 800499c:	415b      	adcs	r3, r3
 800499e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049a4:	4641      	mov	r1, r8
 80049a6:	eb12 0a01 	adds.w	sl, r2, r1
 80049aa:	4649      	mov	r1, r9
 80049ac:	eb43 0b01 	adc.w	fp, r3, r1
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049c4:	4692      	mov	sl, r2
 80049c6:	469b      	mov	fp, r3
 80049c8:	4643      	mov	r3, r8
 80049ca:	eb1a 0303 	adds.w	r3, sl, r3
 80049ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049d2:	464b      	mov	r3, r9
 80049d4:	eb4b 0303 	adc.w	r3, fp, r3
 80049d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80049ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049f0:	460b      	mov	r3, r1
 80049f2:	18db      	adds	r3, r3, r3
 80049f4:	643b      	str	r3, [r7, #64]	; 0x40
 80049f6:	4613      	mov	r3, r2
 80049f8:	eb42 0303 	adc.w	r3, r2, r3
 80049fc:	647b      	str	r3, [r7, #68]	; 0x44
 80049fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a06:	f7fb fc4b 	bl	80002a0 <__aeabi_uldivmod>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	4611      	mov	r1, r2
 8004a10:	4b3b      	ldr	r3, [pc, #236]	; (8004b00 <UART_SetConfig+0x2d4>)
 8004a12:	fba3 2301 	umull	r2, r3, r3, r1
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	2264      	movs	r2, #100	; 0x64
 8004a1a:	fb02 f303 	mul.w	r3, r2, r3
 8004a1e:	1acb      	subs	r3, r1, r3
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a26:	4b36      	ldr	r3, [pc, #216]	; (8004b00 <UART_SetConfig+0x2d4>)
 8004a28:	fba3 2302 	umull	r2, r3, r3, r2
 8004a2c:	095b      	lsrs	r3, r3, #5
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a34:	441c      	add	r4, r3
 8004a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a48:	4642      	mov	r2, r8
 8004a4a:	464b      	mov	r3, r9
 8004a4c:	1891      	adds	r1, r2, r2
 8004a4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a50:	415b      	adcs	r3, r3
 8004a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a58:	4641      	mov	r1, r8
 8004a5a:	1851      	adds	r1, r2, r1
 8004a5c:	6339      	str	r1, [r7, #48]	; 0x30
 8004a5e:	4649      	mov	r1, r9
 8004a60:	414b      	adcs	r3, r1
 8004a62:	637b      	str	r3, [r7, #52]	; 0x34
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a70:	4659      	mov	r1, fp
 8004a72:	00cb      	lsls	r3, r1, #3
 8004a74:	4651      	mov	r1, sl
 8004a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a7a:	4651      	mov	r1, sl
 8004a7c:	00ca      	lsls	r2, r1, #3
 8004a7e:	4610      	mov	r0, r2
 8004a80:	4619      	mov	r1, r3
 8004a82:	4603      	mov	r3, r0
 8004a84:	4642      	mov	r2, r8
 8004a86:	189b      	adds	r3, r3, r2
 8004a88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a8c:	464b      	mov	r3, r9
 8004a8e:	460a      	mov	r2, r1
 8004a90:	eb42 0303 	adc.w	r3, r2, r3
 8004a94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004aa4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004aa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004aac:	460b      	mov	r3, r1
 8004aae:	18db      	adds	r3, r3, r3
 8004ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	eb42 0303 	adc.w	r3, r2, r3
 8004ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004abe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ac2:	f7fb fbed 	bl	80002a0 <__aeabi_uldivmod>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <UART_SetConfig+0x2d4>)
 8004acc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ad0:	095b      	lsrs	r3, r3, #5
 8004ad2:	2164      	movs	r1, #100	; 0x64
 8004ad4:	fb01 f303 	mul.w	r3, r1, r3
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	3332      	adds	r3, #50	; 0x32
 8004ade:	4a08      	ldr	r2, [pc, #32]	; (8004b00 <UART_SetConfig+0x2d4>)
 8004ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae4:	095b      	lsrs	r3, r3, #5
 8004ae6:	f003 0207 	and.w	r2, r3, #7
 8004aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4422      	add	r2, r4
 8004af2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004af4:	e105      	b.n	8004d02 <UART_SetConfig+0x4d6>
 8004af6:	bf00      	nop
 8004af8:	40011000 	.word	0x40011000
 8004afc:	40011400 	.word	0x40011400
 8004b00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b16:	4642      	mov	r2, r8
 8004b18:	464b      	mov	r3, r9
 8004b1a:	1891      	adds	r1, r2, r2
 8004b1c:	6239      	str	r1, [r7, #32]
 8004b1e:	415b      	adcs	r3, r3
 8004b20:	627b      	str	r3, [r7, #36]	; 0x24
 8004b22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b26:	4641      	mov	r1, r8
 8004b28:	1854      	adds	r4, r2, r1
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	eb43 0501 	adc.w	r5, r3, r1
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	f04f 0300 	mov.w	r3, #0
 8004b38:	00eb      	lsls	r3, r5, #3
 8004b3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b3e:	00e2      	lsls	r2, r4, #3
 8004b40:	4614      	mov	r4, r2
 8004b42:	461d      	mov	r5, r3
 8004b44:	4643      	mov	r3, r8
 8004b46:	18e3      	adds	r3, r4, r3
 8004b48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b4c:	464b      	mov	r3, r9
 8004b4e:	eb45 0303 	adc.w	r3, r5, r3
 8004b52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b66:	f04f 0200 	mov.w	r2, #0
 8004b6a:	f04f 0300 	mov.w	r3, #0
 8004b6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b72:	4629      	mov	r1, r5
 8004b74:	008b      	lsls	r3, r1, #2
 8004b76:	4621      	mov	r1, r4
 8004b78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	008a      	lsls	r2, r1, #2
 8004b80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b84:	f7fb fb8c 	bl	80002a0 <__aeabi_uldivmod>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4b60      	ldr	r3, [pc, #384]	; (8004d10 <UART_SetConfig+0x4e4>)
 8004b8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	011c      	lsls	r4, r3, #4
 8004b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ba0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ba4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ba8:	4642      	mov	r2, r8
 8004baa:	464b      	mov	r3, r9
 8004bac:	1891      	adds	r1, r2, r2
 8004bae:	61b9      	str	r1, [r7, #24]
 8004bb0:	415b      	adcs	r3, r3
 8004bb2:	61fb      	str	r3, [r7, #28]
 8004bb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bb8:	4641      	mov	r1, r8
 8004bba:	1851      	adds	r1, r2, r1
 8004bbc:	6139      	str	r1, [r7, #16]
 8004bbe:	4649      	mov	r1, r9
 8004bc0:	414b      	adcs	r3, r1
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bd0:	4659      	mov	r1, fp
 8004bd2:	00cb      	lsls	r3, r1, #3
 8004bd4:	4651      	mov	r1, sl
 8004bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bda:	4651      	mov	r1, sl
 8004bdc:	00ca      	lsls	r2, r1, #3
 8004bde:	4610      	mov	r0, r2
 8004be0:	4619      	mov	r1, r3
 8004be2:	4603      	mov	r3, r0
 8004be4:	4642      	mov	r2, r8
 8004be6:	189b      	adds	r3, r3, r2
 8004be8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bec:	464b      	mov	r3, r9
 8004bee:	460a      	mov	r2, r1
 8004bf0:	eb42 0303 	adc.w	r3, r2, r3
 8004bf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c10:	4649      	mov	r1, r9
 8004c12:	008b      	lsls	r3, r1, #2
 8004c14:	4641      	mov	r1, r8
 8004c16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c1a:	4641      	mov	r1, r8
 8004c1c:	008a      	lsls	r2, r1, #2
 8004c1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c22:	f7fb fb3d 	bl	80002a0 <__aeabi_uldivmod>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4b39      	ldr	r3, [pc, #228]	; (8004d10 <UART_SetConfig+0x4e4>)
 8004c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c30:	095b      	lsrs	r3, r3, #5
 8004c32:	2164      	movs	r1, #100	; 0x64
 8004c34:	fb01 f303 	mul.w	r3, r1, r3
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	3332      	adds	r3, #50	; 0x32
 8004c3e:	4a34      	ldr	r2, [pc, #208]	; (8004d10 <UART_SetConfig+0x4e4>)
 8004c40:	fba2 2303 	umull	r2, r3, r2, r3
 8004c44:	095b      	lsrs	r3, r3, #5
 8004c46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c4a:	441c      	add	r4, r3
 8004c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c50:	2200      	movs	r2, #0
 8004c52:	673b      	str	r3, [r7, #112]	; 0x70
 8004c54:	677a      	str	r2, [r7, #116]	; 0x74
 8004c56:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c5a:	4642      	mov	r2, r8
 8004c5c:	464b      	mov	r3, r9
 8004c5e:	1891      	adds	r1, r2, r2
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	415b      	adcs	r3, r3
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c6a:	4641      	mov	r1, r8
 8004c6c:	1851      	adds	r1, r2, r1
 8004c6e:	6039      	str	r1, [r7, #0]
 8004c70:	4649      	mov	r1, r9
 8004c72:	414b      	adcs	r3, r1
 8004c74:	607b      	str	r3, [r7, #4]
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c82:	4659      	mov	r1, fp
 8004c84:	00cb      	lsls	r3, r1, #3
 8004c86:	4651      	mov	r1, sl
 8004c88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c8c:	4651      	mov	r1, sl
 8004c8e:	00ca      	lsls	r2, r1, #3
 8004c90:	4610      	mov	r0, r2
 8004c92:	4619      	mov	r1, r3
 8004c94:	4603      	mov	r3, r0
 8004c96:	4642      	mov	r2, r8
 8004c98:	189b      	adds	r3, r3, r2
 8004c9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c9c:	464b      	mov	r3, r9
 8004c9e:	460a      	mov	r2, r1
 8004ca0:	eb42 0303 	adc.w	r3, r2, r3
 8004ca4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	663b      	str	r3, [r7, #96]	; 0x60
 8004cb0:	667a      	str	r2, [r7, #100]	; 0x64
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004cbe:	4649      	mov	r1, r9
 8004cc0:	008b      	lsls	r3, r1, #2
 8004cc2:	4641      	mov	r1, r8
 8004cc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cc8:	4641      	mov	r1, r8
 8004cca:	008a      	lsls	r2, r1, #2
 8004ccc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004cd0:	f7fb fae6 	bl	80002a0 <__aeabi_uldivmod>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <UART_SetConfig+0x4e4>)
 8004cda:	fba3 1302 	umull	r1, r3, r3, r2
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	2164      	movs	r1, #100	; 0x64
 8004ce2:	fb01 f303 	mul.w	r3, r1, r3
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	3332      	adds	r3, #50	; 0x32
 8004cec:	4a08      	ldr	r2, [pc, #32]	; (8004d10 <UART_SetConfig+0x4e4>)
 8004cee:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf2:	095b      	lsrs	r3, r3, #5
 8004cf4:	f003 020f 	and.w	r2, r3, #15
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4422      	add	r2, r4
 8004d00:	609a      	str	r2, [r3, #8]
}
 8004d02:	bf00      	nop
 8004d04:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d0e:	bf00      	nop
 8004d10:	51eb851f 	.word	0x51eb851f

08004d14 <__errno>:
 8004d14:	4b01      	ldr	r3, [pc, #4]	; (8004d1c <__errno+0x8>)
 8004d16:	6818      	ldr	r0, [r3, #0]
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	20000010 	.word	0x20000010

08004d20 <__libc_init_array>:
 8004d20:	b570      	push	{r4, r5, r6, lr}
 8004d22:	4d0d      	ldr	r5, [pc, #52]	; (8004d58 <__libc_init_array+0x38>)
 8004d24:	4c0d      	ldr	r4, [pc, #52]	; (8004d5c <__libc_init_array+0x3c>)
 8004d26:	1b64      	subs	r4, r4, r5
 8004d28:	10a4      	asrs	r4, r4, #2
 8004d2a:	2600      	movs	r6, #0
 8004d2c:	42a6      	cmp	r6, r4
 8004d2e:	d109      	bne.n	8004d44 <__libc_init_array+0x24>
 8004d30:	4d0b      	ldr	r5, [pc, #44]	; (8004d60 <__libc_init_array+0x40>)
 8004d32:	4c0c      	ldr	r4, [pc, #48]	; (8004d64 <__libc_init_array+0x44>)
 8004d34:	f001 fdf4 	bl	8006920 <_init>
 8004d38:	1b64      	subs	r4, r4, r5
 8004d3a:	10a4      	asrs	r4, r4, #2
 8004d3c:	2600      	movs	r6, #0
 8004d3e:	42a6      	cmp	r6, r4
 8004d40:	d105      	bne.n	8004d4e <__libc_init_array+0x2e>
 8004d42:	bd70      	pop	{r4, r5, r6, pc}
 8004d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d48:	4798      	blx	r3
 8004d4a:	3601      	adds	r6, #1
 8004d4c:	e7ee      	b.n	8004d2c <__libc_init_array+0xc>
 8004d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d52:	4798      	blx	r3
 8004d54:	3601      	adds	r6, #1
 8004d56:	e7f2      	b.n	8004d3e <__libc_init_array+0x1e>
 8004d58:	08006b98 	.word	0x08006b98
 8004d5c:	08006b98 	.word	0x08006b98
 8004d60:	08006b98 	.word	0x08006b98
 8004d64:	08006b9c 	.word	0x08006b9c

08004d68 <memset>:
 8004d68:	4402      	add	r2, r0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d100      	bne.n	8004d72 <memset+0xa>
 8004d70:	4770      	bx	lr
 8004d72:	f803 1b01 	strb.w	r1, [r3], #1
 8004d76:	e7f9      	b.n	8004d6c <memset+0x4>

08004d78 <iprintf>:
 8004d78:	b40f      	push	{r0, r1, r2, r3}
 8004d7a:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <iprintf+0x2c>)
 8004d7c:	b513      	push	{r0, r1, r4, lr}
 8004d7e:	681c      	ldr	r4, [r3, #0]
 8004d80:	b124      	cbz	r4, 8004d8c <iprintf+0x14>
 8004d82:	69a3      	ldr	r3, [r4, #24]
 8004d84:	b913      	cbnz	r3, 8004d8c <iprintf+0x14>
 8004d86:	4620      	mov	r0, r4
 8004d88:	f000 fbb8 	bl	80054fc <__sinit>
 8004d8c:	ab05      	add	r3, sp, #20
 8004d8e:	9a04      	ldr	r2, [sp, #16]
 8004d90:	68a1      	ldr	r1, [r4, #8]
 8004d92:	9301      	str	r3, [sp, #4]
 8004d94:	4620      	mov	r0, r4
 8004d96:	f000 ffad 	bl	8005cf4 <_vfiprintf_r>
 8004d9a:	b002      	add	sp, #8
 8004d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004da0:	b004      	add	sp, #16
 8004da2:	4770      	bx	lr
 8004da4:	20000010 	.word	0x20000010

08004da8 <_puts_r>:
 8004da8:	b570      	push	{r4, r5, r6, lr}
 8004daa:	460e      	mov	r6, r1
 8004dac:	4605      	mov	r5, r0
 8004dae:	b118      	cbz	r0, 8004db8 <_puts_r+0x10>
 8004db0:	6983      	ldr	r3, [r0, #24]
 8004db2:	b90b      	cbnz	r3, 8004db8 <_puts_r+0x10>
 8004db4:	f000 fba2 	bl	80054fc <__sinit>
 8004db8:	69ab      	ldr	r3, [r5, #24]
 8004dba:	68ac      	ldr	r4, [r5, #8]
 8004dbc:	b913      	cbnz	r3, 8004dc4 <_puts_r+0x1c>
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	f000 fb9c 	bl	80054fc <__sinit>
 8004dc4:	4b2c      	ldr	r3, [pc, #176]	; (8004e78 <_puts_r+0xd0>)
 8004dc6:	429c      	cmp	r4, r3
 8004dc8:	d120      	bne.n	8004e0c <_puts_r+0x64>
 8004dca:	686c      	ldr	r4, [r5, #4]
 8004dcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dce:	07db      	lsls	r3, r3, #31
 8004dd0:	d405      	bmi.n	8004dde <_puts_r+0x36>
 8004dd2:	89a3      	ldrh	r3, [r4, #12]
 8004dd4:	0598      	lsls	r0, r3, #22
 8004dd6:	d402      	bmi.n	8004dde <_puts_r+0x36>
 8004dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dda:	f000 fc2d 	bl	8005638 <__retarget_lock_acquire_recursive>
 8004dde:	89a3      	ldrh	r3, [r4, #12]
 8004de0:	0719      	lsls	r1, r3, #28
 8004de2:	d51d      	bpl.n	8004e20 <_puts_r+0x78>
 8004de4:	6923      	ldr	r3, [r4, #16]
 8004de6:	b1db      	cbz	r3, 8004e20 <_puts_r+0x78>
 8004de8:	3e01      	subs	r6, #1
 8004dea:	68a3      	ldr	r3, [r4, #8]
 8004dec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004df0:	3b01      	subs	r3, #1
 8004df2:	60a3      	str	r3, [r4, #8]
 8004df4:	bb39      	cbnz	r1, 8004e46 <_puts_r+0x9e>
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	da38      	bge.n	8004e6c <_puts_r+0xc4>
 8004dfa:	4622      	mov	r2, r4
 8004dfc:	210a      	movs	r1, #10
 8004dfe:	4628      	mov	r0, r5
 8004e00:	f000 f980 	bl	8005104 <__swbuf_r>
 8004e04:	3001      	adds	r0, #1
 8004e06:	d011      	beq.n	8004e2c <_puts_r+0x84>
 8004e08:	250a      	movs	r5, #10
 8004e0a:	e011      	b.n	8004e30 <_puts_r+0x88>
 8004e0c:	4b1b      	ldr	r3, [pc, #108]	; (8004e7c <_puts_r+0xd4>)
 8004e0e:	429c      	cmp	r4, r3
 8004e10:	d101      	bne.n	8004e16 <_puts_r+0x6e>
 8004e12:	68ac      	ldr	r4, [r5, #8]
 8004e14:	e7da      	b.n	8004dcc <_puts_r+0x24>
 8004e16:	4b1a      	ldr	r3, [pc, #104]	; (8004e80 <_puts_r+0xd8>)
 8004e18:	429c      	cmp	r4, r3
 8004e1a:	bf08      	it	eq
 8004e1c:	68ec      	ldreq	r4, [r5, #12]
 8004e1e:	e7d5      	b.n	8004dcc <_puts_r+0x24>
 8004e20:	4621      	mov	r1, r4
 8004e22:	4628      	mov	r0, r5
 8004e24:	f000 f9d2 	bl	80051cc <__swsetup_r>
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	d0dd      	beq.n	8004de8 <_puts_r+0x40>
 8004e2c:	f04f 35ff 	mov.w	r5, #4294967295
 8004e30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e32:	07da      	lsls	r2, r3, #31
 8004e34:	d405      	bmi.n	8004e42 <_puts_r+0x9a>
 8004e36:	89a3      	ldrh	r3, [r4, #12]
 8004e38:	059b      	lsls	r3, r3, #22
 8004e3a:	d402      	bmi.n	8004e42 <_puts_r+0x9a>
 8004e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e3e:	f000 fbfc 	bl	800563a <__retarget_lock_release_recursive>
 8004e42:	4628      	mov	r0, r5
 8004e44:	bd70      	pop	{r4, r5, r6, pc}
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	da04      	bge.n	8004e54 <_puts_r+0xac>
 8004e4a:	69a2      	ldr	r2, [r4, #24]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	dc06      	bgt.n	8004e5e <_puts_r+0xb6>
 8004e50:	290a      	cmp	r1, #10
 8004e52:	d004      	beq.n	8004e5e <_puts_r+0xb6>
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	6022      	str	r2, [r4, #0]
 8004e5a:	7019      	strb	r1, [r3, #0]
 8004e5c:	e7c5      	b.n	8004dea <_puts_r+0x42>
 8004e5e:	4622      	mov	r2, r4
 8004e60:	4628      	mov	r0, r5
 8004e62:	f000 f94f 	bl	8005104 <__swbuf_r>
 8004e66:	3001      	adds	r0, #1
 8004e68:	d1bf      	bne.n	8004dea <_puts_r+0x42>
 8004e6a:	e7df      	b.n	8004e2c <_puts_r+0x84>
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	250a      	movs	r5, #10
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	6022      	str	r2, [r4, #0]
 8004e74:	701d      	strb	r5, [r3, #0]
 8004e76:	e7db      	b.n	8004e30 <_puts_r+0x88>
 8004e78:	08006a00 	.word	0x08006a00
 8004e7c:	08006a20 	.word	0x08006a20
 8004e80:	080069e0 	.word	0x080069e0

08004e84 <puts>:
 8004e84:	4b02      	ldr	r3, [pc, #8]	; (8004e90 <puts+0xc>)
 8004e86:	4601      	mov	r1, r0
 8004e88:	6818      	ldr	r0, [r3, #0]
 8004e8a:	f7ff bf8d 	b.w	8004da8 <_puts_r>
 8004e8e:	bf00      	nop
 8004e90:	20000010 	.word	0x20000010

08004e94 <setvbuf>:
 8004e94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004e98:	461d      	mov	r5, r3
 8004e9a:	4b5d      	ldr	r3, [pc, #372]	; (8005010 <setvbuf+0x17c>)
 8004e9c:	681f      	ldr	r7, [r3, #0]
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	460e      	mov	r6, r1
 8004ea2:	4690      	mov	r8, r2
 8004ea4:	b127      	cbz	r7, 8004eb0 <setvbuf+0x1c>
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	b913      	cbnz	r3, 8004eb0 <setvbuf+0x1c>
 8004eaa:	4638      	mov	r0, r7
 8004eac:	f000 fb26 	bl	80054fc <__sinit>
 8004eb0:	4b58      	ldr	r3, [pc, #352]	; (8005014 <setvbuf+0x180>)
 8004eb2:	429c      	cmp	r4, r3
 8004eb4:	d167      	bne.n	8004f86 <setvbuf+0xf2>
 8004eb6:	687c      	ldr	r4, [r7, #4]
 8004eb8:	f1b8 0f02 	cmp.w	r8, #2
 8004ebc:	d006      	beq.n	8004ecc <setvbuf+0x38>
 8004ebe:	f1b8 0f01 	cmp.w	r8, #1
 8004ec2:	f200 809f 	bhi.w	8005004 <setvbuf+0x170>
 8004ec6:	2d00      	cmp	r5, #0
 8004ec8:	f2c0 809c 	blt.w	8005004 <setvbuf+0x170>
 8004ecc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ece:	07db      	lsls	r3, r3, #31
 8004ed0:	d405      	bmi.n	8004ede <setvbuf+0x4a>
 8004ed2:	89a3      	ldrh	r3, [r4, #12]
 8004ed4:	0598      	lsls	r0, r3, #22
 8004ed6:	d402      	bmi.n	8004ede <setvbuf+0x4a>
 8004ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eda:	f000 fbad 	bl	8005638 <__retarget_lock_acquire_recursive>
 8004ede:	4621      	mov	r1, r4
 8004ee0:	4638      	mov	r0, r7
 8004ee2:	f000 fa77 	bl	80053d4 <_fflush_r>
 8004ee6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ee8:	b141      	cbz	r1, 8004efc <setvbuf+0x68>
 8004eea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004eee:	4299      	cmp	r1, r3
 8004ef0:	d002      	beq.n	8004ef8 <setvbuf+0x64>
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	f000 fc22 	bl	800573c <_free_r>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	6363      	str	r3, [r4, #52]	; 0x34
 8004efc:	2300      	movs	r3, #0
 8004efe:	61a3      	str	r3, [r4, #24]
 8004f00:	6063      	str	r3, [r4, #4]
 8004f02:	89a3      	ldrh	r3, [r4, #12]
 8004f04:	0619      	lsls	r1, r3, #24
 8004f06:	d503      	bpl.n	8004f10 <setvbuf+0x7c>
 8004f08:	6921      	ldr	r1, [r4, #16]
 8004f0a:	4638      	mov	r0, r7
 8004f0c:	f000 fc16 	bl	800573c <_free_r>
 8004f10:	89a3      	ldrh	r3, [r4, #12]
 8004f12:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004f16:	f023 0303 	bic.w	r3, r3, #3
 8004f1a:	f1b8 0f02 	cmp.w	r8, #2
 8004f1e:	81a3      	strh	r3, [r4, #12]
 8004f20:	d06c      	beq.n	8004ffc <setvbuf+0x168>
 8004f22:	ab01      	add	r3, sp, #4
 8004f24:	466a      	mov	r2, sp
 8004f26:	4621      	mov	r1, r4
 8004f28:	4638      	mov	r0, r7
 8004f2a:	f000 fb99 	bl	8005660 <__swhatbuf_r>
 8004f2e:	89a3      	ldrh	r3, [r4, #12]
 8004f30:	4318      	orrs	r0, r3
 8004f32:	81a0      	strh	r0, [r4, #12]
 8004f34:	2d00      	cmp	r5, #0
 8004f36:	d130      	bne.n	8004f9a <setvbuf+0x106>
 8004f38:	9d00      	ldr	r5, [sp, #0]
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	f000 fbf6 	bl	800572c <malloc>
 8004f40:	4606      	mov	r6, r0
 8004f42:	2800      	cmp	r0, #0
 8004f44:	d155      	bne.n	8004ff2 <setvbuf+0x15e>
 8004f46:	f8dd 9000 	ldr.w	r9, [sp]
 8004f4a:	45a9      	cmp	r9, r5
 8004f4c:	d14a      	bne.n	8004fe4 <setvbuf+0x150>
 8004f4e:	f04f 35ff 	mov.w	r5, #4294967295
 8004f52:	2200      	movs	r2, #0
 8004f54:	60a2      	str	r2, [r4, #8]
 8004f56:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004f5a:	6022      	str	r2, [r4, #0]
 8004f5c:	6122      	str	r2, [r4, #16]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f64:	6162      	str	r2, [r4, #20]
 8004f66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f68:	f043 0302 	orr.w	r3, r3, #2
 8004f6c:	07d2      	lsls	r2, r2, #31
 8004f6e:	81a3      	strh	r3, [r4, #12]
 8004f70:	d405      	bmi.n	8004f7e <setvbuf+0xea>
 8004f72:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004f76:	d102      	bne.n	8004f7e <setvbuf+0xea>
 8004f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f7a:	f000 fb5e 	bl	800563a <__retarget_lock_release_recursive>
 8004f7e:	4628      	mov	r0, r5
 8004f80:	b003      	add	sp, #12
 8004f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f86:	4b24      	ldr	r3, [pc, #144]	; (8005018 <setvbuf+0x184>)
 8004f88:	429c      	cmp	r4, r3
 8004f8a:	d101      	bne.n	8004f90 <setvbuf+0xfc>
 8004f8c:	68bc      	ldr	r4, [r7, #8]
 8004f8e:	e793      	b.n	8004eb8 <setvbuf+0x24>
 8004f90:	4b22      	ldr	r3, [pc, #136]	; (800501c <setvbuf+0x188>)
 8004f92:	429c      	cmp	r4, r3
 8004f94:	bf08      	it	eq
 8004f96:	68fc      	ldreq	r4, [r7, #12]
 8004f98:	e78e      	b.n	8004eb8 <setvbuf+0x24>
 8004f9a:	2e00      	cmp	r6, #0
 8004f9c:	d0cd      	beq.n	8004f3a <setvbuf+0xa6>
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	b913      	cbnz	r3, 8004fa8 <setvbuf+0x114>
 8004fa2:	4638      	mov	r0, r7
 8004fa4:	f000 faaa 	bl	80054fc <__sinit>
 8004fa8:	f1b8 0f01 	cmp.w	r8, #1
 8004fac:	bf08      	it	eq
 8004fae:	89a3      	ldrheq	r3, [r4, #12]
 8004fb0:	6026      	str	r6, [r4, #0]
 8004fb2:	bf04      	itt	eq
 8004fb4:	f043 0301 	orreq.w	r3, r3, #1
 8004fb8:	81a3      	strheq	r3, [r4, #12]
 8004fba:	89a2      	ldrh	r2, [r4, #12]
 8004fbc:	f012 0308 	ands.w	r3, r2, #8
 8004fc0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004fc4:	d01c      	beq.n	8005000 <setvbuf+0x16c>
 8004fc6:	07d3      	lsls	r3, r2, #31
 8004fc8:	bf41      	itttt	mi
 8004fca:	2300      	movmi	r3, #0
 8004fcc:	426d      	negmi	r5, r5
 8004fce:	60a3      	strmi	r3, [r4, #8]
 8004fd0:	61a5      	strmi	r5, [r4, #24]
 8004fd2:	bf58      	it	pl
 8004fd4:	60a5      	strpl	r5, [r4, #8]
 8004fd6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004fd8:	f015 0501 	ands.w	r5, r5, #1
 8004fdc:	d115      	bne.n	800500a <setvbuf+0x176>
 8004fde:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004fe2:	e7c8      	b.n	8004f76 <setvbuf+0xe2>
 8004fe4:	4648      	mov	r0, r9
 8004fe6:	f000 fba1 	bl	800572c <malloc>
 8004fea:	4606      	mov	r6, r0
 8004fec:	2800      	cmp	r0, #0
 8004fee:	d0ae      	beq.n	8004f4e <setvbuf+0xba>
 8004ff0:	464d      	mov	r5, r9
 8004ff2:	89a3      	ldrh	r3, [r4, #12]
 8004ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff8:	81a3      	strh	r3, [r4, #12]
 8004ffa:	e7d0      	b.n	8004f9e <setvbuf+0x10a>
 8004ffc:	2500      	movs	r5, #0
 8004ffe:	e7a8      	b.n	8004f52 <setvbuf+0xbe>
 8005000:	60a3      	str	r3, [r4, #8]
 8005002:	e7e8      	b.n	8004fd6 <setvbuf+0x142>
 8005004:	f04f 35ff 	mov.w	r5, #4294967295
 8005008:	e7b9      	b.n	8004f7e <setvbuf+0xea>
 800500a:	2500      	movs	r5, #0
 800500c:	e7b7      	b.n	8004f7e <setvbuf+0xea>
 800500e:	bf00      	nop
 8005010:	20000010 	.word	0x20000010
 8005014:	08006a00 	.word	0x08006a00
 8005018:	08006a20 	.word	0x08006a20
 800501c:	080069e0 	.word	0x080069e0

08005020 <siscanf>:
 8005020:	b40e      	push	{r1, r2, r3}
 8005022:	b510      	push	{r4, lr}
 8005024:	b09f      	sub	sp, #124	; 0x7c
 8005026:	ac21      	add	r4, sp, #132	; 0x84
 8005028:	f44f 7101 	mov.w	r1, #516	; 0x204
 800502c:	f854 2b04 	ldr.w	r2, [r4], #4
 8005030:	9201      	str	r2, [sp, #4]
 8005032:	f8ad 101c 	strh.w	r1, [sp, #28]
 8005036:	9004      	str	r0, [sp, #16]
 8005038:	9008      	str	r0, [sp, #32]
 800503a:	f7fb f8d9 	bl	80001f0 <strlen>
 800503e:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <siscanf+0x50>)
 8005040:	9005      	str	r0, [sp, #20]
 8005042:	9009      	str	r0, [sp, #36]	; 0x24
 8005044:	930d      	str	r3, [sp, #52]	; 0x34
 8005046:	480b      	ldr	r0, [pc, #44]	; (8005074 <siscanf+0x54>)
 8005048:	9a01      	ldr	r2, [sp, #4]
 800504a:	6800      	ldr	r0, [r0, #0]
 800504c:	9403      	str	r4, [sp, #12]
 800504e:	2300      	movs	r3, #0
 8005050:	9311      	str	r3, [sp, #68]	; 0x44
 8005052:	9316      	str	r3, [sp, #88]	; 0x58
 8005054:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005058:	f8ad 301e 	strh.w	r3, [sp, #30]
 800505c:	a904      	add	r1, sp, #16
 800505e:	4623      	mov	r3, r4
 8005060:	f000 fca6 	bl	80059b0 <__ssvfiscanf_r>
 8005064:	b01f      	add	sp, #124	; 0x7c
 8005066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800506a:	b003      	add	sp, #12
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	0800509b 	.word	0x0800509b
 8005074:	20000010 	.word	0x20000010

08005078 <__sread>:
 8005078:	b510      	push	{r4, lr}
 800507a:	460c      	mov	r4, r1
 800507c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005080:	f001 fa4e 	bl	8006520 <_read_r>
 8005084:	2800      	cmp	r0, #0
 8005086:	bfab      	itete	ge
 8005088:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800508a:	89a3      	ldrhlt	r3, [r4, #12]
 800508c:	181b      	addge	r3, r3, r0
 800508e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005092:	bfac      	ite	ge
 8005094:	6563      	strge	r3, [r4, #84]	; 0x54
 8005096:	81a3      	strhlt	r3, [r4, #12]
 8005098:	bd10      	pop	{r4, pc}

0800509a <__seofread>:
 800509a:	2000      	movs	r0, #0
 800509c:	4770      	bx	lr

0800509e <__swrite>:
 800509e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a2:	461f      	mov	r7, r3
 80050a4:	898b      	ldrh	r3, [r1, #12]
 80050a6:	05db      	lsls	r3, r3, #23
 80050a8:	4605      	mov	r5, r0
 80050aa:	460c      	mov	r4, r1
 80050ac:	4616      	mov	r6, r2
 80050ae:	d505      	bpl.n	80050bc <__swrite+0x1e>
 80050b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050b4:	2302      	movs	r3, #2
 80050b6:	2200      	movs	r2, #0
 80050b8:	f000 fac0 	bl	800563c <_lseek_r>
 80050bc:	89a3      	ldrh	r3, [r4, #12]
 80050be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050c6:	81a3      	strh	r3, [r4, #12]
 80050c8:	4632      	mov	r2, r6
 80050ca:	463b      	mov	r3, r7
 80050cc:	4628      	mov	r0, r5
 80050ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050d2:	f000 b869 	b.w	80051a8 <_write_r>

080050d6 <__sseek>:
 80050d6:	b510      	push	{r4, lr}
 80050d8:	460c      	mov	r4, r1
 80050da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050de:	f000 faad 	bl	800563c <_lseek_r>
 80050e2:	1c43      	adds	r3, r0, #1
 80050e4:	89a3      	ldrh	r3, [r4, #12]
 80050e6:	bf15      	itete	ne
 80050e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80050ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050f2:	81a3      	strheq	r3, [r4, #12]
 80050f4:	bf18      	it	ne
 80050f6:	81a3      	strhne	r3, [r4, #12]
 80050f8:	bd10      	pop	{r4, pc}

080050fa <__sclose>:
 80050fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050fe:	f000 b8d3 	b.w	80052a8 <_close_r>
	...

08005104 <__swbuf_r>:
 8005104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005106:	460e      	mov	r6, r1
 8005108:	4614      	mov	r4, r2
 800510a:	4605      	mov	r5, r0
 800510c:	b118      	cbz	r0, 8005116 <__swbuf_r+0x12>
 800510e:	6983      	ldr	r3, [r0, #24]
 8005110:	b90b      	cbnz	r3, 8005116 <__swbuf_r+0x12>
 8005112:	f000 f9f3 	bl	80054fc <__sinit>
 8005116:	4b21      	ldr	r3, [pc, #132]	; (800519c <__swbuf_r+0x98>)
 8005118:	429c      	cmp	r4, r3
 800511a:	d12b      	bne.n	8005174 <__swbuf_r+0x70>
 800511c:	686c      	ldr	r4, [r5, #4]
 800511e:	69a3      	ldr	r3, [r4, #24]
 8005120:	60a3      	str	r3, [r4, #8]
 8005122:	89a3      	ldrh	r3, [r4, #12]
 8005124:	071a      	lsls	r2, r3, #28
 8005126:	d52f      	bpl.n	8005188 <__swbuf_r+0x84>
 8005128:	6923      	ldr	r3, [r4, #16]
 800512a:	b36b      	cbz	r3, 8005188 <__swbuf_r+0x84>
 800512c:	6923      	ldr	r3, [r4, #16]
 800512e:	6820      	ldr	r0, [r4, #0]
 8005130:	1ac0      	subs	r0, r0, r3
 8005132:	6963      	ldr	r3, [r4, #20]
 8005134:	b2f6      	uxtb	r6, r6
 8005136:	4283      	cmp	r3, r0
 8005138:	4637      	mov	r7, r6
 800513a:	dc04      	bgt.n	8005146 <__swbuf_r+0x42>
 800513c:	4621      	mov	r1, r4
 800513e:	4628      	mov	r0, r5
 8005140:	f000 f948 	bl	80053d4 <_fflush_r>
 8005144:	bb30      	cbnz	r0, 8005194 <__swbuf_r+0x90>
 8005146:	68a3      	ldr	r3, [r4, #8]
 8005148:	3b01      	subs	r3, #1
 800514a:	60a3      	str	r3, [r4, #8]
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	6022      	str	r2, [r4, #0]
 8005152:	701e      	strb	r6, [r3, #0]
 8005154:	6963      	ldr	r3, [r4, #20]
 8005156:	3001      	adds	r0, #1
 8005158:	4283      	cmp	r3, r0
 800515a:	d004      	beq.n	8005166 <__swbuf_r+0x62>
 800515c:	89a3      	ldrh	r3, [r4, #12]
 800515e:	07db      	lsls	r3, r3, #31
 8005160:	d506      	bpl.n	8005170 <__swbuf_r+0x6c>
 8005162:	2e0a      	cmp	r6, #10
 8005164:	d104      	bne.n	8005170 <__swbuf_r+0x6c>
 8005166:	4621      	mov	r1, r4
 8005168:	4628      	mov	r0, r5
 800516a:	f000 f933 	bl	80053d4 <_fflush_r>
 800516e:	b988      	cbnz	r0, 8005194 <__swbuf_r+0x90>
 8005170:	4638      	mov	r0, r7
 8005172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005174:	4b0a      	ldr	r3, [pc, #40]	; (80051a0 <__swbuf_r+0x9c>)
 8005176:	429c      	cmp	r4, r3
 8005178:	d101      	bne.n	800517e <__swbuf_r+0x7a>
 800517a:	68ac      	ldr	r4, [r5, #8]
 800517c:	e7cf      	b.n	800511e <__swbuf_r+0x1a>
 800517e:	4b09      	ldr	r3, [pc, #36]	; (80051a4 <__swbuf_r+0xa0>)
 8005180:	429c      	cmp	r4, r3
 8005182:	bf08      	it	eq
 8005184:	68ec      	ldreq	r4, [r5, #12]
 8005186:	e7ca      	b.n	800511e <__swbuf_r+0x1a>
 8005188:	4621      	mov	r1, r4
 800518a:	4628      	mov	r0, r5
 800518c:	f000 f81e 	bl	80051cc <__swsetup_r>
 8005190:	2800      	cmp	r0, #0
 8005192:	d0cb      	beq.n	800512c <__swbuf_r+0x28>
 8005194:	f04f 37ff 	mov.w	r7, #4294967295
 8005198:	e7ea      	b.n	8005170 <__swbuf_r+0x6c>
 800519a:	bf00      	nop
 800519c:	08006a00 	.word	0x08006a00
 80051a0:	08006a20 	.word	0x08006a20
 80051a4:	080069e0 	.word	0x080069e0

080051a8 <_write_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	4d07      	ldr	r5, [pc, #28]	; (80051c8 <_write_r+0x20>)
 80051ac:	4604      	mov	r4, r0
 80051ae:	4608      	mov	r0, r1
 80051b0:	4611      	mov	r1, r2
 80051b2:	2200      	movs	r2, #0
 80051b4:	602a      	str	r2, [r5, #0]
 80051b6:	461a      	mov	r2, r3
 80051b8:	f7fb fcf1 	bl	8000b9e <_write>
 80051bc:	1c43      	adds	r3, r0, #1
 80051be:	d102      	bne.n	80051c6 <_write_r+0x1e>
 80051c0:	682b      	ldr	r3, [r5, #0]
 80051c2:	b103      	cbz	r3, 80051c6 <_write_r+0x1e>
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	bd38      	pop	{r3, r4, r5, pc}
 80051c8:	20000650 	.word	0x20000650

080051cc <__swsetup_r>:
 80051cc:	4b32      	ldr	r3, [pc, #200]	; (8005298 <__swsetup_r+0xcc>)
 80051ce:	b570      	push	{r4, r5, r6, lr}
 80051d0:	681d      	ldr	r5, [r3, #0]
 80051d2:	4606      	mov	r6, r0
 80051d4:	460c      	mov	r4, r1
 80051d6:	b125      	cbz	r5, 80051e2 <__swsetup_r+0x16>
 80051d8:	69ab      	ldr	r3, [r5, #24]
 80051da:	b913      	cbnz	r3, 80051e2 <__swsetup_r+0x16>
 80051dc:	4628      	mov	r0, r5
 80051de:	f000 f98d 	bl	80054fc <__sinit>
 80051e2:	4b2e      	ldr	r3, [pc, #184]	; (800529c <__swsetup_r+0xd0>)
 80051e4:	429c      	cmp	r4, r3
 80051e6:	d10f      	bne.n	8005208 <__swsetup_r+0x3c>
 80051e8:	686c      	ldr	r4, [r5, #4]
 80051ea:	89a3      	ldrh	r3, [r4, #12]
 80051ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051f0:	0719      	lsls	r1, r3, #28
 80051f2:	d42c      	bmi.n	800524e <__swsetup_r+0x82>
 80051f4:	06dd      	lsls	r5, r3, #27
 80051f6:	d411      	bmi.n	800521c <__swsetup_r+0x50>
 80051f8:	2309      	movs	r3, #9
 80051fa:	6033      	str	r3, [r6, #0]
 80051fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005200:	81a3      	strh	r3, [r4, #12]
 8005202:	f04f 30ff 	mov.w	r0, #4294967295
 8005206:	e03e      	b.n	8005286 <__swsetup_r+0xba>
 8005208:	4b25      	ldr	r3, [pc, #148]	; (80052a0 <__swsetup_r+0xd4>)
 800520a:	429c      	cmp	r4, r3
 800520c:	d101      	bne.n	8005212 <__swsetup_r+0x46>
 800520e:	68ac      	ldr	r4, [r5, #8]
 8005210:	e7eb      	b.n	80051ea <__swsetup_r+0x1e>
 8005212:	4b24      	ldr	r3, [pc, #144]	; (80052a4 <__swsetup_r+0xd8>)
 8005214:	429c      	cmp	r4, r3
 8005216:	bf08      	it	eq
 8005218:	68ec      	ldreq	r4, [r5, #12]
 800521a:	e7e6      	b.n	80051ea <__swsetup_r+0x1e>
 800521c:	0758      	lsls	r0, r3, #29
 800521e:	d512      	bpl.n	8005246 <__swsetup_r+0x7a>
 8005220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005222:	b141      	cbz	r1, 8005236 <__swsetup_r+0x6a>
 8005224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005228:	4299      	cmp	r1, r3
 800522a:	d002      	beq.n	8005232 <__swsetup_r+0x66>
 800522c:	4630      	mov	r0, r6
 800522e:	f000 fa85 	bl	800573c <_free_r>
 8005232:	2300      	movs	r3, #0
 8005234:	6363      	str	r3, [r4, #52]	; 0x34
 8005236:	89a3      	ldrh	r3, [r4, #12]
 8005238:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800523c:	81a3      	strh	r3, [r4, #12]
 800523e:	2300      	movs	r3, #0
 8005240:	6063      	str	r3, [r4, #4]
 8005242:	6923      	ldr	r3, [r4, #16]
 8005244:	6023      	str	r3, [r4, #0]
 8005246:	89a3      	ldrh	r3, [r4, #12]
 8005248:	f043 0308 	orr.w	r3, r3, #8
 800524c:	81a3      	strh	r3, [r4, #12]
 800524e:	6923      	ldr	r3, [r4, #16]
 8005250:	b94b      	cbnz	r3, 8005266 <__swsetup_r+0x9a>
 8005252:	89a3      	ldrh	r3, [r4, #12]
 8005254:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800525c:	d003      	beq.n	8005266 <__swsetup_r+0x9a>
 800525e:	4621      	mov	r1, r4
 8005260:	4630      	mov	r0, r6
 8005262:	f000 fa23 	bl	80056ac <__smakebuf_r>
 8005266:	89a0      	ldrh	r0, [r4, #12]
 8005268:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800526c:	f010 0301 	ands.w	r3, r0, #1
 8005270:	d00a      	beq.n	8005288 <__swsetup_r+0xbc>
 8005272:	2300      	movs	r3, #0
 8005274:	60a3      	str	r3, [r4, #8]
 8005276:	6963      	ldr	r3, [r4, #20]
 8005278:	425b      	negs	r3, r3
 800527a:	61a3      	str	r3, [r4, #24]
 800527c:	6923      	ldr	r3, [r4, #16]
 800527e:	b943      	cbnz	r3, 8005292 <__swsetup_r+0xc6>
 8005280:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005284:	d1ba      	bne.n	80051fc <__swsetup_r+0x30>
 8005286:	bd70      	pop	{r4, r5, r6, pc}
 8005288:	0781      	lsls	r1, r0, #30
 800528a:	bf58      	it	pl
 800528c:	6963      	ldrpl	r3, [r4, #20]
 800528e:	60a3      	str	r3, [r4, #8]
 8005290:	e7f4      	b.n	800527c <__swsetup_r+0xb0>
 8005292:	2000      	movs	r0, #0
 8005294:	e7f7      	b.n	8005286 <__swsetup_r+0xba>
 8005296:	bf00      	nop
 8005298:	20000010 	.word	0x20000010
 800529c:	08006a00 	.word	0x08006a00
 80052a0:	08006a20 	.word	0x08006a20
 80052a4:	080069e0 	.word	0x080069e0

080052a8 <_close_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	4d06      	ldr	r5, [pc, #24]	; (80052c4 <_close_r+0x1c>)
 80052ac:	2300      	movs	r3, #0
 80052ae:	4604      	mov	r4, r0
 80052b0:	4608      	mov	r0, r1
 80052b2:	602b      	str	r3, [r5, #0]
 80052b4:	f7fb fc8f 	bl	8000bd6 <_close>
 80052b8:	1c43      	adds	r3, r0, #1
 80052ba:	d102      	bne.n	80052c2 <_close_r+0x1a>
 80052bc:	682b      	ldr	r3, [r5, #0]
 80052be:	b103      	cbz	r3, 80052c2 <_close_r+0x1a>
 80052c0:	6023      	str	r3, [r4, #0]
 80052c2:	bd38      	pop	{r3, r4, r5, pc}
 80052c4:	20000650 	.word	0x20000650

080052c8 <__sflush_r>:
 80052c8:	898a      	ldrh	r2, [r1, #12]
 80052ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ce:	4605      	mov	r5, r0
 80052d0:	0710      	lsls	r0, r2, #28
 80052d2:	460c      	mov	r4, r1
 80052d4:	d458      	bmi.n	8005388 <__sflush_r+0xc0>
 80052d6:	684b      	ldr	r3, [r1, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	dc05      	bgt.n	80052e8 <__sflush_r+0x20>
 80052dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052de:	2b00      	cmp	r3, #0
 80052e0:	dc02      	bgt.n	80052e8 <__sflush_r+0x20>
 80052e2:	2000      	movs	r0, #0
 80052e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052ea:	2e00      	cmp	r6, #0
 80052ec:	d0f9      	beq.n	80052e2 <__sflush_r+0x1a>
 80052ee:	2300      	movs	r3, #0
 80052f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052f4:	682f      	ldr	r7, [r5, #0]
 80052f6:	602b      	str	r3, [r5, #0]
 80052f8:	d032      	beq.n	8005360 <__sflush_r+0x98>
 80052fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052fc:	89a3      	ldrh	r3, [r4, #12]
 80052fe:	075a      	lsls	r2, r3, #29
 8005300:	d505      	bpl.n	800530e <__sflush_r+0x46>
 8005302:	6863      	ldr	r3, [r4, #4]
 8005304:	1ac0      	subs	r0, r0, r3
 8005306:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005308:	b10b      	cbz	r3, 800530e <__sflush_r+0x46>
 800530a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800530c:	1ac0      	subs	r0, r0, r3
 800530e:	2300      	movs	r3, #0
 8005310:	4602      	mov	r2, r0
 8005312:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005314:	6a21      	ldr	r1, [r4, #32]
 8005316:	4628      	mov	r0, r5
 8005318:	47b0      	blx	r6
 800531a:	1c43      	adds	r3, r0, #1
 800531c:	89a3      	ldrh	r3, [r4, #12]
 800531e:	d106      	bne.n	800532e <__sflush_r+0x66>
 8005320:	6829      	ldr	r1, [r5, #0]
 8005322:	291d      	cmp	r1, #29
 8005324:	d82c      	bhi.n	8005380 <__sflush_r+0xb8>
 8005326:	4a2a      	ldr	r2, [pc, #168]	; (80053d0 <__sflush_r+0x108>)
 8005328:	40ca      	lsrs	r2, r1
 800532a:	07d6      	lsls	r6, r2, #31
 800532c:	d528      	bpl.n	8005380 <__sflush_r+0xb8>
 800532e:	2200      	movs	r2, #0
 8005330:	6062      	str	r2, [r4, #4]
 8005332:	04d9      	lsls	r1, r3, #19
 8005334:	6922      	ldr	r2, [r4, #16]
 8005336:	6022      	str	r2, [r4, #0]
 8005338:	d504      	bpl.n	8005344 <__sflush_r+0x7c>
 800533a:	1c42      	adds	r2, r0, #1
 800533c:	d101      	bne.n	8005342 <__sflush_r+0x7a>
 800533e:	682b      	ldr	r3, [r5, #0]
 8005340:	b903      	cbnz	r3, 8005344 <__sflush_r+0x7c>
 8005342:	6560      	str	r0, [r4, #84]	; 0x54
 8005344:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005346:	602f      	str	r7, [r5, #0]
 8005348:	2900      	cmp	r1, #0
 800534a:	d0ca      	beq.n	80052e2 <__sflush_r+0x1a>
 800534c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005350:	4299      	cmp	r1, r3
 8005352:	d002      	beq.n	800535a <__sflush_r+0x92>
 8005354:	4628      	mov	r0, r5
 8005356:	f000 f9f1 	bl	800573c <_free_r>
 800535a:	2000      	movs	r0, #0
 800535c:	6360      	str	r0, [r4, #52]	; 0x34
 800535e:	e7c1      	b.n	80052e4 <__sflush_r+0x1c>
 8005360:	6a21      	ldr	r1, [r4, #32]
 8005362:	2301      	movs	r3, #1
 8005364:	4628      	mov	r0, r5
 8005366:	47b0      	blx	r6
 8005368:	1c41      	adds	r1, r0, #1
 800536a:	d1c7      	bne.n	80052fc <__sflush_r+0x34>
 800536c:	682b      	ldr	r3, [r5, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0c4      	beq.n	80052fc <__sflush_r+0x34>
 8005372:	2b1d      	cmp	r3, #29
 8005374:	d001      	beq.n	800537a <__sflush_r+0xb2>
 8005376:	2b16      	cmp	r3, #22
 8005378:	d101      	bne.n	800537e <__sflush_r+0xb6>
 800537a:	602f      	str	r7, [r5, #0]
 800537c:	e7b1      	b.n	80052e2 <__sflush_r+0x1a>
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005384:	81a3      	strh	r3, [r4, #12]
 8005386:	e7ad      	b.n	80052e4 <__sflush_r+0x1c>
 8005388:	690f      	ldr	r7, [r1, #16]
 800538a:	2f00      	cmp	r7, #0
 800538c:	d0a9      	beq.n	80052e2 <__sflush_r+0x1a>
 800538e:	0793      	lsls	r3, r2, #30
 8005390:	680e      	ldr	r6, [r1, #0]
 8005392:	bf08      	it	eq
 8005394:	694b      	ldreq	r3, [r1, #20]
 8005396:	600f      	str	r7, [r1, #0]
 8005398:	bf18      	it	ne
 800539a:	2300      	movne	r3, #0
 800539c:	eba6 0807 	sub.w	r8, r6, r7
 80053a0:	608b      	str	r3, [r1, #8]
 80053a2:	f1b8 0f00 	cmp.w	r8, #0
 80053a6:	dd9c      	ble.n	80052e2 <__sflush_r+0x1a>
 80053a8:	6a21      	ldr	r1, [r4, #32]
 80053aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80053ac:	4643      	mov	r3, r8
 80053ae:	463a      	mov	r2, r7
 80053b0:	4628      	mov	r0, r5
 80053b2:	47b0      	blx	r6
 80053b4:	2800      	cmp	r0, #0
 80053b6:	dc06      	bgt.n	80053c6 <__sflush_r+0xfe>
 80053b8:	89a3      	ldrh	r3, [r4, #12]
 80053ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053be:	81a3      	strh	r3, [r4, #12]
 80053c0:	f04f 30ff 	mov.w	r0, #4294967295
 80053c4:	e78e      	b.n	80052e4 <__sflush_r+0x1c>
 80053c6:	4407      	add	r7, r0
 80053c8:	eba8 0800 	sub.w	r8, r8, r0
 80053cc:	e7e9      	b.n	80053a2 <__sflush_r+0xda>
 80053ce:	bf00      	nop
 80053d0:	20400001 	.word	0x20400001

080053d4 <_fflush_r>:
 80053d4:	b538      	push	{r3, r4, r5, lr}
 80053d6:	690b      	ldr	r3, [r1, #16]
 80053d8:	4605      	mov	r5, r0
 80053da:	460c      	mov	r4, r1
 80053dc:	b913      	cbnz	r3, 80053e4 <_fflush_r+0x10>
 80053de:	2500      	movs	r5, #0
 80053e0:	4628      	mov	r0, r5
 80053e2:	bd38      	pop	{r3, r4, r5, pc}
 80053e4:	b118      	cbz	r0, 80053ee <_fflush_r+0x1a>
 80053e6:	6983      	ldr	r3, [r0, #24]
 80053e8:	b90b      	cbnz	r3, 80053ee <_fflush_r+0x1a>
 80053ea:	f000 f887 	bl	80054fc <__sinit>
 80053ee:	4b14      	ldr	r3, [pc, #80]	; (8005440 <_fflush_r+0x6c>)
 80053f0:	429c      	cmp	r4, r3
 80053f2:	d11b      	bne.n	800542c <_fflush_r+0x58>
 80053f4:	686c      	ldr	r4, [r5, #4]
 80053f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0ef      	beq.n	80053de <_fflush_r+0xa>
 80053fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005400:	07d0      	lsls	r0, r2, #31
 8005402:	d404      	bmi.n	800540e <_fflush_r+0x3a>
 8005404:	0599      	lsls	r1, r3, #22
 8005406:	d402      	bmi.n	800540e <_fflush_r+0x3a>
 8005408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800540a:	f000 f915 	bl	8005638 <__retarget_lock_acquire_recursive>
 800540e:	4628      	mov	r0, r5
 8005410:	4621      	mov	r1, r4
 8005412:	f7ff ff59 	bl	80052c8 <__sflush_r>
 8005416:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005418:	07da      	lsls	r2, r3, #31
 800541a:	4605      	mov	r5, r0
 800541c:	d4e0      	bmi.n	80053e0 <_fflush_r+0xc>
 800541e:	89a3      	ldrh	r3, [r4, #12]
 8005420:	059b      	lsls	r3, r3, #22
 8005422:	d4dd      	bmi.n	80053e0 <_fflush_r+0xc>
 8005424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005426:	f000 f908 	bl	800563a <__retarget_lock_release_recursive>
 800542a:	e7d9      	b.n	80053e0 <_fflush_r+0xc>
 800542c:	4b05      	ldr	r3, [pc, #20]	; (8005444 <_fflush_r+0x70>)
 800542e:	429c      	cmp	r4, r3
 8005430:	d101      	bne.n	8005436 <_fflush_r+0x62>
 8005432:	68ac      	ldr	r4, [r5, #8]
 8005434:	e7df      	b.n	80053f6 <_fflush_r+0x22>
 8005436:	4b04      	ldr	r3, [pc, #16]	; (8005448 <_fflush_r+0x74>)
 8005438:	429c      	cmp	r4, r3
 800543a:	bf08      	it	eq
 800543c:	68ec      	ldreq	r4, [r5, #12]
 800543e:	e7da      	b.n	80053f6 <_fflush_r+0x22>
 8005440:	08006a00 	.word	0x08006a00
 8005444:	08006a20 	.word	0x08006a20
 8005448:	080069e0 	.word	0x080069e0

0800544c <std>:
 800544c:	2300      	movs	r3, #0
 800544e:	b510      	push	{r4, lr}
 8005450:	4604      	mov	r4, r0
 8005452:	e9c0 3300 	strd	r3, r3, [r0]
 8005456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800545a:	6083      	str	r3, [r0, #8]
 800545c:	8181      	strh	r1, [r0, #12]
 800545e:	6643      	str	r3, [r0, #100]	; 0x64
 8005460:	81c2      	strh	r2, [r0, #14]
 8005462:	6183      	str	r3, [r0, #24]
 8005464:	4619      	mov	r1, r3
 8005466:	2208      	movs	r2, #8
 8005468:	305c      	adds	r0, #92	; 0x5c
 800546a:	f7ff fc7d 	bl	8004d68 <memset>
 800546e:	4b05      	ldr	r3, [pc, #20]	; (8005484 <std+0x38>)
 8005470:	6263      	str	r3, [r4, #36]	; 0x24
 8005472:	4b05      	ldr	r3, [pc, #20]	; (8005488 <std+0x3c>)
 8005474:	62a3      	str	r3, [r4, #40]	; 0x28
 8005476:	4b05      	ldr	r3, [pc, #20]	; (800548c <std+0x40>)
 8005478:	62e3      	str	r3, [r4, #44]	; 0x2c
 800547a:	4b05      	ldr	r3, [pc, #20]	; (8005490 <std+0x44>)
 800547c:	6224      	str	r4, [r4, #32]
 800547e:	6323      	str	r3, [r4, #48]	; 0x30
 8005480:	bd10      	pop	{r4, pc}
 8005482:	bf00      	nop
 8005484:	08005079 	.word	0x08005079
 8005488:	0800509f 	.word	0x0800509f
 800548c:	080050d7 	.word	0x080050d7
 8005490:	080050fb 	.word	0x080050fb

08005494 <_cleanup_r>:
 8005494:	4901      	ldr	r1, [pc, #4]	; (800549c <_cleanup_r+0x8>)
 8005496:	f000 b8af 	b.w	80055f8 <_fwalk_reent>
 800549a:	bf00      	nop
 800549c:	080053d5 	.word	0x080053d5

080054a0 <__sfmoreglue>:
 80054a0:	b570      	push	{r4, r5, r6, lr}
 80054a2:	2268      	movs	r2, #104	; 0x68
 80054a4:	1e4d      	subs	r5, r1, #1
 80054a6:	4355      	muls	r5, r2
 80054a8:	460e      	mov	r6, r1
 80054aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80054ae:	f000 f9b1 	bl	8005814 <_malloc_r>
 80054b2:	4604      	mov	r4, r0
 80054b4:	b140      	cbz	r0, 80054c8 <__sfmoreglue+0x28>
 80054b6:	2100      	movs	r1, #0
 80054b8:	e9c0 1600 	strd	r1, r6, [r0]
 80054bc:	300c      	adds	r0, #12
 80054be:	60a0      	str	r0, [r4, #8]
 80054c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80054c4:	f7ff fc50 	bl	8004d68 <memset>
 80054c8:	4620      	mov	r0, r4
 80054ca:	bd70      	pop	{r4, r5, r6, pc}

080054cc <__sfp_lock_acquire>:
 80054cc:	4801      	ldr	r0, [pc, #4]	; (80054d4 <__sfp_lock_acquire+0x8>)
 80054ce:	f000 b8b3 	b.w	8005638 <__retarget_lock_acquire_recursive>
 80054d2:	bf00      	nop
 80054d4:	20000645 	.word	0x20000645

080054d8 <__sfp_lock_release>:
 80054d8:	4801      	ldr	r0, [pc, #4]	; (80054e0 <__sfp_lock_release+0x8>)
 80054da:	f000 b8ae 	b.w	800563a <__retarget_lock_release_recursive>
 80054de:	bf00      	nop
 80054e0:	20000645 	.word	0x20000645

080054e4 <__sinit_lock_acquire>:
 80054e4:	4801      	ldr	r0, [pc, #4]	; (80054ec <__sinit_lock_acquire+0x8>)
 80054e6:	f000 b8a7 	b.w	8005638 <__retarget_lock_acquire_recursive>
 80054ea:	bf00      	nop
 80054ec:	20000646 	.word	0x20000646

080054f0 <__sinit_lock_release>:
 80054f0:	4801      	ldr	r0, [pc, #4]	; (80054f8 <__sinit_lock_release+0x8>)
 80054f2:	f000 b8a2 	b.w	800563a <__retarget_lock_release_recursive>
 80054f6:	bf00      	nop
 80054f8:	20000646 	.word	0x20000646

080054fc <__sinit>:
 80054fc:	b510      	push	{r4, lr}
 80054fe:	4604      	mov	r4, r0
 8005500:	f7ff fff0 	bl	80054e4 <__sinit_lock_acquire>
 8005504:	69a3      	ldr	r3, [r4, #24]
 8005506:	b11b      	cbz	r3, 8005510 <__sinit+0x14>
 8005508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800550c:	f7ff bff0 	b.w	80054f0 <__sinit_lock_release>
 8005510:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005514:	6523      	str	r3, [r4, #80]	; 0x50
 8005516:	4b13      	ldr	r3, [pc, #76]	; (8005564 <__sinit+0x68>)
 8005518:	4a13      	ldr	r2, [pc, #76]	; (8005568 <__sinit+0x6c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	62a2      	str	r2, [r4, #40]	; 0x28
 800551e:	42a3      	cmp	r3, r4
 8005520:	bf04      	itt	eq
 8005522:	2301      	moveq	r3, #1
 8005524:	61a3      	streq	r3, [r4, #24]
 8005526:	4620      	mov	r0, r4
 8005528:	f000 f820 	bl	800556c <__sfp>
 800552c:	6060      	str	r0, [r4, #4]
 800552e:	4620      	mov	r0, r4
 8005530:	f000 f81c 	bl	800556c <__sfp>
 8005534:	60a0      	str	r0, [r4, #8]
 8005536:	4620      	mov	r0, r4
 8005538:	f000 f818 	bl	800556c <__sfp>
 800553c:	2200      	movs	r2, #0
 800553e:	60e0      	str	r0, [r4, #12]
 8005540:	2104      	movs	r1, #4
 8005542:	6860      	ldr	r0, [r4, #4]
 8005544:	f7ff ff82 	bl	800544c <std>
 8005548:	68a0      	ldr	r0, [r4, #8]
 800554a:	2201      	movs	r2, #1
 800554c:	2109      	movs	r1, #9
 800554e:	f7ff ff7d 	bl	800544c <std>
 8005552:	68e0      	ldr	r0, [r4, #12]
 8005554:	2202      	movs	r2, #2
 8005556:	2112      	movs	r1, #18
 8005558:	f7ff ff78 	bl	800544c <std>
 800555c:	2301      	movs	r3, #1
 800555e:	61a3      	str	r3, [r4, #24]
 8005560:	e7d2      	b.n	8005508 <__sinit+0xc>
 8005562:	bf00      	nop
 8005564:	080069dc 	.word	0x080069dc
 8005568:	08005495 	.word	0x08005495

0800556c <__sfp>:
 800556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556e:	4607      	mov	r7, r0
 8005570:	f7ff ffac 	bl	80054cc <__sfp_lock_acquire>
 8005574:	4b1e      	ldr	r3, [pc, #120]	; (80055f0 <__sfp+0x84>)
 8005576:	681e      	ldr	r6, [r3, #0]
 8005578:	69b3      	ldr	r3, [r6, #24]
 800557a:	b913      	cbnz	r3, 8005582 <__sfp+0x16>
 800557c:	4630      	mov	r0, r6
 800557e:	f7ff ffbd 	bl	80054fc <__sinit>
 8005582:	3648      	adds	r6, #72	; 0x48
 8005584:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005588:	3b01      	subs	r3, #1
 800558a:	d503      	bpl.n	8005594 <__sfp+0x28>
 800558c:	6833      	ldr	r3, [r6, #0]
 800558e:	b30b      	cbz	r3, 80055d4 <__sfp+0x68>
 8005590:	6836      	ldr	r6, [r6, #0]
 8005592:	e7f7      	b.n	8005584 <__sfp+0x18>
 8005594:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005598:	b9d5      	cbnz	r5, 80055d0 <__sfp+0x64>
 800559a:	4b16      	ldr	r3, [pc, #88]	; (80055f4 <__sfp+0x88>)
 800559c:	60e3      	str	r3, [r4, #12]
 800559e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80055a2:	6665      	str	r5, [r4, #100]	; 0x64
 80055a4:	f000 f847 	bl	8005636 <__retarget_lock_init_recursive>
 80055a8:	f7ff ff96 	bl	80054d8 <__sfp_lock_release>
 80055ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80055b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80055b4:	6025      	str	r5, [r4, #0]
 80055b6:	61a5      	str	r5, [r4, #24]
 80055b8:	2208      	movs	r2, #8
 80055ba:	4629      	mov	r1, r5
 80055bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80055c0:	f7ff fbd2 	bl	8004d68 <memset>
 80055c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80055c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80055cc:	4620      	mov	r0, r4
 80055ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055d0:	3468      	adds	r4, #104	; 0x68
 80055d2:	e7d9      	b.n	8005588 <__sfp+0x1c>
 80055d4:	2104      	movs	r1, #4
 80055d6:	4638      	mov	r0, r7
 80055d8:	f7ff ff62 	bl	80054a0 <__sfmoreglue>
 80055dc:	4604      	mov	r4, r0
 80055de:	6030      	str	r0, [r6, #0]
 80055e0:	2800      	cmp	r0, #0
 80055e2:	d1d5      	bne.n	8005590 <__sfp+0x24>
 80055e4:	f7ff ff78 	bl	80054d8 <__sfp_lock_release>
 80055e8:	230c      	movs	r3, #12
 80055ea:	603b      	str	r3, [r7, #0]
 80055ec:	e7ee      	b.n	80055cc <__sfp+0x60>
 80055ee:	bf00      	nop
 80055f0:	080069dc 	.word	0x080069dc
 80055f4:	ffff0001 	.word	0xffff0001

080055f8 <_fwalk_reent>:
 80055f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055fc:	4606      	mov	r6, r0
 80055fe:	4688      	mov	r8, r1
 8005600:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005604:	2700      	movs	r7, #0
 8005606:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800560a:	f1b9 0901 	subs.w	r9, r9, #1
 800560e:	d505      	bpl.n	800561c <_fwalk_reent+0x24>
 8005610:	6824      	ldr	r4, [r4, #0]
 8005612:	2c00      	cmp	r4, #0
 8005614:	d1f7      	bne.n	8005606 <_fwalk_reent+0xe>
 8005616:	4638      	mov	r0, r7
 8005618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800561c:	89ab      	ldrh	r3, [r5, #12]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d907      	bls.n	8005632 <_fwalk_reent+0x3a>
 8005622:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005626:	3301      	adds	r3, #1
 8005628:	d003      	beq.n	8005632 <_fwalk_reent+0x3a>
 800562a:	4629      	mov	r1, r5
 800562c:	4630      	mov	r0, r6
 800562e:	47c0      	blx	r8
 8005630:	4307      	orrs	r7, r0
 8005632:	3568      	adds	r5, #104	; 0x68
 8005634:	e7e9      	b.n	800560a <_fwalk_reent+0x12>

08005636 <__retarget_lock_init_recursive>:
 8005636:	4770      	bx	lr

08005638 <__retarget_lock_acquire_recursive>:
 8005638:	4770      	bx	lr

0800563a <__retarget_lock_release_recursive>:
 800563a:	4770      	bx	lr

0800563c <_lseek_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	4d07      	ldr	r5, [pc, #28]	; (800565c <_lseek_r+0x20>)
 8005640:	4604      	mov	r4, r0
 8005642:	4608      	mov	r0, r1
 8005644:	4611      	mov	r1, r2
 8005646:	2200      	movs	r2, #0
 8005648:	602a      	str	r2, [r5, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	f7fb faea 	bl	8000c24 <_lseek>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	d102      	bne.n	800565a <_lseek_r+0x1e>
 8005654:	682b      	ldr	r3, [r5, #0]
 8005656:	b103      	cbz	r3, 800565a <_lseek_r+0x1e>
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	bd38      	pop	{r3, r4, r5, pc}
 800565c:	20000650 	.word	0x20000650

08005660 <__swhatbuf_r>:
 8005660:	b570      	push	{r4, r5, r6, lr}
 8005662:	460e      	mov	r6, r1
 8005664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005668:	2900      	cmp	r1, #0
 800566a:	b096      	sub	sp, #88	; 0x58
 800566c:	4614      	mov	r4, r2
 800566e:	461d      	mov	r5, r3
 8005670:	da08      	bge.n	8005684 <__swhatbuf_r+0x24>
 8005672:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	602a      	str	r2, [r5, #0]
 800567a:	061a      	lsls	r2, r3, #24
 800567c:	d410      	bmi.n	80056a0 <__swhatbuf_r+0x40>
 800567e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005682:	e00e      	b.n	80056a2 <__swhatbuf_r+0x42>
 8005684:	466a      	mov	r2, sp
 8005686:	f001 f8d7 	bl	8006838 <_fstat_r>
 800568a:	2800      	cmp	r0, #0
 800568c:	dbf1      	blt.n	8005672 <__swhatbuf_r+0x12>
 800568e:	9a01      	ldr	r2, [sp, #4]
 8005690:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005694:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005698:	425a      	negs	r2, r3
 800569a:	415a      	adcs	r2, r3
 800569c:	602a      	str	r2, [r5, #0]
 800569e:	e7ee      	b.n	800567e <__swhatbuf_r+0x1e>
 80056a0:	2340      	movs	r3, #64	; 0x40
 80056a2:	2000      	movs	r0, #0
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	b016      	add	sp, #88	; 0x58
 80056a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080056ac <__smakebuf_r>:
 80056ac:	898b      	ldrh	r3, [r1, #12]
 80056ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056b0:	079d      	lsls	r5, r3, #30
 80056b2:	4606      	mov	r6, r0
 80056b4:	460c      	mov	r4, r1
 80056b6:	d507      	bpl.n	80056c8 <__smakebuf_r+0x1c>
 80056b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80056bc:	6023      	str	r3, [r4, #0]
 80056be:	6123      	str	r3, [r4, #16]
 80056c0:	2301      	movs	r3, #1
 80056c2:	6163      	str	r3, [r4, #20]
 80056c4:	b002      	add	sp, #8
 80056c6:	bd70      	pop	{r4, r5, r6, pc}
 80056c8:	ab01      	add	r3, sp, #4
 80056ca:	466a      	mov	r2, sp
 80056cc:	f7ff ffc8 	bl	8005660 <__swhatbuf_r>
 80056d0:	9900      	ldr	r1, [sp, #0]
 80056d2:	4605      	mov	r5, r0
 80056d4:	4630      	mov	r0, r6
 80056d6:	f000 f89d 	bl	8005814 <_malloc_r>
 80056da:	b948      	cbnz	r0, 80056f0 <__smakebuf_r+0x44>
 80056dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056e0:	059a      	lsls	r2, r3, #22
 80056e2:	d4ef      	bmi.n	80056c4 <__smakebuf_r+0x18>
 80056e4:	f023 0303 	bic.w	r3, r3, #3
 80056e8:	f043 0302 	orr.w	r3, r3, #2
 80056ec:	81a3      	strh	r3, [r4, #12]
 80056ee:	e7e3      	b.n	80056b8 <__smakebuf_r+0xc>
 80056f0:	4b0d      	ldr	r3, [pc, #52]	; (8005728 <__smakebuf_r+0x7c>)
 80056f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80056f4:	89a3      	ldrh	r3, [r4, #12]
 80056f6:	6020      	str	r0, [r4, #0]
 80056f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fc:	81a3      	strh	r3, [r4, #12]
 80056fe:	9b00      	ldr	r3, [sp, #0]
 8005700:	6163      	str	r3, [r4, #20]
 8005702:	9b01      	ldr	r3, [sp, #4]
 8005704:	6120      	str	r0, [r4, #16]
 8005706:	b15b      	cbz	r3, 8005720 <__smakebuf_r+0x74>
 8005708:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800570c:	4630      	mov	r0, r6
 800570e:	f001 f8a5 	bl	800685c <_isatty_r>
 8005712:	b128      	cbz	r0, 8005720 <__smakebuf_r+0x74>
 8005714:	89a3      	ldrh	r3, [r4, #12]
 8005716:	f023 0303 	bic.w	r3, r3, #3
 800571a:	f043 0301 	orr.w	r3, r3, #1
 800571e:	81a3      	strh	r3, [r4, #12]
 8005720:	89a0      	ldrh	r0, [r4, #12]
 8005722:	4305      	orrs	r5, r0
 8005724:	81a5      	strh	r5, [r4, #12]
 8005726:	e7cd      	b.n	80056c4 <__smakebuf_r+0x18>
 8005728:	08005495 	.word	0x08005495

0800572c <malloc>:
 800572c:	4b02      	ldr	r3, [pc, #8]	; (8005738 <malloc+0xc>)
 800572e:	4601      	mov	r1, r0
 8005730:	6818      	ldr	r0, [r3, #0]
 8005732:	f000 b86f 	b.w	8005814 <_malloc_r>
 8005736:	bf00      	nop
 8005738:	20000010 	.word	0x20000010

0800573c <_free_r>:
 800573c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800573e:	2900      	cmp	r1, #0
 8005740:	d044      	beq.n	80057cc <_free_r+0x90>
 8005742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005746:	9001      	str	r0, [sp, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	f1a1 0404 	sub.w	r4, r1, #4
 800574e:	bfb8      	it	lt
 8005750:	18e4      	addlt	r4, r4, r3
 8005752:	f001 f8a1 	bl	8006898 <__malloc_lock>
 8005756:	4a1e      	ldr	r2, [pc, #120]	; (80057d0 <_free_r+0x94>)
 8005758:	9801      	ldr	r0, [sp, #4]
 800575a:	6813      	ldr	r3, [r2, #0]
 800575c:	b933      	cbnz	r3, 800576c <_free_r+0x30>
 800575e:	6063      	str	r3, [r4, #4]
 8005760:	6014      	str	r4, [r2, #0]
 8005762:	b003      	add	sp, #12
 8005764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005768:	f001 b89c 	b.w	80068a4 <__malloc_unlock>
 800576c:	42a3      	cmp	r3, r4
 800576e:	d908      	bls.n	8005782 <_free_r+0x46>
 8005770:	6825      	ldr	r5, [r4, #0]
 8005772:	1961      	adds	r1, r4, r5
 8005774:	428b      	cmp	r3, r1
 8005776:	bf01      	itttt	eq
 8005778:	6819      	ldreq	r1, [r3, #0]
 800577a:	685b      	ldreq	r3, [r3, #4]
 800577c:	1949      	addeq	r1, r1, r5
 800577e:	6021      	streq	r1, [r4, #0]
 8005780:	e7ed      	b.n	800575e <_free_r+0x22>
 8005782:	461a      	mov	r2, r3
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	b10b      	cbz	r3, 800578c <_free_r+0x50>
 8005788:	42a3      	cmp	r3, r4
 800578a:	d9fa      	bls.n	8005782 <_free_r+0x46>
 800578c:	6811      	ldr	r1, [r2, #0]
 800578e:	1855      	adds	r5, r2, r1
 8005790:	42a5      	cmp	r5, r4
 8005792:	d10b      	bne.n	80057ac <_free_r+0x70>
 8005794:	6824      	ldr	r4, [r4, #0]
 8005796:	4421      	add	r1, r4
 8005798:	1854      	adds	r4, r2, r1
 800579a:	42a3      	cmp	r3, r4
 800579c:	6011      	str	r1, [r2, #0]
 800579e:	d1e0      	bne.n	8005762 <_free_r+0x26>
 80057a0:	681c      	ldr	r4, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	6053      	str	r3, [r2, #4]
 80057a6:	4421      	add	r1, r4
 80057a8:	6011      	str	r1, [r2, #0]
 80057aa:	e7da      	b.n	8005762 <_free_r+0x26>
 80057ac:	d902      	bls.n	80057b4 <_free_r+0x78>
 80057ae:	230c      	movs	r3, #12
 80057b0:	6003      	str	r3, [r0, #0]
 80057b2:	e7d6      	b.n	8005762 <_free_r+0x26>
 80057b4:	6825      	ldr	r5, [r4, #0]
 80057b6:	1961      	adds	r1, r4, r5
 80057b8:	428b      	cmp	r3, r1
 80057ba:	bf04      	itt	eq
 80057bc:	6819      	ldreq	r1, [r3, #0]
 80057be:	685b      	ldreq	r3, [r3, #4]
 80057c0:	6063      	str	r3, [r4, #4]
 80057c2:	bf04      	itt	eq
 80057c4:	1949      	addeq	r1, r1, r5
 80057c6:	6021      	streq	r1, [r4, #0]
 80057c8:	6054      	str	r4, [r2, #4]
 80057ca:	e7ca      	b.n	8005762 <_free_r+0x26>
 80057cc:	b003      	add	sp, #12
 80057ce:	bd30      	pop	{r4, r5, pc}
 80057d0:	20000648 	.word	0x20000648

080057d4 <sbrk_aligned>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	4e0e      	ldr	r6, [pc, #56]	; (8005810 <sbrk_aligned+0x3c>)
 80057d8:	460c      	mov	r4, r1
 80057da:	6831      	ldr	r1, [r6, #0]
 80057dc:	4605      	mov	r5, r0
 80057de:	b911      	cbnz	r1, 80057e6 <sbrk_aligned+0x12>
 80057e0:	f000 feb0 	bl	8006544 <_sbrk_r>
 80057e4:	6030      	str	r0, [r6, #0]
 80057e6:	4621      	mov	r1, r4
 80057e8:	4628      	mov	r0, r5
 80057ea:	f000 feab 	bl	8006544 <_sbrk_r>
 80057ee:	1c43      	adds	r3, r0, #1
 80057f0:	d00a      	beq.n	8005808 <sbrk_aligned+0x34>
 80057f2:	1cc4      	adds	r4, r0, #3
 80057f4:	f024 0403 	bic.w	r4, r4, #3
 80057f8:	42a0      	cmp	r0, r4
 80057fa:	d007      	beq.n	800580c <sbrk_aligned+0x38>
 80057fc:	1a21      	subs	r1, r4, r0
 80057fe:	4628      	mov	r0, r5
 8005800:	f000 fea0 	bl	8006544 <_sbrk_r>
 8005804:	3001      	adds	r0, #1
 8005806:	d101      	bne.n	800580c <sbrk_aligned+0x38>
 8005808:	f04f 34ff 	mov.w	r4, #4294967295
 800580c:	4620      	mov	r0, r4
 800580e:	bd70      	pop	{r4, r5, r6, pc}
 8005810:	2000064c 	.word	0x2000064c

08005814 <_malloc_r>:
 8005814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005818:	1ccd      	adds	r5, r1, #3
 800581a:	f025 0503 	bic.w	r5, r5, #3
 800581e:	3508      	adds	r5, #8
 8005820:	2d0c      	cmp	r5, #12
 8005822:	bf38      	it	cc
 8005824:	250c      	movcc	r5, #12
 8005826:	2d00      	cmp	r5, #0
 8005828:	4607      	mov	r7, r0
 800582a:	db01      	blt.n	8005830 <_malloc_r+0x1c>
 800582c:	42a9      	cmp	r1, r5
 800582e:	d905      	bls.n	800583c <_malloc_r+0x28>
 8005830:	230c      	movs	r3, #12
 8005832:	603b      	str	r3, [r7, #0]
 8005834:	2600      	movs	r6, #0
 8005836:	4630      	mov	r0, r6
 8005838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800583c:	4e2e      	ldr	r6, [pc, #184]	; (80058f8 <_malloc_r+0xe4>)
 800583e:	f001 f82b 	bl	8006898 <__malloc_lock>
 8005842:	6833      	ldr	r3, [r6, #0]
 8005844:	461c      	mov	r4, r3
 8005846:	bb34      	cbnz	r4, 8005896 <_malloc_r+0x82>
 8005848:	4629      	mov	r1, r5
 800584a:	4638      	mov	r0, r7
 800584c:	f7ff ffc2 	bl	80057d4 <sbrk_aligned>
 8005850:	1c43      	adds	r3, r0, #1
 8005852:	4604      	mov	r4, r0
 8005854:	d14d      	bne.n	80058f2 <_malloc_r+0xde>
 8005856:	6834      	ldr	r4, [r6, #0]
 8005858:	4626      	mov	r6, r4
 800585a:	2e00      	cmp	r6, #0
 800585c:	d140      	bne.n	80058e0 <_malloc_r+0xcc>
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	4631      	mov	r1, r6
 8005862:	4638      	mov	r0, r7
 8005864:	eb04 0803 	add.w	r8, r4, r3
 8005868:	f000 fe6c 	bl	8006544 <_sbrk_r>
 800586c:	4580      	cmp	r8, r0
 800586e:	d13a      	bne.n	80058e6 <_malloc_r+0xd2>
 8005870:	6821      	ldr	r1, [r4, #0]
 8005872:	3503      	adds	r5, #3
 8005874:	1a6d      	subs	r5, r5, r1
 8005876:	f025 0503 	bic.w	r5, r5, #3
 800587a:	3508      	adds	r5, #8
 800587c:	2d0c      	cmp	r5, #12
 800587e:	bf38      	it	cc
 8005880:	250c      	movcc	r5, #12
 8005882:	4629      	mov	r1, r5
 8005884:	4638      	mov	r0, r7
 8005886:	f7ff ffa5 	bl	80057d4 <sbrk_aligned>
 800588a:	3001      	adds	r0, #1
 800588c:	d02b      	beq.n	80058e6 <_malloc_r+0xd2>
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	442b      	add	r3, r5
 8005892:	6023      	str	r3, [r4, #0]
 8005894:	e00e      	b.n	80058b4 <_malloc_r+0xa0>
 8005896:	6822      	ldr	r2, [r4, #0]
 8005898:	1b52      	subs	r2, r2, r5
 800589a:	d41e      	bmi.n	80058da <_malloc_r+0xc6>
 800589c:	2a0b      	cmp	r2, #11
 800589e:	d916      	bls.n	80058ce <_malloc_r+0xba>
 80058a0:	1961      	adds	r1, r4, r5
 80058a2:	42a3      	cmp	r3, r4
 80058a4:	6025      	str	r5, [r4, #0]
 80058a6:	bf18      	it	ne
 80058a8:	6059      	strne	r1, [r3, #4]
 80058aa:	6863      	ldr	r3, [r4, #4]
 80058ac:	bf08      	it	eq
 80058ae:	6031      	streq	r1, [r6, #0]
 80058b0:	5162      	str	r2, [r4, r5]
 80058b2:	604b      	str	r3, [r1, #4]
 80058b4:	4638      	mov	r0, r7
 80058b6:	f104 060b 	add.w	r6, r4, #11
 80058ba:	f000 fff3 	bl	80068a4 <__malloc_unlock>
 80058be:	f026 0607 	bic.w	r6, r6, #7
 80058c2:	1d23      	adds	r3, r4, #4
 80058c4:	1af2      	subs	r2, r6, r3
 80058c6:	d0b6      	beq.n	8005836 <_malloc_r+0x22>
 80058c8:	1b9b      	subs	r3, r3, r6
 80058ca:	50a3      	str	r3, [r4, r2]
 80058cc:	e7b3      	b.n	8005836 <_malloc_r+0x22>
 80058ce:	6862      	ldr	r2, [r4, #4]
 80058d0:	42a3      	cmp	r3, r4
 80058d2:	bf0c      	ite	eq
 80058d4:	6032      	streq	r2, [r6, #0]
 80058d6:	605a      	strne	r2, [r3, #4]
 80058d8:	e7ec      	b.n	80058b4 <_malloc_r+0xa0>
 80058da:	4623      	mov	r3, r4
 80058dc:	6864      	ldr	r4, [r4, #4]
 80058de:	e7b2      	b.n	8005846 <_malloc_r+0x32>
 80058e0:	4634      	mov	r4, r6
 80058e2:	6876      	ldr	r6, [r6, #4]
 80058e4:	e7b9      	b.n	800585a <_malloc_r+0x46>
 80058e6:	230c      	movs	r3, #12
 80058e8:	603b      	str	r3, [r7, #0]
 80058ea:	4638      	mov	r0, r7
 80058ec:	f000 ffda 	bl	80068a4 <__malloc_unlock>
 80058f0:	e7a1      	b.n	8005836 <_malloc_r+0x22>
 80058f2:	6025      	str	r5, [r4, #0]
 80058f4:	e7de      	b.n	80058b4 <_malloc_r+0xa0>
 80058f6:	bf00      	nop
 80058f8:	20000648 	.word	0x20000648

080058fc <_sungetc_r>:
 80058fc:	b538      	push	{r3, r4, r5, lr}
 80058fe:	1c4b      	adds	r3, r1, #1
 8005900:	4614      	mov	r4, r2
 8005902:	d103      	bne.n	800590c <_sungetc_r+0x10>
 8005904:	f04f 35ff 	mov.w	r5, #4294967295
 8005908:	4628      	mov	r0, r5
 800590a:	bd38      	pop	{r3, r4, r5, pc}
 800590c:	8993      	ldrh	r3, [r2, #12]
 800590e:	f023 0320 	bic.w	r3, r3, #32
 8005912:	8193      	strh	r3, [r2, #12]
 8005914:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005916:	6852      	ldr	r2, [r2, #4]
 8005918:	b2cd      	uxtb	r5, r1
 800591a:	b18b      	cbz	r3, 8005940 <_sungetc_r+0x44>
 800591c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800591e:	4293      	cmp	r3, r2
 8005920:	dd08      	ble.n	8005934 <_sungetc_r+0x38>
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	1e5a      	subs	r2, r3, #1
 8005926:	6022      	str	r2, [r4, #0]
 8005928:	f803 5c01 	strb.w	r5, [r3, #-1]
 800592c:	6863      	ldr	r3, [r4, #4]
 800592e:	3301      	adds	r3, #1
 8005930:	6063      	str	r3, [r4, #4]
 8005932:	e7e9      	b.n	8005908 <_sungetc_r+0xc>
 8005934:	4621      	mov	r1, r4
 8005936:	f000 ff45 	bl	80067c4 <__submore>
 800593a:	2800      	cmp	r0, #0
 800593c:	d0f1      	beq.n	8005922 <_sungetc_r+0x26>
 800593e:	e7e1      	b.n	8005904 <_sungetc_r+0x8>
 8005940:	6921      	ldr	r1, [r4, #16]
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	b151      	cbz	r1, 800595c <_sungetc_r+0x60>
 8005946:	4299      	cmp	r1, r3
 8005948:	d208      	bcs.n	800595c <_sungetc_r+0x60>
 800594a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800594e:	42a9      	cmp	r1, r5
 8005950:	d104      	bne.n	800595c <_sungetc_r+0x60>
 8005952:	3b01      	subs	r3, #1
 8005954:	3201      	adds	r2, #1
 8005956:	6023      	str	r3, [r4, #0]
 8005958:	6062      	str	r2, [r4, #4]
 800595a:	e7d5      	b.n	8005908 <_sungetc_r+0xc>
 800595c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005960:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005964:	6363      	str	r3, [r4, #52]	; 0x34
 8005966:	2303      	movs	r3, #3
 8005968:	63a3      	str	r3, [r4, #56]	; 0x38
 800596a:	4623      	mov	r3, r4
 800596c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005970:	6023      	str	r3, [r4, #0]
 8005972:	2301      	movs	r3, #1
 8005974:	e7dc      	b.n	8005930 <_sungetc_r+0x34>

08005976 <__ssrefill_r>:
 8005976:	b510      	push	{r4, lr}
 8005978:	460c      	mov	r4, r1
 800597a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800597c:	b169      	cbz	r1, 800599a <__ssrefill_r+0x24>
 800597e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005982:	4299      	cmp	r1, r3
 8005984:	d001      	beq.n	800598a <__ssrefill_r+0x14>
 8005986:	f7ff fed9 	bl	800573c <_free_r>
 800598a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800598c:	6063      	str	r3, [r4, #4]
 800598e:	2000      	movs	r0, #0
 8005990:	6360      	str	r0, [r4, #52]	; 0x34
 8005992:	b113      	cbz	r3, 800599a <__ssrefill_r+0x24>
 8005994:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005996:	6023      	str	r3, [r4, #0]
 8005998:	bd10      	pop	{r4, pc}
 800599a:	6923      	ldr	r3, [r4, #16]
 800599c:	6023      	str	r3, [r4, #0]
 800599e:	2300      	movs	r3, #0
 80059a0:	6063      	str	r3, [r4, #4]
 80059a2:	89a3      	ldrh	r3, [r4, #12]
 80059a4:	f043 0320 	orr.w	r3, r3, #32
 80059a8:	81a3      	strh	r3, [r4, #12]
 80059aa:	f04f 30ff 	mov.w	r0, #4294967295
 80059ae:	e7f3      	b.n	8005998 <__ssrefill_r+0x22>

080059b0 <__ssvfiscanf_r>:
 80059b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059b4:	460c      	mov	r4, r1
 80059b6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80059ba:	2100      	movs	r1, #0
 80059bc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80059c0:	49a6      	ldr	r1, [pc, #664]	; (8005c5c <__ssvfiscanf_r+0x2ac>)
 80059c2:	91a0      	str	r1, [sp, #640]	; 0x280
 80059c4:	f10d 0804 	add.w	r8, sp, #4
 80059c8:	49a5      	ldr	r1, [pc, #660]	; (8005c60 <__ssvfiscanf_r+0x2b0>)
 80059ca:	4fa6      	ldr	r7, [pc, #664]	; (8005c64 <__ssvfiscanf_r+0x2b4>)
 80059cc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005c68 <__ssvfiscanf_r+0x2b8>
 80059d0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80059d4:	4606      	mov	r6, r0
 80059d6:	91a1      	str	r1, [sp, #644]	; 0x284
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	7813      	ldrb	r3, [r2, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 815a 	beq.w	8005c96 <__ssvfiscanf_r+0x2e6>
 80059e2:	5dd9      	ldrb	r1, [r3, r7]
 80059e4:	f011 0108 	ands.w	r1, r1, #8
 80059e8:	f102 0501 	add.w	r5, r2, #1
 80059ec:	d019      	beq.n	8005a22 <__ssvfiscanf_r+0x72>
 80059ee:	6863      	ldr	r3, [r4, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	dd0f      	ble.n	8005a14 <__ssvfiscanf_r+0x64>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	781a      	ldrb	r2, [r3, #0]
 80059f8:	5cba      	ldrb	r2, [r7, r2]
 80059fa:	0712      	lsls	r2, r2, #28
 80059fc:	d401      	bmi.n	8005a02 <__ssvfiscanf_r+0x52>
 80059fe:	462a      	mov	r2, r5
 8005a00:	e7eb      	b.n	80059da <__ssvfiscanf_r+0x2a>
 8005a02:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005a04:	3201      	adds	r2, #1
 8005a06:	9245      	str	r2, [sp, #276]	; 0x114
 8005a08:	6862      	ldr	r2, [r4, #4]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	3a01      	subs	r2, #1
 8005a0e:	6062      	str	r2, [r4, #4]
 8005a10:	6023      	str	r3, [r4, #0]
 8005a12:	e7ec      	b.n	80059ee <__ssvfiscanf_r+0x3e>
 8005a14:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005a16:	4621      	mov	r1, r4
 8005a18:	4630      	mov	r0, r6
 8005a1a:	4798      	blx	r3
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	d0e9      	beq.n	80059f4 <__ssvfiscanf_r+0x44>
 8005a20:	e7ed      	b.n	80059fe <__ssvfiscanf_r+0x4e>
 8005a22:	2b25      	cmp	r3, #37	; 0x25
 8005a24:	d012      	beq.n	8005a4c <__ssvfiscanf_r+0x9c>
 8005a26:	469a      	mov	sl, r3
 8005a28:	6863      	ldr	r3, [r4, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f340 8091 	ble.w	8005b52 <__ssvfiscanf_r+0x1a2>
 8005a30:	6822      	ldr	r2, [r4, #0]
 8005a32:	7813      	ldrb	r3, [r2, #0]
 8005a34:	4553      	cmp	r3, sl
 8005a36:	f040 812e 	bne.w	8005c96 <__ssvfiscanf_r+0x2e6>
 8005a3a:	6863      	ldr	r3, [r4, #4]
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	6063      	str	r3, [r4, #4]
 8005a40:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005a42:	3201      	adds	r2, #1
 8005a44:	3301      	adds	r3, #1
 8005a46:	6022      	str	r2, [r4, #0]
 8005a48:	9345      	str	r3, [sp, #276]	; 0x114
 8005a4a:	e7d8      	b.n	80059fe <__ssvfiscanf_r+0x4e>
 8005a4c:	9141      	str	r1, [sp, #260]	; 0x104
 8005a4e:	9143      	str	r1, [sp, #268]	; 0x10c
 8005a50:	7853      	ldrb	r3, [r2, #1]
 8005a52:	2b2a      	cmp	r3, #42	; 0x2a
 8005a54:	bf02      	ittt	eq
 8005a56:	2310      	moveq	r3, #16
 8005a58:	1c95      	addeq	r5, r2, #2
 8005a5a:	9341      	streq	r3, [sp, #260]	; 0x104
 8005a5c:	220a      	movs	r2, #10
 8005a5e:	46aa      	mov	sl, r5
 8005a60:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005a64:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005a68:	2b09      	cmp	r3, #9
 8005a6a:	d91d      	bls.n	8005aa8 <__ssvfiscanf_r+0xf8>
 8005a6c:	487e      	ldr	r0, [pc, #504]	; (8005c68 <__ssvfiscanf_r+0x2b8>)
 8005a6e:	2203      	movs	r2, #3
 8005a70:	f7fa fbc6 	bl	8000200 <memchr>
 8005a74:	b140      	cbz	r0, 8005a88 <__ssvfiscanf_r+0xd8>
 8005a76:	2301      	movs	r3, #1
 8005a78:	eba0 0009 	sub.w	r0, r0, r9
 8005a7c:	fa03 f000 	lsl.w	r0, r3, r0
 8005a80:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005a82:	4318      	orrs	r0, r3
 8005a84:	9041      	str	r0, [sp, #260]	; 0x104
 8005a86:	4655      	mov	r5, sl
 8005a88:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005a8c:	2b78      	cmp	r3, #120	; 0x78
 8005a8e:	d806      	bhi.n	8005a9e <__ssvfiscanf_r+0xee>
 8005a90:	2b57      	cmp	r3, #87	; 0x57
 8005a92:	d810      	bhi.n	8005ab6 <__ssvfiscanf_r+0x106>
 8005a94:	2b25      	cmp	r3, #37	; 0x25
 8005a96:	d0c6      	beq.n	8005a26 <__ssvfiscanf_r+0x76>
 8005a98:	d856      	bhi.n	8005b48 <__ssvfiscanf_r+0x198>
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d064      	beq.n	8005b68 <__ssvfiscanf_r+0x1b8>
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	9347      	str	r3, [sp, #284]	; 0x11c
 8005aa2:	230a      	movs	r3, #10
 8005aa4:	9342      	str	r3, [sp, #264]	; 0x108
 8005aa6:	e071      	b.n	8005b8c <__ssvfiscanf_r+0x1dc>
 8005aa8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005aaa:	fb02 1103 	mla	r1, r2, r3, r1
 8005aae:	3930      	subs	r1, #48	; 0x30
 8005ab0:	9143      	str	r1, [sp, #268]	; 0x10c
 8005ab2:	4655      	mov	r5, sl
 8005ab4:	e7d3      	b.n	8005a5e <__ssvfiscanf_r+0xae>
 8005ab6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005aba:	2a20      	cmp	r2, #32
 8005abc:	d8ef      	bhi.n	8005a9e <__ssvfiscanf_r+0xee>
 8005abe:	a101      	add	r1, pc, #4	; (adr r1, 8005ac4 <__ssvfiscanf_r+0x114>)
 8005ac0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ac4:	08005b77 	.word	0x08005b77
 8005ac8:	08005a9f 	.word	0x08005a9f
 8005acc:	08005a9f 	.word	0x08005a9f
 8005ad0:	08005bd5 	.word	0x08005bd5
 8005ad4:	08005a9f 	.word	0x08005a9f
 8005ad8:	08005a9f 	.word	0x08005a9f
 8005adc:	08005a9f 	.word	0x08005a9f
 8005ae0:	08005a9f 	.word	0x08005a9f
 8005ae4:	08005a9f 	.word	0x08005a9f
 8005ae8:	08005a9f 	.word	0x08005a9f
 8005aec:	08005a9f 	.word	0x08005a9f
 8005af0:	08005beb 	.word	0x08005beb
 8005af4:	08005bc1 	.word	0x08005bc1
 8005af8:	08005b4f 	.word	0x08005b4f
 8005afc:	08005b4f 	.word	0x08005b4f
 8005b00:	08005b4f 	.word	0x08005b4f
 8005b04:	08005a9f 	.word	0x08005a9f
 8005b08:	08005bc5 	.word	0x08005bc5
 8005b0c:	08005a9f 	.word	0x08005a9f
 8005b10:	08005a9f 	.word	0x08005a9f
 8005b14:	08005a9f 	.word	0x08005a9f
 8005b18:	08005a9f 	.word	0x08005a9f
 8005b1c:	08005bfb 	.word	0x08005bfb
 8005b20:	08005bcd 	.word	0x08005bcd
 8005b24:	08005b6f 	.word	0x08005b6f
 8005b28:	08005a9f 	.word	0x08005a9f
 8005b2c:	08005a9f 	.word	0x08005a9f
 8005b30:	08005bf7 	.word	0x08005bf7
 8005b34:	08005a9f 	.word	0x08005a9f
 8005b38:	08005bc1 	.word	0x08005bc1
 8005b3c:	08005a9f 	.word	0x08005a9f
 8005b40:	08005a9f 	.word	0x08005a9f
 8005b44:	08005b77 	.word	0x08005b77
 8005b48:	3b45      	subs	r3, #69	; 0x45
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d8a7      	bhi.n	8005a9e <__ssvfiscanf_r+0xee>
 8005b4e:	2305      	movs	r3, #5
 8005b50:	e01b      	b.n	8005b8a <__ssvfiscanf_r+0x1da>
 8005b52:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005b54:	4621      	mov	r1, r4
 8005b56:	4630      	mov	r0, r6
 8005b58:	4798      	blx	r3
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	f43f af68 	beq.w	8005a30 <__ssvfiscanf_r+0x80>
 8005b60:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005b62:	2800      	cmp	r0, #0
 8005b64:	f040 808d 	bne.w	8005c82 <__ssvfiscanf_r+0x2d2>
 8005b68:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6c:	e08f      	b.n	8005c8e <__ssvfiscanf_r+0x2de>
 8005b6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005b70:	f042 0220 	orr.w	r2, r2, #32
 8005b74:	9241      	str	r2, [sp, #260]	; 0x104
 8005b76:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b7c:	9241      	str	r2, [sp, #260]	; 0x104
 8005b7e:	2210      	movs	r2, #16
 8005b80:	2b6f      	cmp	r3, #111	; 0x6f
 8005b82:	9242      	str	r2, [sp, #264]	; 0x108
 8005b84:	bf34      	ite	cc
 8005b86:	2303      	movcc	r3, #3
 8005b88:	2304      	movcs	r3, #4
 8005b8a:	9347      	str	r3, [sp, #284]	; 0x11c
 8005b8c:	6863      	ldr	r3, [r4, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	dd42      	ble.n	8005c18 <__ssvfiscanf_r+0x268>
 8005b92:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005b94:	0659      	lsls	r1, r3, #25
 8005b96:	d404      	bmi.n	8005ba2 <__ssvfiscanf_r+0x1f2>
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	781a      	ldrb	r2, [r3, #0]
 8005b9c:	5cba      	ldrb	r2, [r7, r2]
 8005b9e:	0712      	lsls	r2, r2, #28
 8005ba0:	d441      	bmi.n	8005c26 <__ssvfiscanf_r+0x276>
 8005ba2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	dc50      	bgt.n	8005c4a <__ssvfiscanf_r+0x29a>
 8005ba8:	466b      	mov	r3, sp
 8005baa:	4622      	mov	r2, r4
 8005bac:	a941      	add	r1, sp, #260	; 0x104
 8005bae:	4630      	mov	r0, r6
 8005bb0:	f000 fb64 	bl	800627c <_scanf_chars>
 8005bb4:	2801      	cmp	r0, #1
 8005bb6:	d06e      	beq.n	8005c96 <__ssvfiscanf_r+0x2e6>
 8005bb8:	2802      	cmp	r0, #2
 8005bba:	f47f af20 	bne.w	80059fe <__ssvfiscanf_r+0x4e>
 8005bbe:	e7cf      	b.n	8005b60 <__ssvfiscanf_r+0x1b0>
 8005bc0:	220a      	movs	r2, #10
 8005bc2:	e7dd      	b.n	8005b80 <__ssvfiscanf_r+0x1d0>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	9342      	str	r3, [sp, #264]	; 0x108
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e7de      	b.n	8005b8a <__ssvfiscanf_r+0x1da>
 8005bcc:	2308      	movs	r3, #8
 8005bce:	9342      	str	r3, [sp, #264]	; 0x108
 8005bd0:	2304      	movs	r3, #4
 8005bd2:	e7da      	b.n	8005b8a <__ssvfiscanf_r+0x1da>
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	4640      	mov	r0, r8
 8005bd8:	f000 fcc4 	bl	8006564 <__sccl>
 8005bdc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005be2:	9341      	str	r3, [sp, #260]	; 0x104
 8005be4:	4605      	mov	r5, r0
 8005be6:	2301      	movs	r3, #1
 8005be8:	e7cf      	b.n	8005b8a <__ssvfiscanf_r+0x1da>
 8005bea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bf0:	9341      	str	r3, [sp, #260]	; 0x104
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e7c9      	b.n	8005b8a <__ssvfiscanf_r+0x1da>
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	e7c7      	b.n	8005b8a <__ssvfiscanf_r+0x1da>
 8005bfa:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005bfc:	06c3      	lsls	r3, r0, #27
 8005bfe:	f53f aefe 	bmi.w	80059fe <__ssvfiscanf_r+0x4e>
 8005c02:	9b00      	ldr	r3, [sp, #0]
 8005c04:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005c06:	1d19      	adds	r1, r3, #4
 8005c08:	9100      	str	r1, [sp, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f010 0f01 	tst.w	r0, #1
 8005c10:	bf14      	ite	ne
 8005c12:	801a      	strhne	r2, [r3, #0]
 8005c14:	601a      	streq	r2, [r3, #0]
 8005c16:	e6f2      	b.n	80059fe <__ssvfiscanf_r+0x4e>
 8005c18:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	4798      	blx	r3
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d0b6      	beq.n	8005b92 <__ssvfiscanf_r+0x1e2>
 8005c24:	e79c      	b.n	8005b60 <__ssvfiscanf_r+0x1b0>
 8005c26:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005c28:	3201      	adds	r2, #1
 8005c2a:	9245      	str	r2, [sp, #276]	; 0x114
 8005c2c:	6862      	ldr	r2, [r4, #4]
 8005c2e:	3a01      	subs	r2, #1
 8005c30:	2a00      	cmp	r2, #0
 8005c32:	6062      	str	r2, [r4, #4]
 8005c34:	dd02      	ble.n	8005c3c <__ssvfiscanf_r+0x28c>
 8005c36:	3301      	adds	r3, #1
 8005c38:	6023      	str	r3, [r4, #0]
 8005c3a:	e7ad      	b.n	8005b98 <__ssvfiscanf_r+0x1e8>
 8005c3c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005c3e:	4621      	mov	r1, r4
 8005c40:	4630      	mov	r0, r6
 8005c42:	4798      	blx	r3
 8005c44:	2800      	cmp	r0, #0
 8005c46:	d0a7      	beq.n	8005b98 <__ssvfiscanf_r+0x1e8>
 8005c48:	e78a      	b.n	8005b60 <__ssvfiscanf_r+0x1b0>
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	dc0e      	bgt.n	8005c6c <__ssvfiscanf_r+0x2bc>
 8005c4e:	466b      	mov	r3, sp
 8005c50:	4622      	mov	r2, r4
 8005c52:	a941      	add	r1, sp, #260	; 0x104
 8005c54:	4630      	mov	r0, r6
 8005c56:	f000 fb6b 	bl	8006330 <_scanf_i>
 8005c5a:	e7ab      	b.n	8005bb4 <__ssvfiscanf_r+0x204>
 8005c5c:	080058fd 	.word	0x080058fd
 8005c60:	08005977 	.word	0x08005977
 8005c64:	08006a8f 	.word	0x08006a8f
 8005c68:	08006a40 	.word	0x08006a40
 8005c6c:	4b0b      	ldr	r3, [pc, #44]	; (8005c9c <__ssvfiscanf_r+0x2ec>)
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f43f aec5 	beq.w	80059fe <__ssvfiscanf_r+0x4e>
 8005c74:	466b      	mov	r3, sp
 8005c76:	4622      	mov	r2, r4
 8005c78:	a941      	add	r1, sp, #260	; 0x104
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	f3af 8000 	nop.w
 8005c80:	e798      	b.n	8005bb4 <__ssvfiscanf_r+0x204>
 8005c82:	89a3      	ldrh	r3, [r4, #12]
 8005c84:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005c88:	bf18      	it	ne
 8005c8a:	f04f 30ff 	movne.w	r0, #4294967295
 8005c8e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8005c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c96:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005c98:	e7f9      	b.n	8005c8e <__ssvfiscanf_r+0x2de>
 8005c9a:	bf00      	nop
 8005c9c:	00000000 	.word	0x00000000

08005ca0 <__sfputc_r>:
 8005ca0:	6893      	ldr	r3, [r2, #8]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	b410      	push	{r4}
 8005ca8:	6093      	str	r3, [r2, #8]
 8005caa:	da08      	bge.n	8005cbe <__sfputc_r+0x1e>
 8005cac:	6994      	ldr	r4, [r2, #24]
 8005cae:	42a3      	cmp	r3, r4
 8005cb0:	db01      	blt.n	8005cb6 <__sfputc_r+0x16>
 8005cb2:	290a      	cmp	r1, #10
 8005cb4:	d103      	bne.n	8005cbe <__sfputc_r+0x1e>
 8005cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cba:	f7ff ba23 	b.w	8005104 <__swbuf_r>
 8005cbe:	6813      	ldr	r3, [r2, #0]
 8005cc0:	1c58      	adds	r0, r3, #1
 8005cc2:	6010      	str	r0, [r2, #0]
 8005cc4:	7019      	strb	r1, [r3, #0]
 8005cc6:	4608      	mov	r0, r1
 8005cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <__sfputs_r>:
 8005cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd0:	4606      	mov	r6, r0
 8005cd2:	460f      	mov	r7, r1
 8005cd4:	4614      	mov	r4, r2
 8005cd6:	18d5      	adds	r5, r2, r3
 8005cd8:	42ac      	cmp	r4, r5
 8005cda:	d101      	bne.n	8005ce0 <__sfputs_r+0x12>
 8005cdc:	2000      	movs	r0, #0
 8005cde:	e007      	b.n	8005cf0 <__sfputs_r+0x22>
 8005ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ce4:	463a      	mov	r2, r7
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	f7ff ffda 	bl	8005ca0 <__sfputc_r>
 8005cec:	1c43      	adds	r3, r0, #1
 8005cee:	d1f3      	bne.n	8005cd8 <__sfputs_r+0xa>
 8005cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005cf4 <_vfiprintf_r>:
 8005cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf8:	460d      	mov	r5, r1
 8005cfa:	b09d      	sub	sp, #116	; 0x74
 8005cfc:	4614      	mov	r4, r2
 8005cfe:	4698      	mov	r8, r3
 8005d00:	4606      	mov	r6, r0
 8005d02:	b118      	cbz	r0, 8005d0c <_vfiprintf_r+0x18>
 8005d04:	6983      	ldr	r3, [r0, #24]
 8005d06:	b90b      	cbnz	r3, 8005d0c <_vfiprintf_r+0x18>
 8005d08:	f7ff fbf8 	bl	80054fc <__sinit>
 8005d0c:	4b89      	ldr	r3, [pc, #548]	; (8005f34 <_vfiprintf_r+0x240>)
 8005d0e:	429d      	cmp	r5, r3
 8005d10:	d11b      	bne.n	8005d4a <_vfiprintf_r+0x56>
 8005d12:	6875      	ldr	r5, [r6, #4]
 8005d14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d16:	07d9      	lsls	r1, r3, #31
 8005d18:	d405      	bmi.n	8005d26 <_vfiprintf_r+0x32>
 8005d1a:	89ab      	ldrh	r3, [r5, #12]
 8005d1c:	059a      	lsls	r2, r3, #22
 8005d1e:	d402      	bmi.n	8005d26 <_vfiprintf_r+0x32>
 8005d20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d22:	f7ff fc89 	bl	8005638 <__retarget_lock_acquire_recursive>
 8005d26:	89ab      	ldrh	r3, [r5, #12]
 8005d28:	071b      	lsls	r3, r3, #28
 8005d2a:	d501      	bpl.n	8005d30 <_vfiprintf_r+0x3c>
 8005d2c:	692b      	ldr	r3, [r5, #16]
 8005d2e:	b9eb      	cbnz	r3, 8005d6c <_vfiprintf_r+0x78>
 8005d30:	4629      	mov	r1, r5
 8005d32:	4630      	mov	r0, r6
 8005d34:	f7ff fa4a 	bl	80051cc <__swsetup_r>
 8005d38:	b1c0      	cbz	r0, 8005d6c <_vfiprintf_r+0x78>
 8005d3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d3c:	07dc      	lsls	r4, r3, #31
 8005d3e:	d50e      	bpl.n	8005d5e <_vfiprintf_r+0x6a>
 8005d40:	f04f 30ff 	mov.w	r0, #4294967295
 8005d44:	b01d      	add	sp, #116	; 0x74
 8005d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d4a:	4b7b      	ldr	r3, [pc, #492]	; (8005f38 <_vfiprintf_r+0x244>)
 8005d4c:	429d      	cmp	r5, r3
 8005d4e:	d101      	bne.n	8005d54 <_vfiprintf_r+0x60>
 8005d50:	68b5      	ldr	r5, [r6, #8]
 8005d52:	e7df      	b.n	8005d14 <_vfiprintf_r+0x20>
 8005d54:	4b79      	ldr	r3, [pc, #484]	; (8005f3c <_vfiprintf_r+0x248>)
 8005d56:	429d      	cmp	r5, r3
 8005d58:	bf08      	it	eq
 8005d5a:	68f5      	ldreq	r5, [r6, #12]
 8005d5c:	e7da      	b.n	8005d14 <_vfiprintf_r+0x20>
 8005d5e:	89ab      	ldrh	r3, [r5, #12]
 8005d60:	0598      	lsls	r0, r3, #22
 8005d62:	d4ed      	bmi.n	8005d40 <_vfiprintf_r+0x4c>
 8005d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d66:	f7ff fc68 	bl	800563a <__retarget_lock_release_recursive>
 8005d6a:	e7e9      	b.n	8005d40 <_vfiprintf_r+0x4c>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d70:	2320      	movs	r3, #32
 8005d72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d76:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d7a:	2330      	movs	r3, #48	; 0x30
 8005d7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005f40 <_vfiprintf_r+0x24c>
 8005d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d84:	f04f 0901 	mov.w	r9, #1
 8005d88:	4623      	mov	r3, r4
 8005d8a:	469a      	mov	sl, r3
 8005d8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d90:	b10a      	cbz	r2, 8005d96 <_vfiprintf_r+0xa2>
 8005d92:	2a25      	cmp	r2, #37	; 0x25
 8005d94:	d1f9      	bne.n	8005d8a <_vfiprintf_r+0x96>
 8005d96:	ebba 0b04 	subs.w	fp, sl, r4
 8005d9a:	d00b      	beq.n	8005db4 <_vfiprintf_r+0xc0>
 8005d9c:	465b      	mov	r3, fp
 8005d9e:	4622      	mov	r2, r4
 8005da0:	4629      	mov	r1, r5
 8005da2:	4630      	mov	r0, r6
 8005da4:	f7ff ff93 	bl	8005cce <__sfputs_r>
 8005da8:	3001      	adds	r0, #1
 8005daa:	f000 80aa 	beq.w	8005f02 <_vfiprintf_r+0x20e>
 8005dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005db0:	445a      	add	r2, fp
 8005db2:	9209      	str	r2, [sp, #36]	; 0x24
 8005db4:	f89a 3000 	ldrb.w	r3, [sl]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 80a2 	beq.w	8005f02 <_vfiprintf_r+0x20e>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dc8:	f10a 0a01 	add.w	sl, sl, #1
 8005dcc:	9304      	str	r3, [sp, #16]
 8005dce:	9307      	str	r3, [sp, #28]
 8005dd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005dd4:	931a      	str	r3, [sp, #104]	; 0x68
 8005dd6:	4654      	mov	r4, sl
 8005dd8:	2205      	movs	r2, #5
 8005dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dde:	4858      	ldr	r0, [pc, #352]	; (8005f40 <_vfiprintf_r+0x24c>)
 8005de0:	f7fa fa0e 	bl	8000200 <memchr>
 8005de4:	9a04      	ldr	r2, [sp, #16]
 8005de6:	b9d8      	cbnz	r0, 8005e20 <_vfiprintf_r+0x12c>
 8005de8:	06d1      	lsls	r1, r2, #27
 8005dea:	bf44      	itt	mi
 8005dec:	2320      	movmi	r3, #32
 8005dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005df2:	0713      	lsls	r3, r2, #28
 8005df4:	bf44      	itt	mi
 8005df6:	232b      	movmi	r3, #43	; 0x2b
 8005df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8005e00:	2b2a      	cmp	r3, #42	; 0x2a
 8005e02:	d015      	beq.n	8005e30 <_vfiprintf_r+0x13c>
 8005e04:	9a07      	ldr	r2, [sp, #28]
 8005e06:	4654      	mov	r4, sl
 8005e08:	2000      	movs	r0, #0
 8005e0a:	f04f 0c0a 	mov.w	ip, #10
 8005e0e:	4621      	mov	r1, r4
 8005e10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e14:	3b30      	subs	r3, #48	; 0x30
 8005e16:	2b09      	cmp	r3, #9
 8005e18:	d94e      	bls.n	8005eb8 <_vfiprintf_r+0x1c4>
 8005e1a:	b1b0      	cbz	r0, 8005e4a <_vfiprintf_r+0x156>
 8005e1c:	9207      	str	r2, [sp, #28]
 8005e1e:	e014      	b.n	8005e4a <_vfiprintf_r+0x156>
 8005e20:	eba0 0308 	sub.w	r3, r0, r8
 8005e24:	fa09 f303 	lsl.w	r3, r9, r3
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	9304      	str	r3, [sp, #16]
 8005e2c:	46a2      	mov	sl, r4
 8005e2e:	e7d2      	b.n	8005dd6 <_vfiprintf_r+0xe2>
 8005e30:	9b03      	ldr	r3, [sp, #12]
 8005e32:	1d19      	adds	r1, r3, #4
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	9103      	str	r1, [sp, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	bfbb      	ittet	lt
 8005e3c:	425b      	neglt	r3, r3
 8005e3e:	f042 0202 	orrlt.w	r2, r2, #2
 8005e42:	9307      	strge	r3, [sp, #28]
 8005e44:	9307      	strlt	r3, [sp, #28]
 8005e46:	bfb8      	it	lt
 8005e48:	9204      	strlt	r2, [sp, #16]
 8005e4a:	7823      	ldrb	r3, [r4, #0]
 8005e4c:	2b2e      	cmp	r3, #46	; 0x2e
 8005e4e:	d10c      	bne.n	8005e6a <_vfiprintf_r+0x176>
 8005e50:	7863      	ldrb	r3, [r4, #1]
 8005e52:	2b2a      	cmp	r3, #42	; 0x2a
 8005e54:	d135      	bne.n	8005ec2 <_vfiprintf_r+0x1ce>
 8005e56:	9b03      	ldr	r3, [sp, #12]
 8005e58:	1d1a      	adds	r2, r3, #4
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	9203      	str	r2, [sp, #12]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	bfb8      	it	lt
 8005e62:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e66:	3402      	adds	r4, #2
 8005e68:	9305      	str	r3, [sp, #20]
 8005e6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005f50 <_vfiprintf_r+0x25c>
 8005e6e:	7821      	ldrb	r1, [r4, #0]
 8005e70:	2203      	movs	r2, #3
 8005e72:	4650      	mov	r0, sl
 8005e74:	f7fa f9c4 	bl	8000200 <memchr>
 8005e78:	b140      	cbz	r0, 8005e8c <_vfiprintf_r+0x198>
 8005e7a:	2340      	movs	r3, #64	; 0x40
 8005e7c:	eba0 000a 	sub.w	r0, r0, sl
 8005e80:	fa03 f000 	lsl.w	r0, r3, r0
 8005e84:	9b04      	ldr	r3, [sp, #16]
 8005e86:	4303      	orrs	r3, r0
 8005e88:	3401      	adds	r4, #1
 8005e8a:	9304      	str	r3, [sp, #16]
 8005e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e90:	482c      	ldr	r0, [pc, #176]	; (8005f44 <_vfiprintf_r+0x250>)
 8005e92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e96:	2206      	movs	r2, #6
 8005e98:	f7fa f9b2 	bl	8000200 <memchr>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d03f      	beq.n	8005f20 <_vfiprintf_r+0x22c>
 8005ea0:	4b29      	ldr	r3, [pc, #164]	; (8005f48 <_vfiprintf_r+0x254>)
 8005ea2:	bb1b      	cbnz	r3, 8005eec <_vfiprintf_r+0x1f8>
 8005ea4:	9b03      	ldr	r3, [sp, #12]
 8005ea6:	3307      	adds	r3, #7
 8005ea8:	f023 0307 	bic.w	r3, r3, #7
 8005eac:	3308      	adds	r3, #8
 8005eae:	9303      	str	r3, [sp, #12]
 8005eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eb2:	443b      	add	r3, r7
 8005eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8005eb6:	e767      	b.n	8005d88 <_vfiprintf_r+0x94>
 8005eb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ebc:	460c      	mov	r4, r1
 8005ebe:	2001      	movs	r0, #1
 8005ec0:	e7a5      	b.n	8005e0e <_vfiprintf_r+0x11a>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	3401      	adds	r4, #1
 8005ec6:	9305      	str	r3, [sp, #20]
 8005ec8:	4619      	mov	r1, r3
 8005eca:	f04f 0c0a 	mov.w	ip, #10
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ed4:	3a30      	subs	r2, #48	; 0x30
 8005ed6:	2a09      	cmp	r2, #9
 8005ed8:	d903      	bls.n	8005ee2 <_vfiprintf_r+0x1ee>
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0c5      	beq.n	8005e6a <_vfiprintf_r+0x176>
 8005ede:	9105      	str	r1, [sp, #20]
 8005ee0:	e7c3      	b.n	8005e6a <_vfiprintf_r+0x176>
 8005ee2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ee6:	4604      	mov	r4, r0
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e7f0      	b.n	8005ece <_vfiprintf_r+0x1da>
 8005eec:	ab03      	add	r3, sp, #12
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	462a      	mov	r2, r5
 8005ef2:	4b16      	ldr	r3, [pc, #88]	; (8005f4c <_vfiprintf_r+0x258>)
 8005ef4:	a904      	add	r1, sp, #16
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	f3af 8000 	nop.w
 8005efc:	4607      	mov	r7, r0
 8005efe:	1c78      	adds	r0, r7, #1
 8005f00:	d1d6      	bne.n	8005eb0 <_vfiprintf_r+0x1bc>
 8005f02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f04:	07d9      	lsls	r1, r3, #31
 8005f06:	d405      	bmi.n	8005f14 <_vfiprintf_r+0x220>
 8005f08:	89ab      	ldrh	r3, [r5, #12]
 8005f0a:	059a      	lsls	r2, r3, #22
 8005f0c:	d402      	bmi.n	8005f14 <_vfiprintf_r+0x220>
 8005f0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f10:	f7ff fb93 	bl	800563a <__retarget_lock_release_recursive>
 8005f14:	89ab      	ldrh	r3, [r5, #12]
 8005f16:	065b      	lsls	r3, r3, #25
 8005f18:	f53f af12 	bmi.w	8005d40 <_vfiprintf_r+0x4c>
 8005f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f1e:	e711      	b.n	8005d44 <_vfiprintf_r+0x50>
 8005f20:	ab03      	add	r3, sp, #12
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	462a      	mov	r2, r5
 8005f26:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <_vfiprintf_r+0x258>)
 8005f28:	a904      	add	r1, sp, #16
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	f000 f880 	bl	8006030 <_printf_i>
 8005f30:	e7e4      	b.n	8005efc <_vfiprintf_r+0x208>
 8005f32:	bf00      	nop
 8005f34:	08006a00 	.word	0x08006a00
 8005f38:	08006a20 	.word	0x08006a20
 8005f3c:	080069e0 	.word	0x080069e0
 8005f40:	08006a44 	.word	0x08006a44
 8005f44:	08006a4a 	.word	0x08006a4a
 8005f48:	00000000 	.word	0x00000000
 8005f4c:	08005ccf 	.word	0x08005ccf
 8005f50:	08006a40 	.word	0x08006a40

08005f54 <_printf_common>:
 8005f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f58:	4616      	mov	r6, r2
 8005f5a:	4699      	mov	r9, r3
 8005f5c:	688a      	ldr	r2, [r1, #8]
 8005f5e:	690b      	ldr	r3, [r1, #16]
 8005f60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f64:	4293      	cmp	r3, r2
 8005f66:	bfb8      	it	lt
 8005f68:	4613      	movlt	r3, r2
 8005f6a:	6033      	str	r3, [r6, #0]
 8005f6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f70:	4607      	mov	r7, r0
 8005f72:	460c      	mov	r4, r1
 8005f74:	b10a      	cbz	r2, 8005f7a <_printf_common+0x26>
 8005f76:	3301      	adds	r3, #1
 8005f78:	6033      	str	r3, [r6, #0]
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	0699      	lsls	r1, r3, #26
 8005f7e:	bf42      	ittt	mi
 8005f80:	6833      	ldrmi	r3, [r6, #0]
 8005f82:	3302      	addmi	r3, #2
 8005f84:	6033      	strmi	r3, [r6, #0]
 8005f86:	6825      	ldr	r5, [r4, #0]
 8005f88:	f015 0506 	ands.w	r5, r5, #6
 8005f8c:	d106      	bne.n	8005f9c <_printf_common+0x48>
 8005f8e:	f104 0a19 	add.w	sl, r4, #25
 8005f92:	68e3      	ldr	r3, [r4, #12]
 8005f94:	6832      	ldr	r2, [r6, #0]
 8005f96:	1a9b      	subs	r3, r3, r2
 8005f98:	42ab      	cmp	r3, r5
 8005f9a:	dc26      	bgt.n	8005fea <_printf_common+0x96>
 8005f9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fa0:	1e13      	subs	r3, r2, #0
 8005fa2:	6822      	ldr	r2, [r4, #0]
 8005fa4:	bf18      	it	ne
 8005fa6:	2301      	movne	r3, #1
 8005fa8:	0692      	lsls	r2, r2, #26
 8005faa:	d42b      	bmi.n	8006004 <_printf_common+0xb0>
 8005fac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fb0:	4649      	mov	r1, r9
 8005fb2:	4638      	mov	r0, r7
 8005fb4:	47c0      	blx	r8
 8005fb6:	3001      	adds	r0, #1
 8005fb8:	d01e      	beq.n	8005ff8 <_printf_common+0xa4>
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	68e5      	ldr	r5, [r4, #12]
 8005fbe:	6832      	ldr	r2, [r6, #0]
 8005fc0:	f003 0306 	and.w	r3, r3, #6
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	bf08      	it	eq
 8005fc8:	1aad      	subeq	r5, r5, r2
 8005fca:	68a3      	ldr	r3, [r4, #8]
 8005fcc:	6922      	ldr	r2, [r4, #16]
 8005fce:	bf0c      	ite	eq
 8005fd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fd4:	2500      	movne	r5, #0
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	bfc4      	itt	gt
 8005fda:	1a9b      	subgt	r3, r3, r2
 8005fdc:	18ed      	addgt	r5, r5, r3
 8005fde:	2600      	movs	r6, #0
 8005fe0:	341a      	adds	r4, #26
 8005fe2:	42b5      	cmp	r5, r6
 8005fe4:	d11a      	bne.n	800601c <_printf_common+0xc8>
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	e008      	b.n	8005ffc <_printf_common+0xa8>
 8005fea:	2301      	movs	r3, #1
 8005fec:	4652      	mov	r2, sl
 8005fee:	4649      	mov	r1, r9
 8005ff0:	4638      	mov	r0, r7
 8005ff2:	47c0      	blx	r8
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	d103      	bne.n	8006000 <_printf_common+0xac>
 8005ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006000:	3501      	adds	r5, #1
 8006002:	e7c6      	b.n	8005f92 <_printf_common+0x3e>
 8006004:	18e1      	adds	r1, r4, r3
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	2030      	movs	r0, #48	; 0x30
 800600a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800600e:	4422      	add	r2, r4
 8006010:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006014:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006018:	3302      	adds	r3, #2
 800601a:	e7c7      	b.n	8005fac <_printf_common+0x58>
 800601c:	2301      	movs	r3, #1
 800601e:	4622      	mov	r2, r4
 8006020:	4649      	mov	r1, r9
 8006022:	4638      	mov	r0, r7
 8006024:	47c0      	blx	r8
 8006026:	3001      	adds	r0, #1
 8006028:	d0e6      	beq.n	8005ff8 <_printf_common+0xa4>
 800602a:	3601      	adds	r6, #1
 800602c:	e7d9      	b.n	8005fe2 <_printf_common+0x8e>
	...

08006030 <_printf_i>:
 8006030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006034:	7e0f      	ldrb	r7, [r1, #24]
 8006036:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006038:	2f78      	cmp	r7, #120	; 0x78
 800603a:	4691      	mov	r9, r2
 800603c:	4680      	mov	r8, r0
 800603e:	460c      	mov	r4, r1
 8006040:	469a      	mov	sl, r3
 8006042:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006046:	d807      	bhi.n	8006058 <_printf_i+0x28>
 8006048:	2f62      	cmp	r7, #98	; 0x62
 800604a:	d80a      	bhi.n	8006062 <_printf_i+0x32>
 800604c:	2f00      	cmp	r7, #0
 800604e:	f000 80d8 	beq.w	8006202 <_printf_i+0x1d2>
 8006052:	2f58      	cmp	r7, #88	; 0x58
 8006054:	f000 80a3 	beq.w	800619e <_printf_i+0x16e>
 8006058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800605c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006060:	e03a      	b.n	80060d8 <_printf_i+0xa8>
 8006062:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006066:	2b15      	cmp	r3, #21
 8006068:	d8f6      	bhi.n	8006058 <_printf_i+0x28>
 800606a:	a101      	add	r1, pc, #4	; (adr r1, 8006070 <_printf_i+0x40>)
 800606c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006070:	080060c9 	.word	0x080060c9
 8006074:	080060dd 	.word	0x080060dd
 8006078:	08006059 	.word	0x08006059
 800607c:	08006059 	.word	0x08006059
 8006080:	08006059 	.word	0x08006059
 8006084:	08006059 	.word	0x08006059
 8006088:	080060dd 	.word	0x080060dd
 800608c:	08006059 	.word	0x08006059
 8006090:	08006059 	.word	0x08006059
 8006094:	08006059 	.word	0x08006059
 8006098:	08006059 	.word	0x08006059
 800609c:	080061e9 	.word	0x080061e9
 80060a0:	0800610d 	.word	0x0800610d
 80060a4:	080061cb 	.word	0x080061cb
 80060a8:	08006059 	.word	0x08006059
 80060ac:	08006059 	.word	0x08006059
 80060b0:	0800620b 	.word	0x0800620b
 80060b4:	08006059 	.word	0x08006059
 80060b8:	0800610d 	.word	0x0800610d
 80060bc:	08006059 	.word	0x08006059
 80060c0:	08006059 	.word	0x08006059
 80060c4:	080061d3 	.word	0x080061d3
 80060c8:	682b      	ldr	r3, [r5, #0]
 80060ca:	1d1a      	adds	r2, r3, #4
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	602a      	str	r2, [r5, #0]
 80060d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060d8:	2301      	movs	r3, #1
 80060da:	e0a3      	b.n	8006224 <_printf_i+0x1f4>
 80060dc:	6820      	ldr	r0, [r4, #0]
 80060de:	6829      	ldr	r1, [r5, #0]
 80060e0:	0606      	lsls	r6, r0, #24
 80060e2:	f101 0304 	add.w	r3, r1, #4
 80060e6:	d50a      	bpl.n	80060fe <_printf_i+0xce>
 80060e8:	680e      	ldr	r6, [r1, #0]
 80060ea:	602b      	str	r3, [r5, #0]
 80060ec:	2e00      	cmp	r6, #0
 80060ee:	da03      	bge.n	80060f8 <_printf_i+0xc8>
 80060f0:	232d      	movs	r3, #45	; 0x2d
 80060f2:	4276      	negs	r6, r6
 80060f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060f8:	485e      	ldr	r0, [pc, #376]	; (8006274 <_printf_i+0x244>)
 80060fa:	230a      	movs	r3, #10
 80060fc:	e019      	b.n	8006132 <_printf_i+0x102>
 80060fe:	680e      	ldr	r6, [r1, #0]
 8006100:	602b      	str	r3, [r5, #0]
 8006102:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006106:	bf18      	it	ne
 8006108:	b236      	sxthne	r6, r6
 800610a:	e7ef      	b.n	80060ec <_printf_i+0xbc>
 800610c:	682b      	ldr	r3, [r5, #0]
 800610e:	6820      	ldr	r0, [r4, #0]
 8006110:	1d19      	adds	r1, r3, #4
 8006112:	6029      	str	r1, [r5, #0]
 8006114:	0601      	lsls	r1, r0, #24
 8006116:	d501      	bpl.n	800611c <_printf_i+0xec>
 8006118:	681e      	ldr	r6, [r3, #0]
 800611a:	e002      	b.n	8006122 <_printf_i+0xf2>
 800611c:	0646      	lsls	r6, r0, #25
 800611e:	d5fb      	bpl.n	8006118 <_printf_i+0xe8>
 8006120:	881e      	ldrh	r6, [r3, #0]
 8006122:	4854      	ldr	r0, [pc, #336]	; (8006274 <_printf_i+0x244>)
 8006124:	2f6f      	cmp	r7, #111	; 0x6f
 8006126:	bf0c      	ite	eq
 8006128:	2308      	moveq	r3, #8
 800612a:	230a      	movne	r3, #10
 800612c:	2100      	movs	r1, #0
 800612e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006132:	6865      	ldr	r5, [r4, #4]
 8006134:	60a5      	str	r5, [r4, #8]
 8006136:	2d00      	cmp	r5, #0
 8006138:	bfa2      	ittt	ge
 800613a:	6821      	ldrge	r1, [r4, #0]
 800613c:	f021 0104 	bicge.w	r1, r1, #4
 8006140:	6021      	strge	r1, [r4, #0]
 8006142:	b90e      	cbnz	r6, 8006148 <_printf_i+0x118>
 8006144:	2d00      	cmp	r5, #0
 8006146:	d04d      	beq.n	80061e4 <_printf_i+0x1b4>
 8006148:	4615      	mov	r5, r2
 800614a:	fbb6 f1f3 	udiv	r1, r6, r3
 800614e:	fb03 6711 	mls	r7, r3, r1, r6
 8006152:	5dc7      	ldrb	r7, [r0, r7]
 8006154:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006158:	4637      	mov	r7, r6
 800615a:	42bb      	cmp	r3, r7
 800615c:	460e      	mov	r6, r1
 800615e:	d9f4      	bls.n	800614a <_printf_i+0x11a>
 8006160:	2b08      	cmp	r3, #8
 8006162:	d10b      	bne.n	800617c <_printf_i+0x14c>
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	07de      	lsls	r6, r3, #31
 8006168:	d508      	bpl.n	800617c <_printf_i+0x14c>
 800616a:	6923      	ldr	r3, [r4, #16]
 800616c:	6861      	ldr	r1, [r4, #4]
 800616e:	4299      	cmp	r1, r3
 8006170:	bfde      	ittt	le
 8006172:	2330      	movle	r3, #48	; 0x30
 8006174:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006178:	f105 35ff 	addle.w	r5, r5, #4294967295
 800617c:	1b52      	subs	r2, r2, r5
 800617e:	6122      	str	r2, [r4, #16]
 8006180:	f8cd a000 	str.w	sl, [sp]
 8006184:	464b      	mov	r3, r9
 8006186:	aa03      	add	r2, sp, #12
 8006188:	4621      	mov	r1, r4
 800618a:	4640      	mov	r0, r8
 800618c:	f7ff fee2 	bl	8005f54 <_printf_common>
 8006190:	3001      	adds	r0, #1
 8006192:	d14c      	bne.n	800622e <_printf_i+0x1fe>
 8006194:	f04f 30ff 	mov.w	r0, #4294967295
 8006198:	b004      	add	sp, #16
 800619a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800619e:	4835      	ldr	r0, [pc, #212]	; (8006274 <_printf_i+0x244>)
 80061a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80061a4:	6829      	ldr	r1, [r5, #0]
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80061ac:	6029      	str	r1, [r5, #0]
 80061ae:	061d      	lsls	r5, r3, #24
 80061b0:	d514      	bpl.n	80061dc <_printf_i+0x1ac>
 80061b2:	07df      	lsls	r7, r3, #31
 80061b4:	bf44      	itt	mi
 80061b6:	f043 0320 	orrmi.w	r3, r3, #32
 80061ba:	6023      	strmi	r3, [r4, #0]
 80061bc:	b91e      	cbnz	r6, 80061c6 <_printf_i+0x196>
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	f023 0320 	bic.w	r3, r3, #32
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	2310      	movs	r3, #16
 80061c8:	e7b0      	b.n	800612c <_printf_i+0xfc>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	f043 0320 	orr.w	r3, r3, #32
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	2378      	movs	r3, #120	; 0x78
 80061d4:	4828      	ldr	r0, [pc, #160]	; (8006278 <_printf_i+0x248>)
 80061d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061da:	e7e3      	b.n	80061a4 <_printf_i+0x174>
 80061dc:	0659      	lsls	r1, r3, #25
 80061de:	bf48      	it	mi
 80061e0:	b2b6      	uxthmi	r6, r6
 80061e2:	e7e6      	b.n	80061b2 <_printf_i+0x182>
 80061e4:	4615      	mov	r5, r2
 80061e6:	e7bb      	b.n	8006160 <_printf_i+0x130>
 80061e8:	682b      	ldr	r3, [r5, #0]
 80061ea:	6826      	ldr	r6, [r4, #0]
 80061ec:	6961      	ldr	r1, [r4, #20]
 80061ee:	1d18      	adds	r0, r3, #4
 80061f0:	6028      	str	r0, [r5, #0]
 80061f2:	0635      	lsls	r5, r6, #24
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	d501      	bpl.n	80061fc <_printf_i+0x1cc>
 80061f8:	6019      	str	r1, [r3, #0]
 80061fa:	e002      	b.n	8006202 <_printf_i+0x1d2>
 80061fc:	0670      	lsls	r0, r6, #25
 80061fe:	d5fb      	bpl.n	80061f8 <_printf_i+0x1c8>
 8006200:	8019      	strh	r1, [r3, #0]
 8006202:	2300      	movs	r3, #0
 8006204:	6123      	str	r3, [r4, #16]
 8006206:	4615      	mov	r5, r2
 8006208:	e7ba      	b.n	8006180 <_printf_i+0x150>
 800620a:	682b      	ldr	r3, [r5, #0]
 800620c:	1d1a      	adds	r2, r3, #4
 800620e:	602a      	str	r2, [r5, #0]
 8006210:	681d      	ldr	r5, [r3, #0]
 8006212:	6862      	ldr	r2, [r4, #4]
 8006214:	2100      	movs	r1, #0
 8006216:	4628      	mov	r0, r5
 8006218:	f7f9 fff2 	bl	8000200 <memchr>
 800621c:	b108      	cbz	r0, 8006222 <_printf_i+0x1f2>
 800621e:	1b40      	subs	r0, r0, r5
 8006220:	6060      	str	r0, [r4, #4]
 8006222:	6863      	ldr	r3, [r4, #4]
 8006224:	6123      	str	r3, [r4, #16]
 8006226:	2300      	movs	r3, #0
 8006228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800622c:	e7a8      	b.n	8006180 <_printf_i+0x150>
 800622e:	6923      	ldr	r3, [r4, #16]
 8006230:	462a      	mov	r2, r5
 8006232:	4649      	mov	r1, r9
 8006234:	4640      	mov	r0, r8
 8006236:	47d0      	blx	sl
 8006238:	3001      	adds	r0, #1
 800623a:	d0ab      	beq.n	8006194 <_printf_i+0x164>
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	079b      	lsls	r3, r3, #30
 8006240:	d413      	bmi.n	800626a <_printf_i+0x23a>
 8006242:	68e0      	ldr	r0, [r4, #12]
 8006244:	9b03      	ldr	r3, [sp, #12]
 8006246:	4298      	cmp	r0, r3
 8006248:	bfb8      	it	lt
 800624a:	4618      	movlt	r0, r3
 800624c:	e7a4      	b.n	8006198 <_printf_i+0x168>
 800624e:	2301      	movs	r3, #1
 8006250:	4632      	mov	r2, r6
 8006252:	4649      	mov	r1, r9
 8006254:	4640      	mov	r0, r8
 8006256:	47d0      	blx	sl
 8006258:	3001      	adds	r0, #1
 800625a:	d09b      	beq.n	8006194 <_printf_i+0x164>
 800625c:	3501      	adds	r5, #1
 800625e:	68e3      	ldr	r3, [r4, #12]
 8006260:	9903      	ldr	r1, [sp, #12]
 8006262:	1a5b      	subs	r3, r3, r1
 8006264:	42ab      	cmp	r3, r5
 8006266:	dcf2      	bgt.n	800624e <_printf_i+0x21e>
 8006268:	e7eb      	b.n	8006242 <_printf_i+0x212>
 800626a:	2500      	movs	r5, #0
 800626c:	f104 0619 	add.w	r6, r4, #25
 8006270:	e7f5      	b.n	800625e <_printf_i+0x22e>
 8006272:	bf00      	nop
 8006274:	08006a51 	.word	0x08006a51
 8006278:	08006a62 	.word	0x08006a62

0800627c <_scanf_chars>:
 800627c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006280:	4615      	mov	r5, r2
 8006282:	688a      	ldr	r2, [r1, #8]
 8006284:	4680      	mov	r8, r0
 8006286:	460c      	mov	r4, r1
 8006288:	b932      	cbnz	r2, 8006298 <_scanf_chars+0x1c>
 800628a:	698a      	ldr	r2, [r1, #24]
 800628c:	2a00      	cmp	r2, #0
 800628e:	bf0c      	ite	eq
 8006290:	2201      	moveq	r2, #1
 8006292:	f04f 32ff 	movne.w	r2, #4294967295
 8006296:	608a      	str	r2, [r1, #8]
 8006298:	6822      	ldr	r2, [r4, #0]
 800629a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800632c <_scanf_chars+0xb0>
 800629e:	06d1      	lsls	r1, r2, #27
 80062a0:	bf5f      	itttt	pl
 80062a2:	681a      	ldrpl	r2, [r3, #0]
 80062a4:	1d11      	addpl	r1, r2, #4
 80062a6:	6019      	strpl	r1, [r3, #0]
 80062a8:	6816      	ldrpl	r6, [r2, #0]
 80062aa:	2700      	movs	r7, #0
 80062ac:	69a0      	ldr	r0, [r4, #24]
 80062ae:	b188      	cbz	r0, 80062d4 <_scanf_chars+0x58>
 80062b0:	2801      	cmp	r0, #1
 80062b2:	d107      	bne.n	80062c4 <_scanf_chars+0x48>
 80062b4:	682a      	ldr	r2, [r5, #0]
 80062b6:	7811      	ldrb	r1, [r2, #0]
 80062b8:	6962      	ldr	r2, [r4, #20]
 80062ba:	5c52      	ldrb	r2, [r2, r1]
 80062bc:	b952      	cbnz	r2, 80062d4 <_scanf_chars+0x58>
 80062be:	2f00      	cmp	r7, #0
 80062c0:	d031      	beq.n	8006326 <_scanf_chars+0xaa>
 80062c2:	e022      	b.n	800630a <_scanf_chars+0x8e>
 80062c4:	2802      	cmp	r0, #2
 80062c6:	d120      	bne.n	800630a <_scanf_chars+0x8e>
 80062c8:	682b      	ldr	r3, [r5, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	f813 3009 	ldrb.w	r3, [r3, r9]
 80062d0:	071b      	lsls	r3, r3, #28
 80062d2:	d41a      	bmi.n	800630a <_scanf_chars+0x8e>
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	06da      	lsls	r2, r3, #27
 80062d8:	bf5e      	ittt	pl
 80062da:	682b      	ldrpl	r3, [r5, #0]
 80062dc:	781b      	ldrbpl	r3, [r3, #0]
 80062de:	f806 3b01 	strbpl.w	r3, [r6], #1
 80062e2:	682a      	ldr	r2, [r5, #0]
 80062e4:	686b      	ldr	r3, [r5, #4]
 80062e6:	3201      	adds	r2, #1
 80062e8:	602a      	str	r2, [r5, #0]
 80062ea:	68a2      	ldr	r2, [r4, #8]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	3a01      	subs	r2, #1
 80062f0:	606b      	str	r3, [r5, #4]
 80062f2:	3701      	adds	r7, #1
 80062f4:	60a2      	str	r2, [r4, #8]
 80062f6:	b142      	cbz	r2, 800630a <_scanf_chars+0x8e>
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	dcd7      	bgt.n	80062ac <_scanf_chars+0x30>
 80062fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006300:	4629      	mov	r1, r5
 8006302:	4640      	mov	r0, r8
 8006304:	4798      	blx	r3
 8006306:	2800      	cmp	r0, #0
 8006308:	d0d0      	beq.n	80062ac <_scanf_chars+0x30>
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	f013 0310 	ands.w	r3, r3, #16
 8006310:	d105      	bne.n	800631e <_scanf_chars+0xa2>
 8006312:	68e2      	ldr	r2, [r4, #12]
 8006314:	3201      	adds	r2, #1
 8006316:	60e2      	str	r2, [r4, #12]
 8006318:	69a2      	ldr	r2, [r4, #24]
 800631a:	b102      	cbz	r2, 800631e <_scanf_chars+0xa2>
 800631c:	7033      	strb	r3, [r6, #0]
 800631e:	6923      	ldr	r3, [r4, #16]
 8006320:	443b      	add	r3, r7
 8006322:	6123      	str	r3, [r4, #16]
 8006324:	2000      	movs	r0, #0
 8006326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800632a:	bf00      	nop
 800632c:	08006a8f 	.word	0x08006a8f

08006330 <_scanf_i>:
 8006330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006334:	4698      	mov	r8, r3
 8006336:	4b76      	ldr	r3, [pc, #472]	; (8006510 <_scanf_i+0x1e0>)
 8006338:	460c      	mov	r4, r1
 800633a:	4682      	mov	sl, r0
 800633c:	4616      	mov	r6, r2
 800633e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006342:	b087      	sub	sp, #28
 8006344:	ab03      	add	r3, sp, #12
 8006346:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800634a:	4b72      	ldr	r3, [pc, #456]	; (8006514 <_scanf_i+0x1e4>)
 800634c:	69a1      	ldr	r1, [r4, #24]
 800634e:	4a72      	ldr	r2, [pc, #456]	; (8006518 <_scanf_i+0x1e8>)
 8006350:	2903      	cmp	r1, #3
 8006352:	bf18      	it	ne
 8006354:	461a      	movne	r2, r3
 8006356:	68a3      	ldr	r3, [r4, #8]
 8006358:	9201      	str	r2, [sp, #4]
 800635a:	1e5a      	subs	r2, r3, #1
 800635c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006360:	bf88      	it	hi
 8006362:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006366:	4627      	mov	r7, r4
 8006368:	bf82      	ittt	hi
 800636a:	eb03 0905 	addhi.w	r9, r3, r5
 800636e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006372:	60a3      	strhi	r3, [r4, #8]
 8006374:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006378:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800637c:	bf98      	it	ls
 800637e:	f04f 0900 	movls.w	r9, #0
 8006382:	6023      	str	r3, [r4, #0]
 8006384:	463d      	mov	r5, r7
 8006386:	f04f 0b00 	mov.w	fp, #0
 800638a:	6831      	ldr	r1, [r6, #0]
 800638c:	ab03      	add	r3, sp, #12
 800638e:	7809      	ldrb	r1, [r1, #0]
 8006390:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006394:	2202      	movs	r2, #2
 8006396:	f7f9 ff33 	bl	8000200 <memchr>
 800639a:	b328      	cbz	r0, 80063e8 <_scanf_i+0xb8>
 800639c:	f1bb 0f01 	cmp.w	fp, #1
 80063a0:	d159      	bne.n	8006456 <_scanf_i+0x126>
 80063a2:	6862      	ldr	r2, [r4, #4]
 80063a4:	b92a      	cbnz	r2, 80063b2 <_scanf_i+0x82>
 80063a6:	6822      	ldr	r2, [r4, #0]
 80063a8:	2308      	movs	r3, #8
 80063aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063ae:	6063      	str	r3, [r4, #4]
 80063b0:	6022      	str	r2, [r4, #0]
 80063b2:	6822      	ldr	r2, [r4, #0]
 80063b4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80063b8:	6022      	str	r2, [r4, #0]
 80063ba:	68a2      	ldr	r2, [r4, #8]
 80063bc:	1e51      	subs	r1, r2, #1
 80063be:	60a1      	str	r1, [r4, #8]
 80063c0:	b192      	cbz	r2, 80063e8 <_scanf_i+0xb8>
 80063c2:	6832      	ldr	r2, [r6, #0]
 80063c4:	1c51      	adds	r1, r2, #1
 80063c6:	6031      	str	r1, [r6, #0]
 80063c8:	7812      	ldrb	r2, [r2, #0]
 80063ca:	f805 2b01 	strb.w	r2, [r5], #1
 80063ce:	6872      	ldr	r2, [r6, #4]
 80063d0:	3a01      	subs	r2, #1
 80063d2:	2a00      	cmp	r2, #0
 80063d4:	6072      	str	r2, [r6, #4]
 80063d6:	dc07      	bgt.n	80063e8 <_scanf_i+0xb8>
 80063d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80063dc:	4631      	mov	r1, r6
 80063de:	4650      	mov	r0, sl
 80063e0:	4790      	blx	r2
 80063e2:	2800      	cmp	r0, #0
 80063e4:	f040 8085 	bne.w	80064f2 <_scanf_i+0x1c2>
 80063e8:	f10b 0b01 	add.w	fp, fp, #1
 80063ec:	f1bb 0f03 	cmp.w	fp, #3
 80063f0:	d1cb      	bne.n	800638a <_scanf_i+0x5a>
 80063f2:	6863      	ldr	r3, [r4, #4]
 80063f4:	b90b      	cbnz	r3, 80063fa <_scanf_i+0xca>
 80063f6:	230a      	movs	r3, #10
 80063f8:	6063      	str	r3, [r4, #4]
 80063fa:	6863      	ldr	r3, [r4, #4]
 80063fc:	4947      	ldr	r1, [pc, #284]	; (800651c <_scanf_i+0x1ec>)
 80063fe:	6960      	ldr	r0, [r4, #20]
 8006400:	1ac9      	subs	r1, r1, r3
 8006402:	f000 f8af 	bl	8006564 <__sccl>
 8006406:	f04f 0b00 	mov.w	fp, #0
 800640a:	68a3      	ldr	r3, [r4, #8]
 800640c:	6822      	ldr	r2, [r4, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d03d      	beq.n	800648e <_scanf_i+0x15e>
 8006412:	6831      	ldr	r1, [r6, #0]
 8006414:	6960      	ldr	r0, [r4, #20]
 8006416:	f891 c000 	ldrb.w	ip, [r1]
 800641a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800641e:	2800      	cmp	r0, #0
 8006420:	d035      	beq.n	800648e <_scanf_i+0x15e>
 8006422:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006426:	d124      	bne.n	8006472 <_scanf_i+0x142>
 8006428:	0510      	lsls	r0, r2, #20
 800642a:	d522      	bpl.n	8006472 <_scanf_i+0x142>
 800642c:	f10b 0b01 	add.w	fp, fp, #1
 8006430:	f1b9 0f00 	cmp.w	r9, #0
 8006434:	d003      	beq.n	800643e <_scanf_i+0x10e>
 8006436:	3301      	adds	r3, #1
 8006438:	f109 39ff 	add.w	r9, r9, #4294967295
 800643c:	60a3      	str	r3, [r4, #8]
 800643e:	6873      	ldr	r3, [r6, #4]
 8006440:	3b01      	subs	r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	6073      	str	r3, [r6, #4]
 8006446:	dd1b      	ble.n	8006480 <_scanf_i+0x150>
 8006448:	6833      	ldr	r3, [r6, #0]
 800644a:	3301      	adds	r3, #1
 800644c:	6033      	str	r3, [r6, #0]
 800644e:	68a3      	ldr	r3, [r4, #8]
 8006450:	3b01      	subs	r3, #1
 8006452:	60a3      	str	r3, [r4, #8]
 8006454:	e7d9      	b.n	800640a <_scanf_i+0xda>
 8006456:	f1bb 0f02 	cmp.w	fp, #2
 800645a:	d1ae      	bne.n	80063ba <_scanf_i+0x8a>
 800645c:	6822      	ldr	r2, [r4, #0]
 800645e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006462:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006466:	d1bf      	bne.n	80063e8 <_scanf_i+0xb8>
 8006468:	2310      	movs	r3, #16
 800646a:	6063      	str	r3, [r4, #4]
 800646c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006470:	e7a2      	b.n	80063b8 <_scanf_i+0x88>
 8006472:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006476:	6022      	str	r2, [r4, #0]
 8006478:	780b      	ldrb	r3, [r1, #0]
 800647a:	f805 3b01 	strb.w	r3, [r5], #1
 800647e:	e7de      	b.n	800643e <_scanf_i+0x10e>
 8006480:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006484:	4631      	mov	r1, r6
 8006486:	4650      	mov	r0, sl
 8006488:	4798      	blx	r3
 800648a:	2800      	cmp	r0, #0
 800648c:	d0df      	beq.n	800644e <_scanf_i+0x11e>
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	05db      	lsls	r3, r3, #23
 8006492:	d50d      	bpl.n	80064b0 <_scanf_i+0x180>
 8006494:	42bd      	cmp	r5, r7
 8006496:	d909      	bls.n	80064ac <_scanf_i+0x17c>
 8006498:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800649c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064a0:	4632      	mov	r2, r6
 80064a2:	4650      	mov	r0, sl
 80064a4:	4798      	blx	r3
 80064a6:	f105 39ff 	add.w	r9, r5, #4294967295
 80064aa:	464d      	mov	r5, r9
 80064ac:	42bd      	cmp	r5, r7
 80064ae:	d02d      	beq.n	800650c <_scanf_i+0x1dc>
 80064b0:	6822      	ldr	r2, [r4, #0]
 80064b2:	f012 0210 	ands.w	r2, r2, #16
 80064b6:	d113      	bne.n	80064e0 <_scanf_i+0x1b0>
 80064b8:	702a      	strb	r2, [r5, #0]
 80064ba:	6863      	ldr	r3, [r4, #4]
 80064bc:	9e01      	ldr	r6, [sp, #4]
 80064be:	4639      	mov	r1, r7
 80064c0:	4650      	mov	r0, sl
 80064c2:	47b0      	blx	r6
 80064c4:	6821      	ldr	r1, [r4, #0]
 80064c6:	f8d8 3000 	ldr.w	r3, [r8]
 80064ca:	f011 0f20 	tst.w	r1, #32
 80064ce:	d013      	beq.n	80064f8 <_scanf_i+0x1c8>
 80064d0:	1d1a      	adds	r2, r3, #4
 80064d2:	f8c8 2000 	str.w	r2, [r8]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6018      	str	r0, [r3, #0]
 80064da:	68e3      	ldr	r3, [r4, #12]
 80064dc:	3301      	adds	r3, #1
 80064de:	60e3      	str	r3, [r4, #12]
 80064e0:	1bed      	subs	r5, r5, r7
 80064e2:	44ab      	add	fp, r5
 80064e4:	6925      	ldr	r5, [r4, #16]
 80064e6:	445d      	add	r5, fp
 80064e8:	6125      	str	r5, [r4, #16]
 80064ea:	2000      	movs	r0, #0
 80064ec:	b007      	add	sp, #28
 80064ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f2:	f04f 0b00 	mov.w	fp, #0
 80064f6:	e7ca      	b.n	800648e <_scanf_i+0x15e>
 80064f8:	1d1a      	adds	r2, r3, #4
 80064fa:	f8c8 2000 	str.w	r2, [r8]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f011 0f01 	tst.w	r1, #1
 8006504:	bf14      	ite	ne
 8006506:	8018      	strhne	r0, [r3, #0]
 8006508:	6018      	streq	r0, [r3, #0]
 800650a:	e7e6      	b.n	80064da <_scanf_i+0x1aa>
 800650c:	2001      	movs	r0, #1
 800650e:	e7ed      	b.n	80064ec <_scanf_i+0x1bc>
 8006510:	080069b0 	.word	0x080069b0
 8006514:	080067c1 	.word	0x080067c1
 8006518:	080066d9 	.word	0x080066d9
 800651c:	08006a8c 	.word	0x08006a8c

08006520 <_read_r>:
 8006520:	b538      	push	{r3, r4, r5, lr}
 8006522:	4d07      	ldr	r5, [pc, #28]	; (8006540 <_read_r+0x20>)
 8006524:	4604      	mov	r4, r0
 8006526:	4608      	mov	r0, r1
 8006528:	4611      	mov	r1, r2
 800652a:	2200      	movs	r2, #0
 800652c:	602a      	str	r2, [r5, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	f7fa fb18 	bl	8000b64 <_read>
 8006534:	1c43      	adds	r3, r0, #1
 8006536:	d102      	bne.n	800653e <_read_r+0x1e>
 8006538:	682b      	ldr	r3, [r5, #0]
 800653a:	b103      	cbz	r3, 800653e <_read_r+0x1e>
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	bd38      	pop	{r3, r4, r5, pc}
 8006540:	20000650 	.word	0x20000650

08006544 <_sbrk_r>:
 8006544:	b538      	push	{r3, r4, r5, lr}
 8006546:	4d06      	ldr	r5, [pc, #24]	; (8006560 <_sbrk_r+0x1c>)
 8006548:	2300      	movs	r3, #0
 800654a:	4604      	mov	r4, r0
 800654c:	4608      	mov	r0, r1
 800654e:	602b      	str	r3, [r5, #0]
 8006550:	f7fa fb76 	bl	8000c40 <_sbrk>
 8006554:	1c43      	adds	r3, r0, #1
 8006556:	d102      	bne.n	800655e <_sbrk_r+0x1a>
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	b103      	cbz	r3, 800655e <_sbrk_r+0x1a>
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	bd38      	pop	{r3, r4, r5, pc}
 8006560:	20000650 	.word	0x20000650

08006564 <__sccl>:
 8006564:	b570      	push	{r4, r5, r6, lr}
 8006566:	780b      	ldrb	r3, [r1, #0]
 8006568:	4604      	mov	r4, r0
 800656a:	2b5e      	cmp	r3, #94	; 0x5e
 800656c:	bf0b      	itete	eq
 800656e:	784b      	ldrbeq	r3, [r1, #1]
 8006570:	1c48      	addne	r0, r1, #1
 8006572:	1c88      	addeq	r0, r1, #2
 8006574:	2200      	movne	r2, #0
 8006576:	bf08      	it	eq
 8006578:	2201      	moveq	r2, #1
 800657a:	1e61      	subs	r1, r4, #1
 800657c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006580:	f801 2f01 	strb.w	r2, [r1, #1]!
 8006584:	42a9      	cmp	r1, r5
 8006586:	d1fb      	bne.n	8006580 <__sccl+0x1c>
 8006588:	b90b      	cbnz	r3, 800658e <__sccl+0x2a>
 800658a:	3801      	subs	r0, #1
 800658c:	bd70      	pop	{r4, r5, r6, pc}
 800658e:	f082 0201 	eor.w	r2, r2, #1
 8006592:	54e2      	strb	r2, [r4, r3]
 8006594:	4605      	mov	r5, r0
 8006596:	4628      	mov	r0, r5
 8006598:	f810 1b01 	ldrb.w	r1, [r0], #1
 800659c:	292d      	cmp	r1, #45	; 0x2d
 800659e:	d006      	beq.n	80065ae <__sccl+0x4a>
 80065a0:	295d      	cmp	r1, #93	; 0x5d
 80065a2:	d0f3      	beq.n	800658c <__sccl+0x28>
 80065a4:	b909      	cbnz	r1, 80065aa <__sccl+0x46>
 80065a6:	4628      	mov	r0, r5
 80065a8:	e7f0      	b.n	800658c <__sccl+0x28>
 80065aa:	460b      	mov	r3, r1
 80065ac:	e7f1      	b.n	8006592 <__sccl+0x2e>
 80065ae:	786e      	ldrb	r6, [r5, #1]
 80065b0:	2e5d      	cmp	r6, #93	; 0x5d
 80065b2:	d0fa      	beq.n	80065aa <__sccl+0x46>
 80065b4:	42b3      	cmp	r3, r6
 80065b6:	dcf8      	bgt.n	80065aa <__sccl+0x46>
 80065b8:	3502      	adds	r5, #2
 80065ba:	4619      	mov	r1, r3
 80065bc:	3101      	adds	r1, #1
 80065be:	428e      	cmp	r6, r1
 80065c0:	5462      	strb	r2, [r4, r1]
 80065c2:	dcfb      	bgt.n	80065bc <__sccl+0x58>
 80065c4:	1af1      	subs	r1, r6, r3
 80065c6:	3901      	subs	r1, #1
 80065c8:	1c58      	adds	r0, r3, #1
 80065ca:	42b3      	cmp	r3, r6
 80065cc:	bfa8      	it	ge
 80065ce:	2100      	movge	r1, #0
 80065d0:	1843      	adds	r3, r0, r1
 80065d2:	e7e0      	b.n	8006596 <__sccl+0x32>

080065d4 <_strtol_l.constprop.0>:
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065da:	d001      	beq.n	80065e0 <_strtol_l.constprop.0+0xc>
 80065dc:	2b24      	cmp	r3, #36	; 0x24
 80065de:	d906      	bls.n	80065ee <_strtol_l.constprop.0+0x1a>
 80065e0:	f7fe fb98 	bl	8004d14 <__errno>
 80065e4:	2316      	movs	r3, #22
 80065e6:	6003      	str	r3, [r0, #0]
 80065e8:	2000      	movs	r0, #0
 80065ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80066d4 <_strtol_l.constprop.0+0x100>
 80065f2:	460d      	mov	r5, r1
 80065f4:	462e      	mov	r6, r5
 80065f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065fa:	f814 700c 	ldrb.w	r7, [r4, ip]
 80065fe:	f017 0708 	ands.w	r7, r7, #8
 8006602:	d1f7      	bne.n	80065f4 <_strtol_l.constprop.0+0x20>
 8006604:	2c2d      	cmp	r4, #45	; 0x2d
 8006606:	d132      	bne.n	800666e <_strtol_l.constprop.0+0x9a>
 8006608:	782c      	ldrb	r4, [r5, #0]
 800660a:	2701      	movs	r7, #1
 800660c:	1cb5      	adds	r5, r6, #2
 800660e:	2b00      	cmp	r3, #0
 8006610:	d05b      	beq.n	80066ca <_strtol_l.constprop.0+0xf6>
 8006612:	2b10      	cmp	r3, #16
 8006614:	d109      	bne.n	800662a <_strtol_l.constprop.0+0x56>
 8006616:	2c30      	cmp	r4, #48	; 0x30
 8006618:	d107      	bne.n	800662a <_strtol_l.constprop.0+0x56>
 800661a:	782c      	ldrb	r4, [r5, #0]
 800661c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006620:	2c58      	cmp	r4, #88	; 0x58
 8006622:	d14d      	bne.n	80066c0 <_strtol_l.constprop.0+0xec>
 8006624:	786c      	ldrb	r4, [r5, #1]
 8006626:	2310      	movs	r3, #16
 8006628:	3502      	adds	r5, #2
 800662a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800662e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006632:	f04f 0c00 	mov.w	ip, #0
 8006636:	fbb8 f9f3 	udiv	r9, r8, r3
 800663a:	4666      	mov	r6, ip
 800663c:	fb03 8a19 	mls	sl, r3, r9, r8
 8006640:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006644:	f1be 0f09 	cmp.w	lr, #9
 8006648:	d816      	bhi.n	8006678 <_strtol_l.constprop.0+0xa4>
 800664a:	4674      	mov	r4, lr
 800664c:	42a3      	cmp	r3, r4
 800664e:	dd24      	ble.n	800669a <_strtol_l.constprop.0+0xc6>
 8006650:	f1bc 0f00 	cmp.w	ip, #0
 8006654:	db1e      	blt.n	8006694 <_strtol_l.constprop.0+0xc0>
 8006656:	45b1      	cmp	r9, r6
 8006658:	d31c      	bcc.n	8006694 <_strtol_l.constprop.0+0xc0>
 800665a:	d101      	bne.n	8006660 <_strtol_l.constprop.0+0x8c>
 800665c:	45a2      	cmp	sl, r4
 800665e:	db19      	blt.n	8006694 <_strtol_l.constprop.0+0xc0>
 8006660:	fb06 4603 	mla	r6, r6, r3, r4
 8006664:	f04f 0c01 	mov.w	ip, #1
 8006668:	f815 4b01 	ldrb.w	r4, [r5], #1
 800666c:	e7e8      	b.n	8006640 <_strtol_l.constprop.0+0x6c>
 800666e:	2c2b      	cmp	r4, #43	; 0x2b
 8006670:	bf04      	itt	eq
 8006672:	782c      	ldrbeq	r4, [r5, #0]
 8006674:	1cb5      	addeq	r5, r6, #2
 8006676:	e7ca      	b.n	800660e <_strtol_l.constprop.0+0x3a>
 8006678:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800667c:	f1be 0f19 	cmp.w	lr, #25
 8006680:	d801      	bhi.n	8006686 <_strtol_l.constprop.0+0xb2>
 8006682:	3c37      	subs	r4, #55	; 0x37
 8006684:	e7e2      	b.n	800664c <_strtol_l.constprop.0+0x78>
 8006686:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800668a:	f1be 0f19 	cmp.w	lr, #25
 800668e:	d804      	bhi.n	800669a <_strtol_l.constprop.0+0xc6>
 8006690:	3c57      	subs	r4, #87	; 0x57
 8006692:	e7db      	b.n	800664c <_strtol_l.constprop.0+0x78>
 8006694:	f04f 3cff 	mov.w	ip, #4294967295
 8006698:	e7e6      	b.n	8006668 <_strtol_l.constprop.0+0x94>
 800669a:	f1bc 0f00 	cmp.w	ip, #0
 800669e:	da05      	bge.n	80066ac <_strtol_l.constprop.0+0xd8>
 80066a0:	2322      	movs	r3, #34	; 0x22
 80066a2:	6003      	str	r3, [r0, #0]
 80066a4:	4646      	mov	r6, r8
 80066a6:	b942      	cbnz	r2, 80066ba <_strtol_l.constprop.0+0xe6>
 80066a8:	4630      	mov	r0, r6
 80066aa:	e79e      	b.n	80065ea <_strtol_l.constprop.0+0x16>
 80066ac:	b107      	cbz	r7, 80066b0 <_strtol_l.constprop.0+0xdc>
 80066ae:	4276      	negs	r6, r6
 80066b0:	2a00      	cmp	r2, #0
 80066b2:	d0f9      	beq.n	80066a8 <_strtol_l.constprop.0+0xd4>
 80066b4:	f1bc 0f00 	cmp.w	ip, #0
 80066b8:	d000      	beq.n	80066bc <_strtol_l.constprop.0+0xe8>
 80066ba:	1e69      	subs	r1, r5, #1
 80066bc:	6011      	str	r1, [r2, #0]
 80066be:	e7f3      	b.n	80066a8 <_strtol_l.constprop.0+0xd4>
 80066c0:	2430      	movs	r4, #48	; 0x30
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1b1      	bne.n	800662a <_strtol_l.constprop.0+0x56>
 80066c6:	2308      	movs	r3, #8
 80066c8:	e7af      	b.n	800662a <_strtol_l.constprop.0+0x56>
 80066ca:	2c30      	cmp	r4, #48	; 0x30
 80066cc:	d0a5      	beq.n	800661a <_strtol_l.constprop.0+0x46>
 80066ce:	230a      	movs	r3, #10
 80066d0:	e7ab      	b.n	800662a <_strtol_l.constprop.0+0x56>
 80066d2:	bf00      	nop
 80066d4:	08006a8f 	.word	0x08006a8f

080066d8 <_strtol_r>:
 80066d8:	f7ff bf7c 	b.w	80065d4 <_strtol_l.constprop.0>

080066dc <_strtoul_l.constprop.0>:
 80066dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066e0:	4f36      	ldr	r7, [pc, #216]	; (80067bc <_strtoul_l.constprop.0+0xe0>)
 80066e2:	4686      	mov	lr, r0
 80066e4:	460d      	mov	r5, r1
 80066e6:	4628      	mov	r0, r5
 80066e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066ec:	5de6      	ldrb	r6, [r4, r7]
 80066ee:	f016 0608 	ands.w	r6, r6, #8
 80066f2:	d1f8      	bne.n	80066e6 <_strtoul_l.constprop.0+0xa>
 80066f4:	2c2d      	cmp	r4, #45	; 0x2d
 80066f6:	d12f      	bne.n	8006758 <_strtoul_l.constprop.0+0x7c>
 80066f8:	782c      	ldrb	r4, [r5, #0]
 80066fa:	2601      	movs	r6, #1
 80066fc:	1c85      	adds	r5, r0, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d057      	beq.n	80067b2 <_strtoul_l.constprop.0+0xd6>
 8006702:	2b10      	cmp	r3, #16
 8006704:	d109      	bne.n	800671a <_strtoul_l.constprop.0+0x3e>
 8006706:	2c30      	cmp	r4, #48	; 0x30
 8006708:	d107      	bne.n	800671a <_strtoul_l.constprop.0+0x3e>
 800670a:	7828      	ldrb	r0, [r5, #0]
 800670c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006710:	2858      	cmp	r0, #88	; 0x58
 8006712:	d149      	bne.n	80067a8 <_strtoul_l.constprop.0+0xcc>
 8006714:	786c      	ldrb	r4, [r5, #1]
 8006716:	2310      	movs	r3, #16
 8006718:	3502      	adds	r5, #2
 800671a:	f04f 38ff 	mov.w	r8, #4294967295
 800671e:	2700      	movs	r7, #0
 8006720:	fbb8 f8f3 	udiv	r8, r8, r3
 8006724:	fb03 f908 	mul.w	r9, r3, r8
 8006728:	ea6f 0909 	mvn.w	r9, r9
 800672c:	4638      	mov	r0, r7
 800672e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006732:	f1bc 0f09 	cmp.w	ip, #9
 8006736:	d814      	bhi.n	8006762 <_strtoul_l.constprop.0+0x86>
 8006738:	4664      	mov	r4, ip
 800673a:	42a3      	cmp	r3, r4
 800673c:	dd22      	ble.n	8006784 <_strtoul_l.constprop.0+0xa8>
 800673e:	2f00      	cmp	r7, #0
 8006740:	db1d      	blt.n	800677e <_strtoul_l.constprop.0+0xa2>
 8006742:	4580      	cmp	r8, r0
 8006744:	d31b      	bcc.n	800677e <_strtoul_l.constprop.0+0xa2>
 8006746:	d101      	bne.n	800674c <_strtoul_l.constprop.0+0x70>
 8006748:	45a1      	cmp	r9, r4
 800674a:	db18      	blt.n	800677e <_strtoul_l.constprop.0+0xa2>
 800674c:	fb00 4003 	mla	r0, r0, r3, r4
 8006750:	2701      	movs	r7, #1
 8006752:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006756:	e7ea      	b.n	800672e <_strtoul_l.constprop.0+0x52>
 8006758:	2c2b      	cmp	r4, #43	; 0x2b
 800675a:	bf04      	itt	eq
 800675c:	782c      	ldrbeq	r4, [r5, #0]
 800675e:	1c85      	addeq	r5, r0, #2
 8006760:	e7cd      	b.n	80066fe <_strtoul_l.constprop.0+0x22>
 8006762:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006766:	f1bc 0f19 	cmp.w	ip, #25
 800676a:	d801      	bhi.n	8006770 <_strtoul_l.constprop.0+0x94>
 800676c:	3c37      	subs	r4, #55	; 0x37
 800676e:	e7e4      	b.n	800673a <_strtoul_l.constprop.0+0x5e>
 8006770:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006774:	f1bc 0f19 	cmp.w	ip, #25
 8006778:	d804      	bhi.n	8006784 <_strtoul_l.constprop.0+0xa8>
 800677a:	3c57      	subs	r4, #87	; 0x57
 800677c:	e7dd      	b.n	800673a <_strtoul_l.constprop.0+0x5e>
 800677e:	f04f 37ff 	mov.w	r7, #4294967295
 8006782:	e7e6      	b.n	8006752 <_strtoul_l.constprop.0+0x76>
 8006784:	2f00      	cmp	r7, #0
 8006786:	da07      	bge.n	8006798 <_strtoul_l.constprop.0+0xbc>
 8006788:	2322      	movs	r3, #34	; 0x22
 800678a:	f8ce 3000 	str.w	r3, [lr]
 800678e:	f04f 30ff 	mov.w	r0, #4294967295
 8006792:	b932      	cbnz	r2, 80067a2 <_strtoul_l.constprop.0+0xc6>
 8006794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006798:	b106      	cbz	r6, 800679c <_strtoul_l.constprop.0+0xc0>
 800679a:	4240      	negs	r0, r0
 800679c:	2a00      	cmp	r2, #0
 800679e:	d0f9      	beq.n	8006794 <_strtoul_l.constprop.0+0xb8>
 80067a0:	b107      	cbz	r7, 80067a4 <_strtoul_l.constprop.0+0xc8>
 80067a2:	1e69      	subs	r1, r5, #1
 80067a4:	6011      	str	r1, [r2, #0]
 80067a6:	e7f5      	b.n	8006794 <_strtoul_l.constprop.0+0xb8>
 80067a8:	2430      	movs	r4, #48	; 0x30
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1b5      	bne.n	800671a <_strtoul_l.constprop.0+0x3e>
 80067ae:	2308      	movs	r3, #8
 80067b0:	e7b3      	b.n	800671a <_strtoul_l.constprop.0+0x3e>
 80067b2:	2c30      	cmp	r4, #48	; 0x30
 80067b4:	d0a9      	beq.n	800670a <_strtoul_l.constprop.0+0x2e>
 80067b6:	230a      	movs	r3, #10
 80067b8:	e7af      	b.n	800671a <_strtoul_l.constprop.0+0x3e>
 80067ba:	bf00      	nop
 80067bc:	08006a8f 	.word	0x08006a8f

080067c0 <_strtoul_r>:
 80067c0:	f7ff bf8c 	b.w	80066dc <_strtoul_l.constprop.0>

080067c4 <__submore>:
 80067c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067c8:	460c      	mov	r4, r1
 80067ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80067cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067d0:	4299      	cmp	r1, r3
 80067d2:	d11d      	bne.n	8006810 <__submore+0x4c>
 80067d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80067d8:	f7ff f81c 	bl	8005814 <_malloc_r>
 80067dc:	b918      	cbnz	r0, 80067e6 <__submore+0x22>
 80067de:	f04f 30ff 	mov.w	r0, #4294967295
 80067e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067ea:	63a3      	str	r3, [r4, #56]	; 0x38
 80067ec:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80067f0:	6360      	str	r0, [r4, #52]	; 0x34
 80067f2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80067f6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80067fa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80067fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006802:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006806:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800680a:	6020      	str	r0, [r4, #0]
 800680c:	2000      	movs	r0, #0
 800680e:	e7e8      	b.n	80067e2 <__submore+0x1e>
 8006810:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006812:	0077      	lsls	r7, r6, #1
 8006814:	463a      	mov	r2, r7
 8006816:	f000 f84b 	bl	80068b0 <_realloc_r>
 800681a:	4605      	mov	r5, r0
 800681c:	2800      	cmp	r0, #0
 800681e:	d0de      	beq.n	80067de <__submore+0x1a>
 8006820:	eb00 0806 	add.w	r8, r0, r6
 8006824:	4601      	mov	r1, r0
 8006826:	4632      	mov	r2, r6
 8006828:	4640      	mov	r0, r8
 800682a:	f000 f827 	bl	800687c <memcpy>
 800682e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006832:	f8c4 8000 	str.w	r8, [r4]
 8006836:	e7e9      	b.n	800680c <__submore+0x48>

08006838 <_fstat_r>:
 8006838:	b538      	push	{r3, r4, r5, lr}
 800683a:	4d07      	ldr	r5, [pc, #28]	; (8006858 <_fstat_r+0x20>)
 800683c:	2300      	movs	r3, #0
 800683e:	4604      	mov	r4, r0
 8006840:	4608      	mov	r0, r1
 8006842:	4611      	mov	r1, r2
 8006844:	602b      	str	r3, [r5, #0]
 8006846:	f7fa f9d2 	bl	8000bee <_fstat>
 800684a:	1c43      	adds	r3, r0, #1
 800684c:	d102      	bne.n	8006854 <_fstat_r+0x1c>
 800684e:	682b      	ldr	r3, [r5, #0]
 8006850:	b103      	cbz	r3, 8006854 <_fstat_r+0x1c>
 8006852:	6023      	str	r3, [r4, #0]
 8006854:	bd38      	pop	{r3, r4, r5, pc}
 8006856:	bf00      	nop
 8006858:	20000650 	.word	0x20000650

0800685c <_isatty_r>:
 800685c:	b538      	push	{r3, r4, r5, lr}
 800685e:	4d06      	ldr	r5, [pc, #24]	; (8006878 <_isatty_r+0x1c>)
 8006860:	2300      	movs	r3, #0
 8006862:	4604      	mov	r4, r0
 8006864:	4608      	mov	r0, r1
 8006866:	602b      	str	r3, [r5, #0]
 8006868:	f7fa f9d1 	bl	8000c0e <_isatty>
 800686c:	1c43      	adds	r3, r0, #1
 800686e:	d102      	bne.n	8006876 <_isatty_r+0x1a>
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	b103      	cbz	r3, 8006876 <_isatty_r+0x1a>
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	bd38      	pop	{r3, r4, r5, pc}
 8006878:	20000650 	.word	0x20000650

0800687c <memcpy>:
 800687c:	440a      	add	r2, r1
 800687e:	4291      	cmp	r1, r2
 8006880:	f100 33ff 	add.w	r3, r0, #4294967295
 8006884:	d100      	bne.n	8006888 <memcpy+0xc>
 8006886:	4770      	bx	lr
 8006888:	b510      	push	{r4, lr}
 800688a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800688e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006892:	4291      	cmp	r1, r2
 8006894:	d1f9      	bne.n	800688a <memcpy+0xe>
 8006896:	bd10      	pop	{r4, pc}

08006898 <__malloc_lock>:
 8006898:	4801      	ldr	r0, [pc, #4]	; (80068a0 <__malloc_lock+0x8>)
 800689a:	f7fe becd 	b.w	8005638 <__retarget_lock_acquire_recursive>
 800689e:	bf00      	nop
 80068a0:	20000644 	.word	0x20000644

080068a4 <__malloc_unlock>:
 80068a4:	4801      	ldr	r0, [pc, #4]	; (80068ac <__malloc_unlock+0x8>)
 80068a6:	f7fe bec8 	b.w	800563a <__retarget_lock_release_recursive>
 80068aa:	bf00      	nop
 80068ac:	20000644 	.word	0x20000644

080068b0 <_realloc_r>:
 80068b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068b4:	4680      	mov	r8, r0
 80068b6:	4614      	mov	r4, r2
 80068b8:	460e      	mov	r6, r1
 80068ba:	b921      	cbnz	r1, 80068c6 <_realloc_r+0x16>
 80068bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068c0:	4611      	mov	r1, r2
 80068c2:	f7fe bfa7 	b.w	8005814 <_malloc_r>
 80068c6:	b92a      	cbnz	r2, 80068d4 <_realloc_r+0x24>
 80068c8:	f7fe ff38 	bl	800573c <_free_r>
 80068cc:	4625      	mov	r5, r4
 80068ce:	4628      	mov	r0, r5
 80068d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068d4:	f000 f81b 	bl	800690e <_malloc_usable_size_r>
 80068d8:	4284      	cmp	r4, r0
 80068da:	4607      	mov	r7, r0
 80068dc:	d802      	bhi.n	80068e4 <_realloc_r+0x34>
 80068de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068e2:	d812      	bhi.n	800690a <_realloc_r+0x5a>
 80068e4:	4621      	mov	r1, r4
 80068e6:	4640      	mov	r0, r8
 80068e8:	f7fe ff94 	bl	8005814 <_malloc_r>
 80068ec:	4605      	mov	r5, r0
 80068ee:	2800      	cmp	r0, #0
 80068f0:	d0ed      	beq.n	80068ce <_realloc_r+0x1e>
 80068f2:	42bc      	cmp	r4, r7
 80068f4:	4622      	mov	r2, r4
 80068f6:	4631      	mov	r1, r6
 80068f8:	bf28      	it	cs
 80068fa:	463a      	movcs	r2, r7
 80068fc:	f7ff ffbe 	bl	800687c <memcpy>
 8006900:	4631      	mov	r1, r6
 8006902:	4640      	mov	r0, r8
 8006904:	f7fe ff1a 	bl	800573c <_free_r>
 8006908:	e7e1      	b.n	80068ce <_realloc_r+0x1e>
 800690a:	4635      	mov	r5, r6
 800690c:	e7df      	b.n	80068ce <_realloc_r+0x1e>

0800690e <_malloc_usable_size_r>:
 800690e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006912:	1f18      	subs	r0, r3, #4
 8006914:	2b00      	cmp	r3, #0
 8006916:	bfbc      	itt	lt
 8006918:	580b      	ldrlt	r3, [r1, r0]
 800691a:	18c0      	addlt	r0, r0, r3
 800691c:	4770      	bx	lr
	...

08006920 <_init>:
 8006920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006922:	bf00      	nop
 8006924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006926:	bc08      	pop	{r3}
 8006928:	469e      	mov	lr, r3
 800692a:	4770      	bx	lr

0800692c <_fini>:
 800692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692e:	bf00      	nop
 8006930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006932:	bc08      	pop	{r3}
 8006934:	469e      	mov	lr, r3
 8006936:	4770      	bx	lr
