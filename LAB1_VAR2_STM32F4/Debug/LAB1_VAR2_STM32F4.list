
LAB1_VAR2_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c70  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  08007e20  08007e20  00017e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800815c  0800815c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800815c  0800815c  0001815c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008164  08008164  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008164  08008164  00018164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008168  08008168  00018168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800816c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00005730  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200057a8  200057a8  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016d24  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003713  00000000  00000000  00036dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001310  00000000  00000000  0003a4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001188  00000000  00000000  0003b7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026e03  00000000  00000000  0003c978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016a7b  00000000  00000000  0006377b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e459b  00000000  00000000  0007a1f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015e791  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058ac  00000000  00000000  0015e7e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007e08 	.word	0x08007e08

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08007e08 	.word	0x08007e08

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <MX_DMA_Init+0x4c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a0f      	ldr	r2, [pc, #60]	; (80005f0 <MX_DMA_Init+0x4c>)
 80005b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <MX_DMA_Init+0x4c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2105      	movs	r1, #5
 80005ca:	200c      	movs	r0, #12
 80005cc:	f001 f80e 	bl	80015ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80005d0:	200c      	movs	r0, #12
 80005d2:	f001 f827 	bl	8001624 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2105      	movs	r1, #5
 80005da:	200e      	movs	r0, #14
 80005dc:	f001 f806 	bl	80015ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80005e0:	200e      	movs	r0, #14
 80005e2:	f001 f81f 	bl	8001624 <HAL_NVIC_EnableIRQ>

}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800

080005f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4a07      	ldr	r2, [pc, #28]	; (8000620 <vApplicationGetIdleTaskMemory+0x2c>)
 8000604:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <vApplicationGetIdleTaskMemory+0x30>)
 800060a:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	200011f8 	.word	0x200011f8
 8000624:	2000124c 	.word	0x2000124c

08000628 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8000628:	b5b0      	push	{r4, r5, r7, lr}
 800062a:	b09c      	sub	sp, #112	; 0x70
 800062c:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 800062e:	4b27      	ldr	r3, [pc, #156]	; (80006cc <MX_FREERTOS_Init+0xa4>)
 8000630:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000634:	461d      	mov	r5, r3
 8000636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800063e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000642:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f004 fbac 	bl	8004da6 <osThreadCreate>
 800064e:	4603      	mov	r3, r0
 8000650:	4a1f      	ldr	r2, [pc, #124]	; (80006d0 <MX_FREERTOS_Init+0xa8>)
 8000652:	6013      	str	r3, [r2, #0]

	/* definition and creation of LedStateTask */
	osThreadStaticDef(LedStateTask, StartLedStateTask, osPriorityLow, 0, 256, LedStateTaskBuffer, &LedStateTaskControlBlock);
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <MX_FREERTOS_Init+0xac>)
 8000656:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800065a:	461d      	mov	r5, r3
 800065c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000660:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000664:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	LedStateTaskHandle = osThreadCreate(osThread(LedStateTask), NULL);
 8000668:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f004 fb99 	bl	8004da6 <osThreadCreate>
 8000674:	4603      	mov	r3, r0
 8000676:	4a18      	ldr	r2, [pc, #96]	; (80006d8 <MX_FREERTOS_Init+0xb0>)
 8000678:	6013      	str	r3, [r2, #0]

	/* definition and creation of ReadBtnTask */
	osThreadStaticDef(ReadBtnTask, StartReadBtnTask, osPriorityLow, 0, 128, ReadBtnTaskBuffer, &ReadBtnTaskControlBlock);
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <MX_FREERTOS_Init+0xb4>)
 800067c:	f107 041c 	add.w	r4, r7, #28
 8000680:	461d      	mov	r5, r3
 8000682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000686:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ReadBtnTaskHandle = osThreadCreate(osThread(ReadBtnTask), NULL);
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f004 fb86 	bl	8004da6 <osThreadCreate>
 800069a:	4603      	mov	r3, r0
 800069c:	4a10      	ldr	r2, [pc, #64]	; (80006e0 <MX_FREERTOS_Init+0xb8>)
 800069e:	6013      	str	r3, [r2, #0]

	/* definition and creation of USART_Task */
	osThreadStaticDef(USART_Task, StartUSART_Task, osPriorityLow, 0, 512, USART_TaskBuffer, &USART_TaskControlBlock);
 80006a0:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_FREERTOS_Init+0xbc>)
 80006a2:	463c      	mov	r4, r7
 80006a4:	461d      	mov	r5, r3
 80006a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	USART_TaskHandle = osThreadCreate(osThread(USART_Task), NULL);
 80006b2:	463b      	mov	r3, r7
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 fb75 	bl	8004da6 <osThreadCreate>
 80006bc:	4603      	mov	r3, r0
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <MX_FREERTOS_Init+0xc0>)
 80006c0:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

}
 80006c2:	bf00      	nop
 80006c4:	3770      	adds	r7, #112	; 0x70
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bdb0      	pop	{r4, r5, r7, pc}
 80006ca:	bf00      	nop
 80006cc:	08007e54 	.word	0x08007e54
 80006d0:	20000098 	.word	0x20000098
 80006d4:	08007e70 	.word	0x08007e70
 80006d8:	200002f0 	.word	0x200002f0
 80006dc:	08007e8c 	.word	0x08007e8c
 80006e0:	20000748 	.word	0x20000748
 80006e4:	08007ea8 	.word	0x08007ea8
 80006e8:	200009a0 	.word	0x200009a0

080006ec <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f004 fba2 	bl	8004e3e <osDelay>
 80006fa:	e7fb      	b.n	80006f4 <StartDefaultTask+0x8>

080006fc <StartLedStateTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLedStateTask */
void StartLedStateTask(void const * argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		//		btn_cur = HAL_GPIO_ReadPin(BUTTON_EXTI_GPIO_Port, BUTTON_EXTI_Pin);
		//		if(xQueueReceive(myDataQueueHandle, &brightnes, 1) == pdTRUE)
		//		{
		switch (count)
 8000704:	4b21      	ldr	r3, [pc, #132]	; (800078c <StartLedStateTask+0x90>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b03      	cmp	r3, #3
 800070a:	d837      	bhi.n	800077c <StartLedStateTask+0x80>
 800070c:	a201      	add	r2, pc, #4	; (adr r2, 8000714 <StartLedStateTask+0x18>)
 800070e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000712:	bf00      	nop
 8000714:	08000725 	.word	0x08000725
 8000718:	0800073b 	.word	0x0800073b
 800071c:	08000751 	.word	0x08000751
 8000720:	08000767 	.word	0x08000767
		{
		case 0:
		{
			TIM2->CCR1 = off_brightness;
 8000724:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <StartLedStateTask+0x94>)
 8000726:	781a      	ldrb	r2, [r3, #0]
 8000728:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800072c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = off_brightness;
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <StartLedStateTask+0x94>)
 8000730:	781a      	ldrb	r2, [r3, #0]
 8000732:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000736:	639a      	str	r2, [r3, #56]	; 0x38
		}
		break;
 8000738:	e020      	b.n	800077c <StartLedStateTask+0x80>
		case 1:
		{
			TIM2->CCR1 = active_brightness;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <StartLedStateTask+0x98>)
 800073c:	781a      	ldrb	r2, [r3, #0]
 800073e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000742:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = off_brightness;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <StartLedStateTask+0x94>)
 8000746:	781a      	ldrb	r2, [r3, #0]
 8000748:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800074c:	639a      	str	r2, [r3, #56]	; 0x38

		}
		break;
 800074e:	e015      	b.n	800077c <StartLedStateTask+0x80>
		case 2:
		{
			TIM2->CCR1 = off_brightness;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <StartLedStateTask+0x94>)
 8000752:	781a      	ldrb	r2, [r3, #0]
 8000754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000758:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = active_brightness;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <StartLedStateTask+0x98>)
 800075c:	781a      	ldrb	r2, [r3, #0]
 800075e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000762:	639a      	str	r2, [r3, #56]	; 0x38
		}
		break;
 8000764:	e00a      	b.n	800077c <StartLedStateTask+0x80>
		case 3:
		{
			TIM2->CCR1 = active_brightness;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <StartLedStateTask+0x98>)
 8000768:	781a      	ldrb	r2, [r3, #0]
 800076a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800076e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = active_brightness;
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <StartLedStateTask+0x98>)
 8000772:	781a      	ldrb	r2, [r3, #0]
 8000774:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000778:	639a      	str	r2, [r3, #56]	; 0x38
		}
		break;
 800077a:	bf00      	nop
		}
		osDelay(5);
 800077c:	2005      	movs	r0, #5
 800077e:	f004 fb5e 	bl	8004e3e <osDelay>
		btn_prev = btn_cur;
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <StartLedStateTask+0x9c>)
 8000784:	781a      	ldrb	r2, [r3, #0]
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <StartLedStateTask+0xa0>)
 8000788:	701a      	strb	r2, [r3, #0]
		switch (count)
 800078a:	e7bb      	b.n	8000704 <StartLedStateTask+0x8>
 800078c:	20000094 	.word	0x20000094
 8000790:	20000097 	.word	0x20000097
 8000794:	20000000 	.word	0x20000000
 8000798:	20000095 	.word	0x20000095
 800079c:	20000096 	.word	0x20000096

080007a0 <StartReadBtnTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReadBtnTask */
void StartReadBtnTask(void const * argument)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartReadBtnTask */
	/* Infinite loop */
	for(;;)
	{
		btn_cur = HAL_GPIO_ReadPin(BUTTON_EXTI_GPIO_Port, BUTTON_EXTI_Pin);
 80007a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ac:	4811      	ldr	r0, [pc, #68]	; (80007f4 <StartReadBtnTask+0x54>)
 80007ae:	f001 fc6f 	bl	8002090 <HAL_GPIO_ReadPin>
 80007b2:	4603      	mov	r3, r0
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <StartReadBtnTask+0x58>)
 80007b8:	701a      	strb	r2, [r3, #0]
		if((btn_prev == 0) && (btn_cur != 0))
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <StartReadBtnTask+0x5c>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d110      	bne.n	80007e4 <StartReadBtnTask+0x44>
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <StartReadBtnTask+0x58>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d00c      	beq.n	80007e4 <StartReadBtnTask+0x44>
		{
			count++;
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <StartReadBtnTask+0x60>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	3301      	adds	r3, #1
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <StartReadBtnTask+0x60>)
 80007d4:	701a      	strb	r2, [r3, #0]
			if(count == 4)
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <StartReadBtnTask+0x60>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b04      	cmp	r3, #4
 80007dc:	d102      	bne.n	80007e4 <StartReadBtnTask+0x44>
			{
				count = 0;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <StartReadBtnTask+0x60>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
			}
		}
		btn_prev = btn_cur;
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <StartReadBtnTask+0x58>)
 80007e6:	781a      	ldrb	r2, [r3, #0]
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <StartReadBtnTask+0x5c>)
 80007ea:	701a      	strb	r2, [r3, #0]
		osDelay(50);
 80007ec:	2032      	movs	r0, #50	; 0x32
 80007ee:	f004 fb26 	bl	8004e3e <osDelay>
		btn_cur = HAL_GPIO_ReadPin(BUTTON_EXTI_GPIO_Port, BUTTON_EXTI_Pin);
 80007f2:	e7d9      	b.n	80007a8 <StartReadBtnTask+0x8>
 80007f4:	40020800 	.word	0x40020800
 80007f8:	20000095 	.word	0x20000095
 80007fc:	20000096 	.word	0x20000096
 8000800:	20000094 	.word	0x20000094

08000804 <StartUSART_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUSART_Task */
void StartUSART_Task(void const * argument)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartUSART_Task */
	/* Infinite loop */
	for(;;)
	{
		if (flag == 1)
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <StartUSART_Task+0x60>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b01      	cmp	r3, #1
 8000814:	d121      	bne.n	800085a <StartUSART_Task+0x56>
		{
			sscanf(&buff[0], "%d", &str[0]);
 8000816:	4a14      	ldr	r2, [pc, #80]	; (8000868 <StartUSART_Task+0x64>)
 8000818:	4914      	ldr	r1, [pc, #80]	; (800086c <StartUSART_Task+0x68>)
 800081a:	4815      	ldr	r0, [pc, #84]	; (8000870 <StartUSART_Task+0x6c>)
 800081c:	f005 fe82 	bl	8006524 <siscanf>
			if ((str[0] > 100) || (str[0] < 0))
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <StartUSART_Task+0x64>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b64      	cmp	r3, #100	; 0x64
 8000826:	dc03      	bgt.n	8000830 <StartUSART_Task+0x2c>
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <StartUSART_Task+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	da03      	bge.n	8000838 <StartUSART_Task+0x34>
			{
				printf("Error. Please enter correct value!\r\n");
 8000830:	4810      	ldr	r0, [pc, #64]	; (8000874 <StartUSART_Task+0x70>)
 8000832:	f005 fda9 	bl	8006388 <puts>
 8000836:	e00d      	b.n	8000854 <StartUSART_Task+0x50>
			}
			else
			{
				active_brightness = str[0];
 8000838:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <StartUSART_Task+0x64>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <StartUSART_Task+0x74>)
 8000840:	701a      	strb	r2, [r3, #0]
				printf("You enter %d value\r\n", active_brightness);
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <StartUSART_Task+0x74>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	4619      	mov	r1, r3
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <StartUSART_Task+0x78>)
 800084a:	f005 fd17 	bl	800627c <iprintf>
				printf("PRINT BRIGHTNESS FOR LED In range from 0 to 100->>>>!\r\n");
 800084e:	480c      	ldr	r0, [pc, #48]	; (8000880 <StartUSART_Task+0x7c>)
 8000850:	f005 fd9a 	bl	8006388 <puts>
			}
			flag = 0;
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <StartUSART_Task+0x60>)
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
		}
		osDelay(5);
 800085a:	2005      	movs	r0, #5
 800085c:	f004 faef 	bl	8004e3e <osDelay>
		if (flag == 1)
 8000860:	e7d4      	b.n	800080c <StartUSART_Task+0x8>
 8000862:	bf00      	nop
 8000864:	20001641 	.word	0x20001641
 8000868:	20001644 	.word	0x20001644
 800086c:	08007ec4 	.word	0x08007ec4
 8000870:	20001630 	.word	0x20001630
 8000874:	08007ec8 	.word	0x08007ec8
 8000878:	20000000 	.word	0x20000000
 800087c:	08007eec 	.word	0x08007eec
 8000880:	08007f04 	.word	0x08007f04

08000884 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	4b35      	ldr	r3, [pc, #212]	; (8000974 <MX_GPIO_Init+0xf0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a34      	ldr	r2, [pc, #208]	; (8000974 <MX_GPIO_Init+0xf0>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b32      	ldr	r3, [pc, #200]	; (8000974 <MX_GPIO_Init+0xf0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <MX_GPIO_Init+0xf0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a2d      	ldr	r2, [pc, #180]	; (8000974 <MX_GPIO_Init+0xf0>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <MX_GPIO_Init+0xf0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	4b27      	ldr	r3, [pc, #156]	; (8000974 <MX_GPIO_Init+0xf0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a26      	ldr	r2, [pc, #152]	; (8000974 <MX_GPIO_Init+0xf0>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b24      	ldr	r3, [pc, #144]	; (8000974 <MX_GPIO_Init+0xf0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b20      	ldr	r3, [pc, #128]	; (8000974 <MX_GPIO_Init+0xf0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a1f      	ldr	r2, [pc, #124]	; (8000974 <MX_GPIO_Init+0xf0>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <MX_GPIO_Init+0xf0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <MX_GPIO_Init+0xf0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a18      	ldr	r2, [pc, #96]	; (8000974 <MX_GPIO_Init+0xf0>)
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_GPIO_Init+0xf0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0308 	and.w	r3, r3, #8
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_EXTI_Pin;
 8000926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800092c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000932:	2302      	movs	r3, #2
 8000934:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	480e      	ldr	r0, [pc, #56]	; (8000978 <MX_GPIO_Init+0xf4>)
 800093e:	f001 f9fb 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8000942:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800094c:	2302      	movs	r3, #2
 800094e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	4809      	ldr	r0, [pc, #36]	; (800097c <MX_GPIO_Init+0xf8>)
 8000958:	f001 f9ee 	bl	8001d38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2105      	movs	r1, #5
 8000960:	2028      	movs	r0, #40	; 0x28
 8000962:	f000 fe43 	bl	80015ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000966:	2028      	movs	r0, #40	; 0x28
 8000968:	f000 fe5c 	bl	8001624 <HAL_NVIC_EnableIRQ>

}
 800096c:	bf00      	nop
 800096e:	3728      	adds	r7, #40	; 0x28
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800
 8000978:	40020800 	.word	0x40020800
 800097c:	40020400 	.word	0x40020400

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000984:	f000 fd38 	bl	80013f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000988:	f000 f832 	bl	80009f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098c:	f7ff ff7a 	bl	8000884 <MX_GPIO_Init>
  MX_DMA_Init();
 8000990:	f7ff fe08 	bl	80005a4 <MX_DMA_Init>
  MX_TIM1_Init();
 8000994:	f000 fa6c 	bl	8000e70 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000998:	f000 fabc 	bl	8000f14 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800099c:	f000 fbb6 	bl	800110c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

	setvbuf(stdin, NULL, _IONBF, 0); // определение нулевого буфера
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <main+0x5c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	6858      	ldr	r0, [r3, #4]
 80009a6:	2300      	movs	r3, #0
 80009a8:	2202      	movs	r2, #2
 80009aa:	2100      	movs	r1, #0
 80009ac:	f005 fcf4 	bl	8006398 <setvbuf>
	printf("PRINT BRIGHTNESS FOR LED In range from 0 to 100->>>>!\r\n");
 80009b0:	480b      	ldr	r0, [pc, #44]	; (80009e0 <main+0x60>)
 80009b2:	f005 fce9 	bl	8006388 <puts>
	HAL_UART_Receive_IT(&huart3, &value, 1); //запу�?каем UART по прерыванию
 80009b6:	2201      	movs	r2, #1
 80009b8:	490a      	ldr	r1, [pc, #40]	; (80009e4 <main+0x64>)
 80009ba:	480b      	ldr	r0, [pc, #44]	; (80009e8 <main+0x68>)
 80009bc:	f003 fa3b 	bl	8003e36 <HAL_UART_Receive_IT>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80009c0:	2100      	movs	r1, #0
 80009c2:	480a      	ldr	r0, [pc, #40]	; (80009ec <main+0x6c>)
 80009c4:	f002 f994 	bl	8002cf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80009c8:	2104      	movs	r1, #4
 80009ca:	4808      	ldr	r0, [pc, #32]	; (80009ec <main+0x6c>)
 80009cc:	f002 f990 	bl	8002cf0 <HAL_TIM_PWM_Start>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80009d0:	f7ff fe2a 	bl	8000628 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009d4:	f004 f9e0 	bl	8004d98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80009d8:	e7fe      	b.n	80009d8 <main+0x58>
 80009da:	bf00      	nop
 80009dc:	20000014 	.word	0x20000014
 80009e0:	08007f3c 	.word	0x08007f3c
 80009e4:	20001640 	.word	0x20001640
 80009e8:	20001528 	.word	0x20001528
 80009ec:	200014e0 	.word	0x200014e0

080009f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b094      	sub	sp, #80	; 0x50
 80009f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	2230      	movs	r2, #48	; 0x30
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f005 fc34 	bl	800626c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <SystemClock_Config+0xd8>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	4a2a      	ldr	r2, [pc, #168]	; (8000ac8 <SystemClock_Config+0xd8>)
 8000a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a22:	6413      	str	r3, [r2, #64]	; 0x40
 8000a24:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <SystemClock_Config+0xd8>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	4b25      	ldr	r3, [pc, #148]	; (8000acc <SystemClock_Config+0xdc>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a24      	ldr	r2, [pc, #144]	; (8000acc <SystemClock_Config+0xdc>)
 8000a3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	4b22      	ldr	r3, [pc, #136]	; (8000acc <SystemClock_Config+0xdc>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a50:	2301      	movs	r3, #1
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a54:	2310      	movs	r3, #16
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a60:	2308      	movs	r3, #8
 8000a62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000a64:	23b4      	movs	r3, #180	; 0xb4
 8000a66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a70:	f107 0320 	add.w	r3, r7, #32
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 fb97 	bl	80021a8 <HAL_RCC_OscConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a80:	f000 f838 	bl	8000af4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a84:	f001 fb40 	bl	8002108 <HAL_PWREx_EnableOverDrive>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a8e:	f000 f831 	bl	8000af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a92:	230f      	movs	r3, #15
 8000a94:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a96:	2302      	movs	r3, #2
 8000a98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aa2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	2105      	movs	r1, #5
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 fdf1 	bl	8002698 <HAL_RCC_ClockConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000abc:	f000 f81a 	bl	8000af4 <Error_Handler>
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	3750      	adds	r7, #80	; 0x50
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40007000 	.word	0x40007000

08000ad0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d101      	bne.n	8000ae6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae2:	f000 fcab 	bl	800143c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40001000 	.word	0x40001000

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
}
 8000afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000afc:	e7fe      	b.n	8000afc <Error_Handler+0x8>
	...

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_MspInit+0x54>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <HAL_MspInit+0x54>)
 8000b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b14:	6453      	str	r3, [r2, #68]	; 0x44
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <HAL_MspInit+0x54>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <HAL_MspInit+0x54>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <HAL_MspInit+0x54>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <HAL_MspInit+0x54>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	210f      	movs	r1, #15
 8000b42:	f06f 0001 	mvn.w	r0, #1
 8000b46:	f000 fd51 	bl	80015ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08e      	sub	sp, #56	; 0x38
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	4b33      	ldr	r3, [pc, #204]	; (8000c3c <HAL_InitTick+0xe4>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <HAL_InitTick+0xe4>)
 8000b72:	f043 0310 	orr.w	r3, r3, #16
 8000b76:	6413      	str	r3, [r2, #64]	; 0x40
 8000b78:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <HAL_InitTick+0xe4>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	f003 0310 	and.w	r3, r3, #16
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b84:	f107 0210 	add.w	r2, r7, #16
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f001 ff62 	bl	8002a58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b94:	6a3b      	ldr	r3, [r7, #32]
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d103      	bne.n	8000ba6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b9e:	f001 ff33 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
 8000ba2:	6378      	str	r0, [r7, #52]	; 0x34
 8000ba4:	e004      	b.n	8000bb0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ba6:	f001 ff2f 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
 8000baa:	4603      	mov	r3, r0
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bb2:	4a23      	ldr	r2, [pc, #140]	; (8000c40 <HAL_InitTick+0xe8>)
 8000bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb8:	0c9b      	lsrs	r3, r3, #18
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bbe:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <HAL_InitTick+0xec>)
 8000bc0:	4a21      	ldr	r2, [pc, #132]	; (8000c48 <HAL_InitTick+0xf0>)
 8000bc2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <HAL_InitTick+0xec>)
 8000bc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bcc:	4a1d      	ldr	r2, [pc, #116]	; (8000c44 <HAL_InitTick+0xec>)
 8000bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <HAL_InitTick+0xec>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <HAL_InitTick+0xec>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bde:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <HAL_InitTick+0xec>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000be4:	4817      	ldr	r0, [pc, #92]	; (8000c44 <HAL_InitTick+0xec>)
 8000be6:	f001 ff69 	bl	8002abc <HAL_TIM_Base_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000bf0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d11b      	bne.n	8000c30 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bf8:	4812      	ldr	r0, [pc, #72]	; (8000c44 <HAL_InitTick+0xec>)
 8000bfa:	f001 ffaf 	bl	8002b5c <HAL_TIM_Base_Start_IT>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d111      	bne.n	8000c30 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c0c:	2036      	movs	r0, #54	; 0x36
 8000c0e:	f000 fd09 	bl	8001624 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b0f      	cmp	r3, #15
 8000c16:	d808      	bhi.n	8000c2a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	2036      	movs	r0, #54	; 0x36
 8000c1e:	f000 fce5 	bl	80015ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <HAL_InitTick+0xf4>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	e002      	b.n	8000c30 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3738      	adds	r7, #56	; 0x38
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	431bde83 	.word	0x431bde83
 8000c44:	2000144c 	.word	0x2000144c
 8000c48:	40001000 	.word	0x40001000
 8000c4c:	20000008 	.word	0x20000008

08000c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <NMI_Handler+0x4>

08000c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <MemManage_Handler+0x4>

08000c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <BusFault_Handler+0x4>

08000c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <UsageFault_Handler+0x4>

08000c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <DMA1_Stream1_IRQHandler+0x10>)
 8000c82:	f000 fe1d 	bl	80018c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200015cc 	.word	0x200015cc

08000c90 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <DMA1_Stream3_IRQHandler+0x10>)
 8000c96:	f000 fe13 	bl	80018c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000156c 	.word	0x2000156c

08000ca4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000caa:	f002 f8e9 	bl	8002e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20001498 	.word	0x20001498

08000cb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <TIM2_IRQHandler+0x10>)
 8000cbe:	f002 f8df 	bl	8002e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200014e0 	.word	0x200014e0

08000ccc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <USART3_IRQHandler+0x10>)
 8000cd2:	f003 f8e1 	bl	8003e98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20001528 	.word	0x20001528

08000ce0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI_Pin);
 8000ce4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ce8:	f001 f9ea 	bl	80020c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <TIM6_DAC_IRQHandler+0x10>)
 8000cf6:	f002 f8c3 	bl	8002e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	2000144c 	.word	0x2000144c

08000d04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	e00a      	b.n	8000d2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d16:	f000 faeb 	bl	80012f0 <__io_getchar>
 8000d1a:	4601      	mov	r1, r0
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	60ba      	str	r2, [r7, #8]
 8000d22:	b2ca      	uxtb	r2, r1
 8000d24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697a      	ldr	r2, [r7, #20]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	dbf0      	blt.n	8000d16 <_read+0x12>
	}

return len;
 8000d34:	687b      	ldr	r3, [r7, #4]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	60f8      	str	r0, [r7, #12]
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	e009      	b.n	8000d64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	60ba      	str	r2, [r7, #8]
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 fab7 	bl	80012cc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dbf1      	blt.n	8000d50 <_write+0x12>
	}
	return len;
 8000d6c:	687b      	ldr	r3, [r7, #4]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <_close>:

int _close(int file)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d9e:	605a      	str	r2, [r3, #4]
	return 0;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_isatty>:

int _isatty(int file)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
	return 1;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
	return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f005 f9f4 	bl	80061fc <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20030000 	.word	0x20030000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	20001494 	.word	0x20001494
 8000e48:	200057a8 	.word	0x200057a8

08000e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e84:	463b      	mov	r3, r7
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <MX_TIM1_Init+0x9c>)
 8000e8e:	4a20      	ldr	r2, [pc, #128]	; (8000f10 <MX_TIM1_Init+0xa0>)
 8000e90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 900-1;
 8000e92:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <MX_TIM1_Init+0x9c>)
 8000e94:	f240 3283 	movw	r2, #899	; 0x383
 8000e98:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <MX_TIM1_Init+0x9c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <MX_TIM1_Init+0x9c>)
 8000ea2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ea6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_TIM1_Init+0x9c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <MX_TIM1_Init+0x9c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb4:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <MX_TIM1_Init+0x9c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000eba:	4814      	ldr	r0, [pc, #80]	; (8000f0c <MX_TIM1_Init+0x9c>)
 8000ebc:	f001 fdfe 	bl	8002abc <HAL_TIM_Base_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000ec6:	f7ff fe15 	bl	8000af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ece:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	480d      	ldr	r0, [pc, #52]	; (8000f0c <MX_TIM1_Init+0x9c>)
 8000ed8:	f002 f99c 	bl	8003214 <HAL_TIM_ConfigClockSource>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000ee2:	f7ff fe07 	bl	8000af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eee:	463b      	mov	r3, r7
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4806      	ldr	r0, [pc, #24]	; (8000f0c <MX_TIM1_Init+0x9c>)
 8000ef4:	f002 fd8e 	bl	8003a14 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000efe:	f7ff fdf9 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20001498 	.word	0x20001498
 8000f10:	40010000 	.word	0x40010000

08000f14 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08e      	sub	sp, #56	; 0x38
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f28:	f107 0320 	add.w	r3, r7, #32
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
 8000f40:	615a      	str	r2, [r3, #20]
 8000f42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f44:	4b32      	ldr	r3, [pc, #200]	; (8001010 <MX_TIM2_Init+0xfc>)
 8000f46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 18000-1;
 8000f4c:	4b30      	ldr	r3, [pc, #192]	; (8001010 <MX_TIM2_Init+0xfc>)
 8000f4e:	f244 624f 	movw	r2, #17999	; 0x464f
 8000f52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f54:	4b2e      	ldr	r3, [pc, #184]	; (8001010 <MX_TIM2_Init+0xfc>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <MX_TIM2_Init+0xfc>)
 8000f5c:	2263      	movs	r2, #99	; 0x63
 8000f5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f60:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <MX_TIM2_Init+0xfc>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f66:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <MX_TIM2_Init+0xfc>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f6c:	4828      	ldr	r0, [pc, #160]	; (8001010 <MX_TIM2_Init+0xfc>)
 8000f6e:	f001 fda5 	bl	8002abc <HAL_TIM_Base_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000f78:	f7ff fdbc 	bl	8000af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f86:	4619      	mov	r1, r3
 8000f88:	4821      	ldr	r0, [pc, #132]	; (8001010 <MX_TIM2_Init+0xfc>)
 8000f8a:	f002 f943 	bl	8003214 <HAL_TIM_ConfigClockSource>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000f94:	f7ff fdae 	bl	8000af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f98:	481d      	ldr	r0, [pc, #116]	; (8001010 <MX_TIM2_Init+0xfc>)
 8000f9a:	f001 fe4f 	bl	8002c3c <HAL_TIM_PWM_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000fa4:	f7ff fda6 	bl	8000af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fb0:	f107 0320 	add.w	r3, r7, #32
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4816      	ldr	r0, [pc, #88]	; (8001010 <MX_TIM2_Init+0xfc>)
 8000fb8:	f002 fd2c 	bl	8003a14 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000fc2:	f7ff fd97 	bl	8000af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc6:	2360      	movs	r3, #96	; 0x60
 8000fc8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2200      	movs	r2, #0
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <MX_TIM2_Init+0xfc>)
 8000fde:	f002 f857 	bl	8003090 <HAL_TIM_PWM_ConfigChannel>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000fe8:	f7ff fd84 	bl	8000af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	2204      	movs	r2, #4
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4807      	ldr	r0, [pc, #28]	; (8001010 <MX_TIM2_Init+0xfc>)
 8000ff4:	f002 f84c 	bl	8003090 <HAL_TIM_PWM_ConfigChannel>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000ffe:	f7ff fd79 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001002:	4803      	ldr	r0, [pc, #12]	; (8001010 <MX_TIM2_Init+0xfc>)
 8001004:	f000 f84a 	bl	800109c <HAL_TIM_MspPostInit>

}
 8001008:	bf00      	nop
 800100a:	3738      	adds	r7, #56	; 0x38
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200014e0 	.word	0x200014e0

08001014 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <HAL_TIM_Base_MspInit+0x80>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d116      	bne.n	8001054 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <HAL_TIM_Base_MspInit+0x84>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	4a1a      	ldr	r2, [pc, #104]	; (8001098 <HAL_TIM_Base_MspInit+0x84>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6453      	str	r3, [r2, #68]	; 0x44
 8001036:	4b18      	ldr	r3, [pc, #96]	; (8001098 <HAL_TIM_Base_MspInit+0x84>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2105      	movs	r1, #5
 8001046:	2019      	movs	r0, #25
 8001048:	f000 fad0 	bl	80015ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800104c:	2019      	movs	r0, #25
 800104e:	f000 fae9 	bl	8001624 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001052:	e01a      	b.n	800108a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM2)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800105c:	d115      	bne.n	800108a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <HAL_TIM_Base_MspInit+0x84>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <HAL_TIM_Base_MspInit+0x84>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6413      	str	r3, [r2, #64]	; 0x40
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <HAL_TIM_Base_MspInit+0x84>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2105      	movs	r1, #5
 800107e:	201c      	movs	r0, #28
 8001080:	f000 fab4 	bl	80015ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001084:	201c      	movs	r0, #28
 8001086:	f000 facd 	bl	8001624 <HAL_NVIC_EnableIRQ>
}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40010000 	.word	0x40010000
 8001098:	40023800 	.word	0x40023800

0800109c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010bc:	d11d      	bne.n	80010fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <HAL_TIM_MspPostInit+0x68>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a0f      	ldr	r2, [pc, #60]	; (8001104 <HAL_TIM_MspPostInit+0x68>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <HAL_TIM_MspPostInit+0x68>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010da:	2303      	movs	r3, #3
 80010dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010ea:	2301      	movs	r3, #1
 80010ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	4619      	mov	r1, r3
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <HAL_TIM_MspPostInit+0x6c>)
 80010f6:	f000 fe1f 	bl	8001d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010fa:	bf00      	nop
 80010fc:	3720      	adds	r7, #32
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800
 8001108:	40020000 	.word	0x40020000

0800110c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_USART3_UART_Init+0x4c>)
 8001112:	4a12      	ldr	r2, [pc, #72]	; (800115c <MX_USART3_UART_Init+0x50>)
 8001114:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <MX_USART3_UART_Init+0x4c>)
 8001118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800111c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_USART3_UART_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_USART3_UART_Init+0x4c>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <MX_USART3_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001130:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_USART3_UART_Init+0x4c>)
 8001132:	220c      	movs	r2, #12
 8001134:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <MX_USART3_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_USART3_UART_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_USART3_UART_Init+0x4c>)
 8001144:	f002 fcf6 	bl	8003b34 <HAL_UART_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800114e:	f7ff fcd1 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20001528 	.word	0x20001528
 800115c:	40004800 	.word	0x40004800

08001160 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a4c      	ldr	r2, [pc, #304]	; (80012b0 <HAL_UART_MspInit+0x150>)
 800117e:	4293      	cmp	r3, r2
 8001180:	f040 8091 	bne.w	80012a6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	4b4a      	ldr	r3, [pc, #296]	; (80012b4 <HAL_UART_MspInit+0x154>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	4a49      	ldr	r2, [pc, #292]	; (80012b4 <HAL_UART_MspInit+0x154>)
 800118e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001192:	6413      	str	r3, [r2, #64]	; 0x40
 8001194:	4b47      	ldr	r3, [pc, #284]	; (80012b4 <HAL_UART_MspInit+0x154>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	4b43      	ldr	r3, [pc, #268]	; (80012b4 <HAL_UART_MspInit+0x154>)
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	4a42      	ldr	r2, [pc, #264]	; (80012b4 <HAL_UART_MspInit+0x154>)
 80011aa:	f043 0308 	orr.w	r3, r3, #8
 80011ae:	6313      	str	r3, [r2, #48]	; 0x30
 80011b0:	4b40      	ldr	r3, [pc, #256]	; (80012b4 <HAL_UART_MspInit+0x154>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011ce:	2307      	movs	r3, #7
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	4837      	ldr	r0, [pc, #220]	; (80012b8 <HAL_UART_MspInit+0x158>)
 80011da:	f000 fdad 	bl	8001d38 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80011de:	4b37      	ldr	r3, [pc, #220]	; (80012bc <HAL_UART_MspInit+0x15c>)
 80011e0:	4a37      	ldr	r2, [pc, #220]	; (80012c0 <HAL_UART_MspInit+0x160>)
 80011e2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80011e4:	4b35      	ldr	r3, [pc, #212]	; (80012bc <HAL_UART_MspInit+0x15c>)
 80011e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011ea:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011ec:	4b33      	ldr	r3, [pc, #204]	; (80012bc <HAL_UART_MspInit+0x15c>)
 80011ee:	2240      	movs	r2, #64	; 0x40
 80011f0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f2:	4b32      	ldr	r3, [pc, #200]	; (80012bc <HAL_UART_MspInit+0x15c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011f8:	4b30      	ldr	r3, [pc, #192]	; (80012bc <HAL_UART_MspInit+0x15c>)
 80011fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011fe:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001200:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <HAL_UART_MspInit+0x15c>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <HAL_UART_MspInit+0x15c>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800120c:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <HAL_UART_MspInit+0x15c>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001212:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <HAL_UART_MspInit+0x15c>)
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001218:	4b28      	ldr	r3, [pc, #160]	; (80012bc <HAL_UART_MspInit+0x15c>)
 800121a:	2200      	movs	r2, #0
 800121c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800121e:	4827      	ldr	r0, [pc, #156]	; (80012bc <HAL_UART_MspInit+0x15c>)
 8001220:	f000 fa0e 	bl	8001640 <HAL_DMA_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800122a:	f7ff fc63 	bl	8000af4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a22      	ldr	r2, [pc, #136]	; (80012bc <HAL_UART_MspInit+0x15c>)
 8001232:	635a      	str	r2, [r3, #52]	; 0x34
 8001234:	4a21      	ldr	r2, [pc, #132]	; (80012bc <HAL_UART_MspInit+0x15c>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800123a:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <HAL_UART_MspInit+0x164>)
 800123c:	4a22      	ldr	r2, [pc, #136]	; (80012c8 <HAL_UART_MspInit+0x168>)
 800123e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001240:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <HAL_UART_MspInit+0x164>)
 8001242:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001246:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001248:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <HAL_UART_MspInit+0x164>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <HAL_UART_MspInit+0x164>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <HAL_UART_MspInit+0x164>)
 8001256:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800125a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_UART_MspInit+0x164>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <HAL_UART_MspInit+0x164>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_UART_MspInit+0x164>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <HAL_UART_MspInit+0x164>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <HAL_UART_MspInit+0x164>)
 8001276:	2200      	movs	r2, #0
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800127a:	4812      	ldr	r0, [pc, #72]	; (80012c4 <HAL_UART_MspInit+0x164>)
 800127c:	f000 f9e0 	bl	8001640 <HAL_DMA_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001286:	f7ff fc35 	bl	8000af4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <HAL_UART_MspInit+0x164>)
 800128e:	639a      	str	r2, [r3, #56]	; 0x38
 8001290:	4a0c      	ldr	r2, [pc, #48]	; (80012c4 <HAL_UART_MspInit+0x164>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2105      	movs	r1, #5
 800129a:	2027      	movs	r0, #39	; 0x27
 800129c:	f000 f9a6 	bl	80015ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012a0:	2027      	movs	r0, #39	; 0x27
 80012a2:	f000 f9bf 	bl	8001624 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012a6:	bf00      	nop
 80012a8:	3728      	adds	r7, #40	; 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40004800 	.word	0x40004800
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020c00 	.word	0x40020c00
 80012bc:	2000156c 	.word	0x2000156c
 80012c0:	40026058 	.word	0x40026058
 80012c4:	200015cc 	.word	0x200015cc
 80012c8:	40026028 	.word	0x40026028

080012cc <__io_putchar>:
extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_tx;
extern DMA_HandleTypeDef hdma_usart3_rx;

int __io_putchar(int ch)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80012d4:	1d39      	adds	r1, r7, #4
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	2201      	movs	r2, #1
 80012dc:	4803      	ldr	r0, [pc, #12]	; (80012ec <__io_putchar+0x20>)
 80012de:	f002 fc76 	bl	8003bce <HAL_UART_Transmit>
	return 0;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20001528 	.word	0x20001528

080012f0 <__io_getchar>:
//Receive one char in blocking mode
int __io_getchar(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
	uint8_t result;
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 80012f6:	2300      	movs	r3, #0
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <__io_getchar+0x40>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <__io_getchar+0x40>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	683b      	ldr	r3, [r7, #0]
	HAL_UART_Receive(&huart3, &result, 1, HAL_MAX_DELAY);
 800130c:	1df9      	adds	r1, r7, #7
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	2201      	movs	r2, #1
 8001314:	4806      	ldr	r0, [pc, #24]	; (8001330 <__io_getchar+0x40>)
 8001316:	f002 fcec 	bl	8003cf2 <HAL_UART_Receive>
	if (result == '\r')
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b0d      	cmp	r3, #13
 800131e:	d101      	bne.n	8001324 <__io_getchar+0x34>
		result = '\n'; // Dirty hack. Replace "return" character with "new line" character
 8001320:	230a      	movs	r3, #10
 8001322:	71fb      	strb	r3, [r7, #7]
	return (int) result;
 8001324:	79fb      	ldrb	r3, [r7, #7]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20001528 	.word	0x20001528

08001334 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a14      	ldr	r2, [pc, #80]	; (8001390 <HAL_UART_RxCpltCallback+0x5c>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d120      	bne.n	8001386 <HAL_UART_RxCpltCallback+0x52>
	{
		HAL_UART_Receive_IT(&huart3, &value, 1);
 8001344:	2201      	movs	r2, #1
 8001346:	4913      	ldr	r1, [pc, #76]	; (8001394 <HAL_UART_RxCpltCallback+0x60>)
 8001348:	4811      	ldr	r0, [pc, #68]	; (8001390 <HAL_UART_RxCpltCallback+0x5c>)
 800134a:	f002 fd74 	bl	8003e36 <HAL_UART_Receive_IT>
		buff[counter] = value;
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_UART_RxCpltCallback+0x64>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_UART_RxCpltCallback+0x60>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b2d9      	uxtb	r1, r3
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_UART_RxCpltCallback+0x68>)
 800135e:	5499      	strb	r1, [r3, r2]

		if (value == '\r')
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_UART_RxCpltCallback+0x60>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b0d      	cmp	r3, #13
 8001368:	d106      	bne.n	8001378 <HAL_UART_RxCpltCallback+0x44>
		{
			counter = 0;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_UART_RxCpltCallback+0x64>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
			flag = 1;
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_UART_RxCpltCallback+0x6c>)
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]
		}
		else
			counter++;
	}
}
 8001376:	e006      	b.n	8001386 <HAL_UART_RxCpltCallback+0x52>
			counter++;
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <HAL_UART_RxCpltCallback+0x64>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	3301      	adds	r3, #1
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_UART_RxCpltCallback+0x64>)
 8001384:	701a      	strb	r2, [r3, #0]
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20001528 	.word	0x20001528
 8001394:	20001640 	.word	0x20001640
 8001398:	2000162c 	.word	0x2000162c
 800139c:	20001630 	.word	0x20001630
 80013a0:	20001641 	.word	0x20001641

080013a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80013a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013dc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013a8:	480d      	ldr	r0, [pc, #52]	; (80013e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013aa:	490e      	ldr	r1, [pc, #56]	; (80013e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013ac:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b0:	e002      	b.n	80013b8 <LoopCopyDataInit>

080013b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b6:	3304      	adds	r3, #4

080013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013bc:	d3f9      	bcc.n	80013b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013be:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013c0:	4c0b      	ldr	r4, [pc, #44]	; (80013f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c4:	e001      	b.n	80013ca <LoopFillZerobss>

080013c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c8:	3204      	adds	r2, #4

080013ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013cc:	d3fb      	bcc.n	80013c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013ce:	f7ff fd3d 	bl	8000e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013d2:	f004 ff19 	bl	8006208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013d6:	f7ff fad3 	bl	8000980 <main>
  bx  lr    
 80013da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80013dc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80013e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80013e8:	0800816c 	.word	0x0800816c
  ldr r2, =_sbss
 80013ec:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80013f0:	200057a8 	.word	0x200057a8

080013f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC_IRQHandler>
	...

080013f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <HAL_Init+0x40>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <HAL_Init+0x40>)
 8001402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001406:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_Init+0x40>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <HAL_Init+0x40>)
 800140e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001412:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_Init+0x40>)
 800141a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001420:	2003      	movs	r0, #3
 8001422:	f000 f8d8 	bl	80015d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001426:	200f      	movs	r0, #15
 8001428:	f7ff fb96 	bl	8000b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800142c:	f7ff fb68 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023c00 	.word	0x40023c00

0800143c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_IncTick+0x20>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_IncTick+0x24>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4413      	add	r3, r2
 800144c:	4a04      	ldr	r2, [pc, #16]	; (8001460 <HAL_IncTick+0x24>)
 800144e:	6013      	str	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	2000000c 	.word	0x2000000c
 8001460:	20001a40 	.word	0x20001a40

08001464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return uwTick;
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <HAL_GetTick+0x14>)
 800146a:	681b      	ldr	r3, [r3, #0]
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20001a40 	.word	0x20001a40

0800147c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001498:	4013      	ands	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	60d3      	str	r3, [r2, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <__NVIC_GetPriorityGrouping+0x18>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	f003 0307 	and.w	r3, r3, #7
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	db0b      	blt.n	800150a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	f003 021f 	and.w	r2, r3, #31
 80014f8:	4907      	ldr	r1, [pc, #28]	; (8001518 <__NVIC_EnableIRQ+0x38>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	095b      	lsrs	r3, r3, #5
 8001500:	2001      	movs	r0, #1
 8001502:	fa00 f202 	lsl.w	r2, r0, r2
 8001506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000e100 	.word	0xe000e100

0800151c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	6039      	str	r1, [r7, #0]
 8001526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	2b00      	cmp	r3, #0
 800152e:	db0a      	blt.n	8001546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	b2da      	uxtb	r2, r3
 8001534:	490c      	ldr	r1, [pc, #48]	; (8001568 <__NVIC_SetPriority+0x4c>)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	0112      	lsls	r2, r2, #4
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	440b      	add	r3, r1
 8001540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001544:	e00a      	b.n	800155c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4908      	ldr	r1, [pc, #32]	; (800156c <__NVIC_SetPriority+0x50>)
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	3b04      	subs	r3, #4
 8001554:	0112      	lsls	r2, r2, #4
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	440b      	add	r3, r1
 800155a:	761a      	strb	r2, [r3, #24]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000e100 	.word	0xe000e100
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001570:	b480      	push	{r7}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f1c3 0307 	rsb	r3, r3, #7
 800158a:	2b04      	cmp	r3, #4
 800158c:	bf28      	it	cs
 800158e:	2304      	movcs	r3, #4
 8001590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3304      	adds	r3, #4
 8001596:	2b06      	cmp	r3, #6
 8001598:	d902      	bls.n	80015a0 <NVIC_EncodePriority+0x30>
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3b03      	subs	r3, #3
 800159e:	e000      	b.n	80015a2 <NVIC_EncodePriority+0x32>
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	f04f 32ff 	mov.w	r2, #4294967295
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43da      	mvns	r2, r3
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	401a      	ands	r2, r3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b8:	f04f 31ff 	mov.w	r1, #4294967295
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	fa01 f303 	lsl.w	r3, r1, r3
 80015c2:	43d9      	mvns	r1, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	4313      	orrs	r3, r2
         );
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3724      	adds	r7, #36	; 0x24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ff4c 	bl	800147c <__NVIC_SetPriorityGrouping>
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015fe:	f7ff ff61 	bl	80014c4 <__NVIC_GetPriorityGrouping>
 8001602:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	68b9      	ldr	r1, [r7, #8]
 8001608:	6978      	ldr	r0, [r7, #20]
 800160a:	f7ff ffb1 	bl	8001570 <NVIC_EncodePriority>
 800160e:	4602      	mov	r2, r0
 8001610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001614:	4611      	mov	r1, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ff80 	bl	800151c <__NVIC_SetPriority>
}
 800161c:	bf00      	nop
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ff54 	bl	80014e0 <__NVIC_EnableIRQ>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800164c:	f7ff ff0a 	bl	8001464 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e099      	b.n	8001790 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2202      	movs	r2, #2
 8001660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0201 	bic.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800167c:	e00f      	b.n	800169e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800167e:	f7ff fef1 	bl	8001464 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b05      	cmp	r3, #5
 800168a:	d908      	bls.n	800169e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2220      	movs	r2, #32
 8001690:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2203      	movs	r2, #3
 8001696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e078      	b.n	8001790 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1e8      	bne.n	800167e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	4b38      	ldr	r3, [pc, #224]	; (8001798 <HAL_DMA_Init+0x158>)
 80016b8:	4013      	ands	r3, r2
 80016ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	d107      	bne.n	8001708 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	4313      	orrs	r3, r2
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	4313      	orrs	r3, r2
 8001706:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f023 0307 	bic.w	r3, r3, #7
 800171e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	4313      	orrs	r3, r2
 8001728:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	2b04      	cmp	r3, #4
 8001730:	d117      	bne.n	8001762 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4313      	orrs	r3, r2
 800173a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00e      	beq.n	8001762 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 fa7b 	bl	8001c40 <DMA_CheckFifoParam>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d008      	beq.n	8001762 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2240      	movs	r2, #64	; 0x40
 8001754:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800175e:	2301      	movs	r3, #1
 8001760:	e016      	b.n	8001790 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 fa32 	bl	8001bd4 <DMA_CalcBaseAndBitshift>
 8001770:	4603      	mov	r3, r0
 8001772:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001778:	223f      	movs	r2, #63	; 0x3f
 800177a:	409a      	lsls	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	f010803f 	.word	0xf010803f

0800179c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017aa:	f7ff fe5b 	bl	8001464 <HAL_GetTick>
 80017ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d008      	beq.n	80017ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2280      	movs	r2, #128	; 0x80
 80017c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e052      	b.n	8001874 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0216 	bic.w	r2, r2, #22
 80017dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	695a      	ldr	r2, [r3, #20]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d103      	bne.n	80017fe <HAL_DMA_Abort+0x62>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d007      	beq.n	800180e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0208 	bic.w	r2, r2, #8
 800180c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0201 	bic.w	r2, r2, #1
 800181c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800181e:	e013      	b.n	8001848 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001820:	f7ff fe20 	bl	8001464 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b05      	cmp	r3, #5
 800182c:	d90c      	bls.n	8001848 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2220      	movs	r2, #32
 8001832:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2203      	movs	r2, #3
 8001838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e015      	b.n	8001874 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1e4      	bne.n	8001820 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185a:	223f      	movs	r2, #63	; 0x3f
 800185c:	409a      	lsls	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d004      	beq.n	800189a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e00c      	b.n	80018b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2205      	movs	r2, #5
 800189e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 0201 	bic.w	r2, r2, #1
 80018b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018cc:	4b8e      	ldr	r3, [pc, #568]	; (8001b08 <HAL_DMA_IRQHandler+0x248>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a8e      	ldr	r2, [pc, #568]	; (8001b0c <HAL_DMA_IRQHandler+0x24c>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	0a9b      	lsrs	r3, r3, #10
 80018d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ea:	2208      	movs	r2, #8
 80018ec:	409a      	lsls	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d01a      	beq.n	800192c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d013      	beq.n	800192c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0204 	bic.w	r2, r2, #4
 8001912:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001918:	2208      	movs	r2, #8
 800191a:	409a      	lsls	r2, r3
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001924:	f043 0201 	orr.w	r2, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001930:	2201      	movs	r2, #1
 8001932:	409a      	lsls	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4013      	ands	r3, r2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d012      	beq.n	8001962 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00b      	beq.n	8001962 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194e:	2201      	movs	r2, #1
 8001950:	409a      	lsls	r2, r3
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195a:	f043 0202 	orr.w	r2, r3, #2
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001966:	2204      	movs	r2, #4
 8001968:	409a      	lsls	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4013      	ands	r3, r2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d012      	beq.n	8001998 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00b      	beq.n	8001998 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001984:	2204      	movs	r2, #4
 8001986:	409a      	lsls	r2, r3
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001990:	f043 0204 	orr.w	r2, r3, #4
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199c:	2210      	movs	r2, #16
 800199e:	409a      	lsls	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d043      	beq.n	8001a30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d03c      	beq.n	8001a30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ba:	2210      	movs	r2, #16
 80019bc:	409a      	lsls	r2, r3
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d018      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d108      	bne.n	80019f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d024      	beq.n	8001a30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	4798      	blx	r3
 80019ee:	e01f      	b.n	8001a30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d01b      	beq.n	8001a30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	4798      	blx	r3
 8001a00:	e016      	b.n	8001a30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d107      	bne.n	8001a20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0208 	bic.w	r2, r2, #8
 8001a1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a34:	2220      	movs	r2, #32
 8001a36:	409a      	lsls	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 808f 	beq.w	8001b60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0310 	and.w	r3, r3, #16
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 8087 	beq.w	8001b60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a56:	2220      	movs	r2, #32
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b05      	cmp	r3, #5
 8001a68:	d136      	bne.n	8001ad8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0216 	bic.w	r2, r2, #22
 8001a78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	695a      	ldr	r2, [r3, #20]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d103      	bne.n	8001a9a <HAL_DMA_IRQHandler+0x1da>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d007      	beq.n	8001aaa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0208 	bic.w	r2, r2, #8
 8001aa8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aae:	223f      	movs	r2, #63	; 0x3f
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d07e      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	4798      	blx	r3
        }
        return;
 8001ad6:	e079      	b.n	8001bcc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d01d      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10d      	bne.n	8001b10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d031      	beq.n	8001b60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	4798      	blx	r3
 8001b04:	e02c      	b.n	8001b60 <HAL_DMA_IRQHandler+0x2a0>
 8001b06:	bf00      	nop
 8001b08:	20000004 	.word	0x20000004
 8001b0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d023      	beq.n	8001b60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	4798      	blx	r3
 8001b20:	e01e      	b.n	8001b60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10f      	bne.n	8001b50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0210 	bic.w	r2, r2, #16
 8001b3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d032      	beq.n	8001bce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d022      	beq.n	8001bba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2205      	movs	r2, #5
 8001b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0201 	bic.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d307      	bcc.n	8001ba8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f2      	bne.n	8001b8c <HAL_DMA_IRQHandler+0x2cc>
 8001ba6:	e000      	b.n	8001baa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ba8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	4798      	blx	r3
 8001bca:	e000      	b.n	8001bce <HAL_DMA_IRQHandler+0x30e>
        return;
 8001bcc:	bf00      	nop
    }
  }
}
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	3b10      	subs	r3, #16
 8001be4:	4a14      	ldr	r2, [pc, #80]	; (8001c38 <DMA_CalcBaseAndBitshift+0x64>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bee:	4a13      	ldr	r2, [pc, #76]	; (8001c3c <DMA_CalcBaseAndBitshift+0x68>)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d909      	bls.n	8001c16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c0a:	f023 0303 	bic.w	r3, r3, #3
 8001c0e:	1d1a      	adds	r2, r3, #4
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	659a      	str	r2, [r3, #88]	; 0x58
 8001c14:	e007      	b.n	8001c26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c1e:	f023 0303 	bic.w	r3, r3, #3
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	aaaaaaab 	.word	0xaaaaaaab
 8001c3c:	08007fa0 	.word	0x08007fa0

08001c40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d11f      	bne.n	8001c9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d856      	bhi.n	8001d0e <DMA_CheckFifoParam+0xce>
 8001c60:	a201      	add	r2, pc, #4	; (adr r2, 8001c68 <DMA_CheckFifoParam+0x28>)
 8001c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c66:	bf00      	nop
 8001c68:	08001c79 	.word	0x08001c79
 8001c6c:	08001c8b 	.word	0x08001c8b
 8001c70:	08001c79 	.word	0x08001c79
 8001c74:	08001d0f 	.word	0x08001d0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d046      	beq.n	8001d12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c88:	e043      	b.n	8001d12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c92:	d140      	bne.n	8001d16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c98:	e03d      	b.n	8001d16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ca2:	d121      	bne.n	8001ce8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d837      	bhi.n	8001d1a <DMA_CheckFifoParam+0xda>
 8001caa:	a201      	add	r2, pc, #4	; (adr r2, 8001cb0 <DMA_CheckFifoParam+0x70>)
 8001cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb0:	08001cc1 	.word	0x08001cc1
 8001cb4:	08001cc7 	.word	0x08001cc7
 8001cb8:	08001cc1 	.word	0x08001cc1
 8001cbc:	08001cd9 	.word	0x08001cd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8001cc4:	e030      	b.n	8001d28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d025      	beq.n	8001d1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cd6:	e022      	b.n	8001d1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ce0:	d11f      	bne.n	8001d22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ce6:	e01c      	b.n	8001d22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d903      	bls.n	8001cf6 <DMA_CheckFifoParam+0xb6>
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d003      	beq.n	8001cfc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cf4:	e018      	b.n	8001d28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8001cfa:	e015      	b.n	8001d28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00e      	beq.n	8001d26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d0c:	e00b      	b.n	8001d26 <DMA_CheckFifoParam+0xe6>
      break;
 8001d0e:	bf00      	nop
 8001d10:	e00a      	b.n	8001d28 <DMA_CheckFifoParam+0xe8>
      break;
 8001d12:	bf00      	nop
 8001d14:	e008      	b.n	8001d28 <DMA_CheckFifoParam+0xe8>
      break;
 8001d16:	bf00      	nop
 8001d18:	e006      	b.n	8001d28 <DMA_CheckFifoParam+0xe8>
      break;
 8001d1a:	bf00      	nop
 8001d1c:	e004      	b.n	8001d28 <DMA_CheckFifoParam+0xe8>
      break;
 8001d1e:	bf00      	nop
 8001d20:	e002      	b.n	8001d28 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d22:	bf00      	nop
 8001d24:	e000      	b.n	8001d28 <DMA_CheckFifoParam+0xe8>
      break;
 8001d26:	bf00      	nop
    }
  } 
  
  return status; 
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop

08001d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	; 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
 8001d52:	e177      	b.n	8002044 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d54:	2201      	movs	r2, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	f040 8166 	bne.w	800203e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d005      	beq.n	8001d8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d130      	bne.n	8001dec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	2203      	movs	r2, #3
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 0201 	and.w	r2, r3, #1
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d017      	beq.n	8001e28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2203      	movs	r2, #3
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d123      	bne.n	8001e7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	08da      	lsrs	r2, r3, #3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3208      	adds	r2, #8
 8001e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	220f      	movs	r2, #15
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	691a      	ldr	r2, [r3, #16]
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	08da      	lsrs	r2, r3, #3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3208      	adds	r2, #8
 8001e76:	69b9      	ldr	r1, [r7, #24]
 8001e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2203      	movs	r2, #3
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0203 	and.w	r2, r3, #3
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80c0 	beq.w	800203e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b66      	ldr	r3, [pc, #408]	; (800205c <HAL_GPIO_Init+0x324>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	4a65      	ldr	r2, [pc, #404]	; (800205c <HAL_GPIO_Init+0x324>)
 8001ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ece:	4b63      	ldr	r3, [pc, #396]	; (800205c <HAL_GPIO_Init+0x324>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eda:	4a61      	ldr	r2, [pc, #388]	; (8002060 <HAL_GPIO_Init+0x328>)
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	3302      	adds	r3, #2
 8001ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	220f      	movs	r2, #15
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a58      	ldr	r2, [pc, #352]	; (8002064 <HAL_GPIO_Init+0x32c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d037      	beq.n	8001f76 <HAL_GPIO_Init+0x23e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a57      	ldr	r2, [pc, #348]	; (8002068 <HAL_GPIO_Init+0x330>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d031      	beq.n	8001f72 <HAL_GPIO_Init+0x23a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a56      	ldr	r2, [pc, #344]	; (800206c <HAL_GPIO_Init+0x334>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d02b      	beq.n	8001f6e <HAL_GPIO_Init+0x236>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a55      	ldr	r2, [pc, #340]	; (8002070 <HAL_GPIO_Init+0x338>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d025      	beq.n	8001f6a <HAL_GPIO_Init+0x232>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a54      	ldr	r2, [pc, #336]	; (8002074 <HAL_GPIO_Init+0x33c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d01f      	beq.n	8001f66 <HAL_GPIO_Init+0x22e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a53      	ldr	r2, [pc, #332]	; (8002078 <HAL_GPIO_Init+0x340>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d019      	beq.n	8001f62 <HAL_GPIO_Init+0x22a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a52      	ldr	r2, [pc, #328]	; (800207c <HAL_GPIO_Init+0x344>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d013      	beq.n	8001f5e <HAL_GPIO_Init+0x226>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a51      	ldr	r2, [pc, #324]	; (8002080 <HAL_GPIO_Init+0x348>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00d      	beq.n	8001f5a <HAL_GPIO_Init+0x222>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a50      	ldr	r2, [pc, #320]	; (8002084 <HAL_GPIO_Init+0x34c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d007      	beq.n	8001f56 <HAL_GPIO_Init+0x21e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4f      	ldr	r2, [pc, #316]	; (8002088 <HAL_GPIO_Init+0x350>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d101      	bne.n	8001f52 <HAL_GPIO_Init+0x21a>
 8001f4e:	2309      	movs	r3, #9
 8001f50:	e012      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f52:	230a      	movs	r3, #10
 8001f54:	e010      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f56:	2308      	movs	r3, #8
 8001f58:	e00e      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f5a:	2307      	movs	r3, #7
 8001f5c:	e00c      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f5e:	2306      	movs	r3, #6
 8001f60:	e00a      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f62:	2305      	movs	r3, #5
 8001f64:	e008      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f66:	2304      	movs	r3, #4
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e004      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e002      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f76:	2300      	movs	r3, #0
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	f002 0203 	and.w	r2, r2, #3
 8001f7e:	0092      	lsls	r2, r2, #2
 8001f80:	4093      	lsls	r3, r2
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f88:	4935      	ldr	r1, [pc, #212]	; (8002060 <HAL_GPIO_Init+0x328>)
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	3302      	adds	r3, #2
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f96:	4b3d      	ldr	r3, [pc, #244]	; (800208c <HAL_GPIO_Init+0x354>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fba:	4a34      	ldr	r2, [pc, #208]	; (800208c <HAL_GPIO_Init+0x354>)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc0:	4b32      	ldr	r3, [pc, #200]	; (800208c <HAL_GPIO_Init+0x354>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe4:	4a29      	ldr	r2, [pc, #164]	; (800208c <HAL_GPIO_Init+0x354>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fea:	4b28      	ldr	r3, [pc, #160]	; (800208c <HAL_GPIO_Init+0x354>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800200e:	4a1f      	ldr	r2, [pc, #124]	; (800208c <HAL_GPIO_Init+0x354>)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002014:	4b1d      	ldr	r3, [pc, #116]	; (800208c <HAL_GPIO_Init+0x354>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002038:	4a14      	ldr	r2, [pc, #80]	; (800208c <HAL_GPIO_Init+0x354>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3301      	adds	r3, #1
 8002042:	61fb      	str	r3, [r7, #28]
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	2b0f      	cmp	r3, #15
 8002048:	f67f ae84 	bls.w	8001d54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800204c:	bf00      	nop
 800204e:	bf00      	nop
 8002050:	3724      	adds	r7, #36	; 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800
 8002060:	40013800 	.word	0x40013800
 8002064:	40020000 	.word	0x40020000
 8002068:	40020400 	.word	0x40020400
 800206c:	40020800 	.word	0x40020800
 8002070:	40020c00 	.word	0x40020c00
 8002074:	40021000 	.word	0x40021000
 8002078:	40021400 	.word	0x40021400
 800207c:	40021800 	.word	0x40021800
 8002080:	40021c00 	.word	0x40021c00
 8002084:	40022000 	.word	0x40022000
 8002088:	40022400 	.word	0x40022400
 800208c:	40013c00 	.word	0x40013c00

08002090 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	887b      	ldrh	r3, [r7, #2]
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020a8:	2301      	movs	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	e001      	b.n	80020b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	88fb      	ldrh	r3, [r7, #6]
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d006      	beq.n	80020e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020d6:	4a05      	ldr	r2, [pc, #20]	; (80020ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020dc:	88fb      	ldrh	r3, [r7, #6]
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f806 	bl	80020f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40013c00 	.word	0x40013c00

080020f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	603b      	str	r3, [r7, #0]
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_PWREx_EnableOverDrive+0x90>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	4a1f      	ldr	r2, [pc, #124]	; (8002198 <HAL_PWREx_EnableOverDrive+0x90>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002120:	6413      	str	r3, [r2, #64]	; 0x40
 8002122:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_PWREx_EnableOverDrive+0x90>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800212e:	4b1b      	ldr	r3, [pc, #108]	; (800219c <HAL_PWREx_EnableOverDrive+0x94>)
 8002130:	2201      	movs	r2, #1
 8002132:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002134:	f7ff f996 	bl	8001464 <HAL_GetTick>
 8002138:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800213a:	e009      	b.n	8002150 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800213c:	f7ff f992 	bl	8001464 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800214a:	d901      	bls.n	8002150 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e01f      	b.n	8002190 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800215c:	d1ee      	bne.n	800213c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002160:	2201      	movs	r2, #1
 8002162:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002164:	f7ff f97e 	bl	8001464 <HAL_GetTick>
 8002168:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800216a:	e009      	b.n	8002180 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800216c:	f7ff f97a 	bl	8001464 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800217a:	d901      	bls.n	8002180 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e007      	b.n	8002190 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002180:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002188:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800218c:	d1ee      	bne.n	800216c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40023800 	.word	0x40023800
 800219c:	420e0040 	.word	0x420e0040
 80021a0:	40007000 	.word	0x40007000
 80021a4:	420e0044 	.word	0x420e0044

080021a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e267      	b.n	800268a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d075      	beq.n	80022b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021c6:	4b88      	ldr	r3, [pc, #544]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d00c      	beq.n	80021ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021d2:	4b85      	ldr	r3, [pc, #532]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d112      	bne.n	8002204 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021de:	4b82      	ldr	r3, [pc, #520]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ea:	d10b      	bne.n	8002204 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ec:	4b7e      	ldr	r3, [pc, #504]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d05b      	beq.n	80022b0 <HAL_RCC_OscConfig+0x108>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d157      	bne.n	80022b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e242      	b.n	800268a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800220c:	d106      	bne.n	800221c <HAL_RCC_OscConfig+0x74>
 800220e:	4b76      	ldr	r3, [pc, #472]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a75      	ldr	r2, [pc, #468]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e01d      	b.n	8002258 <HAL_RCC_OscConfig+0xb0>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002224:	d10c      	bne.n	8002240 <HAL_RCC_OscConfig+0x98>
 8002226:	4b70      	ldr	r3, [pc, #448]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a6f      	ldr	r2, [pc, #444]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 800222c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b6d      	ldr	r3, [pc, #436]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a6c      	ldr	r2, [pc, #432]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 8002238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e00b      	b.n	8002258 <HAL_RCC_OscConfig+0xb0>
 8002240:	4b69      	ldr	r3, [pc, #420]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a68      	ldr	r2, [pc, #416]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 8002246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	4b66      	ldr	r3, [pc, #408]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a65      	ldr	r2, [pc, #404]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 8002252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d013      	beq.n	8002288 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7ff f900 	bl	8001464 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002268:	f7ff f8fc 	bl	8001464 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b64      	cmp	r3, #100	; 0x64
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e207      	b.n	800268a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	4b5b      	ldr	r3, [pc, #364]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0xc0>
 8002286:	e014      	b.n	80022b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff f8ec 	bl	8001464 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002290:	f7ff f8e8 	bl	8001464 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	; 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e1f3      	b.n	800268a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a2:	4b51      	ldr	r3, [pc, #324]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0xe8>
 80022ae:	e000      	b.n	80022b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d063      	beq.n	8002386 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022be:	4b4a      	ldr	r3, [pc, #296]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00b      	beq.n	80022e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ca:	4b47      	ldr	r3, [pc, #284]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d11c      	bne.n	8002310 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022d6:	4b44      	ldr	r3, [pc, #272]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d116      	bne.n	8002310 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	4b41      	ldr	r3, [pc, #260]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_RCC_OscConfig+0x152>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d001      	beq.n	80022fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e1c7      	b.n	800268a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fa:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4937      	ldr	r1, [pc, #220]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230e:	e03a      	b.n	8002386 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d020      	beq.n	800235a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002318:	4b34      	ldr	r3, [pc, #208]	; (80023ec <HAL_RCC_OscConfig+0x244>)
 800231a:	2201      	movs	r2, #1
 800231c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231e:	f7ff f8a1 	bl	8001464 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002326:	f7ff f89d 	bl	8001464 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e1a8      	b.n	800268a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002338:	4b2b      	ldr	r3, [pc, #172]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002344:	4b28      	ldr	r3, [pc, #160]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4925      	ldr	r1, [pc, #148]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 8002354:	4313      	orrs	r3, r2
 8002356:	600b      	str	r3, [r1, #0]
 8002358:	e015      	b.n	8002386 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800235a:	4b24      	ldr	r3, [pc, #144]	; (80023ec <HAL_RCC_OscConfig+0x244>)
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7ff f880 	bl	8001464 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002368:	f7ff f87c 	bl	8001464 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e187      	b.n	800268a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237a:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d036      	beq.n	8002400 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d016      	beq.n	80023c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800239a:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <HAL_RCC_OscConfig+0x248>)
 800239c:	2201      	movs	r2, #1
 800239e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a0:	f7ff f860 	bl	8001464 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023a8:	f7ff f85c 	bl	8001464 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e167      	b.n	800268a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 80023bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x200>
 80023c6:	e01b      	b.n	8002400 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_RCC_OscConfig+0x248>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ce:	f7ff f849 	bl	8001464 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d4:	e00e      	b.n	80023f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023d6:	f7ff f845 	bl	8001464 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d907      	bls.n	80023f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e150      	b.n	800268a <HAL_RCC_OscConfig+0x4e2>
 80023e8:	40023800 	.word	0x40023800
 80023ec:	42470000 	.word	0x42470000
 80023f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f4:	4b88      	ldr	r3, [pc, #544]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 80023f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1ea      	bne.n	80023d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 8097 	beq.w	800253c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800240e:	2300      	movs	r3, #0
 8002410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002412:	4b81      	ldr	r3, [pc, #516]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10f      	bne.n	800243e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	4b7d      	ldr	r3, [pc, #500]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	4a7c      	ldr	r2, [pc, #496]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 8002428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242c:	6413      	str	r3, [r2, #64]	; 0x40
 800242e:	4b7a      	ldr	r3, [pc, #488]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800243a:	2301      	movs	r3, #1
 800243c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243e:	4b77      	ldr	r3, [pc, #476]	; (800261c <HAL_RCC_OscConfig+0x474>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d118      	bne.n	800247c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800244a:	4b74      	ldr	r3, [pc, #464]	; (800261c <HAL_RCC_OscConfig+0x474>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a73      	ldr	r2, [pc, #460]	; (800261c <HAL_RCC_OscConfig+0x474>)
 8002450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002456:	f7ff f805 	bl	8001464 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245e:	f7ff f801 	bl	8001464 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e10c      	b.n	800268a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002470:	4b6a      	ldr	r3, [pc, #424]	; (800261c <HAL_RCC_OscConfig+0x474>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d106      	bne.n	8002492 <HAL_RCC_OscConfig+0x2ea>
 8002484:	4b64      	ldr	r3, [pc, #400]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 8002486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002488:	4a63      	ldr	r2, [pc, #396]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6713      	str	r3, [r2, #112]	; 0x70
 8002490:	e01c      	b.n	80024cc <HAL_RCC_OscConfig+0x324>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b05      	cmp	r3, #5
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x30c>
 800249a:	4b5f      	ldr	r3, [pc, #380]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 800249c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249e:	4a5e      	ldr	r2, [pc, #376]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	6713      	str	r3, [r2, #112]	; 0x70
 80024a6:	4b5c      	ldr	r3, [pc, #368]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 80024a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024aa:	4a5b      	ldr	r2, [pc, #364]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6713      	str	r3, [r2, #112]	; 0x70
 80024b2:	e00b      	b.n	80024cc <HAL_RCC_OscConfig+0x324>
 80024b4:	4b58      	ldr	r3, [pc, #352]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	4a57      	ldr	r2, [pc, #348]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 80024ba:	f023 0301 	bic.w	r3, r3, #1
 80024be:	6713      	str	r3, [r2, #112]	; 0x70
 80024c0:	4b55      	ldr	r3, [pc, #340]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 80024c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c4:	4a54      	ldr	r2, [pc, #336]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 80024c6:	f023 0304 	bic.w	r3, r3, #4
 80024ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d015      	beq.n	8002500 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d4:	f7fe ffc6 	bl	8001464 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024dc:	f7fe ffc2 	bl	8001464 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e0cb      	b.n	800268a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f2:	4b49      	ldr	r3, [pc, #292]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0ee      	beq.n	80024dc <HAL_RCC_OscConfig+0x334>
 80024fe:	e014      	b.n	800252a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002500:	f7fe ffb0 	bl	8001464 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002506:	e00a      	b.n	800251e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002508:	f7fe ffac 	bl	8001464 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	f241 3288 	movw	r2, #5000	; 0x1388
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e0b5      	b.n	800268a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800251e:	4b3e      	ldr	r3, [pc, #248]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 8002520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1ee      	bne.n	8002508 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800252a:	7dfb      	ldrb	r3, [r7, #23]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d105      	bne.n	800253c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002530:	4b39      	ldr	r3, [pc, #228]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	4a38      	ldr	r2, [pc, #224]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 8002536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800253a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80a1 	beq.w	8002688 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002546:	4b34      	ldr	r3, [pc, #208]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b08      	cmp	r3, #8
 8002550:	d05c      	beq.n	800260c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d141      	bne.n	80025de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255a:	4b31      	ldr	r3, [pc, #196]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fe ff80 	bl	8001464 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002568:	f7fe ff7c 	bl	8001464 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e087      	b.n	800268a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257a:	4b27      	ldr	r3, [pc, #156]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69da      	ldr	r2, [r3, #28]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	019b      	lsls	r3, r3, #6
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	085b      	lsrs	r3, r3, #1
 800259e:	3b01      	subs	r3, #1
 80025a0:	041b      	lsls	r3, r3, #16
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a8:	061b      	lsls	r3, r3, #24
 80025aa:	491b      	ldr	r1, [pc, #108]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b0:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b6:	f7fe ff55 	bl	8001464 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025be:	f7fe ff51 	bl	8001464 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e05c      	b.n	800268a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d0:	4b11      	ldr	r3, [pc, #68]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x416>
 80025dc:	e054      	b.n	8002688 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7fe ff3e 	bl	8001464 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ec:	f7fe ff3a 	bl	8001464 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e045      	b.n	800268a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_RCC_OscConfig+0x470>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x444>
 800260a:	e03d      	b.n	8002688 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d107      	bne.n	8002624 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e038      	b.n	800268a <HAL_RCC_OscConfig+0x4e2>
 8002618:	40023800 	.word	0x40023800
 800261c:	40007000 	.word	0x40007000
 8002620:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002624:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <HAL_RCC_OscConfig+0x4ec>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d028      	beq.n	8002684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800263c:	429a      	cmp	r2, r3
 800263e:	d121      	bne.n	8002684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264a:	429a      	cmp	r2, r3
 800264c:	d11a      	bne.n	8002684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002654:	4013      	ands	r3, r2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800265a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800265c:	4293      	cmp	r3, r2
 800265e:	d111      	bne.n	8002684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266a:	085b      	lsrs	r3, r3, #1
 800266c:	3b01      	subs	r3, #1
 800266e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002670:	429a      	cmp	r2, r3
 8002672:	d107      	bne.n	8002684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800

08002698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0cc      	b.n	8002846 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026ac:	4b68      	ldr	r3, [pc, #416]	; (8002850 <HAL_RCC_ClockConfig+0x1b8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d90c      	bls.n	80026d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ba:	4b65      	ldr	r3, [pc, #404]	; (8002850 <HAL_RCC_ClockConfig+0x1b8>)
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c2:	4b63      	ldr	r3, [pc, #396]	; (8002850 <HAL_RCC_ClockConfig+0x1b8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0b8      	b.n	8002846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d020      	beq.n	8002722 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026ec:	4b59      	ldr	r3, [pc, #356]	; (8002854 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	4a58      	ldr	r2, [pc, #352]	; (8002854 <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002704:	4b53      	ldr	r3, [pc, #332]	; (8002854 <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	4a52      	ldr	r2, [pc, #328]	; (8002854 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800270e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002710:	4b50      	ldr	r3, [pc, #320]	; (8002854 <HAL_RCC_ClockConfig+0x1bc>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	494d      	ldr	r1, [pc, #308]	; (8002854 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	4313      	orrs	r3, r2
 8002720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d044      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d107      	bne.n	8002746 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002736:	4b47      	ldr	r3, [pc, #284]	; (8002854 <HAL_RCC_ClockConfig+0x1bc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d119      	bne.n	8002776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e07f      	b.n	8002846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d003      	beq.n	8002756 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002752:	2b03      	cmp	r3, #3
 8002754:	d107      	bne.n	8002766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002756:	4b3f      	ldr	r3, [pc, #252]	; (8002854 <HAL_RCC_ClockConfig+0x1bc>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d109      	bne.n	8002776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e06f      	b.n	8002846 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002766:	4b3b      	ldr	r3, [pc, #236]	; (8002854 <HAL_RCC_ClockConfig+0x1bc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e067      	b.n	8002846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002776:	4b37      	ldr	r3, [pc, #220]	; (8002854 <HAL_RCC_ClockConfig+0x1bc>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f023 0203 	bic.w	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4934      	ldr	r1, [pc, #208]	; (8002854 <HAL_RCC_ClockConfig+0x1bc>)
 8002784:	4313      	orrs	r3, r2
 8002786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002788:	f7fe fe6c 	bl	8001464 <HAL_GetTick>
 800278c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278e:	e00a      	b.n	80027a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002790:	f7fe fe68 	bl	8001464 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	; 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e04f      	b.n	8002846 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a6:	4b2b      	ldr	r3, [pc, #172]	; (8002854 <HAL_RCC_ClockConfig+0x1bc>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 020c 	and.w	r2, r3, #12
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d1eb      	bne.n	8002790 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027b8:	4b25      	ldr	r3, [pc, #148]	; (8002850 <HAL_RCC_ClockConfig+0x1b8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d20c      	bcs.n	80027e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c6:	4b22      	ldr	r3, [pc, #136]	; (8002850 <HAL_RCC_ClockConfig+0x1b8>)
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ce:	4b20      	ldr	r3, [pc, #128]	; (8002850 <HAL_RCC_ClockConfig+0x1b8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d001      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e032      	b.n	8002846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d008      	beq.n	80027fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	4916      	ldr	r1, [pc, #88]	; (8002854 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d009      	beq.n	800281e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800280a:	4b12      	ldr	r3, [pc, #72]	; (8002854 <HAL_RCC_ClockConfig+0x1bc>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	490e      	ldr	r1, [pc, #56]	; (8002854 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	4313      	orrs	r3, r2
 800281c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800281e:	f000 f821 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 8002822:	4602      	mov	r2, r0
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	490a      	ldr	r1, [pc, #40]	; (8002858 <HAL_RCC_ClockConfig+0x1c0>)
 8002830:	5ccb      	ldrb	r3, [r1, r3]
 8002832:	fa22 f303 	lsr.w	r3, r2, r3
 8002836:	4a09      	ldr	r2, [pc, #36]	; (800285c <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800283a:	4b09      	ldr	r3, [pc, #36]	; (8002860 <HAL_RCC_ClockConfig+0x1c8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe f98a 	bl	8000b58 <HAL_InitTick>

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40023c00 	.word	0x40023c00
 8002854:	40023800 	.word	0x40023800
 8002858:	08007f88 	.word	0x08007f88
 800285c:	20000004 	.word	0x20000004
 8002860:	20000008 	.word	0x20000008

08002864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002868:	b090      	sub	sp, #64	; 0x40
 800286a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	637b      	str	r3, [r7, #52]	; 0x34
 8002870:	2300      	movs	r3, #0
 8002872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002874:	2300      	movs	r3, #0
 8002876:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800287c:	4b59      	ldr	r3, [pc, #356]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 030c 	and.w	r3, r3, #12
 8002884:	2b08      	cmp	r3, #8
 8002886:	d00d      	beq.n	80028a4 <HAL_RCC_GetSysClockFreq+0x40>
 8002888:	2b08      	cmp	r3, #8
 800288a:	f200 80a1 	bhi.w	80029d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0x34>
 8002892:	2b04      	cmp	r3, #4
 8002894:	d003      	beq.n	800289e <HAL_RCC_GetSysClockFreq+0x3a>
 8002896:	e09b      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002898:	4b53      	ldr	r3, [pc, #332]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800289a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800289c:	e09b      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800289e:	4b53      	ldr	r3, [pc, #332]	; (80029ec <HAL_RCC_GetSysClockFreq+0x188>)
 80028a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028a2:	e098      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028a4:	4b4f      	ldr	r3, [pc, #316]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028ae:	4b4d      	ldr	r3, [pc, #308]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d028      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ba:	4b4a      	ldr	r3, [pc, #296]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	099b      	lsrs	r3, r3, #6
 80028c0:	2200      	movs	r2, #0
 80028c2:	623b      	str	r3, [r7, #32]
 80028c4:	627a      	str	r2, [r7, #36]	; 0x24
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80028cc:	2100      	movs	r1, #0
 80028ce:	4b47      	ldr	r3, [pc, #284]	; (80029ec <HAL_RCC_GetSysClockFreq+0x188>)
 80028d0:	fb03 f201 	mul.w	r2, r3, r1
 80028d4:	2300      	movs	r3, #0
 80028d6:	fb00 f303 	mul.w	r3, r0, r3
 80028da:	4413      	add	r3, r2
 80028dc:	4a43      	ldr	r2, [pc, #268]	; (80029ec <HAL_RCC_GetSysClockFreq+0x188>)
 80028de:	fba0 1202 	umull	r1, r2, r0, r2
 80028e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028e4:	460a      	mov	r2, r1
 80028e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80028e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ea:	4413      	add	r3, r2
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f0:	2200      	movs	r2, #0
 80028f2:	61bb      	str	r3, [r7, #24]
 80028f4:	61fa      	str	r2, [r7, #28]
 80028f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80028fe:	f7fd fccf 	bl	80002a0 <__aeabi_uldivmod>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4613      	mov	r3, r2
 8002908:	63fb      	str	r3, [r7, #60]	; 0x3c
 800290a:	e053      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800290c:	4b35      	ldr	r3, [pc, #212]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	099b      	lsrs	r3, r3, #6
 8002912:	2200      	movs	r2, #0
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	617a      	str	r2, [r7, #20]
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800291e:	f04f 0b00 	mov.w	fp, #0
 8002922:	4652      	mov	r2, sl
 8002924:	465b      	mov	r3, fp
 8002926:	f04f 0000 	mov.w	r0, #0
 800292a:	f04f 0100 	mov.w	r1, #0
 800292e:	0159      	lsls	r1, r3, #5
 8002930:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002934:	0150      	lsls	r0, r2, #5
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	ebb2 080a 	subs.w	r8, r2, sl
 800293e:	eb63 090b 	sbc.w	r9, r3, fp
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800294e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002952:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002956:	ebb2 0408 	subs.w	r4, r2, r8
 800295a:	eb63 0509 	sbc.w	r5, r3, r9
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	00eb      	lsls	r3, r5, #3
 8002968:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800296c:	00e2      	lsls	r2, r4, #3
 800296e:	4614      	mov	r4, r2
 8002970:	461d      	mov	r5, r3
 8002972:	eb14 030a 	adds.w	r3, r4, sl
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	eb45 030b 	adc.w	r3, r5, fp
 800297c:	607b      	str	r3, [r7, #4]
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	e9d7 4500 	ldrd	r4, r5, [r7]
 800298a:	4629      	mov	r1, r5
 800298c:	028b      	lsls	r3, r1, #10
 800298e:	4621      	mov	r1, r4
 8002990:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002994:	4621      	mov	r1, r4
 8002996:	028a      	lsls	r2, r1, #10
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299e:	2200      	movs	r2, #0
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	60fa      	str	r2, [r7, #12]
 80029a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029a8:	f7fd fc7a 	bl	80002a0 <__aeabi_uldivmod>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4613      	mov	r3, r2
 80029b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	0c1b      	lsrs	r3, r3, #16
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	3301      	adds	r3, #1
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80029c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029ce:	e002      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80029d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3740      	adds	r7, #64	; 0x40
 80029dc:	46bd      	mov	sp, r7
 80029de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029e2:	bf00      	nop
 80029e4:	40023800 	.word	0x40023800
 80029e8:	00f42400 	.word	0x00f42400
 80029ec:	017d7840 	.word	0x017d7840

080029f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000004 	.word	0x20000004

08002a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a0c:	f7ff fff0 	bl	80029f0 <HAL_RCC_GetHCLKFreq>
 8002a10:	4602      	mov	r2, r0
 8002a12:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	0a9b      	lsrs	r3, r3, #10
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	4903      	ldr	r1, [pc, #12]	; (8002a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a1e:	5ccb      	ldrb	r3, [r1, r3]
 8002a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	08007f98 	.word	0x08007f98

08002a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a34:	f7ff ffdc 	bl	80029f0 <HAL_RCC_GetHCLKFreq>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	0b5b      	lsrs	r3, r3, #13
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	4903      	ldr	r1, [pc, #12]	; (8002a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a46:	5ccb      	ldrb	r3, [r1, r3]
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40023800 	.word	0x40023800
 8002a54:	08007f98 	.word	0x08007f98

08002a58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	220f      	movs	r2, #15
 8002a66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a68:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0203 	and.w	r2, r3, #3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a74:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a8c:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	08db      	lsrs	r3, r3, #3
 8002a92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a9a:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <HAL_RCC_GetClockConfig+0x60>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 020f 	and.w	r2, r3, #15
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	601a      	str	r2, [r3, #0]
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	40023c00 	.word	0x40023c00

08002abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e041      	b.n	8002b52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fe fa96 	bl	8001014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3304      	adds	r3, #4
 8002af8:	4619      	mov	r1, r3
 8002afa:	4610      	mov	r0, r2
 8002afc:	f000 fc7a 	bl	80033f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d001      	beq.n	8002b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e04e      	b.n	8002c12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a23      	ldr	r2, [pc, #140]	; (8002c20 <HAL_TIM_Base_Start_IT+0xc4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d022      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9e:	d01d      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1f      	ldr	r2, [pc, #124]	; (8002c24 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d018      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1e      	ldr	r2, [pc, #120]	; (8002c28 <HAL_TIM_Base_Start_IT+0xcc>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d013      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1c      	ldr	r2, [pc, #112]	; (8002c2c <HAL_TIM_Base_Start_IT+0xd0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00e      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1b      	ldr	r2, [pc, #108]	; (8002c30 <HAL_TIM_Base_Start_IT+0xd4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d009      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a19      	ldr	r2, [pc, #100]	; (8002c34 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d004      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a18      	ldr	r2, [pc, #96]	; (8002c38 <HAL_TIM_Base_Start_IT+0xdc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d111      	bne.n	8002c00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b06      	cmp	r3, #6
 8002bec:	d010      	beq.n	8002c10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0201 	orr.w	r2, r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfe:	e007      	b.n	8002c10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40010000 	.word	0x40010000
 8002c24:	40000400 	.word	0x40000400
 8002c28:	40000800 	.word	0x40000800
 8002c2c:	40000c00 	.word	0x40000c00
 8002c30:	40010400 	.word	0x40010400
 8002c34:	40014000 	.word	0x40014000
 8002c38:	40001800 	.word	0x40001800

08002c3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e041      	b.n	8002cd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f839 	bl	8002cda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3304      	adds	r3, #4
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	f000 fbba 	bl	80033f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d109      	bne.n	8002d14 <HAL_TIM_PWM_Start+0x24>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	bf14      	ite	ne
 8002d0c:	2301      	movne	r3, #1
 8002d0e:	2300      	moveq	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	e022      	b.n	8002d5a <HAL_TIM_PWM_Start+0x6a>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d109      	bne.n	8002d2e <HAL_TIM_PWM_Start+0x3e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	bf14      	ite	ne
 8002d26:	2301      	movne	r3, #1
 8002d28:	2300      	moveq	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	e015      	b.n	8002d5a <HAL_TIM_PWM_Start+0x6a>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d109      	bne.n	8002d48 <HAL_TIM_PWM_Start+0x58>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	bf14      	ite	ne
 8002d40:	2301      	movne	r3, #1
 8002d42:	2300      	moveq	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	e008      	b.n	8002d5a <HAL_TIM_PWM_Start+0x6a>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	bf14      	ite	ne
 8002d54:	2301      	movne	r3, #1
 8002d56:	2300      	moveq	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e07c      	b.n	8002e5c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d104      	bne.n	8002d72 <HAL_TIM_PWM_Start+0x82>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d70:	e013      	b.n	8002d9a <HAL_TIM_PWM_Start+0xaa>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d104      	bne.n	8002d82 <HAL_TIM_PWM_Start+0x92>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d80:	e00b      	b.n	8002d9a <HAL_TIM_PWM_Start+0xaa>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d104      	bne.n	8002d92 <HAL_TIM_PWM_Start+0xa2>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d90:	e003      	b.n	8002d9a <HAL_TIM_PWM_Start+0xaa>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2202      	movs	r2, #2
 8002d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	6839      	ldr	r1, [r7, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fe10 	bl	80039c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a2d      	ldr	r2, [pc, #180]	; (8002e64 <HAL_TIM_PWM_Start+0x174>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d004      	beq.n	8002dbc <HAL_TIM_PWM_Start+0xcc>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a2c      	ldr	r2, [pc, #176]	; (8002e68 <HAL_TIM_PWM_Start+0x178>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d101      	bne.n	8002dc0 <HAL_TIM_PWM_Start+0xd0>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <HAL_TIM_PWM_Start+0xd2>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d007      	beq.n	8002dd6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a22      	ldr	r2, [pc, #136]	; (8002e64 <HAL_TIM_PWM_Start+0x174>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d022      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x136>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de8:	d01d      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x136>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a1f      	ldr	r2, [pc, #124]	; (8002e6c <HAL_TIM_PWM_Start+0x17c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d018      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x136>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a1d      	ldr	r2, [pc, #116]	; (8002e70 <HAL_TIM_PWM_Start+0x180>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d013      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x136>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a1c      	ldr	r2, [pc, #112]	; (8002e74 <HAL_TIM_PWM_Start+0x184>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00e      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x136>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a16      	ldr	r2, [pc, #88]	; (8002e68 <HAL_TIM_PWM_Start+0x178>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d009      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x136>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a18      	ldr	r2, [pc, #96]	; (8002e78 <HAL_TIM_PWM_Start+0x188>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d004      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x136>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a16      	ldr	r2, [pc, #88]	; (8002e7c <HAL_TIM_PWM_Start+0x18c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d111      	bne.n	8002e4a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2b06      	cmp	r3, #6
 8002e36:	d010      	beq.n	8002e5a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e48:	e007      	b.n	8002e5a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0201 	orr.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40010000 	.word	0x40010000
 8002e68:	40010400 	.word	0x40010400
 8002e6c:	40000400 	.word	0x40000400
 8002e70:	40000800 	.word	0x40000800
 8002e74:	40000c00 	.word	0x40000c00
 8002e78:	40014000 	.word	0x40014000
 8002e7c:	40001800 	.word	0x40001800

08002e80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d122      	bne.n	8002edc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d11b      	bne.n	8002edc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 0202 	mvn.w	r2, #2
 8002eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 fa77 	bl	80033b6 <HAL_TIM_IC_CaptureCallback>
 8002ec8:	e005      	b.n	8002ed6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fa69 	bl	80033a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 fa7a 	bl	80033ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d122      	bne.n	8002f30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d11b      	bne.n	8002f30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f06f 0204 	mvn.w	r2, #4
 8002f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2202      	movs	r2, #2
 8002f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fa4d 	bl	80033b6 <HAL_TIM_IC_CaptureCallback>
 8002f1c:	e005      	b.n	8002f2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fa3f 	bl	80033a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 fa50 	bl	80033ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d122      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d11b      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f06f 0208 	mvn.w	r2, #8
 8002f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2204      	movs	r2, #4
 8002f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 fa23 	bl	80033b6 <HAL_TIM_IC_CaptureCallback>
 8002f70:	e005      	b.n	8002f7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fa15 	bl	80033a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 fa26 	bl	80033ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	2b10      	cmp	r3, #16
 8002f90:	d122      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b10      	cmp	r3, #16
 8002f9e:	d11b      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0210 	mvn.w	r2, #16
 8002fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2208      	movs	r2, #8
 8002fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f9f9 	bl	80033b6 <HAL_TIM_IC_CaptureCallback>
 8002fc4:	e005      	b.n	8002fd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f9eb 	bl	80033a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f9fc 	bl	80033ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d10e      	bne.n	8003004 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d107      	bne.n	8003004 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0201 	mvn.w	r2, #1
 8002ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fd fd66 	bl	8000ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300e:	2b80      	cmp	r3, #128	; 0x80
 8003010:	d10e      	bne.n	8003030 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301c:	2b80      	cmp	r3, #128	; 0x80
 800301e:	d107      	bne.n	8003030 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fd78 	bl	8003b20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303a:	2b40      	cmp	r3, #64	; 0x40
 800303c:	d10e      	bne.n	800305c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003048:	2b40      	cmp	r3, #64	; 0x40
 800304a:	d107      	bne.n	800305c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f9c1 	bl	80033de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b20      	cmp	r3, #32
 8003068:	d10e      	bne.n	8003088 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b20      	cmp	r3, #32
 8003076:	d107      	bne.n	8003088 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0220 	mvn.w	r2, #32
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fd42 	bl	8003b0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030aa:	2302      	movs	r3, #2
 80030ac:	e0ae      	b.n	800320c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b0c      	cmp	r3, #12
 80030ba:	f200 809f 	bhi.w	80031fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030be:	a201      	add	r2, pc, #4	; (adr r2, 80030c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c4:	080030f9 	.word	0x080030f9
 80030c8:	080031fd 	.word	0x080031fd
 80030cc:	080031fd 	.word	0x080031fd
 80030d0:	080031fd 	.word	0x080031fd
 80030d4:	08003139 	.word	0x08003139
 80030d8:	080031fd 	.word	0x080031fd
 80030dc:	080031fd 	.word	0x080031fd
 80030e0:	080031fd 	.word	0x080031fd
 80030e4:	0800317b 	.word	0x0800317b
 80030e8:	080031fd 	.word	0x080031fd
 80030ec:	080031fd 	.word	0x080031fd
 80030f0:	080031fd 	.word	0x080031fd
 80030f4:	080031bb 	.word	0x080031bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68b9      	ldr	r1, [r7, #8]
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fa18 	bl	8003534 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699a      	ldr	r2, [r3, #24]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0208 	orr.w	r2, r2, #8
 8003112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0204 	bic.w	r2, r2, #4
 8003122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6999      	ldr	r1, [r3, #24]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	691a      	ldr	r2, [r3, #16]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	619a      	str	r2, [r3, #24]
      break;
 8003136:	e064      	b.n	8003202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fa68 	bl	8003614 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6999      	ldr	r1, [r3, #24]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	021a      	lsls	r2, r3, #8
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	619a      	str	r2, [r3, #24]
      break;
 8003178:	e043      	b.n	8003202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68b9      	ldr	r1, [r7, #8]
 8003180:	4618      	mov	r0, r3
 8003182:	f000 fabd 	bl	8003700 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69da      	ldr	r2, [r3, #28]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0208 	orr.w	r2, r2, #8
 8003194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69da      	ldr	r2, [r3, #28]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0204 	bic.w	r2, r2, #4
 80031a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69d9      	ldr	r1, [r3, #28]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	61da      	str	r2, [r3, #28]
      break;
 80031b8:	e023      	b.n	8003202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fb11 	bl	80037e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69da      	ldr	r2, [r3, #28]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69da      	ldr	r2, [r3, #28]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	69d9      	ldr	r1, [r3, #28]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	021a      	lsls	r2, r3, #8
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	61da      	str	r2, [r3, #28]
      break;
 80031fa:	e002      	b.n	8003202 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003200:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800320a:	7dfb      	ldrb	r3, [r7, #23]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_TIM_ConfigClockSource+0x1c>
 800322c:	2302      	movs	r3, #2
 800322e:	e0b4      	b.n	800339a <HAL_TIM_ConfigClockSource+0x186>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800324e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003256:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003268:	d03e      	beq.n	80032e8 <HAL_TIM_ConfigClockSource+0xd4>
 800326a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800326e:	f200 8087 	bhi.w	8003380 <HAL_TIM_ConfigClockSource+0x16c>
 8003272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003276:	f000 8086 	beq.w	8003386 <HAL_TIM_ConfigClockSource+0x172>
 800327a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327e:	d87f      	bhi.n	8003380 <HAL_TIM_ConfigClockSource+0x16c>
 8003280:	2b70      	cmp	r3, #112	; 0x70
 8003282:	d01a      	beq.n	80032ba <HAL_TIM_ConfigClockSource+0xa6>
 8003284:	2b70      	cmp	r3, #112	; 0x70
 8003286:	d87b      	bhi.n	8003380 <HAL_TIM_ConfigClockSource+0x16c>
 8003288:	2b60      	cmp	r3, #96	; 0x60
 800328a:	d050      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x11a>
 800328c:	2b60      	cmp	r3, #96	; 0x60
 800328e:	d877      	bhi.n	8003380 <HAL_TIM_ConfigClockSource+0x16c>
 8003290:	2b50      	cmp	r3, #80	; 0x50
 8003292:	d03c      	beq.n	800330e <HAL_TIM_ConfigClockSource+0xfa>
 8003294:	2b50      	cmp	r3, #80	; 0x50
 8003296:	d873      	bhi.n	8003380 <HAL_TIM_ConfigClockSource+0x16c>
 8003298:	2b40      	cmp	r3, #64	; 0x40
 800329a:	d058      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x13a>
 800329c:	2b40      	cmp	r3, #64	; 0x40
 800329e:	d86f      	bhi.n	8003380 <HAL_TIM_ConfigClockSource+0x16c>
 80032a0:	2b30      	cmp	r3, #48	; 0x30
 80032a2:	d064      	beq.n	800336e <HAL_TIM_ConfigClockSource+0x15a>
 80032a4:	2b30      	cmp	r3, #48	; 0x30
 80032a6:	d86b      	bhi.n	8003380 <HAL_TIM_ConfigClockSource+0x16c>
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d060      	beq.n	800336e <HAL_TIM_ConfigClockSource+0x15a>
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	d867      	bhi.n	8003380 <HAL_TIM_ConfigClockSource+0x16c>
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d05c      	beq.n	800336e <HAL_TIM_ConfigClockSource+0x15a>
 80032b4:	2b10      	cmp	r3, #16
 80032b6:	d05a      	beq.n	800336e <HAL_TIM_ConfigClockSource+0x15a>
 80032b8:	e062      	b.n	8003380 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	6899      	ldr	r1, [r3, #8]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f000 fb5d 	bl	8003988 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	609a      	str	r2, [r3, #8]
      break;
 80032e6:	e04f      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	6899      	ldr	r1, [r3, #8]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f000 fb46 	bl	8003988 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800330a:	609a      	str	r2, [r3, #8]
      break;
 800330c:	e03c      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6859      	ldr	r1, [r3, #4]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	461a      	mov	r2, r3
 800331c:	f000 faba 	bl	8003894 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2150      	movs	r1, #80	; 0x50
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fb13 	bl	8003952 <TIM_ITRx_SetConfig>
      break;
 800332c:	e02c      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	6859      	ldr	r1, [r3, #4]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	461a      	mov	r2, r3
 800333c:	f000 fad9 	bl	80038f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2160      	movs	r1, #96	; 0x60
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fb03 	bl	8003952 <TIM_ITRx_SetConfig>
      break;
 800334c:	e01c      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	6859      	ldr	r1, [r3, #4]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	461a      	mov	r2, r3
 800335c:	f000 fa9a 	bl	8003894 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2140      	movs	r1, #64	; 0x40
 8003366:	4618      	mov	r0, r3
 8003368:	f000 faf3 	bl	8003952 <TIM_ITRx_SetConfig>
      break;
 800336c:	e00c      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4619      	mov	r1, r3
 8003378:	4610      	mov	r0, r2
 800337a:	f000 faea 	bl	8003952 <TIM_ITRx_SetConfig>
      break;
 800337e:	e003      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	73fb      	strb	r3, [r7, #15]
      break;
 8003384:	e000      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003386:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003398:	7bfb      	ldrb	r3, [r7, #15]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
	...

080033f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a40      	ldr	r2, [pc, #256]	; (8003508 <TIM_Base_SetConfig+0x114>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d013      	beq.n	8003434 <TIM_Base_SetConfig+0x40>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003412:	d00f      	beq.n	8003434 <TIM_Base_SetConfig+0x40>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a3d      	ldr	r2, [pc, #244]	; (800350c <TIM_Base_SetConfig+0x118>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00b      	beq.n	8003434 <TIM_Base_SetConfig+0x40>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a3c      	ldr	r2, [pc, #240]	; (8003510 <TIM_Base_SetConfig+0x11c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d007      	beq.n	8003434 <TIM_Base_SetConfig+0x40>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a3b      	ldr	r2, [pc, #236]	; (8003514 <TIM_Base_SetConfig+0x120>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d003      	beq.n	8003434 <TIM_Base_SetConfig+0x40>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a3a      	ldr	r2, [pc, #232]	; (8003518 <TIM_Base_SetConfig+0x124>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d108      	bne.n	8003446 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a2f      	ldr	r2, [pc, #188]	; (8003508 <TIM_Base_SetConfig+0x114>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d02b      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003454:	d027      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a2c      	ldr	r2, [pc, #176]	; (800350c <TIM_Base_SetConfig+0x118>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d023      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a2b      	ldr	r2, [pc, #172]	; (8003510 <TIM_Base_SetConfig+0x11c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d01f      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a2a      	ldr	r2, [pc, #168]	; (8003514 <TIM_Base_SetConfig+0x120>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d01b      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a29      	ldr	r2, [pc, #164]	; (8003518 <TIM_Base_SetConfig+0x124>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d017      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a28      	ldr	r2, [pc, #160]	; (800351c <TIM_Base_SetConfig+0x128>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d013      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a27      	ldr	r2, [pc, #156]	; (8003520 <TIM_Base_SetConfig+0x12c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00f      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a26      	ldr	r2, [pc, #152]	; (8003524 <TIM_Base_SetConfig+0x130>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d00b      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a25      	ldr	r2, [pc, #148]	; (8003528 <TIM_Base_SetConfig+0x134>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d007      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a24      	ldr	r2, [pc, #144]	; (800352c <TIM_Base_SetConfig+0x138>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d003      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a23      	ldr	r2, [pc, #140]	; (8003530 <TIM_Base_SetConfig+0x13c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d108      	bne.n	80034b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a0a      	ldr	r2, [pc, #40]	; (8003508 <TIM_Base_SetConfig+0x114>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d003      	beq.n	80034ec <TIM_Base_SetConfig+0xf8>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a0c      	ldr	r2, [pc, #48]	; (8003518 <TIM_Base_SetConfig+0x124>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d103      	bne.n	80034f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	615a      	str	r2, [r3, #20]
}
 80034fa:	bf00      	nop
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40010000 	.word	0x40010000
 800350c:	40000400 	.word	0x40000400
 8003510:	40000800 	.word	0x40000800
 8003514:	40000c00 	.word	0x40000c00
 8003518:	40010400 	.word	0x40010400
 800351c:	40014000 	.word	0x40014000
 8003520:	40014400 	.word	0x40014400
 8003524:	40014800 	.word	0x40014800
 8003528:	40001800 	.word	0x40001800
 800352c:	40001c00 	.word	0x40001c00
 8003530:	40002000 	.word	0x40002000

08003534 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	f023 0201 	bic.w	r2, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0303 	bic.w	r3, r3, #3
 800356a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f023 0302 	bic.w	r3, r3, #2
 800357c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a20      	ldr	r2, [pc, #128]	; (800360c <TIM_OC1_SetConfig+0xd8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d003      	beq.n	8003598 <TIM_OC1_SetConfig+0x64>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a1f      	ldr	r2, [pc, #124]	; (8003610 <TIM_OC1_SetConfig+0xdc>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d10c      	bne.n	80035b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f023 0308 	bic.w	r3, r3, #8
 800359e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f023 0304 	bic.w	r3, r3, #4
 80035b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a15      	ldr	r2, [pc, #84]	; (800360c <TIM_OC1_SetConfig+0xd8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d003      	beq.n	80035c2 <TIM_OC1_SetConfig+0x8e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a14      	ldr	r2, [pc, #80]	; (8003610 <TIM_OC1_SetConfig+0xdc>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d111      	bne.n	80035e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	621a      	str	r2, [r3, #32]
}
 8003600:	bf00      	nop
 8003602:	371c      	adds	r7, #28
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	40010000 	.word	0x40010000
 8003610:	40010400 	.word	0x40010400

08003614 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	f023 0210 	bic.w	r2, r3, #16
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800364a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	021b      	lsls	r3, r3, #8
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4313      	orrs	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f023 0320 	bic.w	r3, r3, #32
 800365e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	4313      	orrs	r3, r2
 800366a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a22      	ldr	r2, [pc, #136]	; (80036f8 <TIM_OC2_SetConfig+0xe4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d003      	beq.n	800367c <TIM_OC2_SetConfig+0x68>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a21      	ldr	r2, [pc, #132]	; (80036fc <TIM_OC2_SetConfig+0xe8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d10d      	bne.n	8003698 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003696:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a17      	ldr	r2, [pc, #92]	; (80036f8 <TIM_OC2_SetConfig+0xe4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <TIM_OC2_SetConfig+0x94>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a16      	ldr	r2, [pc, #88]	; (80036fc <TIM_OC2_SetConfig+0xe8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d113      	bne.n	80036d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	621a      	str	r2, [r3, #32]
}
 80036ea:	bf00      	nop
 80036ec:	371c      	adds	r7, #28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40010000 	.word	0x40010000
 80036fc:	40010400 	.word	0x40010400

08003700 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0303 	bic.w	r3, r3, #3
 8003736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a21      	ldr	r2, [pc, #132]	; (80037e0 <TIM_OC3_SetConfig+0xe0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d003      	beq.n	8003766 <TIM_OC3_SetConfig+0x66>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a20      	ldr	r2, [pc, #128]	; (80037e4 <TIM_OC3_SetConfig+0xe4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d10d      	bne.n	8003782 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800376c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	021b      	lsls	r3, r3, #8
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a16      	ldr	r2, [pc, #88]	; (80037e0 <TIM_OC3_SetConfig+0xe0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <TIM_OC3_SetConfig+0x92>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a15      	ldr	r2, [pc, #84]	; (80037e4 <TIM_OC3_SetConfig+0xe4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d113      	bne.n	80037ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	621a      	str	r2, [r3, #32]
}
 80037d4:	bf00      	nop
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	40010000 	.word	0x40010000
 80037e4:	40010400 	.word	0x40010400

080037e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	021b      	lsls	r3, r3, #8
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4313      	orrs	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	031b      	lsls	r3, r3, #12
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a12      	ldr	r2, [pc, #72]	; (800388c <TIM_OC4_SetConfig+0xa4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d003      	beq.n	8003850 <TIM_OC4_SetConfig+0x68>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a11      	ldr	r2, [pc, #68]	; (8003890 <TIM_OC4_SetConfig+0xa8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d109      	bne.n	8003864 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003856:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	019b      	lsls	r3, r3, #6
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4313      	orrs	r3, r2
 8003862:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40010000 	.word	0x40010000
 8003890:	40010400 	.word	0x40010400

08003894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	f023 0201 	bic.w	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f023 030a 	bic.w	r3, r3, #10
 80038d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	621a      	str	r2, [r3, #32]
}
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b087      	sub	sp, #28
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f023 0210 	bic.w	r2, r3, #16
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800391c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	031b      	lsls	r3, r3, #12
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4313      	orrs	r3, r2
 8003926:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800392e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	621a      	str	r2, [r3, #32]
}
 8003946:	bf00      	nop
 8003948:	371c      	adds	r7, #28
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003952:	b480      	push	{r7}
 8003954:	b085      	sub	sp, #20
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
 800395a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4313      	orrs	r3, r2
 8003970:	f043 0307 	orr.w	r3, r3, #7
 8003974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	609a      	str	r2, [r3, #8]
}
 800397c:	bf00      	nop
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	021a      	lsls	r2, r3, #8
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	609a      	str	r2, [r3, #8]
}
 80039bc:	bf00      	nop
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f003 031f 	and.w	r3, r3, #31
 80039da:	2201      	movs	r2, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a1a      	ldr	r2, [r3, #32]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	401a      	ands	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a1a      	ldr	r2, [r3, #32]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003a00:	431a      	orrs	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	621a      	str	r2, [r3, #32]
}
 8003a06:	bf00      	nop
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
	...

08003a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e05a      	b.n	8003ae2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a21      	ldr	r2, [pc, #132]	; (8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d022      	beq.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a78:	d01d      	beq.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1d      	ldr	r2, [pc, #116]	; (8003af4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d018      	beq.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a1b      	ldr	r2, [pc, #108]	; (8003af8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a1a      	ldr	r2, [pc, #104]	; (8003afc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00e      	beq.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a18      	ldr	r2, [pc, #96]	; (8003b00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d009      	beq.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a17      	ldr	r2, [pc, #92]	; (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d004      	beq.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a15      	ldr	r2, [pc, #84]	; (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d10c      	bne.n	8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003abc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40010000 	.word	0x40010000
 8003af4:	40000400 	.word	0x40000400
 8003af8:	40000800 	.word	0x40000800
 8003afc:	40000c00 	.word	0x40000c00
 8003b00:	40010400 	.word	0x40010400
 8003b04:	40014000 	.word	0x40014000
 8003b08:	40001800 	.word	0x40001800

08003b0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e03f      	b.n	8003bc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fd fb00 	bl	8001160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2224      	movs	r2, #36	; 0x24
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 fe81 	bl	8004880 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695a      	ldr	r2, [r3, #20]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b08a      	sub	sp, #40	; 0x28
 8003bd2:	af02      	add	r7, sp, #8
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	603b      	str	r3, [r7, #0]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b20      	cmp	r3, #32
 8003bec:	d17c      	bne.n	8003ce8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <HAL_UART_Transmit+0x2c>
 8003bf4:	88fb      	ldrh	r3, [r7, #6]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e075      	b.n	8003cea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_UART_Transmit+0x3e>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e06e      	b.n	8003cea <HAL_UART_Transmit+0x11c>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2221      	movs	r2, #33	; 0x21
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c22:	f7fd fc1f 	bl	8001464 <HAL_GetTick>
 8003c26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	88fa      	ldrh	r2, [r7, #6]
 8003c2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	88fa      	ldrh	r2, [r7, #6]
 8003c32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3c:	d108      	bne.n	8003c50 <HAL_UART_Transmit+0x82>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d104      	bne.n	8003c50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	61bb      	str	r3, [r7, #24]
 8003c4e:	e003      	b.n	8003c58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c54:	2300      	movs	r3, #0
 8003c56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c60:	e02a      	b.n	8003cb8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2180      	movs	r1, #128	; 0x80
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 fbc1 	bl	80043f4 <UART_WaitOnFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e036      	b.n	8003cea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10b      	bne.n	8003c9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	3302      	adds	r3, #2
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	e007      	b.n	8003caa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	781a      	ldrb	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1cf      	bne.n	8003c62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2140      	movs	r1, #64	; 0x40
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 fb91 	bl	80043f4 <UART_WaitOnFlagUntilTimeout>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e006      	b.n	8003cea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e000      	b.n	8003cea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ce8:	2302      	movs	r3, #2
  }
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3720      	adds	r7, #32
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b08a      	sub	sp, #40	; 0x28
 8003cf6:	af02      	add	r7, sp, #8
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	603b      	str	r3, [r7, #0]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	f040 808c 	bne.w	8003e2c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_UART_Receive+0x2e>
 8003d1a:	88fb      	ldrh	r3, [r7, #6]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e084      	b.n	8003e2e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_UART_Receive+0x40>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e07d      	b.n	8003e2e <HAL_UART_Receive+0x13c>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2222      	movs	r2, #34	; 0x22
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d4e:	f7fd fb89 	bl	8001464 <HAL_GetTick>
 8003d52:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	88fa      	ldrh	r2, [r7, #6]
 8003d58:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	88fa      	ldrh	r2, [r7, #6]
 8003d5e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d68:	d108      	bne.n	8003d7c <HAL_UART_Receive+0x8a>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d104      	bne.n	8003d7c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	e003      	b.n	8003d84 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003d8c:	e043      	b.n	8003e16 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2200      	movs	r2, #0
 8003d96:	2120      	movs	r1, #32
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 fb2b 	bl	80043f4 <UART_WaitOnFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e042      	b.n	8003e2e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10c      	bne.n	8003dc8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	3302      	adds	r3, #2
 8003dc4:	61bb      	str	r3, [r7, #24]
 8003dc6:	e01f      	b.n	8003e08 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd0:	d007      	beq.n	8003de2 <HAL_UART_Receive+0xf0>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10a      	bne.n	8003df0 <HAL_UART_Receive+0xfe>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d106      	bne.n	8003df0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	701a      	strb	r2, [r3, #0]
 8003dee:	e008      	b.n	8003e02 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	3301      	adds	r3, #1
 8003e06:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1b6      	bne.n	8003d8e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	e000      	b.n	8003e2e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003e2c:	2302      	movs	r3, #2
  }
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b084      	sub	sp, #16
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	4613      	mov	r3, r2
 8003e42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d11d      	bne.n	8003e8c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <HAL_UART_Receive_IT+0x26>
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e016      	b.n	8003e8e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d101      	bne.n	8003e6e <HAL_UART_Receive_IT+0x38>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	e00f      	b.n	8003e8e <HAL_UART_Receive_IT+0x58>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e7c:	88fb      	ldrh	r3, [r7, #6]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	68b9      	ldr	r1, [r7, #8]
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 fb24 	bl	80044d0 <UART_Start_Receive_IT>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	e000      	b.n	8003e8e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e8c:	2302      	movs	r3, #2
  }
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b0ba      	sub	sp, #232	; 0xe8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ed6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10f      	bne.n	8003efe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <HAL_UART_IRQHandler+0x66>
 8003eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eee:	f003 0320 	and.w	r3, r3, #32
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fc07 	bl	800470a <UART_Receive_IT>
      return;
 8003efc:	e256      	b.n	80043ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003efe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80de 	beq.w	80040c4 <HAL_UART_IRQHandler+0x22c>
 8003f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d106      	bne.n	8003f22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 80d1 	beq.w	80040c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00b      	beq.n	8003f46 <HAL_UART_IRQHandler+0xae>
 8003f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f043 0201 	orr.w	r2, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <HAL_UART_IRQHandler+0xd2>
 8003f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f043 0202 	orr.w	r2, r3, #2
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00b      	beq.n	8003f8e <HAL_UART_IRQHandler+0xf6>
 8003f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d005      	beq.n	8003f8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f043 0204 	orr.w	r2, r3, #4
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d011      	beq.n	8003fbe <HAL_UART_IRQHandler+0x126>
 8003f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d105      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d005      	beq.n	8003fbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f043 0208 	orr.w	r2, r3, #8
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 81ed 	beq.w	80043a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fcc:	f003 0320 	and.w	r3, r3, #32
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x14e>
 8003fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd8:	f003 0320 	and.w	r3, r3, #32
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fb92 	bl	800470a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff0:	2b40      	cmp	r3, #64	; 0x40
 8003ff2:	bf0c      	ite	eq
 8003ff4:	2301      	moveq	r3, #1
 8003ff6:	2300      	movne	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d103      	bne.n	8004012 <HAL_UART_IRQHandler+0x17a>
 800400a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d04f      	beq.n	80040b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fa9a 	bl	800454c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004022:	2b40      	cmp	r3, #64	; 0x40
 8004024:	d141      	bne.n	80040aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3314      	adds	r3, #20
 800402c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004030:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004034:	e853 3f00 	ldrex	r3, [r3]
 8004038:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800403c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3314      	adds	r3, #20
 800404e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004052:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004056:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800405e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004062:	e841 2300 	strex	r3, r2, [r1]
 8004066:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800406a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1d9      	bne.n	8004026 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	2b00      	cmp	r3, #0
 8004078:	d013      	beq.n	80040a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	4a7d      	ldr	r2, [pc, #500]	; (8004274 <HAL_UART_IRQHandler+0x3dc>)
 8004080:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	4618      	mov	r0, r3
 8004088:	f7fd fbf8 	bl	800187c <HAL_DMA_Abort_IT>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d016      	beq.n	80040c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800409c:	4610      	mov	r0, r2
 800409e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a0:	e00e      	b.n	80040c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f990 	bl	80043c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a8:	e00a      	b.n	80040c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f98c 	bl	80043c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b0:	e006      	b.n	80040c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f988 	bl	80043c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80040be:	e170      	b.n	80043a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c0:	bf00      	nop
    return;
 80040c2:	e16e      	b.n	80043a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	f040 814a 	bne.w	8004362 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040d2:	f003 0310 	and.w	r3, r3, #16
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 8143 	beq.w	8004362 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 813c 	beq.w	8004362 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040ea:	2300      	movs	r3, #0
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410a:	2b40      	cmp	r3, #64	; 0x40
 800410c:	f040 80b4 	bne.w	8004278 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800411c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 8140 	beq.w	80043a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800412a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800412e:	429a      	cmp	r2, r3
 8004130:	f080 8139 	bcs.w	80043a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800413a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004146:	f000 8088 	beq.w	800425a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	330c      	adds	r3, #12
 8004150:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004160:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004168:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	330c      	adds	r3, #12
 8004172:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004176:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800417a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004182:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800418e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1d9      	bne.n	800414a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3314      	adds	r3, #20
 800419c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041a8:	f023 0301 	bic.w	r3, r3, #1
 80041ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3314      	adds	r3, #20
 80041b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80041cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e1      	bne.n	8004196 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3314      	adds	r3, #20
 80041d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3314      	adds	r3, #20
 80041f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e3      	bne.n	80041d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	330c      	adds	r3, #12
 800421e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004222:	e853 3f00 	ldrex	r3, [r3]
 8004226:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800422a:	f023 0310 	bic.w	r3, r3, #16
 800422e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	330c      	adds	r3, #12
 8004238:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800423c:	65ba      	str	r2, [r7, #88]	; 0x58
 800423e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004240:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004242:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004244:	e841 2300 	strex	r3, r2, [r1]
 8004248:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800424a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e3      	bne.n	8004218 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004254:	4618      	mov	r0, r3
 8004256:	f7fd faa1 	bl	800179c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004262:	b29b      	uxth	r3, r3
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	b29b      	uxth	r3, r3
 8004268:	4619      	mov	r1, r3
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f8b6 	bl	80043dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004270:	e099      	b.n	80043a6 <HAL_UART_IRQHandler+0x50e>
 8004272:	bf00      	nop
 8004274:	08004613 	.word	0x08004613
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004280:	b29b      	uxth	r3, r3
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 808b 	beq.w	80043aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004294:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 8086 	beq.w	80043aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	330c      	adds	r3, #12
 80042a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	330c      	adds	r3, #12
 80042be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80042c2:	647a      	str	r2, [r7, #68]	; 0x44
 80042c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1e3      	bne.n	800429e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3314      	adds	r3, #20
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	623b      	str	r3, [r7, #32]
   return(result);
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	f023 0301 	bic.w	r3, r3, #1
 80042ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3314      	adds	r3, #20
 80042f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042fa:	633a      	str	r2, [r7, #48]	; 0x30
 80042fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004302:	e841 2300 	strex	r3, r2, [r1]
 8004306:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1e3      	bne.n	80042d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2220      	movs	r2, #32
 8004312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	330c      	adds	r3, #12
 8004322:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	e853 3f00 	ldrex	r3, [r3]
 800432a:	60fb      	str	r3, [r7, #12]
   return(result);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0310 	bic.w	r3, r3, #16
 8004332:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	330c      	adds	r3, #12
 800433c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004340:	61fa      	str	r2, [r7, #28]
 8004342:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004344:	69b9      	ldr	r1, [r7, #24]
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	e841 2300 	strex	r3, r2, [r1]
 800434c:	617b      	str	r3, [r7, #20]
   return(result);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1e3      	bne.n	800431c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004354:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004358:	4619      	mov	r1, r3
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f83e 	bl	80043dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004360:	e023      	b.n	80043aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <HAL_UART_IRQHandler+0x4ea>
 800436e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f95d 	bl	800463a <UART_Transmit_IT>
    return;
 8004380:	e014      	b.n	80043ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00e      	beq.n	80043ac <HAL_UART_IRQHandler+0x514>
 800438e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d008      	beq.n	80043ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f99d 	bl	80046da <UART_EndTransmit_IT>
    return;
 80043a0:	e004      	b.n	80043ac <HAL_UART_IRQHandler+0x514>
    return;
 80043a2:	bf00      	nop
 80043a4:	e002      	b.n	80043ac <HAL_UART_IRQHandler+0x514>
      return;
 80043a6:	bf00      	nop
 80043a8:	e000      	b.n	80043ac <HAL_UART_IRQHandler+0x514>
      return;
 80043aa:	bf00      	nop
  }
}
 80043ac:	37e8      	adds	r7, #232	; 0xe8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop

080043b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b090      	sub	sp, #64	; 0x40
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	4613      	mov	r3, r2
 8004402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004404:	e050      	b.n	80044a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440c:	d04c      	beq.n	80044a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800440e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004410:	2b00      	cmp	r3, #0
 8004412:	d007      	beq.n	8004424 <UART_WaitOnFlagUntilTimeout+0x30>
 8004414:	f7fd f826 	bl	8001464 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004420:	429a      	cmp	r2, r3
 8004422:	d241      	bcs.n	80044a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	330c      	adds	r3, #12
 800442a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442e:	e853 3f00 	ldrex	r3, [r3]
 8004432:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800443a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	330c      	adds	r3, #12
 8004442:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004444:	637a      	str	r2, [r7, #52]	; 0x34
 8004446:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800444a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800444c:	e841 2300 	strex	r3, r2, [r1]
 8004450:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e5      	bne.n	8004424 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3314      	adds	r3, #20
 800445e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	e853 3f00 	ldrex	r3, [r3]
 8004466:	613b      	str	r3, [r7, #16]
   return(result);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f023 0301 	bic.w	r3, r3, #1
 800446e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3314      	adds	r3, #20
 8004476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004478:	623a      	str	r2, [r7, #32]
 800447a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447c:	69f9      	ldr	r1, [r7, #28]
 800447e:	6a3a      	ldr	r2, [r7, #32]
 8004480:	e841 2300 	strex	r3, r2, [r1]
 8004484:	61bb      	str	r3, [r7, #24]
   return(result);
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1e5      	bne.n	8004458 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e00f      	b.n	80044c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	4013      	ands	r3, r2
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	bf0c      	ite	eq
 80044b8:	2301      	moveq	r3, #1
 80044ba:	2300      	movne	r3, #0
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	461a      	mov	r2, r3
 80044c0:	79fb      	ldrb	r3, [r7, #7]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d09f      	beq.n	8004406 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3740      	adds	r7, #64	; 0x40
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	4613      	mov	r3, r2
 80044dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	88fa      	ldrh	r2, [r7, #6]
 80044e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	88fa      	ldrh	r2, [r7, #6]
 80044ee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2222      	movs	r2, #34	; 0x22
 80044fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68da      	ldr	r2, [r3, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800451c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695a      	ldr	r2, [r3, #20]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f042 0201 	orr.w	r2, r2, #1
 800452c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0220 	orr.w	r2, r2, #32
 800453c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800454c:	b480      	push	{r7}
 800454e:	b095      	sub	sp, #84	; 0x54
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	330c      	adds	r3, #12
 800455a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455e:	e853 3f00 	ldrex	r3, [r3]
 8004562:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004566:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800456a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	330c      	adds	r3, #12
 8004572:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004574:	643a      	str	r2, [r7, #64]	; 0x40
 8004576:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004578:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800457a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800457c:	e841 2300 	strex	r3, r2, [r1]
 8004580:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1e5      	bne.n	8004554 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3314      	adds	r3, #20
 800458e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	e853 3f00 	ldrex	r3, [r3]
 8004596:	61fb      	str	r3, [r7, #28]
   return(result);
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f023 0301 	bic.w	r3, r3, #1
 800459e:	64bb      	str	r3, [r7, #72]	; 0x48
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3314      	adds	r3, #20
 80045a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045b0:	e841 2300 	strex	r3, r2, [r1]
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1e5      	bne.n	8004588 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d119      	bne.n	80045f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	330c      	adds	r3, #12
 80045ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f023 0310 	bic.w	r3, r3, #16
 80045da:	647b      	str	r3, [r7, #68]	; 0x44
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	330c      	adds	r3, #12
 80045e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045e4:	61ba      	str	r2, [r7, #24]
 80045e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e8:	6979      	ldr	r1, [r7, #20]
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	e841 2300 	strex	r3, r2, [r1]
 80045f0:	613b      	str	r3, [r7, #16]
   return(result);
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1e5      	bne.n	80045c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004606:	bf00      	nop
 8004608:	3754      	adds	r7, #84	; 0x54
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b084      	sub	sp, #16
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f7ff fecb 	bl	80043c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004632:	bf00      	nop
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800463a:	b480      	push	{r7}
 800463c:	b085      	sub	sp, #20
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b21      	cmp	r3, #33	; 0x21
 800464c:	d13e      	bne.n	80046cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004656:	d114      	bne.n	8004682 <UART_Transmit_IT+0x48>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d110      	bne.n	8004682 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004674:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	1c9a      	adds	r2, r3, #2
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	621a      	str	r2, [r3, #32]
 8004680:	e008      	b.n	8004694 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	1c59      	adds	r1, r3, #1
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6211      	str	r1, [r2, #32]
 800468c:	781a      	ldrb	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004698:	b29b      	uxth	r3, r3
 800469a:	3b01      	subs	r3, #1
 800469c:	b29b      	uxth	r3, r3
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	4619      	mov	r1, r3
 80046a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10f      	bne.n	80046c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	e000      	b.n	80046ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046cc:	2302      	movs	r3, #2
  }
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff fe5a 	bl	80043b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b08c      	sub	sp, #48	; 0x30
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b22      	cmp	r3, #34	; 0x22
 800471c:	f040 80ab 	bne.w	8004876 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004728:	d117      	bne.n	800475a <UART_Receive_IT+0x50>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d113      	bne.n	800475a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004732:	2300      	movs	r3, #0
 8004734:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	b29b      	uxth	r3, r3
 8004744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004748:	b29a      	uxth	r2, r3
 800474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004752:	1c9a      	adds	r2, r3, #2
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	629a      	str	r2, [r3, #40]	; 0x28
 8004758:	e026      	b.n	80047a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004760:	2300      	movs	r3, #0
 8004762:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476c:	d007      	beq.n	800477e <UART_Receive_IT+0x74>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <UART_Receive_IT+0x82>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	b2da      	uxtb	r2, r3
 8004786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004788:	701a      	strb	r2, [r3, #0]
 800478a:	e008      	b.n	800479e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004798:	b2da      	uxtb	r2, r3
 800479a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a2:	1c5a      	adds	r2, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	4619      	mov	r1, r3
 80047b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d15a      	bne.n	8004872 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0220 	bic.w	r2, r2, #32
 80047ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0201 	bic.w	r2, r2, #1
 80047ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d135      	bne.n	8004868 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	330c      	adds	r3, #12
 8004808:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	e853 3f00 	ldrex	r3, [r3]
 8004810:	613b      	str	r3, [r7, #16]
   return(result);
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f023 0310 	bic.w	r3, r3, #16
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	330c      	adds	r3, #12
 8004820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004822:	623a      	str	r2, [r7, #32]
 8004824:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004826:	69f9      	ldr	r1, [r7, #28]
 8004828:	6a3a      	ldr	r2, [r7, #32]
 800482a:	e841 2300 	strex	r3, r2, [r1]
 800482e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1e5      	bne.n	8004802 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0310 	and.w	r3, r3, #16
 8004840:	2b10      	cmp	r3, #16
 8004842:	d10a      	bne.n	800485a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800485e:	4619      	mov	r1, r3
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7ff fdbb 	bl	80043dc <HAL_UARTEx_RxEventCallback>
 8004866:	e002      	b.n	800486e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7fc fd63 	bl	8001334 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	e002      	b.n	8004878 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	e000      	b.n	8004878 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004876:	2302      	movs	r3, #2
  }
}
 8004878:	4618      	mov	r0, r3
 800487a:	3730      	adds	r7, #48	; 0x30
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004884:	b0c0      	sub	sp, #256	; 0x100
 8004886:	af00      	add	r7, sp, #0
 8004888:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489c:	68d9      	ldr	r1, [r3, #12]
 800489e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	ea40 0301 	orr.w	r3, r0, r1
 80048a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	431a      	orrs	r2, r3
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	431a      	orrs	r2, r3
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048d8:	f021 010c 	bic.w	r1, r1, #12
 80048dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048e6:	430b      	orrs	r3, r1
 80048e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fa:	6999      	ldr	r1, [r3, #24]
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	ea40 0301 	orr.w	r3, r0, r1
 8004906:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4b8f      	ldr	r3, [pc, #572]	; (8004b4c <UART_SetConfig+0x2cc>)
 8004910:	429a      	cmp	r2, r3
 8004912:	d005      	beq.n	8004920 <UART_SetConfig+0xa0>
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	4b8d      	ldr	r3, [pc, #564]	; (8004b50 <UART_SetConfig+0x2d0>)
 800491c:	429a      	cmp	r2, r3
 800491e:	d104      	bne.n	800492a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004920:	f7fe f886 	bl	8002a30 <HAL_RCC_GetPCLK2Freq>
 8004924:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004928:	e003      	b.n	8004932 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800492a:	f7fe f86d 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
 800492e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800493c:	f040 810c 	bne.w	8004b58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004940:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004944:	2200      	movs	r2, #0
 8004946:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800494a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800494e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004952:	4622      	mov	r2, r4
 8004954:	462b      	mov	r3, r5
 8004956:	1891      	adds	r1, r2, r2
 8004958:	65b9      	str	r1, [r7, #88]	; 0x58
 800495a:	415b      	adcs	r3, r3
 800495c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800495e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004962:	4621      	mov	r1, r4
 8004964:	eb12 0801 	adds.w	r8, r2, r1
 8004968:	4629      	mov	r1, r5
 800496a:	eb43 0901 	adc.w	r9, r3, r1
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800497a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800497e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004982:	4690      	mov	r8, r2
 8004984:	4699      	mov	r9, r3
 8004986:	4623      	mov	r3, r4
 8004988:	eb18 0303 	adds.w	r3, r8, r3
 800498c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004990:	462b      	mov	r3, r5
 8004992:	eb49 0303 	adc.w	r3, r9, r3
 8004996:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800499a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049ae:	460b      	mov	r3, r1
 80049b0:	18db      	adds	r3, r3, r3
 80049b2:	653b      	str	r3, [r7, #80]	; 0x50
 80049b4:	4613      	mov	r3, r2
 80049b6:	eb42 0303 	adc.w	r3, r2, r3
 80049ba:	657b      	str	r3, [r7, #84]	; 0x54
 80049bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049c4:	f7fb fc6c 	bl	80002a0 <__aeabi_uldivmod>
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	4b61      	ldr	r3, [pc, #388]	; (8004b54 <UART_SetConfig+0x2d4>)
 80049ce:	fba3 2302 	umull	r2, r3, r3, r2
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	011c      	lsls	r4, r3, #4
 80049d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049da:	2200      	movs	r2, #0
 80049dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80049e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049e8:	4642      	mov	r2, r8
 80049ea:	464b      	mov	r3, r9
 80049ec:	1891      	adds	r1, r2, r2
 80049ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80049f0:	415b      	adcs	r3, r3
 80049f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049f8:	4641      	mov	r1, r8
 80049fa:	eb12 0a01 	adds.w	sl, r2, r1
 80049fe:	4649      	mov	r1, r9
 8004a00:	eb43 0b01 	adc.w	fp, r3, r1
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	f04f 0300 	mov.w	r3, #0
 8004a0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a18:	4692      	mov	sl, r2
 8004a1a:	469b      	mov	fp, r3
 8004a1c:	4643      	mov	r3, r8
 8004a1e:	eb1a 0303 	adds.w	r3, sl, r3
 8004a22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a26:	464b      	mov	r3, r9
 8004a28:	eb4b 0303 	adc.w	r3, fp, r3
 8004a2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a44:	460b      	mov	r3, r1
 8004a46:	18db      	adds	r3, r3, r3
 8004a48:	643b      	str	r3, [r7, #64]	; 0x40
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	eb42 0303 	adc.w	r3, r2, r3
 8004a50:	647b      	str	r3, [r7, #68]	; 0x44
 8004a52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a5a:	f7fb fc21 	bl	80002a0 <__aeabi_uldivmod>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	4611      	mov	r1, r2
 8004a64:	4b3b      	ldr	r3, [pc, #236]	; (8004b54 <UART_SetConfig+0x2d4>)
 8004a66:	fba3 2301 	umull	r2, r3, r3, r1
 8004a6a:	095b      	lsrs	r3, r3, #5
 8004a6c:	2264      	movs	r2, #100	; 0x64
 8004a6e:	fb02 f303 	mul.w	r3, r2, r3
 8004a72:	1acb      	subs	r3, r1, r3
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a7a:	4b36      	ldr	r3, [pc, #216]	; (8004b54 <UART_SetConfig+0x2d4>)
 8004a7c:	fba3 2302 	umull	r2, r3, r3, r2
 8004a80:	095b      	lsrs	r3, r3, #5
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a88:	441c      	add	r4, r3
 8004a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a9c:	4642      	mov	r2, r8
 8004a9e:	464b      	mov	r3, r9
 8004aa0:	1891      	adds	r1, r2, r2
 8004aa2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004aa4:	415b      	adcs	r3, r3
 8004aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004aac:	4641      	mov	r1, r8
 8004aae:	1851      	adds	r1, r2, r1
 8004ab0:	6339      	str	r1, [r7, #48]	; 0x30
 8004ab2:	4649      	mov	r1, r9
 8004ab4:	414b      	adcs	r3, r1
 8004ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ac4:	4659      	mov	r1, fp
 8004ac6:	00cb      	lsls	r3, r1, #3
 8004ac8:	4651      	mov	r1, sl
 8004aca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ace:	4651      	mov	r1, sl
 8004ad0:	00ca      	lsls	r2, r1, #3
 8004ad2:	4610      	mov	r0, r2
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	4642      	mov	r2, r8
 8004ada:	189b      	adds	r3, r3, r2
 8004adc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ae0:	464b      	mov	r3, r9
 8004ae2:	460a      	mov	r2, r1
 8004ae4:	eb42 0303 	adc.w	r3, r2, r3
 8004ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004af8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004afc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b00:	460b      	mov	r3, r1
 8004b02:	18db      	adds	r3, r3, r3
 8004b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b06:	4613      	mov	r3, r2
 8004b08:	eb42 0303 	adc.w	r3, r2, r3
 8004b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b16:	f7fb fbc3 	bl	80002a0 <__aeabi_uldivmod>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	4b0d      	ldr	r3, [pc, #52]	; (8004b54 <UART_SetConfig+0x2d4>)
 8004b20:	fba3 1302 	umull	r1, r3, r3, r2
 8004b24:	095b      	lsrs	r3, r3, #5
 8004b26:	2164      	movs	r1, #100	; 0x64
 8004b28:	fb01 f303 	mul.w	r3, r1, r3
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	3332      	adds	r3, #50	; 0x32
 8004b32:	4a08      	ldr	r2, [pc, #32]	; (8004b54 <UART_SetConfig+0x2d4>)
 8004b34:	fba2 2303 	umull	r2, r3, r2, r3
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	f003 0207 	and.w	r2, r3, #7
 8004b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4422      	add	r2, r4
 8004b46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b48:	e105      	b.n	8004d56 <UART_SetConfig+0x4d6>
 8004b4a:	bf00      	nop
 8004b4c:	40011000 	.word	0x40011000
 8004b50:	40011400 	.word	0x40011400
 8004b54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b6a:	4642      	mov	r2, r8
 8004b6c:	464b      	mov	r3, r9
 8004b6e:	1891      	adds	r1, r2, r2
 8004b70:	6239      	str	r1, [r7, #32]
 8004b72:	415b      	adcs	r3, r3
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24
 8004b76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b7a:	4641      	mov	r1, r8
 8004b7c:	1854      	adds	r4, r2, r1
 8004b7e:	4649      	mov	r1, r9
 8004b80:	eb43 0501 	adc.w	r5, r3, r1
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	00eb      	lsls	r3, r5, #3
 8004b8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b92:	00e2      	lsls	r2, r4, #3
 8004b94:	4614      	mov	r4, r2
 8004b96:	461d      	mov	r5, r3
 8004b98:	4643      	mov	r3, r8
 8004b9a:	18e3      	adds	r3, r4, r3
 8004b9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ba0:	464b      	mov	r3, r9
 8004ba2:	eb45 0303 	adc.w	r3, r5, r3
 8004ba6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	008b      	lsls	r3, r1, #2
 8004bca:	4621      	mov	r1, r4
 8004bcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	008a      	lsls	r2, r1, #2
 8004bd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004bd8:	f7fb fb62 	bl	80002a0 <__aeabi_uldivmod>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	4b60      	ldr	r3, [pc, #384]	; (8004d64 <UART_SetConfig+0x4e4>)
 8004be2:	fba3 2302 	umull	r2, r3, r3, r2
 8004be6:	095b      	lsrs	r3, r3, #5
 8004be8:	011c      	lsls	r4, r3, #4
 8004bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bf4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004bf8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004bfc:	4642      	mov	r2, r8
 8004bfe:	464b      	mov	r3, r9
 8004c00:	1891      	adds	r1, r2, r2
 8004c02:	61b9      	str	r1, [r7, #24]
 8004c04:	415b      	adcs	r3, r3
 8004c06:	61fb      	str	r3, [r7, #28]
 8004c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c0c:	4641      	mov	r1, r8
 8004c0e:	1851      	adds	r1, r2, r1
 8004c10:	6139      	str	r1, [r7, #16]
 8004c12:	4649      	mov	r1, r9
 8004c14:	414b      	adcs	r3, r1
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	f04f 0300 	mov.w	r3, #0
 8004c20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c24:	4659      	mov	r1, fp
 8004c26:	00cb      	lsls	r3, r1, #3
 8004c28:	4651      	mov	r1, sl
 8004c2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c2e:	4651      	mov	r1, sl
 8004c30:	00ca      	lsls	r2, r1, #3
 8004c32:	4610      	mov	r0, r2
 8004c34:	4619      	mov	r1, r3
 8004c36:	4603      	mov	r3, r0
 8004c38:	4642      	mov	r2, r8
 8004c3a:	189b      	adds	r3, r3, r2
 8004c3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c40:	464b      	mov	r3, r9
 8004c42:	460a      	mov	r2, r1
 8004c44:	eb42 0303 	adc.w	r3, r2, r3
 8004c48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c64:	4649      	mov	r1, r9
 8004c66:	008b      	lsls	r3, r1, #2
 8004c68:	4641      	mov	r1, r8
 8004c6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c6e:	4641      	mov	r1, r8
 8004c70:	008a      	lsls	r2, r1, #2
 8004c72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c76:	f7fb fb13 	bl	80002a0 <__aeabi_uldivmod>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4b39      	ldr	r3, [pc, #228]	; (8004d64 <UART_SetConfig+0x4e4>)
 8004c80:	fba3 1302 	umull	r1, r3, r3, r2
 8004c84:	095b      	lsrs	r3, r3, #5
 8004c86:	2164      	movs	r1, #100	; 0x64
 8004c88:	fb01 f303 	mul.w	r3, r1, r3
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	3332      	adds	r3, #50	; 0x32
 8004c92:	4a34      	ldr	r2, [pc, #208]	; (8004d64 <UART_SetConfig+0x4e4>)
 8004c94:	fba2 2303 	umull	r2, r3, r2, r3
 8004c98:	095b      	lsrs	r3, r3, #5
 8004c9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c9e:	441c      	add	r4, r3
 8004ca0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	673b      	str	r3, [r7, #112]	; 0x70
 8004ca8:	677a      	str	r2, [r7, #116]	; 0x74
 8004caa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004cae:	4642      	mov	r2, r8
 8004cb0:	464b      	mov	r3, r9
 8004cb2:	1891      	adds	r1, r2, r2
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	415b      	adcs	r3, r3
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cbe:	4641      	mov	r1, r8
 8004cc0:	1851      	adds	r1, r2, r1
 8004cc2:	6039      	str	r1, [r7, #0]
 8004cc4:	4649      	mov	r1, r9
 8004cc6:	414b      	adcs	r3, r1
 8004cc8:	607b      	str	r3, [r7, #4]
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	f04f 0300 	mov.w	r3, #0
 8004cd2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cd6:	4659      	mov	r1, fp
 8004cd8:	00cb      	lsls	r3, r1, #3
 8004cda:	4651      	mov	r1, sl
 8004cdc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ce0:	4651      	mov	r1, sl
 8004ce2:	00ca      	lsls	r2, r1, #3
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4603      	mov	r3, r0
 8004cea:	4642      	mov	r2, r8
 8004cec:	189b      	adds	r3, r3, r2
 8004cee:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cf0:	464b      	mov	r3, r9
 8004cf2:	460a      	mov	r2, r1
 8004cf4:	eb42 0303 	adc.w	r3, r2, r3
 8004cf8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	663b      	str	r3, [r7, #96]	; 0x60
 8004d04:	667a      	str	r2, [r7, #100]	; 0x64
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	f04f 0300 	mov.w	r3, #0
 8004d0e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d12:	4649      	mov	r1, r9
 8004d14:	008b      	lsls	r3, r1, #2
 8004d16:	4641      	mov	r1, r8
 8004d18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d1c:	4641      	mov	r1, r8
 8004d1e:	008a      	lsls	r2, r1, #2
 8004d20:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d24:	f7fb fabc 	bl	80002a0 <__aeabi_uldivmod>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <UART_SetConfig+0x4e4>)
 8004d2e:	fba3 1302 	umull	r1, r3, r3, r2
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	2164      	movs	r1, #100	; 0x64
 8004d36:	fb01 f303 	mul.w	r3, r1, r3
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	3332      	adds	r3, #50	; 0x32
 8004d40:	4a08      	ldr	r2, [pc, #32]	; (8004d64 <UART_SetConfig+0x4e4>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	f003 020f 	and.w	r2, r3, #15
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4422      	add	r2, r4
 8004d54:	609a      	str	r2, [r3, #8]
}
 8004d56:	bf00      	nop
 8004d58:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d62:	bf00      	nop
 8004d64:	51eb851f 	.word	0x51eb851f

08004d68 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	4603      	mov	r3, r0
 8004d70:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004d72:	2300      	movs	r3, #0
 8004d74:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004d76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d7a:	2b84      	cmp	r3, #132	; 0x84
 8004d7c:	d005      	beq.n	8004d8a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004d7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4413      	add	r3, r2
 8004d86:	3303      	adds	r3, #3
 8004d88:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004d9c:	f000 fade 	bl	800535c <vTaskStartScheduler>
  
  return osOK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004da6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004da8:	b089      	sub	sp, #36	; 0x24
 8004daa:	af04      	add	r7, sp, #16
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d020      	beq.n	8004dfa <osThreadCreate+0x54>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d01c      	beq.n	8004dfa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685c      	ldr	r4, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681d      	ldr	r5, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691e      	ldr	r6, [r3, #16]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff ffc8 	bl	8004d68 <makeFreeRtosPriority>
 8004dd8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004de2:	9202      	str	r2, [sp, #8]
 8004de4:	9301      	str	r3, [sp, #4]
 8004de6:	9100      	str	r1, [sp, #0]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	4632      	mov	r2, r6
 8004dec:	4629      	mov	r1, r5
 8004dee:	4620      	mov	r0, r4
 8004df0:	f000 f8ed 	bl	8004fce <xTaskCreateStatic>
 8004df4:	4603      	mov	r3, r0
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	e01c      	b.n	8004e34 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685c      	ldr	r4, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e06:	b29e      	uxth	r6, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff ffaa 	bl	8004d68 <makeFreeRtosPriority>
 8004e14:	4602      	mov	r2, r0
 8004e16:	f107 030c 	add.w	r3, r7, #12
 8004e1a:	9301      	str	r3, [sp, #4]
 8004e1c:	9200      	str	r2, [sp, #0]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	4632      	mov	r2, r6
 8004e22:	4629      	mov	r1, r5
 8004e24:	4620      	mov	r0, r4
 8004e26:	f000 f92f 	bl	8005088 <xTaskCreate>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d001      	beq.n	8004e34 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e000      	b.n	8004e36 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004e34:	68fb      	ldr	r3, [r7, #12]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e3e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b084      	sub	sp, #16
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <osDelay+0x16>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	e000      	b.n	8004e56 <osDelay+0x18>
 8004e54:	2301      	movs	r3, #1
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fa4c 	bl	80052f4 <vTaskDelay>
  
  return osOK;
 8004e5c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f103 0208 	add.w	r2, r3, #8
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e7e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f103 0208 	add.w	r2, r3, #8
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f103 0208 	add.w	r2, r3, #8
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	601a      	str	r2, [r3, #0]
}
 8004efc:	bf00      	nop
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1e:	d103      	bne.n	8004f28 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	e00c      	b.n	8004f42 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3308      	adds	r3, #8
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	e002      	b.n	8004f36 <vListInsert+0x2e>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d2f6      	bcs.n	8004f30 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	601a      	str	r2, [r3, #0]
}
 8004f6e:	bf00      	nop
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b085      	sub	sp, #20
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6892      	ldr	r2, [r2, #8]
 8004f90:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6852      	ldr	r2, [r2, #4]
 8004f9a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d103      	bne.n	8004fae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	1e5a      	subs	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b08e      	sub	sp, #56	; 0x38
 8004fd2:	af04      	add	r7, sp, #16
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	607a      	str	r2, [r7, #4]
 8004fda:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10a      	bne.n	8004ff8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ff4:	bf00      	nop
 8004ff6:	e7fe      	b.n	8004ff6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10a      	bne.n	8005014 <xTaskCreateStatic+0x46>
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	61fb      	str	r3, [r7, #28]
}
 8005010:	bf00      	nop
 8005012:	e7fe      	b.n	8005012 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005014:	2354      	movs	r3, #84	; 0x54
 8005016:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	2b54      	cmp	r3, #84	; 0x54
 800501c:	d00a      	beq.n	8005034 <xTaskCreateStatic+0x66>
	__asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	61bb      	str	r3, [r7, #24]
}
 8005030:	bf00      	nop
 8005032:	e7fe      	b.n	8005032 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005034:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01e      	beq.n	800507a <xTaskCreateStatic+0xac>
 800503c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503e:	2b00      	cmp	r3, #0
 8005040:	d01b      	beq.n	800507a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005044:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800504a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	2202      	movs	r2, #2
 8005050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005054:	2300      	movs	r3, #0
 8005056:	9303      	str	r3, [sp, #12]
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	9302      	str	r3, [sp, #8]
 800505c:	f107 0314 	add.w	r3, r7, #20
 8005060:	9301      	str	r3, [sp, #4]
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	68b9      	ldr	r1, [r7, #8]
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 f850 	bl	8005112 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005072:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005074:	f000 f8d4 	bl	8005220 <prvAddNewTaskToReadyList>
 8005078:	e001      	b.n	800507e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800507a:	2300      	movs	r3, #0
 800507c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800507e:	697b      	ldr	r3, [r7, #20]
	}
 8005080:	4618      	mov	r0, r3
 8005082:	3728      	adds	r7, #40	; 0x28
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005088:	b580      	push	{r7, lr}
 800508a:	b08c      	sub	sp, #48	; 0x30
 800508c:	af04      	add	r7, sp, #16
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	4613      	mov	r3, r2
 8005096:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005098:	88fb      	ldrh	r3, [r7, #6]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fec3 	bl	8005e28 <pvPortMalloc>
 80050a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00e      	beq.n	80050c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050aa:	2054      	movs	r0, #84	; 0x54
 80050ac:	f000 febc 	bl	8005e28 <pvPortMalloc>
 80050b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	631a      	str	r2, [r3, #48]	; 0x30
 80050be:	e005      	b.n	80050cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050c0:	6978      	ldr	r0, [r7, #20]
 80050c2:	f000 ff7d 	bl	8005fc0 <vPortFree>
 80050c6:	e001      	b.n	80050cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050c8:	2300      	movs	r3, #0
 80050ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d017      	beq.n	8005102 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050da:	88fa      	ldrh	r2, [r7, #6]
 80050dc:	2300      	movs	r3, #0
 80050de:	9303      	str	r3, [sp, #12]
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	9302      	str	r3, [sp, #8]
 80050e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e6:	9301      	str	r3, [sp, #4]
 80050e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	68b9      	ldr	r1, [r7, #8]
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 f80e 	bl	8005112 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050f6:	69f8      	ldr	r0, [r7, #28]
 80050f8:	f000 f892 	bl	8005220 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050fc:	2301      	movs	r3, #1
 80050fe:	61bb      	str	r3, [r7, #24]
 8005100:	e002      	b.n	8005108 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005102:	f04f 33ff 	mov.w	r3, #4294967295
 8005106:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005108:	69bb      	ldr	r3, [r7, #24]
	}
 800510a:	4618      	mov	r0, r3
 800510c:	3720      	adds	r7, #32
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b088      	sub	sp, #32
 8005116:	af00      	add	r7, sp, #0
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	607a      	str	r2, [r7, #4]
 800511e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800512a:	3b01      	subs	r3, #1
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	f023 0307 	bic.w	r3, r3, #7
 8005138:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00a      	beq.n	800515a <prvInitialiseNewTask+0x48>
	__asm volatile
 8005144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	617b      	str	r3, [r7, #20]
}
 8005156:	bf00      	nop
 8005158:	e7fe      	b.n	8005158 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d01f      	beq.n	80051a0 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005160:	2300      	movs	r3, #0
 8005162:	61fb      	str	r3, [r7, #28]
 8005164:	e012      	b.n	800518c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	4413      	add	r3, r2
 800516c:	7819      	ldrb	r1, [r3, #0]
 800516e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	4413      	add	r3, r2
 8005174:	3334      	adds	r3, #52	; 0x34
 8005176:	460a      	mov	r2, r1
 8005178:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	4413      	add	r3, r2
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d006      	beq.n	8005194 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	3301      	adds	r3, #1
 800518a:	61fb      	str	r3, [r7, #28]
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	2b0f      	cmp	r3, #15
 8005190:	d9e9      	bls.n	8005166 <prvInitialiseNewTask+0x54>
 8005192:	e000      	b.n	8005196 <prvInitialiseNewTask+0x84>
			{
				break;
 8005194:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800519e:	e003      	b.n	80051a8 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80051a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051aa:	2b06      	cmp	r3, #6
 80051ac:	d901      	bls.n	80051b2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051ae:	2306      	movs	r3, #6
 80051b0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051b6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051bc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80051be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c0:	2200      	movs	r2, #0
 80051c2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	3304      	adds	r3, #4
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff fe6c 	bl	8004ea6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d0:	3318      	adds	r3, #24
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7ff fe67 	bl	8004ea6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80051d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e0:	f1c3 0207 	rsb	r2, r3, #7
 80051e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f0:	2200      	movs	r2, #0
 80051f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	68f9      	ldr	r1, [r7, #12]
 8005200:	69b8      	ldr	r0, [r7, #24]
 8005202:	f000 fc05 	bl	8005a10 <pxPortInitialiseStack>
 8005206:	4602      	mov	r2, r0
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800520c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005216:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005218:	bf00      	nop
 800521a:	3720      	adds	r7, #32
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005228:	f000 fd1c 	bl	8005c64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800522c:	4b2a      	ldr	r3, [pc, #168]	; (80052d8 <prvAddNewTaskToReadyList+0xb8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3301      	adds	r3, #1
 8005232:	4a29      	ldr	r2, [pc, #164]	; (80052d8 <prvAddNewTaskToReadyList+0xb8>)
 8005234:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005236:	4b29      	ldr	r3, [pc, #164]	; (80052dc <prvAddNewTaskToReadyList+0xbc>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d109      	bne.n	8005252 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800523e:	4a27      	ldr	r2, [pc, #156]	; (80052dc <prvAddNewTaskToReadyList+0xbc>)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005244:	4b24      	ldr	r3, [pc, #144]	; (80052d8 <prvAddNewTaskToReadyList+0xb8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d110      	bne.n	800526e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800524c:	f000 fabc 	bl	80057c8 <prvInitialiseTaskLists>
 8005250:	e00d      	b.n	800526e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005252:	4b23      	ldr	r3, [pc, #140]	; (80052e0 <prvAddNewTaskToReadyList+0xc0>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d109      	bne.n	800526e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800525a:	4b20      	ldr	r3, [pc, #128]	; (80052dc <prvAddNewTaskToReadyList+0xbc>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	429a      	cmp	r2, r3
 8005266:	d802      	bhi.n	800526e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005268:	4a1c      	ldr	r2, [pc, #112]	; (80052dc <prvAddNewTaskToReadyList+0xbc>)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800526e:	4b1d      	ldr	r3, [pc, #116]	; (80052e4 <prvAddNewTaskToReadyList+0xc4>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3301      	adds	r3, #1
 8005274:	4a1b      	ldr	r2, [pc, #108]	; (80052e4 <prvAddNewTaskToReadyList+0xc4>)
 8005276:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	2201      	movs	r2, #1
 800527e:	409a      	lsls	r2, r3
 8005280:	4b19      	ldr	r3, [pc, #100]	; (80052e8 <prvAddNewTaskToReadyList+0xc8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4313      	orrs	r3, r2
 8005286:	4a18      	ldr	r2, [pc, #96]	; (80052e8 <prvAddNewTaskToReadyList+0xc8>)
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800528e:	4613      	mov	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4a15      	ldr	r2, [pc, #84]	; (80052ec <prvAddNewTaskToReadyList+0xcc>)
 8005298:	441a      	add	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3304      	adds	r3, #4
 800529e:	4619      	mov	r1, r3
 80052a0:	4610      	mov	r0, r2
 80052a2:	f7ff fe0d 	bl	8004ec0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052a6:	f000 fd0d 	bl	8005cc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052aa:	4b0d      	ldr	r3, [pc, #52]	; (80052e0 <prvAddNewTaskToReadyList+0xc0>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00e      	beq.n	80052d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80052b2:	4b0a      	ldr	r3, [pc, #40]	; (80052dc <prvAddNewTaskToReadyList+0xbc>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	429a      	cmp	r2, r3
 80052be:	d207      	bcs.n	80052d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <prvAddNewTaskToReadyList+0xd0>)
 80052c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052d0:	bf00      	nop
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20001b44 	.word	0x20001b44
 80052dc:	20001a44 	.word	0x20001a44
 80052e0:	20001b50 	.word	0x20001b50
 80052e4:	20001b60 	.word	0x20001b60
 80052e8:	20001b4c 	.word	0x20001b4c
 80052ec:	20001a48 	.word	0x20001a48
 80052f0:	e000ed04 	.word	0xe000ed04

080052f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d017      	beq.n	8005336 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005306:	4b13      	ldr	r3, [pc, #76]	; (8005354 <vTaskDelay+0x60>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00a      	beq.n	8005324 <vTaskDelay+0x30>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	60bb      	str	r3, [r7, #8]
}
 8005320:	bf00      	nop
 8005322:	e7fe      	b.n	8005322 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005324:	f000 f87a 	bl	800541c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005328:	2100      	movs	r1, #0
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fb0a 	bl	8005944 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005330:	f000 f882 	bl	8005438 <xTaskResumeAll>
 8005334:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d107      	bne.n	800534c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800533c:	4b06      	ldr	r3, [pc, #24]	; (8005358 <vTaskDelay+0x64>)
 800533e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800534c:	bf00      	nop
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	20001b6c 	.word	0x20001b6c
 8005358:	e000ed04 	.word	0xe000ed04

0800535c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08a      	sub	sp, #40	; 0x28
 8005360:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005362:	2300      	movs	r3, #0
 8005364:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005366:	2300      	movs	r3, #0
 8005368:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800536a:	463a      	mov	r2, r7
 800536c:	1d39      	adds	r1, r7, #4
 800536e:	f107 0308 	add.w	r3, r7, #8
 8005372:	4618      	mov	r0, r3
 8005374:	f7fb f93e 	bl	80005f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005378:	6839      	ldr	r1, [r7, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	9202      	str	r2, [sp, #8]
 8005380:	9301      	str	r3, [sp, #4]
 8005382:	2300      	movs	r3, #0
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	2300      	movs	r3, #0
 8005388:	460a      	mov	r2, r1
 800538a:	491e      	ldr	r1, [pc, #120]	; (8005404 <vTaskStartScheduler+0xa8>)
 800538c:	481e      	ldr	r0, [pc, #120]	; (8005408 <vTaskStartScheduler+0xac>)
 800538e:	f7ff fe1e 	bl	8004fce <xTaskCreateStatic>
 8005392:	4603      	mov	r3, r0
 8005394:	4a1d      	ldr	r2, [pc, #116]	; (800540c <vTaskStartScheduler+0xb0>)
 8005396:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005398:	4b1c      	ldr	r3, [pc, #112]	; (800540c <vTaskStartScheduler+0xb0>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053a0:	2301      	movs	r3, #1
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	e001      	b.n	80053aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d116      	bne.n	80053de <vTaskStartScheduler+0x82>
	__asm volatile
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	613b      	str	r3, [r7, #16]
}
 80053c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053c4:	4b12      	ldr	r3, [pc, #72]	; (8005410 <vTaskStartScheduler+0xb4>)
 80053c6:	f04f 32ff 	mov.w	r2, #4294967295
 80053ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053cc:	4b11      	ldr	r3, [pc, #68]	; (8005414 <vTaskStartScheduler+0xb8>)
 80053ce:	2201      	movs	r2, #1
 80053d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80053d2:	4b11      	ldr	r3, [pc, #68]	; (8005418 <vTaskStartScheduler+0xbc>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80053d8:	f000 fba2 	bl	8005b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80053dc:	e00e      	b.n	80053fc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e4:	d10a      	bne.n	80053fc <vTaskStartScheduler+0xa0>
	__asm volatile
 80053e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	60fb      	str	r3, [r7, #12]
}
 80053f8:	bf00      	nop
 80053fa:	e7fe      	b.n	80053fa <vTaskStartScheduler+0x9e>
}
 80053fc:	bf00      	nop
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	08007f74 	.word	0x08007f74
 8005408:	08005799 	.word	0x08005799
 800540c:	20001b68 	.word	0x20001b68
 8005410:	20001b64 	.word	0x20001b64
 8005414:	20001b50 	.word	0x20001b50
 8005418:	20001b48 	.word	0x20001b48

0800541c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005420:	4b04      	ldr	r3, [pc, #16]	; (8005434 <vTaskSuspendAll+0x18>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3301      	adds	r3, #1
 8005426:	4a03      	ldr	r2, [pc, #12]	; (8005434 <vTaskSuspendAll+0x18>)
 8005428:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800542a:	bf00      	nop
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	20001b6c 	.word	0x20001b6c

08005438 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005442:	2300      	movs	r3, #0
 8005444:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005446:	4b41      	ldr	r3, [pc, #260]	; (800554c <xTaskResumeAll+0x114>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10a      	bne.n	8005464 <xTaskResumeAll+0x2c>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	603b      	str	r3, [r7, #0]
}
 8005460:	bf00      	nop
 8005462:	e7fe      	b.n	8005462 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005464:	f000 fbfe 	bl	8005c64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005468:	4b38      	ldr	r3, [pc, #224]	; (800554c <xTaskResumeAll+0x114>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3b01      	subs	r3, #1
 800546e:	4a37      	ldr	r2, [pc, #220]	; (800554c <xTaskResumeAll+0x114>)
 8005470:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005472:	4b36      	ldr	r3, [pc, #216]	; (800554c <xTaskResumeAll+0x114>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d161      	bne.n	800553e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800547a:	4b35      	ldr	r3, [pc, #212]	; (8005550 <xTaskResumeAll+0x118>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d05d      	beq.n	800553e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005482:	e02e      	b.n	80054e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005484:	4b33      	ldr	r3, [pc, #204]	; (8005554 <xTaskResumeAll+0x11c>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	3318      	adds	r3, #24
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff fd72 	bl	8004f7a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	3304      	adds	r3, #4
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff fd6d 	bl	8004f7a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a4:	2201      	movs	r2, #1
 80054a6:	409a      	lsls	r2, r3
 80054a8:	4b2b      	ldr	r3, [pc, #172]	; (8005558 <xTaskResumeAll+0x120>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	4a2a      	ldr	r2, [pc, #168]	; (8005558 <xTaskResumeAll+0x120>)
 80054b0:	6013      	str	r3, [r2, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b6:	4613      	mov	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4a27      	ldr	r2, [pc, #156]	; (800555c <xTaskResumeAll+0x124>)
 80054c0:	441a      	add	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	3304      	adds	r3, #4
 80054c6:	4619      	mov	r1, r3
 80054c8:	4610      	mov	r0, r2
 80054ca:	f7ff fcf9 	bl	8004ec0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d2:	4b23      	ldr	r3, [pc, #140]	; (8005560 <xTaskResumeAll+0x128>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d8:	429a      	cmp	r2, r3
 80054da:	d302      	bcc.n	80054e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80054dc:	4b21      	ldr	r3, [pc, #132]	; (8005564 <xTaskResumeAll+0x12c>)
 80054de:	2201      	movs	r2, #1
 80054e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054e2:	4b1c      	ldr	r3, [pc, #112]	; (8005554 <xTaskResumeAll+0x11c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1cc      	bne.n	8005484 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80054f0:	f000 fa08 	bl	8005904 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80054f4:	4b1c      	ldr	r3, [pc, #112]	; (8005568 <xTaskResumeAll+0x130>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d010      	beq.n	8005522 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005500:	f000 f836 	bl	8005570 <xTaskIncrementTick>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800550a:	4b16      	ldr	r3, [pc, #88]	; (8005564 <xTaskResumeAll+0x12c>)
 800550c:	2201      	movs	r2, #1
 800550e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3b01      	subs	r3, #1
 8005514:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1f1      	bne.n	8005500 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800551c:	4b12      	ldr	r3, [pc, #72]	; (8005568 <xTaskResumeAll+0x130>)
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005522:	4b10      	ldr	r3, [pc, #64]	; (8005564 <xTaskResumeAll+0x12c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d009      	beq.n	800553e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800552a:	2301      	movs	r3, #1
 800552c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800552e:	4b0f      	ldr	r3, [pc, #60]	; (800556c <xTaskResumeAll+0x134>)
 8005530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800553e:	f000 fbc1 	bl	8005cc4 <vPortExitCritical>

	return xAlreadyYielded;
 8005542:	68bb      	ldr	r3, [r7, #8]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	20001b6c 	.word	0x20001b6c
 8005550:	20001b44 	.word	0x20001b44
 8005554:	20001b04 	.word	0x20001b04
 8005558:	20001b4c 	.word	0x20001b4c
 800555c:	20001a48 	.word	0x20001a48
 8005560:	20001a44 	.word	0x20001a44
 8005564:	20001b58 	.word	0x20001b58
 8005568:	20001b54 	.word	0x20001b54
 800556c:	e000ed04 	.word	0xe000ed04

08005570 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005576:	2300      	movs	r3, #0
 8005578:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800557a:	4b4e      	ldr	r3, [pc, #312]	; (80056b4 <xTaskIncrementTick+0x144>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	f040 808e 	bne.w	80056a0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005584:	4b4c      	ldr	r3, [pc, #304]	; (80056b8 <xTaskIncrementTick+0x148>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3301      	adds	r3, #1
 800558a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800558c:	4a4a      	ldr	r2, [pc, #296]	; (80056b8 <xTaskIncrementTick+0x148>)
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d120      	bne.n	80055da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005598:	4b48      	ldr	r3, [pc, #288]	; (80056bc <xTaskIncrementTick+0x14c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80055a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	603b      	str	r3, [r7, #0]
}
 80055b4:	bf00      	nop
 80055b6:	e7fe      	b.n	80055b6 <xTaskIncrementTick+0x46>
 80055b8:	4b40      	ldr	r3, [pc, #256]	; (80056bc <xTaskIncrementTick+0x14c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60fb      	str	r3, [r7, #12]
 80055be:	4b40      	ldr	r3, [pc, #256]	; (80056c0 <xTaskIncrementTick+0x150>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a3e      	ldr	r2, [pc, #248]	; (80056bc <xTaskIncrementTick+0x14c>)
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	4a3e      	ldr	r2, [pc, #248]	; (80056c0 <xTaskIncrementTick+0x150>)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6013      	str	r3, [r2, #0]
 80055cc:	4b3d      	ldr	r3, [pc, #244]	; (80056c4 <xTaskIncrementTick+0x154>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3301      	adds	r3, #1
 80055d2:	4a3c      	ldr	r2, [pc, #240]	; (80056c4 <xTaskIncrementTick+0x154>)
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	f000 f995 	bl	8005904 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80055da:	4b3b      	ldr	r3, [pc, #236]	; (80056c8 <xTaskIncrementTick+0x158>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d348      	bcc.n	8005676 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055e4:	4b35      	ldr	r3, [pc, #212]	; (80056bc <xTaskIncrementTick+0x14c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d104      	bne.n	80055f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ee:	4b36      	ldr	r3, [pc, #216]	; (80056c8 <xTaskIncrementTick+0x158>)
 80055f0:	f04f 32ff 	mov.w	r2, #4294967295
 80055f4:	601a      	str	r2, [r3, #0]
					break;
 80055f6:	e03e      	b.n	8005676 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055f8:	4b30      	ldr	r3, [pc, #192]	; (80056bc <xTaskIncrementTick+0x14c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	429a      	cmp	r2, r3
 800560e:	d203      	bcs.n	8005618 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005610:	4a2d      	ldr	r2, [pc, #180]	; (80056c8 <xTaskIncrementTick+0x158>)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005616:	e02e      	b.n	8005676 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	3304      	adds	r3, #4
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff fcac 	bl	8004f7a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005626:	2b00      	cmp	r3, #0
 8005628:	d004      	beq.n	8005634 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	3318      	adds	r3, #24
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff fca3 	bl	8004f7a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005638:	2201      	movs	r2, #1
 800563a:	409a      	lsls	r2, r3
 800563c:	4b23      	ldr	r3, [pc, #140]	; (80056cc <xTaskIncrementTick+0x15c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4313      	orrs	r3, r2
 8005642:	4a22      	ldr	r2, [pc, #136]	; (80056cc <xTaskIncrementTick+0x15c>)
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564a:	4613      	mov	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4a1f      	ldr	r2, [pc, #124]	; (80056d0 <xTaskIncrementTick+0x160>)
 8005654:	441a      	add	r2, r3
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	3304      	adds	r3, #4
 800565a:	4619      	mov	r1, r3
 800565c:	4610      	mov	r0, r2
 800565e:	f7ff fc2f 	bl	8004ec0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005666:	4b1b      	ldr	r3, [pc, #108]	; (80056d4 <xTaskIncrementTick+0x164>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	429a      	cmp	r2, r3
 800566e:	d3b9      	bcc.n	80055e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005670:	2301      	movs	r3, #1
 8005672:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005674:	e7b6      	b.n	80055e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005676:	4b17      	ldr	r3, [pc, #92]	; (80056d4 <xTaskIncrementTick+0x164>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567c:	4914      	ldr	r1, [pc, #80]	; (80056d0 <xTaskIncrementTick+0x160>)
 800567e:	4613      	mov	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	440b      	add	r3, r1
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d901      	bls.n	8005692 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800568e:	2301      	movs	r3, #1
 8005690:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005692:	4b11      	ldr	r3, [pc, #68]	; (80056d8 <xTaskIncrementTick+0x168>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d007      	beq.n	80056aa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800569a:	2301      	movs	r3, #1
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	e004      	b.n	80056aa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80056a0:	4b0e      	ldr	r3, [pc, #56]	; (80056dc <xTaskIncrementTick+0x16c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3301      	adds	r3, #1
 80056a6:	4a0d      	ldr	r2, [pc, #52]	; (80056dc <xTaskIncrementTick+0x16c>)
 80056a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80056aa:	697b      	ldr	r3, [r7, #20]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	20001b6c 	.word	0x20001b6c
 80056b8:	20001b48 	.word	0x20001b48
 80056bc:	20001afc 	.word	0x20001afc
 80056c0:	20001b00 	.word	0x20001b00
 80056c4:	20001b5c 	.word	0x20001b5c
 80056c8:	20001b64 	.word	0x20001b64
 80056cc:	20001b4c 	.word	0x20001b4c
 80056d0:	20001a48 	.word	0x20001a48
 80056d4:	20001a44 	.word	0x20001a44
 80056d8:	20001b58 	.word	0x20001b58
 80056dc:	20001b54 	.word	0x20001b54

080056e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056e6:	4b27      	ldr	r3, [pc, #156]	; (8005784 <vTaskSwitchContext+0xa4>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80056ee:	4b26      	ldr	r3, [pc, #152]	; (8005788 <vTaskSwitchContext+0xa8>)
 80056f0:	2201      	movs	r2, #1
 80056f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80056f4:	e03f      	b.n	8005776 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80056f6:	4b24      	ldr	r3, [pc, #144]	; (8005788 <vTaskSwitchContext+0xa8>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056fc:	4b23      	ldr	r3, [pc, #140]	; (800578c <vTaskSwitchContext+0xac>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	fab3 f383 	clz	r3, r3
 8005708:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800570a:	7afb      	ldrb	r3, [r7, #11]
 800570c:	f1c3 031f 	rsb	r3, r3, #31
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	491f      	ldr	r1, [pc, #124]	; (8005790 <vTaskSwitchContext+0xb0>)
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	4613      	mov	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	440b      	add	r3, r1
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10a      	bne.n	800573c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572a:	f383 8811 	msr	BASEPRI, r3
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	607b      	str	r3, [r7, #4]
}
 8005738:	bf00      	nop
 800573a:	e7fe      	b.n	800573a <vTaskSwitchContext+0x5a>
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4613      	mov	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4a12      	ldr	r2, [pc, #72]	; (8005790 <vTaskSwitchContext+0xb0>)
 8005748:	4413      	add	r3, r2
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	605a      	str	r2, [r3, #4]
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	3308      	adds	r3, #8
 800575e:	429a      	cmp	r2, r3
 8005760:	d104      	bne.n	800576c <vTaskSwitchContext+0x8c>
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	605a      	str	r2, [r3, #4]
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	4a08      	ldr	r2, [pc, #32]	; (8005794 <vTaskSwitchContext+0xb4>)
 8005774:	6013      	str	r3, [r2, #0]
}
 8005776:	bf00      	nop
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	20001b6c 	.word	0x20001b6c
 8005788:	20001b58 	.word	0x20001b58
 800578c:	20001b4c 	.word	0x20001b4c
 8005790:	20001a48 	.word	0x20001a48
 8005794:	20001a44 	.word	0x20001a44

08005798 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057a0:	f000 f852 	bl	8005848 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057a4:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <prvIdleTask+0x28>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d9f9      	bls.n	80057a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80057ac:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <prvIdleTask+0x2c>)
 80057ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057bc:	e7f0      	b.n	80057a0 <prvIdleTask+0x8>
 80057be:	bf00      	nop
 80057c0:	20001a48 	.word	0x20001a48
 80057c4:	e000ed04 	.word	0xe000ed04

080057c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057ce:	2300      	movs	r3, #0
 80057d0:	607b      	str	r3, [r7, #4]
 80057d2:	e00c      	b.n	80057ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	4613      	mov	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4a12      	ldr	r2, [pc, #72]	; (8005828 <prvInitialiseTaskLists+0x60>)
 80057e0:	4413      	add	r3, r2
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff fb3f 	bl	8004e66 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3301      	adds	r3, #1
 80057ec:	607b      	str	r3, [r7, #4]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b06      	cmp	r3, #6
 80057f2:	d9ef      	bls.n	80057d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057f4:	480d      	ldr	r0, [pc, #52]	; (800582c <prvInitialiseTaskLists+0x64>)
 80057f6:	f7ff fb36 	bl	8004e66 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057fa:	480d      	ldr	r0, [pc, #52]	; (8005830 <prvInitialiseTaskLists+0x68>)
 80057fc:	f7ff fb33 	bl	8004e66 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005800:	480c      	ldr	r0, [pc, #48]	; (8005834 <prvInitialiseTaskLists+0x6c>)
 8005802:	f7ff fb30 	bl	8004e66 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005806:	480c      	ldr	r0, [pc, #48]	; (8005838 <prvInitialiseTaskLists+0x70>)
 8005808:	f7ff fb2d 	bl	8004e66 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800580c:	480b      	ldr	r0, [pc, #44]	; (800583c <prvInitialiseTaskLists+0x74>)
 800580e:	f7ff fb2a 	bl	8004e66 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005812:	4b0b      	ldr	r3, [pc, #44]	; (8005840 <prvInitialiseTaskLists+0x78>)
 8005814:	4a05      	ldr	r2, [pc, #20]	; (800582c <prvInitialiseTaskLists+0x64>)
 8005816:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005818:	4b0a      	ldr	r3, [pc, #40]	; (8005844 <prvInitialiseTaskLists+0x7c>)
 800581a:	4a05      	ldr	r2, [pc, #20]	; (8005830 <prvInitialiseTaskLists+0x68>)
 800581c:	601a      	str	r2, [r3, #0]
}
 800581e:	bf00      	nop
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	20001a48 	.word	0x20001a48
 800582c:	20001ad4 	.word	0x20001ad4
 8005830:	20001ae8 	.word	0x20001ae8
 8005834:	20001b04 	.word	0x20001b04
 8005838:	20001b18 	.word	0x20001b18
 800583c:	20001b30 	.word	0x20001b30
 8005840:	20001afc 	.word	0x20001afc
 8005844:	20001b00 	.word	0x20001b00

08005848 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800584e:	e019      	b.n	8005884 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005850:	f000 fa08 	bl	8005c64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005854:	4b10      	ldr	r3, [pc, #64]	; (8005898 <prvCheckTasksWaitingTermination+0x50>)
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3304      	adds	r3, #4
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff fb8a 	bl	8004f7a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005866:	4b0d      	ldr	r3, [pc, #52]	; (800589c <prvCheckTasksWaitingTermination+0x54>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3b01      	subs	r3, #1
 800586c:	4a0b      	ldr	r2, [pc, #44]	; (800589c <prvCheckTasksWaitingTermination+0x54>)
 800586e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005870:	4b0b      	ldr	r3, [pc, #44]	; (80058a0 <prvCheckTasksWaitingTermination+0x58>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3b01      	subs	r3, #1
 8005876:	4a0a      	ldr	r2, [pc, #40]	; (80058a0 <prvCheckTasksWaitingTermination+0x58>)
 8005878:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800587a:	f000 fa23 	bl	8005cc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f810 	bl	80058a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005884:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <prvCheckTasksWaitingTermination+0x58>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e1      	bne.n	8005850 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800588c:	bf00      	nop
 800588e:	bf00      	nop
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20001b18 	.word	0x20001b18
 800589c:	20001b44 	.word	0x20001b44
 80058a0:	20001b2c 	.word	0x20001b2c

080058a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d108      	bne.n	80058c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fb80 	bl	8005fc0 <vPortFree>
				vPortFree( pxTCB );
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 fb7d 	bl	8005fc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058c6:	e018      	b.n	80058fa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d103      	bne.n	80058da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fb74 	bl	8005fc0 <vPortFree>
	}
 80058d8:	e00f      	b.n	80058fa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d00a      	beq.n	80058fa <prvDeleteTCB+0x56>
	__asm volatile
 80058e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	60fb      	str	r3, [r7, #12]
}
 80058f6:	bf00      	nop
 80058f8:	e7fe      	b.n	80058f8 <prvDeleteTCB+0x54>
	}
 80058fa:	bf00      	nop
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800590a:	4b0c      	ldr	r3, [pc, #48]	; (800593c <prvResetNextTaskUnblockTime+0x38>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d104      	bne.n	800591e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005914:	4b0a      	ldr	r3, [pc, #40]	; (8005940 <prvResetNextTaskUnblockTime+0x3c>)
 8005916:	f04f 32ff 	mov.w	r2, #4294967295
 800591a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800591c:	e008      	b.n	8005930 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800591e:	4b07      	ldr	r3, [pc, #28]	; (800593c <prvResetNextTaskUnblockTime+0x38>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	4a04      	ldr	r2, [pc, #16]	; (8005940 <prvResetNextTaskUnblockTime+0x3c>)
 800592e:	6013      	str	r3, [r2, #0]
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	20001afc 	.word	0x20001afc
 8005940:	20001b64 	.word	0x20001b64

08005944 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800594e:	4b29      	ldr	r3, [pc, #164]	; (80059f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005954:	4b28      	ldr	r3, [pc, #160]	; (80059f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3304      	adds	r3, #4
 800595a:	4618      	mov	r0, r3
 800595c:	f7ff fb0d 	bl	8004f7a <uxListRemove>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10b      	bne.n	800597e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005966:	4b24      	ldr	r3, [pc, #144]	; (80059f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	2201      	movs	r2, #1
 800596e:	fa02 f303 	lsl.w	r3, r2, r3
 8005972:	43da      	mvns	r2, r3
 8005974:	4b21      	ldr	r3, [pc, #132]	; (80059fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4013      	ands	r3, r2
 800597a:	4a20      	ldr	r2, [pc, #128]	; (80059fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800597c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005984:	d10a      	bne.n	800599c <prvAddCurrentTaskToDelayedList+0x58>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d007      	beq.n	800599c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800598c:	4b1a      	ldr	r3, [pc, #104]	; (80059f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3304      	adds	r3, #4
 8005992:	4619      	mov	r1, r3
 8005994:	481a      	ldr	r0, [pc, #104]	; (8005a00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005996:	f7ff fa93 	bl	8004ec0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800599a:	e026      	b.n	80059ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4413      	add	r3, r2
 80059a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80059a4:	4b14      	ldr	r3, [pc, #80]	; (80059f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d209      	bcs.n	80059c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059b4:	4b13      	ldr	r3, [pc, #76]	; (8005a04 <prvAddCurrentTaskToDelayedList+0xc0>)
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	4b0f      	ldr	r3, [pc, #60]	; (80059f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3304      	adds	r3, #4
 80059be:	4619      	mov	r1, r3
 80059c0:	4610      	mov	r0, r2
 80059c2:	f7ff faa1 	bl	8004f08 <vListInsert>
}
 80059c6:	e010      	b.n	80059ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059c8:	4b0f      	ldr	r3, [pc, #60]	; (8005a08 <prvAddCurrentTaskToDelayedList+0xc4>)
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	4b0a      	ldr	r3, [pc, #40]	; (80059f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3304      	adds	r3, #4
 80059d2:	4619      	mov	r1, r3
 80059d4:	4610      	mov	r0, r2
 80059d6:	f7ff fa97 	bl	8004f08 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059da:	4b0c      	ldr	r3, [pc, #48]	; (8005a0c <prvAddCurrentTaskToDelayedList+0xc8>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d202      	bcs.n	80059ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80059e4:	4a09      	ldr	r2, [pc, #36]	; (8005a0c <prvAddCurrentTaskToDelayedList+0xc8>)
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	6013      	str	r3, [r2, #0]
}
 80059ea:	bf00      	nop
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20001b48 	.word	0x20001b48
 80059f8:	20001a44 	.word	0x20001a44
 80059fc:	20001b4c 	.word	0x20001b4c
 8005a00:	20001b30 	.word	0x20001b30
 8005a04:	20001b00 	.word	0x20001b00
 8005a08:	20001afc 	.word	0x20001afc
 8005a0c:	20001b64 	.word	0x20001b64

08005a10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	3b04      	subs	r3, #4
 8005a20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3b04      	subs	r3, #4
 8005a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f023 0201 	bic.w	r2, r3, #1
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	3b04      	subs	r3, #4
 8005a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a40:	4a0c      	ldr	r2, [pc, #48]	; (8005a74 <pxPortInitialiseStack+0x64>)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3b14      	subs	r3, #20
 8005a4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3b04      	subs	r3, #4
 8005a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f06f 0202 	mvn.w	r2, #2
 8005a5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	3b20      	subs	r3, #32
 8005a64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a66:	68fb      	ldr	r3, [r7, #12]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	08005a79 	.word	0x08005a79

08005a78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a82:	4b12      	ldr	r3, [pc, #72]	; (8005acc <prvTaskExitError+0x54>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8a:	d00a      	beq.n	8005aa2 <prvTaskExitError+0x2a>
	__asm volatile
 8005a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	60fb      	str	r3, [r7, #12]
}
 8005a9e:	bf00      	nop
 8005aa0:	e7fe      	b.n	8005aa0 <prvTaskExitError+0x28>
	__asm volatile
 8005aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa6:	f383 8811 	msr	BASEPRI, r3
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	60bb      	str	r3, [r7, #8]
}
 8005ab4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ab6:	bf00      	nop
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0fc      	beq.n	8005ab8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005abe:	bf00      	nop
 8005ac0:	bf00      	nop
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	20000010 	.word	0x20000010

08005ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ad0:	4b07      	ldr	r3, [pc, #28]	; (8005af0 <pxCurrentTCBConst2>)
 8005ad2:	6819      	ldr	r1, [r3, #0]
 8005ad4:	6808      	ldr	r0, [r1, #0]
 8005ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ada:	f380 8809 	msr	PSP, r0
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f04f 0000 	mov.w	r0, #0
 8005ae6:	f380 8811 	msr	BASEPRI, r0
 8005aea:	4770      	bx	lr
 8005aec:	f3af 8000 	nop.w

08005af0 <pxCurrentTCBConst2>:
 8005af0:	20001a44 	.word	0x20001a44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop

08005af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005af8:	4808      	ldr	r0, [pc, #32]	; (8005b1c <prvPortStartFirstTask+0x24>)
 8005afa:	6800      	ldr	r0, [r0, #0]
 8005afc:	6800      	ldr	r0, [r0, #0]
 8005afe:	f380 8808 	msr	MSP, r0
 8005b02:	f04f 0000 	mov.w	r0, #0
 8005b06:	f380 8814 	msr	CONTROL, r0
 8005b0a:	b662      	cpsie	i
 8005b0c:	b661      	cpsie	f
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	df00      	svc	0
 8005b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b1a:	bf00      	nop
 8005b1c:	e000ed08 	.word	0xe000ed08

08005b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b26:	4b46      	ldr	r3, [pc, #280]	; (8005c40 <xPortStartScheduler+0x120>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a46      	ldr	r2, [pc, #280]	; (8005c44 <xPortStartScheduler+0x124>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d10a      	bne.n	8005b46 <xPortStartScheduler+0x26>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	613b      	str	r3, [r7, #16]
}
 8005b42:	bf00      	nop
 8005b44:	e7fe      	b.n	8005b44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b46:	4b3e      	ldr	r3, [pc, #248]	; (8005c40 <xPortStartScheduler+0x120>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a3f      	ldr	r2, [pc, #252]	; (8005c48 <xPortStartScheduler+0x128>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d10a      	bne.n	8005b66 <xPortStartScheduler+0x46>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	60fb      	str	r3, [r7, #12]
}
 8005b62:	bf00      	nop
 8005b64:	e7fe      	b.n	8005b64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b66:	4b39      	ldr	r3, [pc, #228]	; (8005c4c <xPortStartScheduler+0x12c>)
 8005b68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	22ff      	movs	r2, #255	; 0xff
 8005b76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	4b31      	ldr	r3, [pc, #196]	; (8005c50 <xPortStartScheduler+0x130>)
 8005b8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b8e:	4b31      	ldr	r3, [pc, #196]	; (8005c54 <xPortStartScheduler+0x134>)
 8005b90:	2207      	movs	r2, #7
 8005b92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b94:	e009      	b.n	8005baa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005b96:	4b2f      	ldr	r3, [pc, #188]	; (8005c54 <xPortStartScheduler+0x134>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	4a2d      	ldr	r2, [pc, #180]	; (8005c54 <xPortStartScheduler+0x134>)
 8005b9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ba0:	78fb      	ldrb	r3, [r7, #3]
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005baa:	78fb      	ldrb	r3, [r7, #3]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb2:	2b80      	cmp	r3, #128	; 0x80
 8005bb4:	d0ef      	beq.n	8005b96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005bb6:	4b27      	ldr	r3, [pc, #156]	; (8005c54 <xPortStartScheduler+0x134>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f1c3 0307 	rsb	r3, r3, #7
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d00a      	beq.n	8005bd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc6:	f383 8811 	msr	BASEPRI, r3
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	60bb      	str	r3, [r7, #8]
}
 8005bd4:	bf00      	nop
 8005bd6:	e7fe      	b.n	8005bd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005bd8:	4b1e      	ldr	r3, [pc, #120]	; (8005c54 <xPortStartScheduler+0x134>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	021b      	lsls	r3, r3, #8
 8005bde:	4a1d      	ldr	r2, [pc, #116]	; (8005c54 <xPortStartScheduler+0x134>)
 8005be0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005be2:	4b1c      	ldr	r3, [pc, #112]	; (8005c54 <xPortStartScheduler+0x134>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bea:	4a1a      	ldr	r2, [pc, #104]	; (8005c54 <xPortStartScheduler+0x134>)
 8005bec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005bf6:	4b18      	ldr	r3, [pc, #96]	; (8005c58 <xPortStartScheduler+0x138>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a17      	ldr	r2, [pc, #92]	; (8005c58 <xPortStartScheduler+0x138>)
 8005bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c02:	4b15      	ldr	r3, [pc, #84]	; (8005c58 <xPortStartScheduler+0x138>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a14      	ldr	r2, [pc, #80]	; (8005c58 <xPortStartScheduler+0x138>)
 8005c08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c0e:	f000 f8dd 	bl	8005dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c12:	4b12      	ldr	r3, [pc, #72]	; (8005c5c <xPortStartScheduler+0x13c>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c18:	f000 f8fc 	bl	8005e14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c1c:	4b10      	ldr	r3, [pc, #64]	; (8005c60 <xPortStartScheduler+0x140>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a0f      	ldr	r2, [pc, #60]	; (8005c60 <xPortStartScheduler+0x140>)
 8005c22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c28:	f7ff ff66 	bl	8005af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c2c:	f7ff fd58 	bl	80056e0 <vTaskSwitchContext>
	prvTaskExitError();
 8005c30:	f7ff ff22 	bl	8005a78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	e000ed00 	.word	0xe000ed00
 8005c44:	410fc271 	.word	0x410fc271
 8005c48:	410fc270 	.word	0x410fc270
 8005c4c:	e000e400 	.word	0xe000e400
 8005c50:	20001b70 	.word	0x20001b70
 8005c54:	20001b74 	.word	0x20001b74
 8005c58:	e000ed20 	.word	0xe000ed20
 8005c5c:	20000010 	.word	0x20000010
 8005c60:	e000ef34 	.word	0xe000ef34

08005c64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
	__asm volatile
 8005c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6e:	f383 8811 	msr	BASEPRI, r3
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	607b      	str	r3, [r7, #4]
}
 8005c7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c7e:	4b0f      	ldr	r3, [pc, #60]	; (8005cbc <vPortEnterCritical+0x58>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3301      	adds	r3, #1
 8005c84:	4a0d      	ldr	r2, [pc, #52]	; (8005cbc <vPortEnterCritical+0x58>)
 8005c86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c88:	4b0c      	ldr	r3, [pc, #48]	; (8005cbc <vPortEnterCritical+0x58>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d10f      	bne.n	8005cb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <vPortEnterCritical+0x5c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00a      	beq.n	8005cb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9e:	f383 8811 	msr	BASEPRI, r3
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	603b      	str	r3, [r7, #0]
}
 8005cac:	bf00      	nop
 8005cae:	e7fe      	b.n	8005cae <vPortEnterCritical+0x4a>
	}
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	20000010 	.word	0x20000010
 8005cc0:	e000ed04 	.word	0xe000ed04

08005cc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005cca:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <vPortExitCritical+0x50>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10a      	bne.n	8005ce8 <vPortExitCritical+0x24>
	__asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	607b      	str	r3, [r7, #4]
}
 8005ce4:	bf00      	nop
 8005ce6:	e7fe      	b.n	8005ce6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ce8:	4b0a      	ldr	r3, [pc, #40]	; (8005d14 <vPortExitCritical+0x50>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3b01      	subs	r3, #1
 8005cee:	4a09      	ldr	r2, [pc, #36]	; (8005d14 <vPortExitCritical+0x50>)
 8005cf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005cf2:	4b08      	ldr	r3, [pc, #32]	; (8005d14 <vPortExitCritical+0x50>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d105      	bne.n	8005d06 <vPortExitCritical+0x42>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	20000010 	.word	0x20000010
	...

08005d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d20:	f3ef 8009 	mrs	r0, PSP
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	4b15      	ldr	r3, [pc, #84]	; (8005d80 <pxCurrentTCBConst>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	f01e 0f10 	tst.w	lr, #16
 8005d30:	bf08      	it	eq
 8005d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3a:	6010      	str	r0, [r2, #0]
 8005d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d44:	f380 8811 	msr	BASEPRI, r0
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f7ff fcc6 	bl	80056e0 <vTaskSwitchContext>
 8005d54:	f04f 0000 	mov.w	r0, #0
 8005d58:	f380 8811 	msr	BASEPRI, r0
 8005d5c:	bc09      	pop	{r0, r3}
 8005d5e:	6819      	ldr	r1, [r3, #0]
 8005d60:	6808      	ldr	r0, [r1, #0]
 8005d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d66:	f01e 0f10 	tst.w	lr, #16
 8005d6a:	bf08      	it	eq
 8005d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d70:	f380 8809 	msr	PSP, r0
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	f3af 8000 	nop.w

08005d80 <pxCurrentTCBConst>:
 8005d80:	20001a44 	.word	0x20001a44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop

08005d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	607b      	str	r3, [r7, #4]
}
 8005da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005da2:	f7ff fbe5 	bl	8005570 <xTaskIncrementTick>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dac:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <SysTick_Handler+0x40>)
 8005dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	2300      	movs	r3, #0
 8005db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	f383 8811 	msr	BASEPRI, r3
}
 8005dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005dc0:	bf00      	nop
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	e000ed04 	.word	0xe000ed04

08005dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <vPortSetupTimerInterrupt+0x34>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <vPortSetupTimerInterrupt+0x38>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ddc:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <vPortSetupTimerInterrupt+0x3c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a0a      	ldr	r2, [pc, #40]	; (8005e0c <vPortSetupTimerInterrupt+0x40>)
 8005de2:	fba2 2303 	umull	r2, r3, r2, r3
 8005de6:	099b      	lsrs	r3, r3, #6
 8005de8:	4a09      	ldr	r2, [pc, #36]	; (8005e10 <vPortSetupTimerInterrupt+0x44>)
 8005dea:	3b01      	subs	r3, #1
 8005dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005dee:	4b04      	ldr	r3, [pc, #16]	; (8005e00 <vPortSetupTimerInterrupt+0x34>)
 8005df0:	2207      	movs	r2, #7
 8005df2:	601a      	str	r2, [r3, #0]
}
 8005df4:	bf00      	nop
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	e000e010 	.word	0xe000e010
 8005e04:	e000e018 	.word	0xe000e018
 8005e08:	20000004 	.word	0x20000004
 8005e0c:	10624dd3 	.word	0x10624dd3
 8005e10:	e000e014 	.word	0xe000e014

08005e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e24 <vPortEnableVFP+0x10>
 8005e18:	6801      	ldr	r1, [r0, #0]
 8005e1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e1e:	6001      	str	r1, [r0, #0]
 8005e20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e22:	bf00      	nop
 8005e24:	e000ed88 	.word	0xe000ed88

08005e28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08a      	sub	sp, #40	; 0x28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e30:	2300      	movs	r3, #0
 8005e32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e34:	f7ff faf2 	bl	800541c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e38:	4b5b      	ldr	r3, [pc, #364]	; (8005fa8 <pvPortMalloc+0x180>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e40:	f000 f920 	bl	8006084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e44:	4b59      	ldr	r3, [pc, #356]	; (8005fac <pvPortMalloc+0x184>)
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f040 8093 	bne.w	8005f78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d01d      	beq.n	8005e94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005e58:	2208      	movs	r2, #8
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f003 0307 	and.w	r3, r3, #7
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d014      	beq.n	8005e94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f023 0307 	bic.w	r3, r3, #7
 8005e70:	3308      	adds	r3, #8
 8005e72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00a      	beq.n	8005e94 <pvPortMalloc+0x6c>
	__asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	617b      	str	r3, [r7, #20]
}
 8005e90:	bf00      	nop
 8005e92:	e7fe      	b.n	8005e92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d06e      	beq.n	8005f78 <pvPortMalloc+0x150>
 8005e9a:	4b45      	ldr	r3, [pc, #276]	; (8005fb0 <pvPortMalloc+0x188>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d869      	bhi.n	8005f78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ea4:	4b43      	ldr	r3, [pc, #268]	; (8005fb4 <pvPortMalloc+0x18c>)
 8005ea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ea8:	4b42      	ldr	r3, [pc, #264]	; (8005fb4 <pvPortMalloc+0x18c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005eae:	e004      	b.n	8005eba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d903      	bls.n	8005ecc <pvPortMalloc+0xa4>
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1f1      	bne.n	8005eb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ecc:	4b36      	ldr	r3, [pc, #216]	; (8005fa8 <pvPortMalloc+0x180>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d050      	beq.n	8005f78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2208      	movs	r2, #8
 8005edc:	4413      	add	r3, r2
 8005ede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	1ad2      	subs	r2, r2, r3
 8005ef0:	2308      	movs	r3, #8
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d91f      	bls.n	8005f38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4413      	add	r3, r2
 8005efe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00a      	beq.n	8005f20 <pvPortMalloc+0xf8>
	__asm volatile
 8005f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	613b      	str	r3, [r7, #16]
}
 8005f1c:	bf00      	nop
 8005f1e:	e7fe      	b.n	8005f1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	1ad2      	subs	r2, r2, r3
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f32:	69b8      	ldr	r0, [r7, #24]
 8005f34:	f000 f908 	bl	8006148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f38:	4b1d      	ldr	r3, [pc, #116]	; (8005fb0 <pvPortMalloc+0x188>)
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	4a1b      	ldr	r2, [pc, #108]	; (8005fb0 <pvPortMalloc+0x188>)
 8005f44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f46:	4b1a      	ldr	r3, [pc, #104]	; (8005fb0 <pvPortMalloc+0x188>)
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	4b1b      	ldr	r3, [pc, #108]	; (8005fb8 <pvPortMalloc+0x190>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d203      	bcs.n	8005f5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f52:	4b17      	ldr	r3, [pc, #92]	; (8005fb0 <pvPortMalloc+0x188>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a18      	ldr	r2, [pc, #96]	; (8005fb8 <pvPortMalloc+0x190>)
 8005f58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	4b13      	ldr	r3, [pc, #76]	; (8005fac <pvPortMalloc+0x184>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	431a      	orrs	r2, r3
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005f6e:	4b13      	ldr	r3, [pc, #76]	; (8005fbc <pvPortMalloc+0x194>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3301      	adds	r3, #1
 8005f74:	4a11      	ldr	r2, [pc, #68]	; (8005fbc <pvPortMalloc+0x194>)
 8005f76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f78:	f7ff fa5e 	bl	8005438 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <pvPortMalloc+0x174>
	__asm volatile
 8005f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8a:	f383 8811 	msr	BASEPRI, r3
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	60fb      	str	r3, [r7, #12]
}
 8005f98:	bf00      	nop
 8005f9a:	e7fe      	b.n	8005f9a <pvPortMalloc+0x172>
	return pvReturn;
 8005f9c:	69fb      	ldr	r3, [r7, #28]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3728      	adds	r7, #40	; 0x28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20005780 	.word	0x20005780
 8005fac:	20005794 	.word	0x20005794
 8005fb0:	20005784 	.word	0x20005784
 8005fb4:	20005778 	.word	0x20005778
 8005fb8:	20005788 	.word	0x20005788
 8005fbc:	2000578c 	.word	0x2000578c

08005fc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d04d      	beq.n	800606e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005fd2:	2308      	movs	r3, #8
 8005fd4:	425b      	negs	r3, r3
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	4413      	add	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	4b24      	ldr	r3, [pc, #144]	; (8006078 <vPortFree+0xb8>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4013      	ands	r3, r2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10a      	bne.n	8006004 <vPortFree+0x44>
	__asm volatile
 8005fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	60fb      	str	r3, [r7, #12]
}
 8006000:	bf00      	nop
 8006002:	e7fe      	b.n	8006002 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00a      	beq.n	8006022 <vPortFree+0x62>
	__asm volatile
 800600c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006010:	f383 8811 	msr	BASEPRI, r3
 8006014:	f3bf 8f6f 	isb	sy
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	60bb      	str	r3, [r7, #8]
}
 800601e:	bf00      	nop
 8006020:	e7fe      	b.n	8006020 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	4b14      	ldr	r3, [pc, #80]	; (8006078 <vPortFree+0xb8>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4013      	ands	r3, r2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d01e      	beq.n	800606e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d11a      	bne.n	800606e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	4b0e      	ldr	r3, [pc, #56]	; (8006078 <vPortFree+0xb8>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	43db      	mvns	r3, r3
 8006042:	401a      	ands	r2, r3
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006048:	f7ff f9e8 	bl	800541c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	4b0a      	ldr	r3, [pc, #40]	; (800607c <vPortFree+0xbc>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4413      	add	r3, r2
 8006056:	4a09      	ldr	r2, [pc, #36]	; (800607c <vPortFree+0xbc>)
 8006058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800605a:	6938      	ldr	r0, [r7, #16]
 800605c:	f000 f874 	bl	8006148 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006060:	4b07      	ldr	r3, [pc, #28]	; (8006080 <vPortFree+0xc0>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3301      	adds	r3, #1
 8006066:	4a06      	ldr	r2, [pc, #24]	; (8006080 <vPortFree+0xc0>)
 8006068:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800606a:	f7ff f9e5 	bl	8005438 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800606e:	bf00      	nop
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20005794 	.word	0x20005794
 800607c:	20005784 	.word	0x20005784
 8006080:	20005790 	.word	0x20005790

08006084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800608a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800608e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006090:	4b27      	ldr	r3, [pc, #156]	; (8006130 <prvHeapInit+0xac>)
 8006092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f003 0307 	and.w	r3, r3, #7
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00c      	beq.n	80060b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	3307      	adds	r3, #7
 80060a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0307 	bic.w	r3, r3, #7
 80060aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	4a1f      	ldr	r2, [pc, #124]	; (8006130 <prvHeapInit+0xac>)
 80060b4:	4413      	add	r3, r2
 80060b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80060bc:	4a1d      	ldr	r2, [pc, #116]	; (8006134 <prvHeapInit+0xb0>)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060c2:	4b1c      	ldr	r3, [pc, #112]	; (8006134 <prvHeapInit+0xb0>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	4413      	add	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80060d0:	2208      	movs	r2, #8
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	1a9b      	subs	r3, r3, r2
 80060d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 0307 	bic.w	r3, r3, #7
 80060de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4a15      	ldr	r2, [pc, #84]	; (8006138 <prvHeapInit+0xb4>)
 80060e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80060e6:	4b14      	ldr	r3, [pc, #80]	; (8006138 <prvHeapInit+0xb4>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2200      	movs	r2, #0
 80060ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80060ee:	4b12      	ldr	r3, [pc, #72]	; (8006138 <prvHeapInit+0xb4>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2200      	movs	r2, #0
 80060f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	1ad2      	subs	r2, r2, r3
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006104:	4b0c      	ldr	r3, [pc, #48]	; (8006138 <prvHeapInit+0xb4>)
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	4a0a      	ldr	r2, [pc, #40]	; (800613c <prvHeapInit+0xb8>)
 8006112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	4a09      	ldr	r2, [pc, #36]	; (8006140 <prvHeapInit+0xbc>)
 800611a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800611c:	4b09      	ldr	r3, [pc, #36]	; (8006144 <prvHeapInit+0xc0>)
 800611e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006122:	601a      	str	r2, [r3, #0]
}
 8006124:	bf00      	nop
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr
 8006130:	20001b78 	.word	0x20001b78
 8006134:	20005778 	.word	0x20005778
 8006138:	20005780 	.word	0x20005780
 800613c:	20005788 	.word	0x20005788
 8006140:	20005784 	.word	0x20005784
 8006144:	20005794 	.word	0x20005794

08006148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006150:	4b28      	ldr	r3, [pc, #160]	; (80061f4 <prvInsertBlockIntoFreeList+0xac>)
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	e002      	b.n	800615c <prvInsertBlockIntoFreeList+0x14>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	429a      	cmp	r2, r3
 8006164:	d8f7      	bhi.n	8006156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	4413      	add	r3, r2
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	429a      	cmp	r2, r3
 8006176:	d108      	bne.n	800618a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	441a      	add	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	441a      	add	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d118      	bne.n	80061d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	4b15      	ldr	r3, [pc, #84]	; (80061f8 <prvInsertBlockIntoFreeList+0xb0>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d00d      	beq.n	80061c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	441a      	add	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	e008      	b.n	80061d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061c6:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <prvInsertBlockIntoFreeList+0xb0>)
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	e003      	b.n	80061d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d002      	beq.n	80061e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061e6:	bf00      	nop
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	20005778 	.word	0x20005778
 80061f8:	20005780 	.word	0x20005780

080061fc <__errno>:
 80061fc:	4b01      	ldr	r3, [pc, #4]	; (8006204 <__errno+0x8>)
 80061fe:	6818      	ldr	r0, [r3, #0]
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	20000014 	.word	0x20000014

08006208 <__libc_init_array>:
 8006208:	b570      	push	{r4, r5, r6, lr}
 800620a:	4d0d      	ldr	r5, [pc, #52]	; (8006240 <__libc_init_array+0x38>)
 800620c:	4c0d      	ldr	r4, [pc, #52]	; (8006244 <__libc_init_array+0x3c>)
 800620e:	1b64      	subs	r4, r4, r5
 8006210:	10a4      	asrs	r4, r4, #2
 8006212:	2600      	movs	r6, #0
 8006214:	42a6      	cmp	r6, r4
 8006216:	d109      	bne.n	800622c <__libc_init_array+0x24>
 8006218:	4d0b      	ldr	r5, [pc, #44]	; (8006248 <__libc_init_array+0x40>)
 800621a:	4c0c      	ldr	r4, [pc, #48]	; (800624c <__libc_init_array+0x44>)
 800621c:	f001 fdf4 	bl	8007e08 <_init>
 8006220:	1b64      	subs	r4, r4, r5
 8006222:	10a4      	asrs	r4, r4, #2
 8006224:	2600      	movs	r6, #0
 8006226:	42a6      	cmp	r6, r4
 8006228:	d105      	bne.n	8006236 <__libc_init_array+0x2e>
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006230:	4798      	blx	r3
 8006232:	3601      	adds	r6, #1
 8006234:	e7ee      	b.n	8006214 <__libc_init_array+0xc>
 8006236:	f855 3b04 	ldr.w	r3, [r5], #4
 800623a:	4798      	blx	r3
 800623c:	3601      	adds	r6, #1
 800623e:	e7f2      	b.n	8006226 <__libc_init_array+0x1e>
 8006240:	08008164 	.word	0x08008164
 8006244:	08008164 	.word	0x08008164
 8006248:	08008164 	.word	0x08008164
 800624c:	08008168 	.word	0x08008168

08006250 <memcpy>:
 8006250:	440a      	add	r2, r1
 8006252:	4291      	cmp	r1, r2
 8006254:	f100 33ff 	add.w	r3, r0, #4294967295
 8006258:	d100      	bne.n	800625c <memcpy+0xc>
 800625a:	4770      	bx	lr
 800625c:	b510      	push	{r4, lr}
 800625e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006262:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006266:	4291      	cmp	r1, r2
 8006268:	d1f9      	bne.n	800625e <memcpy+0xe>
 800626a:	bd10      	pop	{r4, pc}

0800626c <memset>:
 800626c:	4402      	add	r2, r0
 800626e:	4603      	mov	r3, r0
 8006270:	4293      	cmp	r3, r2
 8006272:	d100      	bne.n	8006276 <memset+0xa>
 8006274:	4770      	bx	lr
 8006276:	f803 1b01 	strb.w	r1, [r3], #1
 800627a:	e7f9      	b.n	8006270 <memset+0x4>

0800627c <iprintf>:
 800627c:	b40f      	push	{r0, r1, r2, r3}
 800627e:	4b0a      	ldr	r3, [pc, #40]	; (80062a8 <iprintf+0x2c>)
 8006280:	b513      	push	{r0, r1, r4, lr}
 8006282:	681c      	ldr	r4, [r3, #0]
 8006284:	b124      	cbz	r4, 8006290 <iprintf+0x14>
 8006286:	69a3      	ldr	r3, [r4, #24]
 8006288:	b913      	cbnz	r3, 8006290 <iprintf+0x14>
 800628a:	4620      	mov	r0, r4
 800628c:	f000 fbb8 	bl	8006a00 <__sinit>
 8006290:	ab05      	add	r3, sp, #20
 8006292:	9a04      	ldr	r2, [sp, #16]
 8006294:	68a1      	ldr	r1, [r4, #8]
 8006296:	9301      	str	r3, [sp, #4]
 8006298:	4620      	mov	r0, r4
 800629a:	f000 ffad 	bl	80071f8 <_vfiprintf_r>
 800629e:	b002      	add	sp, #8
 80062a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062a4:	b004      	add	sp, #16
 80062a6:	4770      	bx	lr
 80062a8:	20000014 	.word	0x20000014

080062ac <_puts_r>:
 80062ac:	b570      	push	{r4, r5, r6, lr}
 80062ae:	460e      	mov	r6, r1
 80062b0:	4605      	mov	r5, r0
 80062b2:	b118      	cbz	r0, 80062bc <_puts_r+0x10>
 80062b4:	6983      	ldr	r3, [r0, #24]
 80062b6:	b90b      	cbnz	r3, 80062bc <_puts_r+0x10>
 80062b8:	f000 fba2 	bl	8006a00 <__sinit>
 80062bc:	69ab      	ldr	r3, [r5, #24]
 80062be:	68ac      	ldr	r4, [r5, #8]
 80062c0:	b913      	cbnz	r3, 80062c8 <_puts_r+0x1c>
 80062c2:	4628      	mov	r0, r5
 80062c4:	f000 fb9c 	bl	8006a00 <__sinit>
 80062c8:	4b2c      	ldr	r3, [pc, #176]	; (800637c <_puts_r+0xd0>)
 80062ca:	429c      	cmp	r4, r3
 80062cc:	d120      	bne.n	8006310 <_puts_r+0x64>
 80062ce:	686c      	ldr	r4, [r5, #4]
 80062d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062d2:	07db      	lsls	r3, r3, #31
 80062d4:	d405      	bmi.n	80062e2 <_puts_r+0x36>
 80062d6:	89a3      	ldrh	r3, [r4, #12]
 80062d8:	0598      	lsls	r0, r3, #22
 80062da:	d402      	bmi.n	80062e2 <_puts_r+0x36>
 80062dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062de:	f000 fc2d 	bl	8006b3c <__retarget_lock_acquire_recursive>
 80062e2:	89a3      	ldrh	r3, [r4, #12]
 80062e4:	0719      	lsls	r1, r3, #28
 80062e6:	d51d      	bpl.n	8006324 <_puts_r+0x78>
 80062e8:	6923      	ldr	r3, [r4, #16]
 80062ea:	b1db      	cbz	r3, 8006324 <_puts_r+0x78>
 80062ec:	3e01      	subs	r6, #1
 80062ee:	68a3      	ldr	r3, [r4, #8]
 80062f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80062f4:	3b01      	subs	r3, #1
 80062f6:	60a3      	str	r3, [r4, #8]
 80062f8:	bb39      	cbnz	r1, 800634a <_puts_r+0x9e>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	da38      	bge.n	8006370 <_puts_r+0xc4>
 80062fe:	4622      	mov	r2, r4
 8006300:	210a      	movs	r1, #10
 8006302:	4628      	mov	r0, r5
 8006304:	f000 f980 	bl	8006608 <__swbuf_r>
 8006308:	3001      	adds	r0, #1
 800630a:	d011      	beq.n	8006330 <_puts_r+0x84>
 800630c:	250a      	movs	r5, #10
 800630e:	e011      	b.n	8006334 <_puts_r+0x88>
 8006310:	4b1b      	ldr	r3, [pc, #108]	; (8006380 <_puts_r+0xd4>)
 8006312:	429c      	cmp	r4, r3
 8006314:	d101      	bne.n	800631a <_puts_r+0x6e>
 8006316:	68ac      	ldr	r4, [r5, #8]
 8006318:	e7da      	b.n	80062d0 <_puts_r+0x24>
 800631a:	4b1a      	ldr	r3, [pc, #104]	; (8006384 <_puts_r+0xd8>)
 800631c:	429c      	cmp	r4, r3
 800631e:	bf08      	it	eq
 8006320:	68ec      	ldreq	r4, [r5, #12]
 8006322:	e7d5      	b.n	80062d0 <_puts_r+0x24>
 8006324:	4621      	mov	r1, r4
 8006326:	4628      	mov	r0, r5
 8006328:	f000 f9d2 	bl	80066d0 <__swsetup_r>
 800632c:	2800      	cmp	r0, #0
 800632e:	d0dd      	beq.n	80062ec <_puts_r+0x40>
 8006330:	f04f 35ff 	mov.w	r5, #4294967295
 8006334:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006336:	07da      	lsls	r2, r3, #31
 8006338:	d405      	bmi.n	8006346 <_puts_r+0x9a>
 800633a:	89a3      	ldrh	r3, [r4, #12]
 800633c:	059b      	lsls	r3, r3, #22
 800633e:	d402      	bmi.n	8006346 <_puts_r+0x9a>
 8006340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006342:	f000 fbfc 	bl	8006b3e <__retarget_lock_release_recursive>
 8006346:	4628      	mov	r0, r5
 8006348:	bd70      	pop	{r4, r5, r6, pc}
 800634a:	2b00      	cmp	r3, #0
 800634c:	da04      	bge.n	8006358 <_puts_r+0xac>
 800634e:	69a2      	ldr	r2, [r4, #24]
 8006350:	429a      	cmp	r2, r3
 8006352:	dc06      	bgt.n	8006362 <_puts_r+0xb6>
 8006354:	290a      	cmp	r1, #10
 8006356:	d004      	beq.n	8006362 <_puts_r+0xb6>
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	6022      	str	r2, [r4, #0]
 800635e:	7019      	strb	r1, [r3, #0]
 8006360:	e7c5      	b.n	80062ee <_puts_r+0x42>
 8006362:	4622      	mov	r2, r4
 8006364:	4628      	mov	r0, r5
 8006366:	f000 f94f 	bl	8006608 <__swbuf_r>
 800636a:	3001      	adds	r0, #1
 800636c:	d1bf      	bne.n	80062ee <_puts_r+0x42>
 800636e:	e7df      	b.n	8006330 <_puts_r+0x84>
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	250a      	movs	r5, #10
 8006374:	1c5a      	adds	r2, r3, #1
 8006376:	6022      	str	r2, [r4, #0]
 8006378:	701d      	strb	r5, [r3, #0]
 800637a:	e7db      	b.n	8006334 <_puts_r+0x88>
 800637c:	08007fcc 	.word	0x08007fcc
 8006380:	08007fec 	.word	0x08007fec
 8006384:	08007fac 	.word	0x08007fac

08006388 <puts>:
 8006388:	4b02      	ldr	r3, [pc, #8]	; (8006394 <puts+0xc>)
 800638a:	4601      	mov	r1, r0
 800638c:	6818      	ldr	r0, [r3, #0]
 800638e:	f7ff bf8d 	b.w	80062ac <_puts_r>
 8006392:	bf00      	nop
 8006394:	20000014 	.word	0x20000014

08006398 <setvbuf>:
 8006398:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800639c:	461d      	mov	r5, r3
 800639e:	4b5d      	ldr	r3, [pc, #372]	; (8006514 <setvbuf+0x17c>)
 80063a0:	681f      	ldr	r7, [r3, #0]
 80063a2:	4604      	mov	r4, r0
 80063a4:	460e      	mov	r6, r1
 80063a6:	4690      	mov	r8, r2
 80063a8:	b127      	cbz	r7, 80063b4 <setvbuf+0x1c>
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	b913      	cbnz	r3, 80063b4 <setvbuf+0x1c>
 80063ae:	4638      	mov	r0, r7
 80063b0:	f000 fb26 	bl	8006a00 <__sinit>
 80063b4:	4b58      	ldr	r3, [pc, #352]	; (8006518 <setvbuf+0x180>)
 80063b6:	429c      	cmp	r4, r3
 80063b8:	d167      	bne.n	800648a <setvbuf+0xf2>
 80063ba:	687c      	ldr	r4, [r7, #4]
 80063bc:	f1b8 0f02 	cmp.w	r8, #2
 80063c0:	d006      	beq.n	80063d0 <setvbuf+0x38>
 80063c2:	f1b8 0f01 	cmp.w	r8, #1
 80063c6:	f200 809f 	bhi.w	8006508 <setvbuf+0x170>
 80063ca:	2d00      	cmp	r5, #0
 80063cc:	f2c0 809c 	blt.w	8006508 <setvbuf+0x170>
 80063d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063d2:	07db      	lsls	r3, r3, #31
 80063d4:	d405      	bmi.n	80063e2 <setvbuf+0x4a>
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	0598      	lsls	r0, r3, #22
 80063da:	d402      	bmi.n	80063e2 <setvbuf+0x4a>
 80063dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063de:	f000 fbad 	bl	8006b3c <__retarget_lock_acquire_recursive>
 80063e2:	4621      	mov	r1, r4
 80063e4:	4638      	mov	r0, r7
 80063e6:	f000 fa77 	bl	80068d8 <_fflush_r>
 80063ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063ec:	b141      	cbz	r1, 8006400 <setvbuf+0x68>
 80063ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063f2:	4299      	cmp	r1, r3
 80063f4:	d002      	beq.n	80063fc <setvbuf+0x64>
 80063f6:	4638      	mov	r0, r7
 80063f8:	f000 fc22 	bl	8006c40 <_free_r>
 80063fc:	2300      	movs	r3, #0
 80063fe:	6363      	str	r3, [r4, #52]	; 0x34
 8006400:	2300      	movs	r3, #0
 8006402:	61a3      	str	r3, [r4, #24]
 8006404:	6063      	str	r3, [r4, #4]
 8006406:	89a3      	ldrh	r3, [r4, #12]
 8006408:	0619      	lsls	r1, r3, #24
 800640a:	d503      	bpl.n	8006414 <setvbuf+0x7c>
 800640c:	6921      	ldr	r1, [r4, #16]
 800640e:	4638      	mov	r0, r7
 8006410:	f000 fc16 	bl	8006c40 <_free_r>
 8006414:	89a3      	ldrh	r3, [r4, #12]
 8006416:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800641a:	f023 0303 	bic.w	r3, r3, #3
 800641e:	f1b8 0f02 	cmp.w	r8, #2
 8006422:	81a3      	strh	r3, [r4, #12]
 8006424:	d06c      	beq.n	8006500 <setvbuf+0x168>
 8006426:	ab01      	add	r3, sp, #4
 8006428:	466a      	mov	r2, sp
 800642a:	4621      	mov	r1, r4
 800642c:	4638      	mov	r0, r7
 800642e:	f000 fb99 	bl	8006b64 <__swhatbuf_r>
 8006432:	89a3      	ldrh	r3, [r4, #12]
 8006434:	4318      	orrs	r0, r3
 8006436:	81a0      	strh	r0, [r4, #12]
 8006438:	2d00      	cmp	r5, #0
 800643a:	d130      	bne.n	800649e <setvbuf+0x106>
 800643c:	9d00      	ldr	r5, [sp, #0]
 800643e:	4628      	mov	r0, r5
 8006440:	f000 fbf6 	bl	8006c30 <malloc>
 8006444:	4606      	mov	r6, r0
 8006446:	2800      	cmp	r0, #0
 8006448:	d155      	bne.n	80064f6 <setvbuf+0x15e>
 800644a:	f8dd 9000 	ldr.w	r9, [sp]
 800644e:	45a9      	cmp	r9, r5
 8006450:	d14a      	bne.n	80064e8 <setvbuf+0x150>
 8006452:	f04f 35ff 	mov.w	r5, #4294967295
 8006456:	2200      	movs	r2, #0
 8006458:	60a2      	str	r2, [r4, #8]
 800645a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800645e:	6022      	str	r2, [r4, #0]
 8006460:	6122      	str	r2, [r4, #16]
 8006462:	2201      	movs	r2, #1
 8006464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006468:	6162      	str	r2, [r4, #20]
 800646a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800646c:	f043 0302 	orr.w	r3, r3, #2
 8006470:	07d2      	lsls	r2, r2, #31
 8006472:	81a3      	strh	r3, [r4, #12]
 8006474:	d405      	bmi.n	8006482 <setvbuf+0xea>
 8006476:	f413 7f00 	tst.w	r3, #512	; 0x200
 800647a:	d102      	bne.n	8006482 <setvbuf+0xea>
 800647c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800647e:	f000 fb5e 	bl	8006b3e <__retarget_lock_release_recursive>
 8006482:	4628      	mov	r0, r5
 8006484:	b003      	add	sp, #12
 8006486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800648a:	4b24      	ldr	r3, [pc, #144]	; (800651c <setvbuf+0x184>)
 800648c:	429c      	cmp	r4, r3
 800648e:	d101      	bne.n	8006494 <setvbuf+0xfc>
 8006490:	68bc      	ldr	r4, [r7, #8]
 8006492:	e793      	b.n	80063bc <setvbuf+0x24>
 8006494:	4b22      	ldr	r3, [pc, #136]	; (8006520 <setvbuf+0x188>)
 8006496:	429c      	cmp	r4, r3
 8006498:	bf08      	it	eq
 800649a:	68fc      	ldreq	r4, [r7, #12]
 800649c:	e78e      	b.n	80063bc <setvbuf+0x24>
 800649e:	2e00      	cmp	r6, #0
 80064a0:	d0cd      	beq.n	800643e <setvbuf+0xa6>
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	b913      	cbnz	r3, 80064ac <setvbuf+0x114>
 80064a6:	4638      	mov	r0, r7
 80064a8:	f000 faaa 	bl	8006a00 <__sinit>
 80064ac:	f1b8 0f01 	cmp.w	r8, #1
 80064b0:	bf08      	it	eq
 80064b2:	89a3      	ldrheq	r3, [r4, #12]
 80064b4:	6026      	str	r6, [r4, #0]
 80064b6:	bf04      	itt	eq
 80064b8:	f043 0301 	orreq.w	r3, r3, #1
 80064bc:	81a3      	strheq	r3, [r4, #12]
 80064be:	89a2      	ldrh	r2, [r4, #12]
 80064c0:	f012 0308 	ands.w	r3, r2, #8
 80064c4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80064c8:	d01c      	beq.n	8006504 <setvbuf+0x16c>
 80064ca:	07d3      	lsls	r3, r2, #31
 80064cc:	bf41      	itttt	mi
 80064ce:	2300      	movmi	r3, #0
 80064d0:	426d      	negmi	r5, r5
 80064d2:	60a3      	strmi	r3, [r4, #8]
 80064d4:	61a5      	strmi	r5, [r4, #24]
 80064d6:	bf58      	it	pl
 80064d8:	60a5      	strpl	r5, [r4, #8]
 80064da:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80064dc:	f015 0501 	ands.w	r5, r5, #1
 80064e0:	d115      	bne.n	800650e <setvbuf+0x176>
 80064e2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80064e6:	e7c8      	b.n	800647a <setvbuf+0xe2>
 80064e8:	4648      	mov	r0, r9
 80064ea:	f000 fba1 	bl	8006c30 <malloc>
 80064ee:	4606      	mov	r6, r0
 80064f0:	2800      	cmp	r0, #0
 80064f2:	d0ae      	beq.n	8006452 <setvbuf+0xba>
 80064f4:	464d      	mov	r5, r9
 80064f6:	89a3      	ldrh	r3, [r4, #12]
 80064f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064fc:	81a3      	strh	r3, [r4, #12]
 80064fe:	e7d0      	b.n	80064a2 <setvbuf+0x10a>
 8006500:	2500      	movs	r5, #0
 8006502:	e7a8      	b.n	8006456 <setvbuf+0xbe>
 8006504:	60a3      	str	r3, [r4, #8]
 8006506:	e7e8      	b.n	80064da <setvbuf+0x142>
 8006508:	f04f 35ff 	mov.w	r5, #4294967295
 800650c:	e7b9      	b.n	8006482 <setvbuf+0xea>
 800650e:	2500      	movs	r5, #0
 8006510:	e7b7      	b.n	8006482 <setvbuf+0xea>
 8006512:	bf00      	nop
 8006514:	20000014 	.word	0x20000014
 8006518:	08007fcc 	.word	0x08007fcc
 800651c:	08007fec 	.word	0x08007fec
 8006520:	08007fac 	.word	0x08007fac

08006524 <siscanf>:
 8006524:	b40e      	push	{r1, r2, r3}
 8006526:	b510      	push	{r4, lr}
 8006528:	b09f      	sub	sp, #124	; 0x7c
 800652a:	ac21      	add	r4, sp, #132	; 0x84
 800652c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006530:	f854 2b04 	ldr.w	r2, [r4], #4
 8006534:	9201      	str	r2, [sp, #4]
 8006536:	f8ad 101c 	strh.w	r1, [sp, #28]
 800653a:	9004      	str	r0, [sp, #16]
 800653c:	9008      	str	r0, [sp, #32]
 800653e:	f7f9 fe57 	bl	80001f0 <strlen>
 8006542:	4b0c      	ldr	r3, [pc, #48]	; (8006574 <siscanf+0x50>)
 8006544:	9005      	str	r0, [sp, #20]
 8006546:	9009      	str	r0, [sp, #36]	; 0x24
 8006548:	930d      	str	r3, [sp, #52]	; 0x34
 800654a:	480b      	ldr	r0, [pc, #44]	; (8006578 <siscanf+0x54>)
 800654c:	9a01      	ldr	r2, [sp, #4]
 800654e:	6800      	ldr	r0, [r0, #0]
 8006550:	9403      	str	r4, [sp, #12]
 8006552:	2300      	movs	r3, #0
 8006554:	9311      	str	r3, [sp, #68]	; 0x44
 8006556:	9316      	str	r3, [sp, #88]	; 0x58
 8006558:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800655c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006560:	a904      	add	r1, sp, #16
 8006562:	4623      	mov	r3, r4
 8006564:	f000 fca6 	bl	8006eb4 <__ssvfiscanf_r>
 8006568:	b01f      	add	sp, #124	; 0x7c
 800656a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800656e:	b003      	add	sp, #12
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	0800659f 	.word	0x0800659f
 8006578:	20000014 	.word	0x20000014

0800657c <__sread>:
 800657c:	b510      	push	{r4, lr}
 800657e:	460c      	mov	r4, r1
 8006580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006584:	f001 fa4e 	bl	8007a24 <_read_r>
 8006588:	2800      	cmp	r0, #0
 800658a:	bfab      	itete	ge
 800658c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800658e:	89a3      	ldrhlt	r3, [r4, #12]
 8006590:	181b      	addge	r3, r3, r0
 8006592:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006596:	bfac      	ite	ge
 8006598:	6563      	strge	r3, [r4, #84]	; 0x54
 800659a:	81a3      	strhlt	r3, [r4, #12]
 800659c:	bd10      	pop	{r4, pc}

0800659e <__seofread>:
 800659e:	2000      	movs	r0, #0
 80065a0:	4770      	bx	lr

080065a2 <__swrite>:
 80065a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065a6:	461f      	mov	r7, r3
 80065a8:	898b      	ldrh	r3, [r1, #12]
 80065aa:	05db      	lsls	r3, r3, #23
 80065ac:	4605      	mov	r5, r0
 80065ae:	460c      	mov	r4, r1
 80065b0:	4616      	mov	r6, r2
 80065b2:	d505      	bpl.n	80065c0 <__swrite+0x1e>
 80065b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065b8:	2302      	movs	r3, #2
 80065ba:	2200      	movs	r2, #0
 80065bc:	f000 fac0 	bl	8006b40 <_lseek_r>
 80065c0:	89a3      	ldrh	r3, [r4, #12]
 80065c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065ca:	81a3      	strh	r3, [r4, #12]
 80065cc:	4632      	mov	r2, r6
 80065ce:	463b      	mov	r3, r7
 80065d0:	4628      	mov	r0, r5
 80065d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065d6:	f000 b869 	b.w	80066ac <_write_r>

080065da <__sseek>:
 80065da:	b510      	push	{r4, lr}
 80065dc:	460c      	mov	r4, r1
 80065de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e2:	f000 faad 	bl	8006b40 <_lseek_r>
 80065e6:	1c43      	adds	r3, r0, #1
 80065e8:	89a3      	ldrh	r3, [r4, #12]
 80065ea:	bf15      	itete	ne
 80065ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80065ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065f6:	81a3      	strheq	r3, [r4, #12]
 80065f8:	bf18      	it	ne
 80065fa:	81a3      	strhne	r3, [r4, #12]
 80065fc:	bd10      	pop	{r4, pc}

080065fe <__sclose>:
 80065fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006602:	f000 b8d3 	b.w	80067ac <_close_r>
	...

08006608 <__swbuf_r>:
 8006608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660a:	460e      	mov	r6, r1
 800660c:	4614      	mov	r4, r2
 800660e:	4605      	mov	r5, r0
 8006610:	b118      	cbz	r0, 800661a <__swbuf_r+0x12>
 8006612:	6983      	ldr	r3, [r0, #24]
 8006614:	b90b      	cbnz	r3, 800661a <__swbuf_r+0x12>
 8006616:	f000 f9f3 	bl	8006a00 <__sinit>
 800661a:	4b21      	ldr	r3, [pc, #132]	; (80066a0 <__swbuf_r+0x98>)
 800661c:	429c      	cmp	r4, r3
 800661e:	d12b      	bne.n	8006678 <__swbuf_r+0x70>
 8006620:	686c      	ldr	r4, [r5, #4]
 8006622:	69a3      	ldr	r3, [r4, #24]
 8006624:	60a3      	str	r3, [r4, #8]
 8006626:	89a3      	ldrh	r3, [r4, #12]
 8006628:	071a      	lsls	r2, r3, #28
 800662a:	d52f      	bpl.n	800668c <__swbuf_r+0x84>
 800662c:	6923      	ldr	r3, [r4, #16]
 800662e:	b36b      	cbz	r3, 800668c <__swbuf_r+0x84>
 8006630:	6923      	ldr	r3, [r4, #16]
 8006632:	6820      	ldr	r0, [r4, #0]
 8006634:	1ac0      	subs	r0, r0, r3
 8006636:	6963      	ldr	r3, [r4, #20]
 8006638:	b2f6      	uxtb	r6, r6
 800663a:	4283      	cmp	r3, r0
 800663c:	4637      	mov	r7, r6
 800663e:	dc04      	bgt.n	800664a <__swbuf_r+0x42>
 8006640:	4621      	mov	r1, r4
 8006642:	4628      	mov	r0, r5
 8006644:	f000 f948 	bl	80068d8 <_fflush_r>
 8006648:	bb30      	cbnz	r0, 8006698 <__swbuf_r+0x90>
 800664a:	68a3      	ldr	r3, [r4, #8]
 800664c:	3b01      	subs	r3, #1
 800664e:	60a3      	str	r3, [r4, #8]
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	6022      	str	r2, [r4, #0]
 8006656:	701e      	strb	r6, [r3, #0]
 8006658:	6963      	ldr	r3, [r4, #20]
 800665a:	3001      	adds	r0, #1
 800665c:	4283      	cmp	r3, r0
 800665e:	d004      	beq.n	800666a <__swbuf_r+0x62>
 8006660:	89a3      	ldrh	r3, [r4, #12]
 8006662:	07db      	lsls	r3, r3, #31
 8006664:	d506      	bpl.n	8006674 <__swbuf_r+0x6c>
 8006666:	2e0a      	cmp	r6, #10
 8006668:	d104      	bne.n	8006674 <__swbuf_r+0x6c>
 800666a:	4621      	mov	r1, r4
 800666c:	4628      	mov	r0, r5
 800666e:	f000 f933 	bl	80068d8 <_fflush_r>
 8006672:	b988      	cbnz	r0, 8006698 <__swbuf_r+0x90>
 8006674:	4638      	mov	r0, r7
 8006676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006678:	4b0a      	ldr	r3, [pc, #40]	; (80066a4 <__swbuf_r+0x9c>)
 800667a:	429c      	cmp	r4, r3
 800667c:	d101      	bne.n	8006682 <__swbuf_r+0x7a>
 800667e:	68ac      	ldr	r4, [r5, #8]
 8006680:	e7cf      	b.n	8006622 <__swbuf_r+0x1a>
 8006682:	4b09      	ldr	r3, [pc, #36]	; (80066a8 <__swbuf_r+0xa0>)
 8006684:	429c      	cmp	r4, r3
 8006686:	bf08      	it	eq
 8006688:	68ec      	ldreq	r4, [r5, #12]
 800668a:	e7ca      	b.n	8006622 <__swbuf_r+0x1a>
 800668c:	4621      	mov	r1, r4
 800668e:	4628      	mov	r0, r5
 8006690:	f000 f81e 	bl	80066d0 <__swsetup_r>
 8006694:	2800      	cmp	r0, #0
 8006696:	d0cb      	beq.n	8006630 <__swbuf_r+0x28>
 8006698:	f04f 37ff 	mov.w	r7, #4294967295
 800669c:	e7ea      	b.n	8006674 <__swbuf_r+0x6c>
 800669e:	bf00      	nop
 80066a0:	08007fcc 	.word	0x08007fcc
 80066a4:	08007fec 	.word	0x08007fec
 80066a8:	08007fac 	.word	0x08007fac

080066ac <_write_r>:
 80066ac:	b538      	push	{r3, r4, r5, lr}
 80066ae:	4d07      	ldr	r5, [pc, #28]	; (80066cc <_write_r+0x20>)
 80066b0:	4604      	mov	r4, r0
 80066b2:	4608      	mov	r0, r1
 80066b4:	4611      	mov	r1, r2
 80066b6:	2200      	movs	r2, #0
 80066b8:	602a      	str	r2, [r5, #0]
 80066ba:	461a      	mov	r2, r3
 80066bc:	f7fa fb3f 	bl	8000d3e <_write>
 80066c0:	1c43      	adds	r3, r0, #1
 80066c2:	d102      	bne.n	80066ca <_write_r+0x1e>
 80066c4:	682b      	ldr	r3, [r5, #0]
 80066c6:	b103      	cbz	r3, 80066ca <_write_r+0x1e>
 80066c8:	6023      	str	r3, [r4, #0]
 80066ca:	bd38      	pop	{r3, r4, r5, pc}
 80066cc:	200057a4 	.word	0x200057a4

080066d0 <__swsetup_r>:
 80066d0:	4b32      	ldr	r3, [pc, #200]	; (800679c <__swsetup_r+0xcc>)
 80066d2:	b570      	push	{r4, r5, r6, lr}
 80066d4:	681d      	ldr	r5, [r3, #0]
 80066d6:	4606      	mov	r6, r0
 80066d8:	460c      	mov	r4, r1
 80066da:	b125      	cbz	r5, 80066e6 <__swsetup_r+0x16>
 80066dc:	69ab      	ldr	r3, [r5, #24]
 80066de:	b913      	cbnz	r3, 80066e6 <__swsetup_r+0x16>
 80066e0:	4628      	mov	r0, r5
 80066e2:	f000 f98d 	bl	8006a00 <__sinit>
 80066e6:	4b2e      	ldr	r3, [pc, #184]	; (80067a0 <__swsetup_r+0xd0>)
 80066e8:	429c      	cmp	r4, r3
 80066ea:	d10f      	bne.n	800670c <__swsetup_r+0x3c>
 80066ec:	686c      	ldr	r4, [r5, #4]
 80066ee:	89a3      	ldrh	r3, [r4, #12]
 80066f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066f4:	0719      	lsls	r1, r3, #28
 80066f6:	d42c      	bmi.n	8006752 <__swsetup_r+0x82>
 80066f8:	06dd      	lsls	r5, r3, #27
 80066fa:	d411      	bmi.n	8006720 <__swsetup_r+0x50>
 80066fc:	2309      	movs	r3, #9
 80066fe:	6033      	str	r3, [r6, #0]
 8006700:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006704:	81a3      	strh	r3, [r4, #12]
 8006706:	f04f 30ff 	mov.w	r0, #4294967295
 800670a:	e03e      	b.n	800678a <__swsetup_r+0xba>
 800670c:	4b25      	ldr	r3, [pc, #148]	; (80067a4 <__swsetup_r+0xd4>)
 800670e:	429c      	cmp	r4, r3
 8006710:	d101      	bne.n	8006716 <__swsetup_r+0x46>
 8006712:	68ac      	ldr	r4, [r5, #8]
 8006714:	e7eb      	b.n	80066ee <__swsetup_r+0x1e>
 8006716:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <__swsetup_r+0xd8>)
 8006718:	429c      	cmp	r4, r3
 800671a:	bf08      	it	eq
 800671c:	68ec      	ldreq	r4, [r5, #12]
 800671e:	e7e6      	b.n	80066ee <__swsetup_r+0x1e>
 8006720:	0758      	lsls	r0, r3, #29
 8006722:	d512      	bpl.n	800674a <__swsetup_r+0x7a>
 8006724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006726:	b141      	cbz	r1, 800673a <__swsetup_r+0x6a>
 8006728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800672c:	4299      	cmp	r1, r3
 800672e:	d002      	beq.n	8006736 <__swsetup_r+0x66>
 8006730:	4630      	mov	r0, r6
 8006732:	f000 fa85 	bl	8006c40 <_free_r>
 8006736:	2300      	movs	r3, #0
 8006738:	6363      	str	r3, [r4, #52]	; 0x34
 800673a:	89a3      	ldrh	r3, [r4, #12]
 800673c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006740:	81a3      	strh	r3, [r4, #12]
 8006742:	2300      	movs	r3, #0
 8006744:	6063      	str	r3, [r4, #4]
 8006746:	6923      	ldr	r3, [r4, #16]
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	89a3      	ldrh	r3, [r4, #12]
 800674c:	f043 0308 	orr.w	r3, r3, #8
 8006750:	81a3      	strh	r3, [r4, #12]
 8006752:	6923      	ldr	r3, [r4, #16]
 8006754:	b94b      	cbnz	r3, 800676a <__swsetup_r+0x9a>
 8006756:	89a3      	ldrh	r3, [r4, #12]
 8006758:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800675c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006760:	d003      	beq.n	800676a <__swsetup_r+0x9a>
 8006762:	4621      	mov	r1, r4
 8006764:	4630      	mov	r0, r6
 8006766:	f000 fa23 	bl	8006bb0 <__smakebuf_r>
 800676a:	89a0      	ldrh	r0, [r4, #12]
 800676c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006770:	f010 0301 	ands.w	r3, r0, #1
 8006774:	d00a      	beq.n	800678c <__swsetup_r+0xbc>
 8006776:	2300      	movs	r3, #0
 8006778:	60a3      	str	r3, [r4, #8]
 800677a:	6963      	ldr	r3, [r4, #20]
 800677c:	425b      	negs	r3, r3
 800677e:	61a3      	str	r3, [r4, #24]
 8006780:	6923      	ldr	r3, [r4, #16]
 8006782:	b943      	cbnz	r3, 8006796 <__swsetup_r+0xc6>
 8006784:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006788:	d1ba      	bne.n	8006700 <__swsetup_r+0x30>
 800678a:	bd70      	pop	{r4, r5, r6, pc}
 800678c:	0781      	lsls	r1, r0, #30
 800678e:	bf58      	it	pl
 8006790:	6963      	ldrpl	r3, [r4, #20]
 8006792:	60a3      	str	r3, [r4, #8]
 8006794:	e7f4      	b.n	8006780 <__swsetup_r+0xb0>
 8006796:	2000      	movs	r0, #0
 8006798:	e7f7      	b.n	800678a <__swsetup_r+0xba>
 800679a:	bf00      	nop
 800679c:	20000014 	.word	0x20000014
 80067a0:	08007fcc 	.word	0x08007fcc
 80067a4:	08007fec 	.word	0x08007fec
 80067a8:	08007fac 	.word	0x08007fac

080067ac <_close_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	4d06      	ldr	r5, [pc, #24]	; (80067c8 <_close_r+0x1c>)
 80067b0:	2300      	movs	r3, #0
 80067b2:	4604      	mov	r4, r0
 80067b4:	4608      	mov	r0, r1
 80067b6:	602b      	str	r3, [r5, #0]
 80067b8:	f7fa fadd 	bl	8000d76 <_close>
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d102      	bne.n	80067c6 <_close_r+0x1a>
 80067c0:	682b      	ldr	r3, [r5, #0]
 80067c2:	b103      	cbz	r3, 80067c6 <_close_r+0x1a>
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	bd38      	pop	{r3, r4, r5, pc}
 80067c8:	200057a4 	.word	0x200057a4

080067cc <__sflush_r>:
 80067cc:	898a      	ldrh	r2, [r1, #12]
 80067ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d2:	4605      	mov	r5, r0
 80067d4:	0710      	lsls	r0, r2, #28
 80067d6:	460c      	mov	r4, r1
 80067d8:	d458      	bmi.n	800688c <__sflush_r+0xc0>
 80067da:	684b      	ldr	r3, [r1, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	dc05      	bgt.n	80067ec <__sflush_r+0x20>
 80067e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	dc02      	bgt.n	80067ec <__sflush_r+0x20>
 80067e6:	2000      	movs	r0, #0
 80067e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067ee:	2e00      	cmp	r6, #0
 80067f0:	d0f9      	beq.n	80067e6 <__sflush_r+0x1a>
 80067f2:	2300      	movs	r3, #0
 80067f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067f8:	682f      	ldr	r7, [r5, #0]
 80067fa:	602b      	str	r3, [r5, #0]
 80067fc:	d032      	beq.n	8006864 <__sflush_r+0x98>
 80067fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	075a      	lsls	r2, r3, #29
 8006804:	d505      	bpl.n	8006812 <__sflush_r+0x46>
 8006806:	6863      	ldr	r3, [r4, #4]
 8006808:	1ac0      	subs	r0, r0, r3
 800680a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800680c:	b10b      	cbz	r3, 8006812 <__sflush_r+0x46>
 800680e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006810:	1ac0      	subs	r0, r0, r3
 8006812:	2300      	movs	r3, #0
 8006814:	4602      	mov	r2, r0
 8006816:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006818:	6a21      	ldr	r1, [r4, #32]
 800681a:	4628      	mov	r0, r5
 800681c:	47b0      	blx	r6
 800681e:	1c43      	adds	r3, r0, #1
 8006820:	89a3      	ldrh	r3, [r4, #12]
 8006822:	d106      	bne.n	8006832 <__sflush_r+0x66>
 8006824:	6829      	ldr	r1, [r5, #0]
 8006826:	291d      	cmp	r1, #29
 8006828:	d82c      	bhi.n	8006884 <__sflush_r+0xb8>
 800682a:	4a2a      	ldr	r2, [pc, #168]	; (80068d4 <__sflush_r+0x108>)
 800682c:	40ca      	lsrs	r2, r1
 800682e:	07d6      	lsls	r6, r2, #31
 8006830:	d528      	bpl.n	8006884 <__sflush_r+0xb8>
 8006832:	2200      	movs	r2, #0
 8006834:	6062      	str	r2, [r4, #4]
 8006836:	04d9      	lsls	r1, r3, #19
 8006838:	6922      	ldr	r2, [r4, #16]
 800683a:	6022      	str	r2, [r4, #0]
 800683c:	d504      	bpl.n	8006848 <__sflush_r+0x7c>
 800683e:	1c42      	adds	r2, r0, #1
 8006840:	d101      	bne.n	8006846 <__sflush_r+0x7a>
 8006842:	682b      	ldr	r3, [r5, #0]
 8006844:	b903      	cbnz	r3, 8006848 <__sflush_r+0x7c>
 8006846:	6560      	str	r0, [r4, #84]	; 0x54
 8006848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800684a:	602f      	str	r7, [r5, #0]
 800684c:	2900      	cmp	r1, #0
 800684e:	d0ca      	beq.n	80067e6 <__sflush_r+0x1a>
 8006850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006854:	4299      	cmp	r1, r3
 8006856:	d002      	beq.n	800685e <__sflush_r+0x92>
 8006858:	4628      	mov	r0, r5
 800685a:	f000 f9f1 	bl	8006c40 <_free_r>
 800685e:	2000      	movs	r0, #0
 8006860:	6360      	str	r0, [r4, #52]	; 0x34
 8006862:	e7c1      	b.n	80067e8 <__sflush_r+0x1c>
 8006864:	6a21      	ldr	r1, [r4, #32]
 8006866:	2301      	movs	r3, #1
 8006868:	4628      	mov	r0, r5
 800686a:	47b0      	blx	r6
 800686c:	1c41      	adds	r1, r0, #1
 800686e:	d1c7      	bne.n	8006800 <__sflush_r+0x34>
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d0c4      	beq.n	8006800 <__sflush_r+0x34>
 8006876:	2b1d      	cmp	r3, #29
 8006878:	d001      	beq.n	800687e <__sflush_r+0xb2>
 800687a:	2b16      	cmp	r3, #22
 800687c:	d101      	bne.n	8006882 <__sflush_r+0xb6>
 800687e:	602f      	str	r7, [r5, #0]
 8006880:	e7b1      	b.n	80067e6 <__sflush_r+0x1a>
 8006882:	89a3      	ldrh	r3, [r4, #12]
 8006884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006888:	81a3      	strh	r3, [r4, #12]
 800688a:	e7ad      	b.n	80067e8 <__sflush_r+0x1c>
 800688c:	690f      	ldr	r7, [r1, #16]
 800688e:	2f00      	cmp	r7, #0
 8006890:	d0a9      	beq.n	80067e6 <__sflush_r+0x1a>
 8006892:	0793      	lsls	r3, r2, #30
 8006894:	680e      	ldr	r6, [r1, #0]
 8006896:	bf08      	it	eq
 8006898:	694b      	ldreq	r3, [r1, #20]
 800689a:	600f      	str	r7, [r1, #0]
 800689c:	bf18      	it	ne
 800689e:	2300      	movne	r3, #0
 80068a0:	eba6 0807 	sub.w	r8, r6, r7
 80068a4:	608b      	str	r3, [r1, #8]
 80068a6:	f1b8 0f00 	cmp.w	r8, #0
 80068aa:	dd9c      	ble.n	80067e6 <__sflush_r+0x1a>
 80068ac:	6a21      	ldr	r1, [r4, #32]
 80068ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80068b0:	4643      	mov	r3, r8
 80068b2:	463a      	mov	r2, r7
 80068b4:	4628      	mov	r0, r5
 80068b6:	47b0      	blx	r6
 80068b8:	2800      	cmp	r0, #0
 80068ba:	dc06      	bgt.n	80068ca <__sflush_r+0xfe>
 80068bc:	89a3      	ldrh	r3, [r4, #12]
 80068be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068c2:	81a3      	strh	r3, [r4, #12]
 80068c4:	f04f 30ff 	mov.w	r0, #4294967295
 80068c8:	e78e      	b.n	80067e8 <__sflush_r+0x1c>
 80068ca:	4407      	add	r7, r0
 80068cc:	eba8 0800 	sub.w	r8, r8, r0
 80068d0:	e7e9      	b.n	80068a6 <__sflush_r+0xda>
 80068d2:	bf00      	nop
 80068d4:	20400001 	.word	0x20400001

080068d8 <_fflush_r>:
 80068d8:	b538      	push	{r3, r4, r5, lr}
 80068da:	690b      	ldr	r3, [r1, #16]
 80068dc:	4605      	mov	r5, r0
 80068de:	460c      	mov	r4, r1
 80068e0:	b913      	cbnz	r3, 80068e8 <_fflush_r+0x10>
 80068e2:	2500      	movs	r5, #0
 80068e4:	4628      	mov	r0, r5
 80068e6:	bd38      	pop	{r3, r4, r5, pc}
 80068e8:	b118      	cbz	r0, 80068f2 <_fflush_r+0x1a>
 80068ea:	6983      	ldr	r3, [r0, #24]
 80068ec:	b90b      	cbnz	r3, 80068f2 <_fflush_r+0x1a>
 80068ee:	f000 f887 	bl	8006a00 <__sinit>
 80068f2:	4b14      	ldr	r3, [pc, #80]	; (8006944 <_fflush_r+0x6c>)
 80068f4:	429c      	cmp	r4, r3
 80068f6:	d11b      	bne.n	8006930 <_fflush_r+0x58>
 80068f8:	686c      	ldr	r4, [r5, #4]
 80068fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0ef      	beq.n	80068e2 <_fflush_r+0xa>
 8006902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006904:	07d0      	lsls	r0, r2, #31
 8006906:	d404      	bmi.n	8006912 <_fflush_r+0x3a>
 8006908:	0599      	lsls	r1, r3, #22
 800690a:	d402      	bmi.n	8006912 <_fflush_r+0x3a>
 800690c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800690e:	f000 f915 	bl	8006b3c <__retarget_lock_acquire_recursive>
 8006912:	4628      	mov	r0, r5
 8006914:	4621      	mov	r1, r4
 8006916:	f7ff ff59 	bl	80067cc <__sflush_r>
 800691a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800691c:	07da      	lsls	r2, r3, #31
 800691e:	4605      	mov	r5, r0
 8006920:	d4e0      	bmi.n	80068e4 <_fflush_r+0xc>
 8006922:	89a3      	ldrh	r3, [r4, #12]
 8006924:	059b      	lsls	r3, r3, #22
 8006926:	d4dd      	bmi.n	80068e4 <_fflush_r+0xc>
 8006928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800692a:	f000 f908 	bl	8006b3e <__retarget_lock_release_recursive>
 800692e:	e7d9      	b.n	80068e4 <_fflush_r+0xc>
 8006930:	4b05      	ldr	r3, [pc, #20]	; (8006948 <_fflush_r+0x70>)
 8006932:	429c      	cmp	r4, r3
 8006934:	d101      	bne.n	800693a <_fflush_r+0x62>
 8006936:	68ac      	ldr	r4, [r5, #8]
 8006938:	e7df      	b.n	80068fa <_fflush_r+0x22>
 800693a:	4b04      	ldr	r3, [pc, #16]	; (800694c <_fflush_r+0x74>)
 800693c:	429c      	cmp	r4, r3
 800693e:	bf08      	it	eq
 8006940:	68ec      	ldreq	r4, [r5, #12]
 8006942:	e7da      	b.n	80068fa <_fflush_r+0x22>
 8006944:	08007fcc 	.word	0x08007fcc
 8006948:	08007fec 	.word	0x08007fec
 800694c:	08007fac 	.word	0x08007fac

08006950 <std>:
 8006950:	2300      	movs	r3, #0
 8006952:	b510      	push	{r4, lr}
 8006954:	4604      	mov	r4, r0
 8006956:	e9c0 3300 	strd	r3, r3, [r0]
 800695a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800695e:	6083      	str	r3, [r0, #8]
 8006960:	8181      	strh	r1, [r0, #12]
 8006962:	6643      	str	r3, [r0, #100]	; 0x64
 8006964:	81c2      	strh	r2, [r0, #14]
 8006966:	6183      	str	r3, [r0, #24]
 8006968:	4619      	mov	r1, r3
 800696a:	2208      	movs	r2, #8
 800696c:	305c      	adds	r0, #92	; 0x5c
 800696e:	f7ff fc7d 	bl	800626c <memset>
 8006972:	4b05      	ldr	r3, [pc, #20]	; (8006988 <std+0x38>)
 8006974:	6263      	str	r3, [r4, #36]	; 0x24
 8006976:	4b05      	ldr	r3, [pc, #20]	; (800698c <std+0x3c>)
 8006978:	62a3      	str	r3, [r4, #40]	; 0x28
 800697a:	4b05      	ldr	r3, [pc, #20]	; (8006990 <std+0x40>)
 800697c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800697e:	4b05      	ldr	r3, [pc, #20]	; (8006994 <std+0x44>)
 8006980:	6224      	str	r4, [r4, #32]
 8006982:	6323      	str	r3, [r4, #48]	; 0x30
 8006984:	bd10      	pop	{r4, pc}
 8006986:	bf00      	nop
 8006988:	0800657d 	.word	0x0800657d
 800698c:	080065a3 	.word	0x080065a3
 8006990:	080065db 	.word	0x080065db
 8006994:	080065ff 	.word	0x080065ff

08006998 <_cleanup_r>:
 8006998:	4901      	ldr	r1, [pc, #4]	; (80069a0 <_cleanup_r+0x8>)
 800699a:	f000 b8af 	b.w	8006afc <_fwalk_reent>
 800699e:	bf00      	nop
 80069a0:	080068d9 	.word	0x080068d9

080069a4 <__sfmoreglue>:
 80069a4:	b570      	push	{r4, r5, r6, lr}
 80069a6:	2268      	movs	r2, #104	; 0x68
 80069a8:	1e4d      	subs	r5, r1, #1
 80069aa:	4355      	muls	r5, r2
 80069ac:	460e      	mov	r6, r1
 80069ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80069b2:	f000 f9b1 	bl	8006d18 <_malloc_r>
 80069b6:	4604      	mov	r4, r0
 80069b8:	b140      	cbz	r0, 80069cc <__sfmoreglue+0x28>
 80069ba:	2100      	movs	r1, #0
 80069bc:	e9c0 1600 	strd	r1, r6, [r0]
 80069c0:	300c      	adds	r0, #12
 80069c2:	60a0      	str	r0, [r4, #8]
 80069c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80069c8:	f7ff fc50 	bl	800626c <memset>
 80069cc:	4620      	mov	r0, r4
 80069ce:	bd70      	pop	{r4, r5, r6, pc}

080069d0 <__sfp_lock_acquire>:
 80069d0:	4801      	ldr	r0, [pc, #4]	; (80069d8 <__sfp_lock_acquire+0x8>)
 80069d2:	f000 b8b3 	b.w	8006b3c <__retarget_lock_acquire_recursive>
 80069d6:	bf00      	nop
 80069d8:	20005799 	.word	0x20005799

080069dc <__sfp_lock_release>:
 80069dc:	4801      	ldr	r0, [pc, #4]	; (80069e4 <__sfp_lock_release+0x8>)
 80069de:	f000 b8ae 	b.w	8006b3e <__retarget_lock_release_recursive>
 80069e2:	bf00      	nop
 80069e4:	20005799 	.word	0x20005799

080069e8 <__sinit_lock_acquire>:
 80069e8:	4801      	ldr	r0, [pc, #4]	; (80069f0 <__sinit_lock_acquire+0x8>)
 80069ea:	f000 b8a7 	b.w	8006b3c <__retarget_lock_acquire_recursive>
 80069ee:	bf00      	nop
 80069f0:	2000579a 	.word	0x2000579a

080069f4 <__sinit_lock_release>:
 80069f4:	4801      	ldr	r0, [pc, #4]	; (80069fc <__sinit_lock_release+0x8>)
 80069f6:	f000 b8a2 	b.w	8006b3e <__retarget_lock_release_recursive>
 80069fa:	bf00      	nop
 80069fc:	2000579a 	.word	0x2000579a

08006a00 <__sinit>:
 8006a00:	b510      	push	{r4, lr}
 8006a02:	4604      	mov	r4, r0
 8006a04:	f7ff fff0 	bl	80069e8 <__sinit_lock_acquire>
 8006a08:	69a3      	ldr	r3, [r4, #24]
 8006a0a:	b11b      	cbz	r3, 8006a14 <__sinit+0x14>
 8006a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a10:	f7ff bff0 	b.w	80069f4 <__sinit_lock_release>
 8006a14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a18:	6523      	str	r3, [r4, #80]	; 0x50
 8006a1a:	4b13      	ldr	r3, [pc, #76]	; (8006a68 <__sinit+0x68>)
 8006a1c:	4a13      	ldr	r2, [pc, #76]	; (8006a6c <__sinit+0x6c>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a22:	42a3      	cmp	r3, r4
 8006a24:	bf04      	itt	eq
 8006a26:	2301      	moveq	r3, #1
 8006a28:	61a3      	streq	r3, [r4, #24]
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	f000 f820 	bl	8006a70 <__sfp>
 8006a30:	6060      	str	r0, [r4, #4]
 8006a32:	4620      	mov	r0, r4
 8006a34:	f000 f81c 	bl	8006a70 <__sfp>
 8006a38:	60a0      	str	r0, [r4, #8]
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f000 f818 	bl	8006a70 <__sfp>
 8006a40:	2200      	movs	r2, #0
 8006a42:	60e0      	str	r0, [r4, #12]
 8006a44:	2104      	movs	r1, #4
 8006a46:	6860      	ldr	r0, [r4, #4]
 8006a48:	f7ff ff82 	bl	8006950 <std>
 8006a4c:	68a0      	ldr	r0, [r4, #8]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	2109      	movs	r1, #9
 8006a52:	f7ff ff7d 	bl	8006950 <std>
 8006a56:	68e0      	ldr	r0, [r4, #12]
 8006a58:	2202      	movs	r2, #2
 8006a5a:	2112      	movs	r1, #18
 8006a5c:	f7ff ff78 	bl	8006950 <std>
 8006a60:	2301      	movs	r3, #1
 8006a62:	61a3      	str	r3, [r4, #24]
 8006a64:	e7d2      	b.n	8006a0c <__sinit+0xc>
 8006a66:	bf00      	nop
 8006a68:	08007fa8 	.word	0x08007fa8
 8006a6c:	08006999 	.word	0x08006999

08006a70 <__sfp>:
 8006a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a72:	4607      	mov	r7, r0
 8006a74:	f7ff ffac 	bl	80069d0 <__sfp_lock_acquire>
 8006a78:	4b1e      	ldr	r3, [pc, #120]	; (8006af4 <__sfp+0x84>)
 8006a7a:	681e      	ldr	r6, [r3, #0]
 8006a7c:	69b3      	ldr	r3, [r6, #24]
 8006a7e:	b913      	cbnz	r3, 8006a86 <__sfp+0x16>
 8006a80:	4630      	mov	r0, r6
 8006a82:	f7ff ffbd 	bl	8006a00 <__sinit>
 8006a86:	3648      	adds	r6, #72	; 0x48
 8006a88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	d503      	bpl.n	8006a98 <__sfp+0x28>
 8006a90:	6833      	ldr	r3, [r6, #0]
 8006a92:	b30b      	cbz	r3, 8006ad8 <__sfp+0x68>
 8006a94:	6836      	ldr	r6, [r6, #0]
 8006a96:	e7f7      	b.n	8006a88 <__sfp+0x18>
 8006a98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a9c:	b9d5      	cbnz	r5, 8006ad4 <__sfp+0x64>
 8006a9e:	4b16      	ldr	r3, [pc, #88]	; (8006af8 <__sfp+0x88>)
 8006aa0:	60e3      	str	r3, [r4, #12]
 8006aa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006aa6:	6665      	str	r5, [r4, #100]	; 0x64
 8006aa8:	f000 f847 	bl	8006b3a <__retarget_lock_init_recursive>
 8006aac:	f7ff ff96 	bl	80069dc <__sfp_lock_release>
 8006ab0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ab4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ab8:	6025      	str	r5, [r4, #0]
 8006aba:	61a5      	str	r5, [r4, #24]
 8006abc:	2208      	movs	r2, #8
 8006abe:	4629      	mov	r1, r5
 8006ac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ac4:	f7ff fbd2 	bl	800626c <memset>
 8006ac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006acc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ad4:	3468      	adds	r4, #104	; 0x68
 8006ad6:	e7d9      	b.n	8006a8c <__sfp+0x1c>
 8006ad8:	2104      	movs	r1, #4
 8006ada:	4638      	mov	r0, r7
 8006adc:	f7ff ff62 	bl	80069a4 <__sfmoreglue>
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	6030      	str	r0, [r6, #0]
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d1d5      	bne.n	8006a94 <__sfp+0x24>
 8006ae8:	f7ff ff78 	bl	80069dc <__sfp_lock_release>
 8006aec:	230c      	movs	r3, #12
 8006aee:	603b      	str	r3, [r7, #0]
 8006af0:	e7ee      	b.n	8006ad0 <__sfp+0x60>
 8006af2:	bf00      	nop
 8006af4:	08007fa8 	.word	0x08007fa8
 8006af8:	ffff0001 	.word	0xffff0001

08006afc <_fwalk_reent>:
 8006afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b00:	4606      	mov	r6, r0
 8006b02:	4688      	mov	r8, r1
 8006b04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b08:	2700      	movs	r7, #0
 8006b0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b0e:	f1b9 0901 	subs.w	r9, r9, #1
 8006b12:	d505      	bpl.n	8006b20 <_fwalk_reent+0x24>
 8006b14:	6824      	ldr	r4, [r4, #0]
 8006b16:	2c00      	cmp	r4, #0
 8006b18:	d1f7      	bne.n	8006b0a <_fwalk_reent+0xe>
 8006b1a:	4638      	mov	r0, r7
 8006b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b20:	89ab      	ldrh	r3, [r5, #12]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d907      	bls.n	8006b36 <_fwalk_reent+0x3a>
 8006b26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	d003      	beq.n	8006b36 <_fwalk_reent+0x3a>
 8006b2e:	4629      	mov	r1, r5
 8006b30:	4630      	mov	r0, r6
 8006b32:	47c0      	blx	r8
 8006b34:	4307      	orrs	r7, r0
 8006b36:	3568      	adds	r5, #104	; 0x68
 8006b38:	e7e9      	b.n	8006b0e <_fwalk_reent+0x12>

08006b3a <__retarget_lock_init_recursive>:
 8006b3a:	4770      	bx	lr

08006b3c <__retarget_lock_acquire_recursive>:
 8006b3c:	4770      	bx	lr

08006b3e <__retarget_lock_release_recursive>:
 8006b3e:	4770      	bx	lr

08006b40 <_lseek_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4d07      	ldr	r5, [pc, #28]	; (8006b60 <_lseek_r+0x20>)
 8006b44:	4604      	mov	r4, r0
 8006b46:	4608      	mov	r0, r1
 8006b48:	4611      	mov	r1, r2
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	602a      	str	r2, [r5, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f7fa f938 	bl	8000dc4 <_lseek>
 8006b54:	1c43      	adds	r3, r0, #1
 8006b56:	d102      	bne.n	8006b5e <_lseek_r+0x1e>
 8006b58:	682b      	ldr	r3, [r5, #0]
 8006b5a:	b103      	cbz	r3, 8006b5e <_lseek_r+0x1e>
 8006b5c:	6023      	str	r3, [r4, #0]
 8006b5e:	bd38      	pop	{r3, r4, r5, pc}
 8006b60:	200057a4 	.word	0x200057a4

08006b64 <__swhatbuf_r>:
 8006b64:	b570      	push	{r4, r5, r6, lr}
 8006b66:	460e      	mov	r6, r1
 8006b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b6c:	2900      	cmp	r1, #0
 8006b6e:	b096      	sub	sp, #88	; 0x58
 8006b70:	4614      	mov	r4, r2
 8006b72:	461d      	mov	r5, r3
 8006b74:	da08      	bge.n	8006b88 <__swhatbuf_r+0x24>
 8006b76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	602a      	str	r2, [r5, #0]
 8006b7e:	061a      	lsls	r2, r3, #24
 8006b80:	d410      	bmi.n	8006ba4 <__swhatbuf_r+0x40>
 8006b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b86:	e00e      	b.n	8006ba6 <__swhatbuf_r+0x42>
 8006b88:	466a      	mov	r2, sp
 8006b8a:	f001 f8d7 	bl	8007d3c <_fstat_r>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	dbf1      	blt.n	8006b76 <__swhatbuf_r+0x12>
 8006b92:	9a01      	ldr	r2, [sp, #4]
 8006b94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b9c:	425a      	negs	r2, r3
 8006b9e:	415a      	adcs	r2, r3
 8006ba0:	602a      	str	r2, [r5, #0]
 8006ba2:	e7ee      	b.n	8006b82 <__swhatbuf_r+0x1e>
 8006ba4:	2340      	movs	r3, #64	; 0x40
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	b016      	add	sp, #88	; 0x58
 8006bac:	bd70      	pop	{r4, r5, r6, pc}
	...

08006bb0 <__smakebuf_r>:
 8006bb0:	898b      	ldrh	r3, [r1, #12]
 8006bb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bb4:	079d      	lsls	r5, r3, #30
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	460c      	mov	r4, r1
 8006bba:	d507      	bpl.n	8006bcc <__smakebuf_r+0x1c>
 8006bbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006bc0:	6023      	str	r3, [r4, #0]
 8006bc2:	6123      	str	r3, [r4, #16]
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	6163      	str	r3, [r4, #20]
 8006bc8:	b002      	add	sp, #8
 8006bca:	bd70      	pop	{r4, r5, r6, pc}
 8006bcc:	ab01      	add	r3, sp, #4
 8006bce:	466a      	mov	r2, sp
 8006bd0:	f7ff ffc8 	bl	8006b64 <__swhatbuf_r>
 8006bd4:	9900      	ldr	r1, [sp, #0]
 8006bd6:	4605      	mov	r5, r0
 8006bd8:	4630      	mov	r0, r6
 8006bda:	f000 f89d 	bl	8006d18 <_malloc_r>
 8006bde:	b948      	cbnz	r0, 8006bf4 <__smakebuf_r+0x44>
 8006be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006be4:	059a      	lsls	r2, r3, #22
 8006be6:	d4ef      	bmi.n	8006bc8 <__smakebuf_r+0x18>
 8006be8:	f023 0303 	bic.w	r3, r3, #3
 8006bec:	f043 0302 	orr.w	r3, r3, #2
 8006bf0:	81a3      	strh	r3, [r4, #12]
 8006bf2:	e7e3      	b.n	8006bbc <__smakebuf_r+0xc>
 8006bf4:	4b0d      	ldr	r3, [pc, #52]	; (8006c2c <__smakebuf_r+0x7c>)
 8006bf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006bf8:	89a3      	ldrh	r3, [r4, #12]
 8006bfa:	6020      	str	r0, [r4, #0]
 8006bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c00:	81a3      	strh	r3, [r4, #12]
 8006c02:	9b00      	ldr	r3, [sp, #0]
 8006c04:	6163      	str	r3, [r4, #20]
 8006c06:	9b01      	ldr	r3, [sp, #4]
 8006c08:	6120      	str	r0, [r4, #16]
 8006c0a:	b15b      	cbz	r3, 8006c24 <__smakebuf_r+0x74>
 8006c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c10:	4630      	mov	r0, r6
 8006c12:	f001 f8a5 	bl	8007d60 <_isatty_r>
 8006c16:	b128      	cbz	r0, 8006c24 <__smakebuf_r+0x74>
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	f023 0303 	bic.w	r3, r3, #3
 8006c1e:	f043 0301 	orr.w	r3, r3, #1
 8006c22:	81a3      	strh	r3, [r4, #12]
 8006c24:	89a0      	ldrh	r0, [r4, #12]
 8006c26:	4305      	orrs	r5, r0
 8006c28:	81a5      	strh	r5, [r4, #12]
 8006c2a:	e7cd      	b.n	8006bc8 <__smakebuf_r+0x18>
 8006c2c:	08006999 	.word	0x08006999

08006c30 <malloc>:
 8006c30:	4b02      	ldr	r3, [pc, #8]	; (8006c3c <malloc+0xc>)
 8006c32:	4601      	mov	r1, r0
 8006c34:	6818      	ldr	r0, [r3, #0]
 8006c36:	f000 b86f 	b.w	8006d18 <_malloc_r>
 8006c3a:	bf00      	nop
 8006c3c:	20000014 	.word	0x20000014

08006c40 <_free_r>:
 8006c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c42:	2900      	cmp	r1, #0
 8006c44:	d044      	beq.n	8006cd0 <_free_r+0x90>
 8006c46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c4a:	9001      	str	r0, [sp, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f1a1 0404 	sub.w	r4, r1, #4
 8006c52:	bfb8      	it	lt
 8006c54:	18e4      	addlt	r4, r4, r3
 8006c56:	f001 f893 	bl	8007d80 <__malloc_lock>
 8006c5a:	4a1e      	ldr	r2, [pc, #120]	; (8006cd4 <_free_r+0x94>)
 8006c5c:	9801      	ldr	r0, [sp, #4]
 8006c5e:	6813      	ldr	r3, [r2, #0]
 8006c60:	b933      	cbnz	r3, 8006c70 <_free_r+0x30>
 8006c62:	6063      	str	r3, [r4, #4]
 8006c64:	6014      	str	r4, [r2, #0]
 8006c66:	b003      	add	sp, #12
 8006c68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c6c:	f001 b88e 	b.w	8007d8c <__malloc_unlock>
 8006c70:	42a3      	cmp	r3, r4
 8006c72:	d908      	bls.n	8006c86 <_free_r+0x46>
 8006c74:	6825      	ldr	r5, [r4, #0]
 8006c76:	1961      	adds	r1, r4, r5
 8006c78:	428b      	cmp	r3, r1
 8006c7a:	bf01      	itttt	eq
 8006c7c:	6819      	ldreq	r1, [r3, #0]
 8006c7e:	685b      	ldreq	r3, [r3, #4]
 8006c80:	1949      	addeq	r1, r1, r5
 8006c82:	6021      	streq	r1, [r4, #0]
 8006c84:	e7ed      	b.n	8006c62 <_free_r+0x22>
 8006c86:	461a      	mov	r2, r3
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	b10b      	cbz	r3, 8006c90 <_free_r+0x50>
 8006c8c:	42a3      	cmp	r3, r4
 8006c8e:	d9fa      	bls.n	8006c86 <_free_r+0x46>
 8006c90:	6811      	ldr	r1, [r2, #0]
 8006c92:	1855      	adds	r5, r2, r1
 8006c94:	42a5      	cmp	r5, r4
 8006c96:	d10b      	bne.n	8006cb0 <_free_r+0x70>
 8006c98:	6824      	ldr	r4, [r4, #0]
 8006c9a:	4421      	add	r1, r4
 8006c9c:	1854      	adds	r4, r2, r1
 8006c9e:	42a3      	cmp	r3, r4
 8006ca0:	6011      	str	r1, [r2, #0]
 8006ca2:	d1e0      	bne.n	8006c66 <_free_r+0x26>
 8006ca4:	681c      	ldr	r4, [r3, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	6053      	str	r3, [r2, #4]
 8006caa:	4421      	add	r1, r4
 8006cac:	6011      	str	r1, [r2, #0]
 8006cae:	e7da      	b.n	8006c66 <_free_r+0x26>
 8006cb0:	d902      	bls.n	8006cb8 <_free_r+0x78>
 8006cb2:	230c      	movs	r3, #12
 8006cb4:	6003      	str	r3, [r0, #0]
 8006cb6:	e7d6      	b.n	8006c66 <_free_r+0x26>
 8006cb8:	6825      	ldr	r5, [r4, #0]
 8006cba:	1961      	adds	r1, r4, r5
 8006cbc:	428b      	cmp	r3, r1
 8006cbe:	bf04      	itt	eq
 8006cc0:	6819      	ldreq	r1, [r3, #0]
 8006cc2:	685b      	ldreq	r3, [r3, #4]
 8006cc4:	6063      	str	r3, [r4, #4]
 8006cc6:	bf04      	itt	eq
 8006cc8:	1949      	addeq	r1, r1, r5
 8006cca:	6021      	streq	r1, [r4, #0]
 8006ccc:	6054      	str	r4, [r2, #4]
 8006cce:	e7ca      	b.n	8006c66 <_free_r+0x26>
 8006cd0:	b003      	add	sp, #12
 8006cd2:	bd30      	pop	{r4, r5, pc}
 8006cd4:	2000579c 	.word	0x2000579c

08006cd8 <sbrk_aligned>:
 8006cd8:	b570      	push	{r4, r5, r6, lr}
 8006cda:	4e0e      	ldr	r6, [pc, #56]	; (8006d14 <sbrk_aligned+0x3c>)
 8006cdc:	460c      	mov	r4, r1
 8006cde:	6831      	ldr	r1, [r6, #0]
 8006ce0:	4605      	mov	r5, r0
 8006ce2:	b911      	cbnz	r1, 8006cea <sbrk_aligned+0x12>
 8006ce4:	f000 feb0 	bl	8007a48 <_sbrk_r>
 8006ce8:	6030      	str	r0, [r6, #0]
 8006cea:	4621      	mov	r1, r4
 8006cec:	4628      	mov	r0, r5
 8006cee:	f000 feab 	bl	8007a48 <_sbrk_r>
 8006cf2:	1c43      	adds	r3, r0, #1
 8006cf4:	d00a      	beq.n	8006d0c <sbrk_aligned+0x34>
 8006cf6:	1cc4      	adds	r4, r0, #3
 8006cf8:	f024 0403 	bic.w	r4, r4, #3
 8006cfc:	42a0      	cmp	r0, r4
 8006cfe:	d007      	beq.n	8006d10 <sbrk_aligned+0x38>
 8006d00:	1a21      	subs	r1, r4, r0
 8006d02:	4628      	mov	r0, r5
 8006d04:	f000 fea0 	bl	8007a48 <_sbrk_r>
 8006d08:	3001      	adds	r0, #1
 8006d0a:	d101      	bne.n	8006d10 <sbrk_aligned+0x38>
 8006d0c:	f04f 34ff 	mov.w	r4, #4294967295
 8006d10:	4620      	mov	r0, r4
 8006d12:	bd70      	pop	{r4, r5, r6, pc}
 8006d14:	200057a0 	.word	0x200057a0

08006d18 <_malloc_r>:
 8006d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d1c:	1ccd      	adds	r5, r1, #3
 8006d1e:	f025 0503 	bic.w	r5, r5, #3
 8006d22:	3508      	adds	r5, #8
 8006d24:	2d0c      	cmp	r5, #12
 8006d26:	bf38      	it	cc
 8006d28:	250c      	movcc	r5, #12
 8006d2a:	2d00      	cmp	r5, #0
 8006d2c:	4607      	mov	r7, r0
 8006d2e:	db01      	blt.n	8006d34 <_malloc_r+0x1c>
 8006d30:	42a9      	cmp	r1, r5
 8006d32:	d905      	bls.n	8006d40 <_malloc_r+0x28>
 8006d34:	230c      	movs	r3, #12
 8006d36:	603b      	str	r3, [r7, #0]
 8006d38:	2600      	movs	r6, #0
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d40:	4e2e      	ldr	r6, [pc, #184]	; (8006dfc <_malloc_r+0xe4>)
 8006d42:	f001 f81d 	bl	8007d80 <__malloc_lock>
 8006d46:	6833      	ldr	r3, [r6, #0]
 8006d48:	461c      	mov	r4, r3
 8006d4a:	bb34      	cbnz	r4, 8006d9a <_malloc_r+0x82>
 8006d4c:	4629      	mov	r1, r5
 8006d4e:	4638      	mov	r0, r7
 8006d50:	f7ff ffc2 	bl	8006cd8 <sbrk_aligned>
 8006d54:	1c43      	adds	r3, r0, #1
 8006d56:	4604      	mov	r4, r0
 8006d58:	d14d      	bne.n	8006df6 <_malloc_r+0xde>
 8006d5a:	6834      	ldr	r4, [r6, #0]
 8006d5c:	4626      	mov	r6, r4
 8006d5e:	2e00      	cmp	r6, #0
 8006d60:	d140      	bne.n	8006de4 <_malloc_r+0xcc>
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	4631      	mov	r1, r6
 8006d66:	4638      	mov	r0, r7
 8006d68:	eb04 0803 	add.w	r8, r4, r3
 8006d6c:	f000 fe6c 	bl	8007a48 <_sbrk_r>
 8006d70:	4580      	cmp	r8, r0
 8006d72:	d13a      	bne.n	8006dea <_malloc_r+0xd2>
 8006d74:	6821      	ldr	r1, [r4, #0]
 8006d76:	3503      	adds	r5, #3
 8006d78:	1a6d      	subs	r5, r5, r1
 8006d7a:	f025 0503 	bic.w	r5, r5, #3
 8006d7e:	3508      	adds	r5, #8
 8006d80:	2d0c      	cmp	r5, #12
 8006d82:	bf38      	it	cc
 8006d84:	250c      	movcc	r5, #12
 8006d86:	4629      	mov	r1, r5
 8006d88:	4638      	mov	r0, r7
 8006d8a:	f7ff ffa5 	bl	8006cd8 <sbrk_aligned>
 8006d8e:	3001      	adds	r0, #1
 8006d90:	d02b      	beq.n	8006dea <_malloc_r+0xd2>
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	442b      	add	r3, r5
 8006d96:	6023      	str	r3, [r4, #0]
 8006d98:	e00e      	b.n	8006db8 <_malloc_r+0xa0>
 8006d9a:	6822      	ldr	r2, [r4, #0]
 8006d9c:	1b52      	subs	r2, r2, r5
 8006d9e:	d41e      	bmi.n	8006dde <_malloc_r+0xc6>
 8006da0:	2a0b      	cmp	r2, #11
 8006da2:	d916      	bls.n	8006dd2 <_malloc_r+0xba>
 8006da4:	1961      	adds	r1, r4, r5
 8006da6:	42a3      	cmp	r3, r4
 8006da8:	6025      	str	r5, [r4, #0]
 8006daa:	bf18      	it	ne
 8006dac:	6059      	strne	r1, [r3, #4]
 8006dae:	6863      	ldr	r3, [r4, #4]
 8006db0:	bf08      	it	eq
 8006db2:	6031      	streq	r1, [r6, #0]
 8006db4:	5162      	str	r2, [r4, r5]
 8006db6:	604b      	str	r3, [r1, #4]
 8006db8:	4638      	mov	r0, r7
 8006dba:	f104 060b 	add.w	r6, r4, #11
 8006dbe:	f000 ffe5 	bl	8007d8c <__malloc_unlock>
 8006dc2:	f026 0607 	bic.w	r6, r6, #7
 8006dc6:	1d23      	adds	r3, r4, #4
 8006dc8:	1af2      	subs	r2, r6, r3
 8006dca:	d0b6      	beq.n	8006d3a <_malloc_r+0x22>
 8006dcc:	1b9b      	subs	r3, r3, r6
 8006dce:	50a3      	str	r3, [r4, r2]
 8006dd0:	e7b3      	b.n	8006d3a <_malloc_r+0x22>
 8006dd2:	6862      	ldr	r2, [r4, #4]
 8006dd4:	42a3      	cmp	r3, r4
 8006dd6:	bf0c      	ite	eq
 8006dd8:	6032      	streq	r2, [r6, #0]
 8006dda:	605a      	strne	r2, [r3, #4]
 8006ddc:	e7ec      	b.n	8006db8 <_malloc_r+0xa0>
 8006dde:	4623      	mov	r3, r4
 8006de0:	6864      	ldr	r4, [r4, #4]
 8006de2:	e7b2      	b.n	8006d4a <_malloc_r+0x32>
 8006de4:	4634      	mov	r4, r6
 8006de6:	6876      	ldr	r6, [r6, #4]
 8006de8:	e7b9      	b.n	8006d5e <_malloc_r+0x46>
 8006dea:	230c      	movs	r3, #12
 8006dec:	603b      	str	r3, [r7, #0]
 8006dee:	4638      	mov	r0, r7
 8006df0:	f000 ffcc 	bl	8007d8c <__malloc_unlock>
 8006df4:	e7a1      	b.n	8006d3a <_malloc_r+0x22>
 8006df6:	6025      	str	r5, [r4, #0]
 8006df8:	e7de      	b.n	8006db8 <_malloc_r+0xa0>
 8006dfa:	bf00      	nop
 8006dfc:	2000579c 	.word	0x2000579c

08006e00 <_sungetc_r>:
 8006e00:	b538      	push	{r3, r4, r5, lr}
 8006e02:	1c4b      	adds	r3, r1, #1
 8006e04:	4614      	mov	r4, r2
 8006e06:	d103      	bne.n	8006e10 <_sungetc_r+0x10>
 8006e08:	f04f 35ff 	mov.w	r5, #4294967295
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	bd38      	pop	{r3, r4, r5, pc}
 8006e10:	8993      	ldrh	r3, [r2, #12]
 8006e12:	f023 0320 	bic.w	r3, r3, #32
 8006e16:	8193      	strh	r3, [r2, #12]
 8006e18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e1a:	6852      	ldr	r2, [r2, #4]
 8006e1c:	b2cd      	uxtb	r5, r1
 8006e1e:	b18b      	cbz	r3, 8006e44 <_sungetc_r+0x44>
 8006e20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006e22:	4293      	cmp	r3, r2
 8006e24:	dd08      	ble.n	8006e38 <_sungetc_r+0x38>
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	1e5a      	subs	r2, r3, #1
 8006e2a:	6022      	str	r2, [r4, #0]
 8006e2c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006e30:	6863      	ldr	r3, [r4, #4]
 8006e32:	3301      	adds	r3, #1
 8006e34:	6063      	str	r3, [r4, #4]
 8006e36:	e7e9      	b.n	8006e0c <_sungetc_r+0xc>
 8006e38:	4621      	mov	r1, r4
 8006e3a:	f000 ff45 	bl	8007cc8 <__submore>
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	d0f1      	beq.n	8006e26 <_sungetc_r+0x26>
 8006e42:	e7e1      	b.n	8006e08 <_sungetc_r+0x8>
 8006e44:	6921      	ldr	r1, [r4, #16]
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	b151      	cbz	r1, 8006e60 <_sungetc_r+0x60>
 8006e4a:	4299      	cmp	r1, r3
 8006e4c:	d208      	bcs.n	8006e60 <_sungetc_r+0x60>
 8006e4e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006e52:	42a9      	cmp	r1, r5
 8006e54:	d104      	bne.n	8006e60 <_sungetc_r+0x60>
 8006e56:	3b01      	subs	r3, #1
 8006e58:	3201      	adds	r2, #1
 8006e5a:	6023      	str	r3, [r4, #0]
 8006e5c:	6062      	str	r2, [r4, #4]
 8006e5e:	e7d5      	b.n	8006e0c <_sungetc_r+0xc>
 8006e60:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006e64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e68:	6363      	str	r3, [r4, #52]	; 0x34
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	63a3      	str	r3, [r4, #56]	; 0x38
 8006e6e:	4623      	mov	r3, r4
 8006e70:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006e74:	6023      	str	r3, [r4, #0]
 8006e76:	2301      	movs	r3, #1
 8006e78:	e7dc      	b.n	8006e34 <_sungetc_r+0x34>

08006e7a <__ssrefill_r>:
 8006e7a:	b510      	push	{r4, lr}
 8006e7c:	460c      	mov	r4, r1
 8006e7e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006e80:	b169      	cbz	r1, 8006e9e <__ssrefill_r+0x24>
 8006e82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e86:	4299      	cmp	r1, r3
 8006e88:	d001      	beq.n	8006e8e <__ssrefill_r+0x14>
 8006e8a:	f7ff fed9 	bl	8006c40 <_free_r>
 8006e8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e90:	6063      	str	r3, [r4, #4]
 8006e92:	2000      	movs	r0, #0
 8006e94:	6360      	str	r0, [r4, #52]	; 0x34
 8006e96:	b113      	cbz	r3, 8006e9e <__ssrefill_r+0x24>
 8006e98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006e9a:	6023      	str	r3, [r4, #0]
 8006e9c:	bd10      	pop	{r4, pc}
 8006e9e:	6923      	ldr	r3, [r4, #16]
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	6063      	str	r3, [r4, #4]
 8006ea6:	89a3      	ldrh	r3, [r4, #12]
 8006ea8:	f043 0320 	orr.w	r3, r3, #32
 8006eac:	81a3      	strh	r3, [r4, #12]
 8006eae:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb2:	e7f3      	b.n	8006e9c <__ssrefill_r+0x22>

08006eb4 <__ssvfiscanf_r>:
 8006eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb8:	460c      	mov	r4, r1
 8006eba:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006ec4:	49a6      	ldr	r1, [pc, #664]	; (8007160 <__ssvfiscanf_r+0x2ac>)
 8006ec6:	91a0      	str	r1, [sp, #640]	; 0x280
 8006ec8:	f10d 0804 	add.w	r8, sp, #4
 8006ecc:	49a5      	ldr	r1, [pc, #660]	; (8007164 <__ssvfiscanf_r+0x2b0>)
 8006ece:	4fa6      	ldr	r7, [pc, #664]	; (8007168 <__ssvfiscanf_r+0x2b4>)
 8006ed0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800716c <__ssvfiscanf_r+0x2b8>
 8006ed4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006ed8:	4606      	mov	r6, r0
 8006eda:	91a1      	str	r1, [sp, #644]	; 0x284
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	7813      	ldrb	r3, [r2, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 815a 	beq.w	800719a <__ssvfiscanf_r+0x2e6>
 8006ee6:	5dd9      	ldrb	r1, [r3, r7]
 8006ee8:	f011 0108 	ands.w	r1, r1, #8
 8006eec:	f102 0501 	add.w	r5, r2, #1
 8006ef0:	d019      	beq.n	8006f26 <__ssvfiscanf_r+0x72>
 8006ef2:	6863      	ldr	r3, [r4, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	dd0f      	ble.n	8006f18 <__ssvfiscanf_r+0x64>
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	781a      	ldrb	r2, [r3, #0]
 8006efc:	5cba      	ldrb	r2, [r7, r2]
 8006efe:	0712      	lsls	r2, r2, #28
 8006f00:	d401      	bmi.n	8006f06 <__ssvfiscanf_r+0x52>
 8006f02:	462a      	mov	r2, r5
 8006f04:	e7eb      	b.n	8006ede <__ssvfiscanf_r+0x2a>
 8006f06:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006f08:	3201      	adds	r2, #1
 8006f0a:	9245      	str	r2, [sp, #276]	; 0x114
 8006f0c:	6862      	ldr	r2, [r4, #4]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	3a01      	subs	r2, #1
 8006f12:	6062      	str	r2, [r4, #4]
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	e7ec      	b.n	8006ef2 <__ssvfiscanf_r+0x3e>
 8006f18:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	4798      	blx	r3
 8006f20:	2800      	cmp	r0, #0
 8006f22:	d0e9      	beq.n	8006ef8 <__ssvfiscanf_r+0x44>
 8006f24:	e7ed      	b.n	8006f02 <__ssvfiscanf_r+0x4e>
 8006f26:	2b25      	cmp	r3, #37	; 0x25
 8006f28:	d012      	beq.n	8006f50 <__ssvfiscanf_r+0x9c>
 8006f2a:	469a      	mov	sl, r3
 8006f2c:	6863      	ldr	r3, [r4, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f340 8091 	ble.w	8007056 <__ssvfiscanf_r+0x1a2>
 8006f34:	6822      	ldr	r2, [r4, #0]
 8006f36:	7813      	ldrb	r3, [r2, #0]
 8006f38:	4553      	cmp	r3, sl
 8006f3a:	f040 812e 	bne.w	800719a <__ssvfiscanf_r+0x2e6>
 8006f3e:	6863      	ldr	r3, [r4, #4]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	6063      	str	r3, [r4, #4]
 8006f44:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006f46:	3201      	adds	r2, #1
 8006f48:	3301      	adds	r3, #1
 8006f4a:	6022      	str	r2, [r4, #0]
 8006f4c:	9345      	str	r3, [sp, #276]	; 0x114
 8006f4e:	e7d8      	b.n	8006f02 <__ssvfiscanf_r+0x4e>
 8006f50:	9141      	str	r1, [sp, #260]	; 0x104
 8006f52:	9143      	str	r1, [sp, #268]	; 0x10c
 8006f54:	7853      	ldrb	r3, [r2, #1]
 8006f56:	2b2a      	cmp	r3, #42	; 0x2a
 8006f58:	bf02      	ittt	eq
 8006f5a:	2310      	moveq	r3, #16
 8006f5c:	1c95      	addeq	r5, r2, #2
 8006f5e:	9341      	streq	r3, [sp, #260]	; 0x104
 8006f60:	220a      	movs	r2, #10
 8006f62:	46aa      	mov	sl, r5
 8006f64:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006f68:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006f6c:	2b09      	cmp	r3, #9
 8006f6e:	d91d      	bls.n	8006fac <__ssvfiscanf_r+0xf8>
 8006f70:	487e      	ldr	r0, [pc, #504]	; (800716c <__ssvfiscanf_r+0x2b8>)
 8006f72:	2203      	movs	r2, #3
 8006f74:	f7f9 f944 	bl	8000200 <memchr>
 8006f78:	b140      	cbz	r0, 8006f8c <__ssvfiscanf_r+0xd8>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	eba0 0009 	sub.w	r0, r0, r9
 8006f80:	fa03 f000 	lsl.w	r0, r3, r0
 8006f84:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006f86:	4318      	orrs	r0, r3
 8006f88:	9041      	str	r0, [sp, #260]	; 0x104
 8006f8a:	4655      	mov	r5, sl
 8006f8c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006f90:	2b78      	cmp	r3, #120	; 0x78
 8006f92:	d806      	bhi.n	8006fa2 <__ssvfiscanf_r+0xee>
 8006f94:	2b57      	cmp	r3, #87	; 0x57
 8006f96:	d810      	bhi.n	8006fba <__ssvfiscanf_r+0x106>
 8006f98:	2b25      	cmp	r3, #37	; 0x25
 8006f9a:	d0c6      	beq.n	8006f2a <__ssvfiscanf_r+0x76>
 8006f9c:	d856      	bhi.n	800704c <__ssvfiscanf_r+0x198>
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d064      	beq.n	800706c <__ssvfiscanf_r+0x1b8>
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	9347      	str	r3, [sp, #284]	; 0x11c
 8006fa6:	230a      	movs	r3, #10
 8006fa8:	9342      	str	r3, [sp, #264]	; 0x108
 8006faa:	e071      	b.n	8007090 <__ssvfiscanf_r+0x1dc>
 8006fac:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006fae:	fb02 1103 	mla	r1, r2, r3, r1
 8006fb2:	3930      	subs	r1, #48	; 0x30
 8006fb4:	9143      	str	r1, [sp, #268]	; 0x10c
 8006fb6:	4655      	mov	r5, sl
 8006fb8:	e7d3      	b.n	8006f62 <__ssvfiscanf_r+0xae>
 8006fba:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006fbe:	2a20      	cmp	r2, #32
 8006fc0:	d8ef      	bhi.n	8006fa2 <__ssvfiscanf_r+0xee>
 8006fc2:	a101      	add	r1, pc, #4	; (adr r1, 8006fc8 <__ssvfiscanf_r+0x114>)
 8006fc4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006fc8:	0800707b 	.word	0x0800707b
 8006fcc:	08006fa3 	.word	0x08006fa3
 8006fd0:	08006fa3 	.word	0x08006fa3
 8006fd4:	080070d9 	.word	0x080070d9
 8006fd8:	08006fa3 	.word	0x08006fa3
 8006fdc:	08006fa3 	.word	0x08006fa3
 8006fe0:	08006fa3 	.word	0x08006fa3
 8006fe4:	08006fa3 	.word	0x08006fa3
 8006fe8:	08006fa3 	.word	0x08006fa3
 8006fec:	08006fa3 	.word	0x08006fa3
 8006ff0:	08006fa3 	.word	0x08006fa3
 8006ff4:	080070ef 	.word	0x080070ef
 8006ff8:	080070c5 	.word	0x080070c5
 8006ffc:	08007053 	.word	0x08007053
 8007000:	08007053 	.word	0x08007053
 8007004:	08007053 	.word	0x08007053
 8007008:	08006fa3 	.word	0x08006fa3
 800700c:	080070c9 	.word	0x080070c9
 8007010:	08006fa3 	.word	0x08006fa3
 8007014:	08006fa3 	.word	0x08006fa3
 8007018:	08006fa3 	.word	0x08006fa3
 800701c:	08006fa3 	.word	0x08006fa3
 8007020:	080070ff 	.word	0x080070ff
 8007024:	080070d1 	.word	0x080070d1
 8007028:	08007073 	.word	0x08007073
 800702c:	08006fa3 	.word	0x08006fa3
 8007030:	08006fa3 	.word	0x08006fa3
 8007034:	080070fb 	.word	0x080070fb
 8007038:	08006fa3 	.word	0x08006fa3
 800703c:	080070c5 	.word	0x080070c5
 8007040:	08006fa3 	.word	0x08006fa3
 8007044:	08006fa3 	.word	0x08006fa3
 8007048:	0800707b 	.word	0x0800707b
 800704c:	3b45      	subs	r3, #69	; 0x45
 800704e:	2b02      	cmp	r3, #2
 8007050:	d8a7      	bhi.n	8006fa2 <__ssvfiscanf_r+0xee>
 8007052:	2305      	movs	r3, #5
 8007054:	e01b      	b.n	800708e <__ssvfiscanf_r+0x1da>
 8007056:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007058:	4621      	mov	r1, r4
 800705a:	4630      	mov	r0, r6
 800705c:	4798      	blx	r3
 800705e:	2800      	cmp	r0, #0
 8007060:	f43f af68 	beq.w	8006f34 <__ssvfiscanf_r+0x80>
 8007064:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007066:	2800      	cmp	r0, #0
 8007068:	f040 808d 	bne.w	8007186 <__ssvfiscanf_r+0x2d2>
 800706c:	f04f 30ff 	mov.w	r0, #4294967295
 8007070:	e08f      	b.n	8007192 <__ssvfiscanf_r+0x2de>
 8007072:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007074:	f042 0220 	orr.w	r2, r2, #32
 8007078:	9241      	str	r2, [sp, #260]	; 0x104
 800707a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800707c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007080:	9241      	str	r2, [sp, #260]	; 0x104
 8007082:	2210      	movs	r2, #16
 8007084:	2b6f      	cmp	r3, #111	; 0x6f
 8007086:	9242      	str	r2, [sp, #264]	; 0x108
 8007088:	bf34      	ite	cc
 800708a:	2303      	movcc	r3, #3
 800708c:	2304      	movcs	r3, #4
 800708e:	9347      	str	r3, [sp, #284]	; 0x11c
 8007090:	6863      	ldr	r3, [r4, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	dd42      	ble.n	800711c <__ssvfiscanf_r+0x268>
 8007096:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007098:	0659      	lsls	r1, r3, #25
 800709a:	d404      	bmi.n	80070a6 <__ssvfiscanf_r+0x1f2>
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	781a      	ldrb	r2, [r3, #0]
 80070a0:	5cba      	ldrb	r2, [r7, r2]
 80070a2:	0712      	lsls	r2, r2, #28
 80070a4:	d441      	bmi.n	800712a <__ssvfiscanf_r+0x276>
 80070a6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	dc50      	bgt.n	800714e <__ssvfiscanf_r+0x29a>
 80070ac:	466b      	mov	r3, sp
 80070ae:	4622      	mov	r2, r4
 80070b0:	a941      	add	r1, sp, #260	; 0x104
 80070b2:	4630      	mov	r0, r6
 80070b4:	f000 fb64 	bl	8007780 <_scanf_chars>
 80070b8:	2801      	cmp	r0, #1
 80070ba:	d06e      	beq.n	800719a <__ssvfiscanf_r+0x2e6>
 80070bc:	2802      	cmp	r0, #2
 80070be:	f47f af20 	bne.w	8006f02 <__ssvfiscanf_r+0x4e>
 80070c2:	e7cf      	b.n	8007064 <__ssvfiscanf_r+0x1b0>
 80070c4:	220a      	movs	r2, #10
 80070c6:	e7dd      	b.n	8007084 <__ssvfiscanf_r+0x1d0>
 80070c8:	2300      	movs	r3, #0
 80070ca:	9342      	str	r3, [sp, #264]	; 0x108
 80070cc:	2303      	movs	r3, #3
 80070ce:	e7de      	b.n	800708e <__ssvfiscanf_r+0x1da>
 80070d0:	2308      	movs	r3, #8
 80070d2:	9342      	str	r3, [sp, #264]	; 0x108
 80070d4:	2304      	movs	r3, #4
 80070d6:	e7da      	b.n	800708e <__ssvfiscanf_r+0x1da>
 80070d8:	4629      	mov	r1, r5
 80070da:	4640      	mov	r0, r8
 80070dc:	f000 fcc4 	bl	8007a68 <__sccl>
 80070e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80070e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070e6:	9341      	str	r3, [sp, #260]	; 0x104
 80070e8:	4605      	mov	r5, r0
 80070ea:	2301      	movs	r3, #1
 80070ec:	e7cf      	b.n	800708e <__ssvfiscanf_r+0x1da>
 80070ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80070f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070f4:	9341      	str	r3, [sp, #260]	; 0x104
 80070f6:	2300      	movs	r3, #0
 80070f8:	e7c9      	b.n	800708e <__ssvfiscanf_r+0x1da>
 80070fa:	2302      	movs	r3, #2
 80070fc:	e7c7      	b.n	800708e <__ssvfiscanf_r+0x1da>
 80070fe:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007100:	06c3      	lsls	r3, r0, #27
 8007102:	f53f aefe 	bmi.w	8006f02 <__ssvfiscanf_r+0x4e>
 8007106:	9b00      	ldr	r3, [sp, #0]
 8007108:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800710a:	1d19      	adds	r1, r3, #4
 800710c:	9100      	str	r1, [sp, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f010 0f01 	tst.w	r0, #1
 8007114:	bf14      	ite	ne
 8007116:	801a      	strhne	r2, [r3, #0]
 8007118:	601a      	streq	r2, [r3, #0]
 800711a:	e6f2      	b.n	8006f02 <__ssvfiscanf_r+0x4e>
 800711c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800711e:	4621      	mov	r1, r4
 8007120:	4630      	mov	r0, r6
 8007122:	4798      	blx	r3
 8007124:	2800      	cmp	r0, #0
 8007126:	d0b6      	beq.n	8007096 <__ssvfiscanf_r+0x1e2>
 8007128:	e79c      	b.n	8007064 <__ssvfiscanf_r+0x1b0>
 800712a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800712c:	3201      	adds	r2, #1
 800712e:	9245      	str	r2, [sp, #276]	; 0x114
 8007130:	6862      	ldr	r2, [r4, #4]
 8007132:	3a01      	subs	r2, #1
 8007134:	2a00      	cmp	r2, #0
 8007136:	6062      	str	r2, [r4, #4]
 8007138:	dd02      	ble.n	8007140 <__ssvfiscanf_r+0x28c>
 800713a:	3301      	adds	r3, #1
 800713c:	6023      	str	r3, [r4, #0]
 800713e:	e7ad      	b.n	800709c <__ssvfiscanf_r+0x1e8>
 8007140:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007142:	4621      	mov	r1, r4
 8007144:	4630      	mov	r0, r6
 8007146:	4798      	blx	r3
 8007148:	2800      	cmp	r0, #0
 800714a:	d0a7      	beq.n	800709c <__ssvfiscanf_r+0x1e8>
 800714c:	e78a      	b.n	8007064 <__ssvfiscanf_r+0x1b0>
 800714e:	2b04      	cmp	r3, #4
 8007150:	dc0e      	bgt.n	8007170 <__ssvfiscanf_r+0x2bc>
 8007152:	466b      	mov	r3, sp
 8007154:	4622      	mov	r2, r4
 8007156:	a941      	add	r1, sp, #260	; 0x104
 8007158:	4630      	mov	r0, r6
 800715a:	f000 fb6b 	bl	8007834 <_scanf_i>
 800715e:	e7ab      	b.n	80070b8 <__ssvfiscanf_r+0x204>
 8007160:	08006e01 	.word	0x08006e01
 8007164:	08006e7b 	.word	0x08006e7b
 8007168:	0800805b 	.word	0x0800805b
 800716c:	0800800c 	.word	0x0800800c
 8007170:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <__ssvfiscanf_r+0x2ec>)
 8007172:	2b00      	cmp	r3, #0
 8007174:	f43f aec5 	beq.w	8006f02 <__ssvfiscanf_r+0x4e>
 8007178:	466b      	mov	r3, sp
 800717a:	4622      	mov	r2, r4
 800717c:	a941      	add	r1, sp, #260	; 0x104
 800717e:	4630      	mov	r0, r6
 8007180:	f3af 8000 	nop.w
 8007184:	e798      	b.n	80070b8 <__ssvfiscanf_r+0x204>
 8007186:	89a3      	ldrh	r3, [r4, #12]
 8007188:	f013 0f40 	tst.w	r3, #64	; 0x40
 800718c:	bf18      	it	ne
 800718e:	f04f 30ff 	movne.w	r0, #4294967295
 8007192:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800719a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800719c:	e7f9      	b.n	8007192 <__ssvfiscanf_r+0x2de>
 800719e:	bf00      	nop
 80071a0:	00000000 	.word	0x00000000

080071a4 <__sfputc_r>:
 80071a4:	6893      	ldr	r3, [r2, #8]
 80071a6:	3b01      	subs	r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	b410      	push	{r4}
 80071ac:	6093      	str	r3, [r2, #8]
 80071ae:	da08      	bge.n	80071c2 <__sfputc_r+0x1e>
 80071b0:	6994      	ldr	r4, [r2, #24]
 80071b2:	42a3      	cmp	r3, r4
 80071b4:	db01      	blt.n	80071ba <__sfputc_r+0x16>
 80071b6:	290a      	cmp	r1, #10
 80071b8:	d103      	bne.n	80071c2 <__sfputc_r+0x1e>
 80071ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071be:	f7ff ba23 	b.w	8006608 <__swbuf_r>
 80071c2:	6813      	ldr	r3, [r2, #0]
 80071c4:	1c58      	adds	r0, r3, #1
 80071c6:	6010      	str	r0, [r2, #0]
 80071c8:	7019      	strb	r1, [r3, #0]
 80071ca:	4608      	mov	r0, r1
 80071cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <__sfputs_r>:
 80071d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d4:	4606      	mov	r6, r0
 80071d6:	460f      	mov	r7, r1
 80071d8:	4614      	mov	r4, r2
 80071da:	18d5      	adds	r5, r2, r3
 80071dc:	42ac      	cmp	r4, r5
 80071de:	d101      	bne.n	80071e4 <__sfputs_r+0x12>
 80071e0:	2000      	movs	r0, #0
 80071e2:	e007      	b.n	80071f4 <__sfputs_r+0x22>
 80071e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071e8:	463a      	mov	r2, r7
 80071ea:	4630      	mov	r0, r6
 80071ec:	f7ff ffda 	bl	80071a4 <__sfputc_r>
 80071f0:	1c43      	adds	r3, r0, #1
 80071f2:	d1f3      	bne.n	80071dc <__sfputs_r+0xa>
 80071f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071f8 <_vfiprintf_r>:
 80071f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	460d      	mov	r5, r1
 80071fe:	b09d      	sub	sp, #116	; 0x74
 8007200:	4614      	mov	r4, r2
 8007202:	4698      	mov	r8, r3
 8007204:	4606      	mov	r6, r0
 8007206:	b118      	cbz	r0, 8007210 <_vfiprintf_r+0x18>
 8007208:	6983      	ldr	r3, [r0, #24]
 800720a:	b90b      	cbnz	r3, 8007210 <_vfiprintf_r+0x18>
 800720c:	f7ff fbf8 	bl	8006a00 <__sinit>
 8007210:	4b89      	ldr	r3, [pc, #548]	; (8007438 <_vfiprintf_r+0x240>)
 8007212:	429d      	cmp	r5, r3
 8007214:	d11b      	bne.n	800724e <_vfiprintf_r+0x56>
 8007216:	6875      	ldr	r5, [r6, #4]
 8007218:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800721a:	07d9      	lsls	r1, r3, #31
 800721c:	d405      	bmi.n	800722a <_vfiprintf_r+0x32>
 800721e:	89ab      	ldrh	r3, [r5, #12]
 8007220:	059a      	lsls	r2, r3, #22
 8007222:	d402      	bmi.n	800722a <_vfiprintf_r+0x32>
 8007224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007226:	f7ff fc89 	bl	8006b3c <__retarget_lock_acquire_recursive>
 800722a:	89ab      	ldrh	r3, [r5, #12]
 800722c:	071b      	lsls	r3, r3, #28
 800722e:	d501      	bpl.n	8007234 <_vfiprintf_r+0x3c>
 8007230:	692b      	ldr	r3, [r5, #16]
 8007232:	b9eb      	cbnz	r3, 8007270 <_vfiprintf_r+0x78>
 8007234:	4629      	mov	r1, r5
 8007236:	4630      	mov	r0, r6
 8007238:	f7ff fa4a 	bl	80066d0 <__swsetup_r>
 800723c:	b1c0      	cbz	r0, 8007270 <_vfiprintf_r+0x78>
 800723e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007240:	07dc      	lsls	r4, r3, #31
 8007242:	d50e      	bpl.n	8007262 <_vfiprintf_r+0x6a>
 8007244:	f04f 30ff 	mov.w	r0, #4294967295
 8007248:	b01d      	add	sp, #116	; 0x74
 800724a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724e:	4b7b      	ldr	r3, [pc, #492]	; (800743c <_vfiprintf_r+0x244>)
 8007250:	429d      	cmp	r5, r3
 8007252:	d101      	bne.n	8007258 <_vfiprintf_r+0x60>
 8007254:	68b5      	ldr	r5, [r6, #8]
 8007256:	e7df      	b.n	8007218 <_vfiprintf_r+0x20>
 8007258:	4b79      	ldr	r3, [pc, #484]	; (8007440 <_vfiprintf_r+0x248>)
 800725a:	429d      	cmp	r5, r3
 800725c:	bf08      	it	eq
 800725e:	68f5      	ldreq	r5, [r6, #12]
 8007260:	e7da      	b.n	8007218 <_vfiprintf_r+0x20>
 8007262:	89ab      	ldrh	r3, [r5, #12]
 8007264:	0598      	lsls	r0, r3, #22
 8007266:	d4ed      	bmi.n	8007244 <_vfiprintf_r+0x4c>
 8007268:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800726a:	f7ff fc68 	bl	8006b3e <__retarget_lock_release_recursive>
 800726e:	e7e9      	b.n	8007244 <_vfiprintf_r+0x4c>
 8007270:	2300      	movs	r3, #0
 8007272:	9309      	str	r3, [sp, #36]	; 0x24
 8007274:	2320      	movs	r3, #32
 8007276:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800727a:	f8cd 800c 	str.w	r8, [sp, #12]
 800727e:	2330      	movs	r3, #48	; 0x30
 8007280:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007444 <_vfiprintf_r+0x24c>
 8007284:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007288:	f04f 0901 	mov.w	r9, #1
 800728c:	4623      	mov	r3, r4
 800728e:	469a      	mov	sl, r3
 8007290:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007294:	b10a      	cbz	r2, 800729a <_vfiprintf_r+0xa2>
 8007296:	2a25      	cmp	r2, #37	; 0x25
 8007298:	d1f9      	bne.n	800728e <_vfiprintf_r+0x96>
 800729a:	ebba 0b04 	subs.w	fp, sl, r4
 800729e:	d00b      	beq.n	80072b8 <_vfiprintf_r+0xc0>
 80072a0:	465b      	mov	r3, fp
 80072a2:	4622      	mov	r2, r4
 80072a4:	4629      	mov	r1, r5
 80072a6:	4630      	mov	r0, r6
 80072a8:	f7ff ff93 	bl	80071d2 <__sfputs_r>
 80072ac:	3001      	adds	r0, #1
 80072ae:	f000 80aa 	beq.w	8007406 <_vfiprintf_r+0x20e>
 80072b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072b4:	445a      	add	r2, fp
 80072b6:	9209      	str	r2, [sp, #36]	; 0x24
 80072b8:	f89a 3000 	ldrb.w	r3, [sl]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 80a2 	beq.w	8007406 <_vfiprintf_r+0x20e>
 80072c2:	2300      	movs	r3, #0
 80072c4:	f04f 32ff 	mov.w	r2, #4294967295
 80072c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072cc:	f10a 0a01 	add.w	sl, sl, #1
 80072d0:	9304      	str	r3, [sp, #16]
 80072d2:	9307      	str	r3, [sp, #28]
 80072d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072d8:	931a      	str	r3, [sp, #104]	; 0x68
 80072da:	4654      	mov	r4, sl
 80072dc:	2205      	movs	r2, #5
 80072de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072e2:	4858      	ldr	r0, [pc, #352]	; (8007444 <_vfiprintf_r+0x24c>)
 80072e4:	f7f8 ff8c 	bl	8000200 <memchr>
 80072e8:	9a04      	ldr	r2, [sp, #16]
 80072ea:	b9d8      	cbnz	r0, 8007324 <_vfiprintf_r+0x12c>
 80072ec:	06d1      	lsls	r1, r2, #27
 80072ee:	bf44      	itt	mi
 80072f0:	2320      	movmi	r3, #32
 80072f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072f6:	0713      	lsls	r3, r2, #28
 80072f8:	bf44      	itt	mi
 80072fa:	232b      	movmi	r3, #43	; 0x2b
 80072fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007300:	f89a 3000 	ldrb.w	r3, [sl]
 8007304:	2b2a      	cmp	r3, #42	; 0x2a
 8007306:	d015      	beq.n	8007334 <_vfiprintf_r+0x13c>
 8007308:	9a07      	ldr	r2, [sp, #28]
 800730a:	4654      	mov	r4, sl
 800730c:	2000      	movs	r0, #0
 800730e:	f04f 0c0a 	mov.w	ip, #10
 8007312:	4621      	mov	r1, r4
 8007314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007318:	3b30      	subs	r3, #48	; 0x30
 800731a:	2b09      	cmp	r3, #9
 800731c:	d94e      	bls.n	80073bc <_vfiprintf_r+0x1c4>
 800731e:	b1b0      	cbz	r0, 800734e <_vfiprintf_r+0x156>
 8007320:	9207      	str	r2, [sp, #28]
 8007322:	e014      	b.n	800734e <_vfiprintf_r+0x156>
 8007324:	eba0 0308 	sub.w	r3, r0, r8
 8007328:	fa09 f303 	lsl.w	r3, r9, r3
 800732c:	4313      	orrs	r3, r2
 800732e:	9304      	str	r3, [sp, #16]
 8007330:	46a2      	mov	sl, r4
 8007332:	e7d2      	b.n	80072da <_vfiprintf_r+0xe2>
 8007334:	9b03      	ldr	r3, [sp, #12]
 8007336:	1d19      	adds	r1, r3, #4
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	9103      	str	r1, [sp, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	bfbb      	ittet	lt
 8007340:	425b      	neglt	r3, r3
 8007342:	f042 0202 	orrlt.w	r2, r2, #2
 8007346:	9307      	strge	r3, [sp, #28]
 8007348:	9307      	strlt	r3, [sp, #28]
 800734a:	bfb8      	it	lt
 800734c:	9204      	strlt	r2, [sp, #16]
 800734e:	7823      	ldrb	r3, [r4, #0]
 8007350:	2b2e      	cmp	r3, #46	; 0x2e
 8007352:	d10c      	bne.n	800736e <_vfiprintf_r+0x176>
 8007354:	7863      	ldrb	r3, [r4, #1]
 8007356:	2b2a      	cmp	r3, #42	; 0x2a
 8007358:	d135      	bne.n	80073c6 <_vfiprintf_r+0x1ce>
 800735a:	9b03      	ldr	r3, [sp, #12]
 800735c:	1d1a      	adds	r2, r3, #4
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	9203      	str	r2, [sp, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	bfb8      	it	lt
 8007366:	f04f 33ff 	movlt.w	r3, #4294967295
 800736a:	3402      	adds	r4, #2
 800736c:	9305      	str	r3, [sp, #20]
 800736e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007454 <_vfiprintf_r+0x25c>
 8007372:	7821      	ldrb	r1, [r4, #0]
 8007374:	2203      	movs	r2, #3
 8007376:	4650      	mov	r0, sl
 8007378:	f7f8 ff42 	bl	8000200 <memchr>
 800737c:	b140      	cbz	r0, 8007390 <_vfiprintf_r+0x198>
 800737e:	2340      	movs	r3, #64	; 0x40
 8007380:	eba0 000a 	sub.w	r0, r0, sl
 8007384:	fa03 f000 	lsl.w	r0, r3, r0
 8007388:	9b04      	ldr	r3, [sp, #16]
 800738a:	4303      	orrs	r3, r0
 800738c:	3401      	adds	r4, #1
 800738e:	9304      	str	r3, [sp, #16]
 8007390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007394:	482c      	ldr	r0, [pc, #176]	; (8007448 <_vfiprintf_r+0x250>)
 8007396:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800739a:	2206      	movs	r2, #6
 800739c:	f7f8 ff30 	bl	8000200 <memchr>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d03f      	beq.n	8007424 <_vfiprintf_r+0x22c>
 80073a4:	4b29      	ldr	r3, [pc, #164]	; (800744c <_vfiprintf_r+0x254>)
 80073a6:	bb1b      	cbnz	r3, 80073f0 <_vfiprintf_r+0x1f8>
 80073a8:	9b03      	ldr	r3, [sp, #12]
 80073aa:	3307      	adds	r3, #7
 80073ac:	f023 0307 	bic.w	r3, r3, #7
 80073b0:	3308      	adds	r3, #8
 80073b2:	9303      	str	r3, [sp, #12]
 80073b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b6:	443b      	add	r3, r7
 80073b8:	9309      	str	r3, [sp, #36]	; 0x24
 80073ba:	e767      	b.n	800728c <_vfiprintf_r+0x94>
 80073bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80073c0:	460c      	mov	r4, r1
 80073c2:	2001      	movs	r0, #1
 80073c4:	e7a5      	b.n	8007312 <_vfiprintf_r+0x11a>
 80073c6:	2300      	movs	r3, #0
 80073c8:	3401      	adds	r4, #1
 80073ca:	9305      	str	r3, [sp, #20]
 80073cc:	4619      	mov	r1, r3
 80073ce:	f04f 0c0a 	mov.w	ip, #10
 80073d2:	4620      	mov	r0, r4
 80073d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073d8:	3a30      	subs	r2, #48	; 0x30
 80073da:	2a09      	cmp	r2, #9
 80073dc:	d903      	bls.n	80073e6 <_vfiprintf_r+0x1ee>
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d0c5      	beq.n	800736e <_vfiprintf_r+0x176>
 80073e2:	9105      	str	r1, [sp, #20]
 80073e4:	e7c3      	b.n	800736e <_vfiprintf_r+0x176>
 80073e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80073ea:	4604      	mov	r4, r0
 80073ec:	2301      	movs	r3, #1
 80073ee:	e7f0      	b.n	80073d2 <_vfiprintf_r+0x1da>
 80073f0:	ab03      	add	r3, sp, #12
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	462a      	mov	r2, r5
 80073f6:	4b16      	ldr	r3, [pc, #88]	; (8007450 <_vfiprintf_r+0x258>)
 80073f8:	a904      	add	r1, sp, #16
 80073fa:	4630      	mov	r0, r6
 80073fc:	f3af 8000 	nop.w
 8007400:	4607      	mov	r7, r0
 8007402:	1c78      	adds	r0, r7, #1
 8007404:	d1d6      	bne.n	80073b4 <_vfiprintf_r+0x1bc>
 8007406:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007408:	07d9      	lsls	r1, r3, #31
 800740a:	d405      	bmi.n	8007418 <_vfiprintf_r+0x220>
 800740c:	89ab      	ldrh	r3, [r5, #12]
 800740e:	059a      	lsls	r2, r3, #22
 8007410:	d402      	bmi.n	8007418 <_vfiprintf_r+0x220>
 8007412:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007414:	f7ff fb93 	bl	8006b3e <__retarget_lock_release_recursive>
 8007418:	89ab      	ldrh	r3, [r5, #12]
 800741a:	065b      	lsls	r3, r3, #25
 800741c:	f53f af12 	bmi.w	8007244 <_vfiprintf_r+0x4c>
 8007420:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007422:	e711      	b.n	8007248 <_vfiprintf_r+0x50>
 8007424:	ab03      	add	r3, sp, #12
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	462a      	mov	r2, r5
 800742a:	4b09      	ldr	r3, [pc, #36]	; (8007450 <_vfiprintf_r+0x258>)
 800742c:	a904      	add	r1, sp, #16
 800742e:	4630      	mov	r0, r6
 8007430:	f000 f880 	bl	8007534 <_printf_i>
 8007434:	e7e4      	b.n	8007400 <_vfiprintf_r+0x208>
 8007436:	bf00      	nop
 8007438:	08007fcc 	.word	0x08007fcc
 800743c:	08007fec 	.word	0x08007fec
 8007440:	08007fac 	.word	0x08007fac
 8007444:	08008010 	.word	0x08008010
 8007448:	08008016 	.word	0x08008016
 800744c:	00000000 	.word	0x00000000
 8007450:	080071d3 	.word	0x080071d3
 8007454:	0800800c 	.word	0x0800800c

08007458 <_printf_common>:
 8007458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800745c:	4616      	mov	r6, r2
 800745e:	4699      	mov	r9, r3
 8007460:	688a      	ldr	r2, [r1, #8]
 8007462:	690b      	ldr	r3, [r1, #16]
 8007464:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007468:	4293      	cmp	r3, r2
 800746a:	bfb8      	it	lt
 800746c:	4613      	movlt	r3, r2
 800746e:	6033      	str	r3, [r6, #0]
 8007470:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007474:	4607      	mov	r7, r0
 8007476:	460c      	mov	r4, r1
 8007478:	b10a      	cbz	r2, 800747e <_printf_common+0x26>
 800747a:	3301      	adds	r3, #1
 800747c:	6033      	str	r3, [r6, #0]
 800747e:	6823      	ldr	r3, [r4, #0]
 8007480:	0699      	lsls	r1, r3, #26
 8007482:	bf42      	ittt	mi
 8007484:	6833      	ldrmi	r3, [r6, #0]
 8007486:	3302      	addmi	r3, #2
 8007488:	6033      	strmi	r3, [r6, #0]
 800748a:	6825      	ldr	r5, [r4, #0]
 800748c:	f015 0506 	ands.w	r5, r5, #6
 8007490:	d106      	bne.n	80074a0 <_printf_common+0x48>
 8007492:	f104 0a19 	add.w	sl, r4, #25
 8007496:	68e3      	ldr	r3, [r4, #12]
 8007498:	6832      	ldr	r2, [r6, #0]
 800749a:	1a9b      	subs	r3, r3, r2
 800749c:	42ab      	cmp	r3, r5
 800749e:	dc26      	bgt.n	80074ee <_printf_common+0x96>
 80074a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074a4:	1e13      	subs	r3, r2, #0
 80074a6:	6822      	ldr	r2, [r4, #0]
 80074a8:	bf18      	it	ne
 80074aa:	2301      	movne	r3, #1
 80074ac:	0692      	lsls	r2, r2, #26
 80074ae:	d42b      	bmi.n	8007508 <_printf_common+0xb0>
 80074b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074b4:	4649      	mov	r1, r9
 80074b6:	4638      	mov	r0, r7
 80074b8:	47c0      	blx	r8
 80074ba:	3001      	adds	r0, #1
 80074bc:	d01e      	beq.n	80074fc <_printf_common+0xa4>
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	68e5      	ldr	r5, [r4, #12]
 80074c2:	6832      	ldr	r2, [r6, #0]
 80074c4:	f003 0306 	and.w	r3, r3, #6
 80074c8:	2b04      	cmp	r3, #4
 80074ca:	bf08      	it	eq
 80074cc:	1aad      	subeq	r5, r5, r2
 80074ce:	68a3      	ldr	r3, [r4, #8]
 80074d0:	6922      	ldr	r2, [r4, #16]
 80074d2:	bf0c      	ite	eq
 80074d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074d8:	2500      	movne	r5, #0
 80074da:	4293      	cmp	r3, r2
 80074dc:	bfc4      	itt	gt
 80074de:	1a9b      	subgt	r3, r3, r2
 80074e0:	18ed      	addgt	r5, r5, r3
 80074e2:	2600      	movs	r6, #0
 80074e4:	341a      	adds	r4, #26
 80074e6:	42b5      	cmp	r5, r6
 80074e8:	d11a      	bne.n	8007520 <_printf_common+0xc8>
 80074ea:	2000      	movs	r0, #0
 80074ec:	e008      	b.n	8007500 <_printf_common+0xa8>
 80074ee:	2301      	movs	r3, #1
 80074f0:	4652      	mov	r2, sl
 80074f2:	4649      	mov	r1, r9
 80074f4:	4638      	mov	r0, r7
 80074f6:	47c0      	blx	r8
 80074f8:	3001      	adds	r0, #1
 80074fa:	d103      	bne.n	8007504 <_printf_common+0xac>
 80074fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007504:	3501      	adds	r5, #1
 8007506:	e7c6      	b.n	8007496 <_printf_common+0x3e>
 8007508:	18e1      	adds	r1, r4, r3
 800750a:	1c5a      	adds	r2, r3, #1
 800750c:	2030      	movs	r0, #48	; 0x30
 800750e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007512:	4422      	add	r2, r4
 8007514:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007518:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800751c:	3302      	adds	r3, #2
 800751e:	e7c7      	b.n	80074b0 <_printf_common+0x58>
 8007520:	2301      	movs	r3, #1
 8007522:	4622      	mov	r2, r4
 8007524:	4649      	mov	r1, r9
 8007526:	4638      	mov	r0, r7
 8007528:	47c0      	blx	r8
 800752a:	3001      	adds	r0, #1
 800752c:	d0e6      	beq.n	80074fc <_printf_common+0xa4>
 800752e:	3601      	adds	r6, #1
 8007530:	e7d9      	b.n	80074e6 <_printf_common+0x8e>
	...

08007534 <_printf_i>:
 8007534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007538:	7e0f      	ldrb	r7, [r1, #24]
 800753a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800753c:	2f78      	cmp	r7, #120	; 0x78
 800753e:	4691      	mov	r9, r2
 8007540:	4680      	mov	r8, r0
 8007542:	460c      	mov	r4, r1
 8007544:	469a      	mov	sl, r3
 8007546:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800754a:	d807      	bhi.n	800755c <_printf_i+0x28>
 800754c:	2f62      	cmp	r7, #98	; 0x62
 800754e:	d80a      	bhi.n	8007566 <_printf_i+0x32>
 8007550:	2f00      	cmp	r7, #0
 8007552:	f000 80d8 	beq.w	8007706 <_printf_i+0x1d2>
 8007556:	2f58      	cmp	r7, #88	; 0x58
 8007558:	f000 80a3 	beq.w	80076a2 <_printf_i+0x16e>
 800755c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007560:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007564:	e03a      	b.n	80075dc <_printf_i+0xa8>
 8007566:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800756a:	2b15      	cmp	r3, #21
 800756c:	d8f6      	bhi.n	800755c <_printf_i+0x28>
 800756e:	a101      	add	r1, pc, #4	; (adr r1, 8007574 <_printf_i+0x40>)
 8007570:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007574:	080075cd 	.word	0x080075cd
 8007578:	080075e1 	.word	0x080075e1
 800757c:	0800755d 	.word	0x0800755d
 8007580:	0800755d 	.word	0x0800755d
 8007584:	0800755d 	.word	0x0800755d
 8007588:	0800755d 	.word	0x0800755d
 800758c:	080075e1 	.word	0x080075e1
 8007590:	0800755d 	.word	0x0800755d
 8007594:	0800755d 	.word	0x0800755d
 8007598:	0800755d 	.word	0x0800755d
 800759c:	0800755d 	.word	0x0800755d
 80075a0:	080076ed 	.word	0x080076ed
 80075a4:	08007611 	.word	0x08007611
 80075a8:	080076cf 	.word	0x080076cf
 80075ac:	0800755d 	.word	0x0800755d
 80075b0:	0800755d 	.word	0x0800755d
 80075b4:	0800770f 	.word	0x0800770f
 80075b8:	0800755d 	.word	0x0800755d
 80075bc:	08007611 	.word	0x08007611
 80075c0:	0800755d 	.word	0x0800755d
 80075c4:	0800755d 	.word	0x0800755d
 80075c8:	080076d7 	.word	0x080076d7
 80075cc:	682b      	ldr	r3, [r5, #0]
 80075ce:	1d1a      	adds	r2, r3, #4
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	602a      	str	r2, [r5, #0]
 80075d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075dc:	2301      	movs	r3, #1
 80075de:	e0a3      	b.n	8007728 <_printf_i+0x1f4>
 80075e0:	6820      	ldr	r0, [r4, #0]
 80075e2:	6829      	ldr	r1, [r5, #0]
 80075e4:	0606      	lsls	r6, r0, #24
 80075e6:	f101 0304 	add.w	r3, r1, #4
 80075ea:	d50a      	bpl.n	8007602 <_printf_i+0xce>
 80075ec:	680e      	ldr	r6, [r1, #0]
 80075ee:	602b      	str	r3, [r5, #0]
 80075f0:	2e00      	cmp	r6, #0
 80075f2:	da03      	bge.n	80075fc <_printf_i+0xc8>
 80075f4:	232d      	movs	r3, #45	; 0x2d
 80075f6:	4276      	negs	r6, r6
 80075f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075fc:	485e      	ldr	r0, [pc, #376]	; (8007778 <_printf_i+0x244>)
 80075fe:	230a      	movs	r3, #10
 8007600:	e019      	b.n	8007636 <_printf_i+0x102>
 8007602:	680e      	ldr	r6, [r1, #0]
 8007604:	602b      	str	r3, [r5, #0]
 8007606:	f010 0f40 	tst.w	r0, #64	; 0x40
 800760a:	bf18      	it	ne
 800760c:	b236      	sxthne	r6, r6
 800760e:	e7ef      	b.n	80075f0 <_printf_i+0xbc>
 8007610:	682b      	ldr	r3, [r5, #0]
 8007612:	6820      	ldr	r0, [r4, #0]
 8007614:	1d19      	adds	r1, r3, #4
 8007616:	6029      	str	r1, [r5, #0]
 8007618:	0601      	lsls	r1, r0, #24
 800761a:	d501      	bpl.n	8007620 <_printf_i+0xec>
 800761c:	681e      	ldr	r6, [r3, #0]
 800761e:	e002      	b.n	8007626 <_printf_i+0xf2>
 8007620:	0646      	lsls	r6, r0, #25
 8007622:	d5fb      	bpl.n	800761c <_printf_i+0xe8>
 8007624:	881e      	ldrh	r6, [r3, #0]
 8007626:	4854      	ldr	r0, [pc, #336]	; (8007778 <_printf_i+0x244>)
 8007628:	2f6f      	cmp	r7, #111	; 0x6f
 800762a:	bf0c      	ite	eq
 800762c:	2308      	moveq	r3, #8
 800762e:	230a      	movne	r3, #10
 8007630:	2100      	movs	r1, #0
 8007632:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007636:	6865      	ldr	r5, [r4, #4]
 8007638:	60a5      	str	r5, [r4, #8]
 800763a:	2d00      	cmp	r5, #0
 800763c:	bfa2      	ittt	ge
 800763e:	6821      	ldrge	r1, [r4, #0]
 8007640:	f021 0104 	bicge.w	r1, r1, #4
 8007644:	6021      	strge	r1, [r4, #0]
 8007646:	b90e      	cbnz	r6, 800764c <_printf_i+0x118>
 8007648:	2d00      	cmp	r5, #0
 800764a:	d04d      	beq.n	80076e8 <_printf_i+0x1b4>
 800764c:	4615      	mov	r5, r2
 800764e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007652:	fb03 6711 	mls	r7, r3, r1, r6
 8007656:	5dc7      	ldrb	r7, [r0, r7]
 8007658:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800765c:	4637      	mov	r7, r6
 800765e:	42bb      	cmp	r3, r7
 8007660:	460e      	mov	r6, r1
 8007662:	d9f4      	bls.n	800764e <_printf_i+0x11a>
 8007664:	2b08      	cmp	r3, #8
 8007666:	d10b      	bne.n	8007680 <_printf_i+0x14c>
 8007668:	6823      	ldr	r3, [r4, #0]
 800766a:	07de      	lsls	r6, r3, #31
 800766c:	d508      	bpl.n	8007680 <_printf_i+0x14c>
 800766e:	6923      	ldr	r3, [r4, #16]
 8007670:	6861      	ldr	r1, [r4, #4]
 8007672:	4299      	cmp	r1, r3
 8007674:	bfde      	ittt	le
 8007676:	2330      	movle	r3, #48	; 0x30
 8007678:	f805 3c01 	strble.w	r3, [r5, #-1]
 800767c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007680:	1b52      	subs	r2, r2, r5
 8007682:	6122      	str	r2, [r4, #16]
 8007684:	f8cd a000 	str.w	sl, [sp]
 8007688:	464b      	mov	r3, r9
 800768a:	aa03      	add	r2, sp, #12
 800768c:	4621      	mov	r1, r4
 800768e:	4640      	mov	r0, r8
 8007690:	f7ff fee2 	bl	8007458 <_printf_common>
 8007694:	3001      	adds	r0, #1
 8007696:	d14c      	bne.n	8007732 <_printf_i+0x1fe>
 8007698:	f04f 30ff 	mov.w	r0, #4294967295
 800769c:	b004      	add	sp, #16
 800769e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076a2:	4835      	ldr	r0, [pc, #212]	; (8007778 <_printf_i+0x244>)
 80076a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80076a8:	6829      	ldr	r1, [r5, #0]
 80076aa:	6823      	ldr	r3, [r4, #0]
 80076ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80076b0:	6029      	str	r1, [r5, #0]
 80076b2:	061d      	lsls	r5, r3, #24
 80076b4:	d514      	bpl.n	80076e0 <_printf_i+0x1ac>
 80076b6:	07df      	lsls	r7, r3, #31
 80076b8:	bf44      	itt	mi
 80076ba:	f043 0320 	orrmi.w	r3, r3, #32
 80076be:	6023      	strmi	r3, [r4, #0]
 80076c0:	b91e      	cbnz	r6, 80076ca <_printf_i+0x196>
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	f023 0320 	bic.w	r3, r3, #32
 80076c8:	6023      	str	r3, [r4, #0]
 80076ca:	2310      	movs	r3, #16
 80076cc:	e7b0      	b.n	8007630 <_printf_i+0xfc>
 80076ce:	6823      	ldr	r3, [r4, #0]
 80076d0:	f043 0320 	orr.w	r3, r3, #32
 80076d4:	6023      	str	r3, [r4, #0]
 80076d6:	2378      	movs	r3, #120	; 0x78
 80076d8:	4828      	ldr	r0, [pc, #160]	; (800777c <_printf_i+0x248>)
 80076da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076de:	e7e3      	b.n	80076a8 <_printf_i+0x174>
 80076e0:	0659      	lsls	r1, r3, #25
 80076e2:	bf48      	it	mi
 80076e4:	b2b6      	uxthmi	r6, r6
 80076e6:	e7e6      	b.n	80076b6 <_printf_i+0x182>
 80076e8:	4615      	mov	r5, r2
 80076ea:	e7bb      	b.n	8007664 <_printf_i+0x130>
 80076ec:	682b      	ldr	r3, [r5, #0]
 80076ee:	6826      	ldr	r6, [r4, #0]
 80076f0:	6961      	ldr	r1, [r4, #20]
 80076f2:	1d18      	adds	r0, r3, #4
 80076f4:	6028      	str	r0, [r5, #0]
 80076f6:	0635      	lsls	r5, r6, #24
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	d501      	bpl.n	8007700 <_printf_i+0x1cc>
 80076fc:	6019      	str	r1, [r3, #0]
 80076fe:	e002      	b.n	8007706 <_printf_i+0x1d2>
 8007700:	0670      	lsls	r0, r6, #25
 8007702:	d5fb      	bpl.n	80076fc <_printf_i+0x1c8>
 8007704:	8019      	strh	r1, [r3, #0]
 8007706:	2300      	movs	r3, #0
 8007708:	6123      	str	r3, [r4, #16]
 800770a:	4615      	mov	r5, r2
 800770c:	e7ba      	b.n	8007684 <_printf_i+0x150>
 800770e:	682b      	ldr	r3, [r5, #0]
 8007710:	1d1a      	adds	r2, r3, #4
 8007712:	602a      	str	r2, [r5, #0]
 8007714:	681d      	ldr	r5, [r3, #0]
 8007716:	6862      	ldr	r2, [r4, #4]
 8007718:	2100      	movs	r1, #0
 800771a:	4628      	mov	r0, r5
 800771c:	f7f8 fd70 	bl	8000200 <memchr>
 8007720:	b108      	cbz	r0, 8007726 <_printf_i+0x1f2>
 8007722:	1b40      	subs	r0, r0, r5
 8007724:	6060      	str	r0, [r4, #4]
 8007726:	6863      	ldr	r3, [r4, #4]
 8007728:	6123      	str	r3, [r4, #16]
 800772a:	2300      	movs	r3, #0
 800772c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007730:	e7a8      	b.n	8007684 <_printf_i+0x150>
 8007732:	6923      	ldr	r3, [r4, #16]
 8007734:	462a      	mov	r2, r5
 8007736:	4649      	mov	r1, r9
 8007738:	4640      	mov	r0, r8
 800773a:	47d0      	blx	sl
 800773c:	3001      	adds	r0, #1
 800773e:	d0ab      	beq.n	8007698 <_printf_i+0x164>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	079b      	lsls	r3, r3, #30
 8007744:	d413      	bmi.n	800776e <_printf_i+0x23a>
 8007746:	68e0      	ldr	r0, [r4, #12]
 8007748:	9b03      	ldr	r3, [sp, #12]
 800774a:	4298      	cmp	r0, r3
 800774c:	bfb8      	it	lt
 800774e:	4618      	movlt	r0, r3
 8007750:	e7a4      	b.n	800769c <_printf_i+0x168>
 8007752:	2301      	movs	r3, #1
 8007754:	4632      	mov	r2, r6
 8007756:	4649      	mov	r1, r9
 8007758:	4640      	mov	r0, r8
 800775a:	47d0      	blx	sl
 800775c:	3001      	adds	r0, #1
 800775e:	d09b      	beq.n	8007698 <_printf_i+0x164>
 8007760:	3501      	adds	r5, #1
 8007762:	68e3      	ldr	r3, [r4, #12]
 8007764:	9903      	ldr	r1, [sp, #12]
 8007766:	1a5b      	subs	r3, r3, r1
 8007768:	42ab      	cmp	r3, r5
 800776a:	dcf2      	bgt.n	8007752 <_printf_i+0x21e>
 800776c:	e7eb      	b.n	8007746 <_printf_i+0x212>
 800776e:	2500      	movs	r5, #0
 8007770:	f104 0619 	add.w	r6, r4, #25
 8007774:	e7f5      	b.n	8007762 <_printf_i+0x22e>
 8007776:	bf00      	nop
 8007778:	0800801d 	.word	0x0800801d
 800777c:	0800802e 	.word	0x0800802e

08007780 <_scanf_chars>:
 8007780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007784:	4615      	mov	r5, r2
 8007786:	688a      	ldr	r2, [r1, #8]
 8007788:	4680      	mov	r8, r0
 800778a:	460c      	mov	r4, r1
 800778c:	b932      	cbnz	r2, 800779c <_scanf_chars+0x1c>
 800778e:	698a      	ldr	r2, [r1, #24]
 8007790:	2a00      	cmp	r2, #0
 8007792:	bf0c      	ite	eq
 8007794:	2201      	moveq	r2, #1
 8007796:	f04f 32ff 	movne.w	r2, #4294967295
 800779a:	608a      	str	r2, [r1, #8]
 800779c:	6822      	ldr	r2, [r4, #0]
 800779e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007830 <_scanf_chars+0xb0>
 80077a2:	06d1      	lsls	r1, r2, #27
 80077a4:	bf5f      	itttt	pl
 80077a6:	681a      	ldrpl	r2, [r3, #0]
 80077a8:	1d11      	addpl	r1, r2, #4
 80077aa:	6019      	strpl	r1, [r3, #0]
 80077ac:	6816      	ldrpl	r6, [r2, #0]
 80077ae:	2700      	movs	r7, #0
 80077b0:	69a0      	ldr	r0, [r4, #24]
 80077b2:	b188      	cbz	r0, 80077d8 <_scanf_chars+0x58>
 80077b4:	2801      	cmp	r0, #1
 80077b6:	d107      	bne.n	80077c8 <_scanf_chars+0x48>
 80077b8:	682a      	ldr	r2, [r5, #0]
 80077ba:	7811      	ldrb	r1, [r2, #0]
 80077bc:	6962      	ldr	r2, [r4, #20]
 80077be:	5c52      	ldrb	r2, [r2, r1]
 80077c0:	b952      	cbnz	r2, 80077d8 <_scanf_chars+0x58>
 80077c2:	2f00      	cmp	r7, #0
 80077c4:	d031      	beq.n	800782a <_scanf_chars+0xaa>
 80077c6:	e022      	b.n	800780e <_scanf_chars+0x8e>
 80077c8:	2802      	cmp	r0, #2
 80077ca:	d120      	bne.n	800780e <_scanf_chars+0x8e>
 80077cc:	682b      	ldr	r3, [r5, #0]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80077d4:	071b      	lsls	r3, r3, #28
 80077d6:	d41a      	bmi.n	800780e <_scanf_chars+0x8e>
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	06da      	lsls	r2, r3, #27
 80077dc:	bf5e      	ittt	pl
 80077de:	682b      	ldrpl	r3, [r5, #0]
 80077e0:	781b      	ldrbpl	r3, [r3, #0]
 80077e2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80077e6:	682a      	ldr	r2, [r5, #0]
 80077e8:	686b      	ldr	r3, [r5, #4]
 80077ea:	3201      	adds	r2, #1
 80077ec:	602a      	str	r2, [r5, #0]
 80077ee:	68a2      	ldr	r2, [r4, #8]
 80077f0:	3b01      	subs	r3, #1
 80077f2:	3a01      	subs	r2, #1
 80077f4:	606b      	str	r3, [r5, #4]
 80077f6:	3701      	adds	r7, #1
 80077f8:	60a2      	str	r2, [r4, #8]
 80077fa:	b142      	cbz	r2, 800780e <_scanf_chars+0x8e>
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	dcd7      	bgt.n	80077b0 <_scanf_chars+0x30>
 8007800:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007804:	4629      	mov	r1, r5
 8007806:	4640      	mov	r0, r8
 8007808:	4798      	blx	r3
 800780a:	2800      	cmp	r0, #0
 800780c:	d0d0      	beq.n	80077b0 <_scanf_chars+0x30>
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	f013 0310 	ands.w	r3, r3, #16
 8007814:	d105      	bne.n	8007822 <_scanf_chars+0xa2>
 8007816:	68e2      	ldr	r2, [r4, #12]
 8007818:	3201      	adds	r2, #1
 800781a:	60e2      	str	r2, [r4, #12]
 800781c:	69a2      	ldr	r2, [r4, #24]
 800781e:	b102      	cbz	r2, 8007822 <_scanf_chars+0xa2>
 8007820:	7033      	strb	r3, [r6, #0]
 8007822:	6923      	ldr	r3, [r4, #16]
 8007824:	443b      	add	r3, r7
 8007826:	6123      	str	r3, [r4, #16]
 8007828:	2000      	movs	r0, #0
 800782a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800782e:	bf00      	nop
 8007830:	0800805b 	.word	0x0800805b

08007834 <_scanf_i>:
 8007834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007838:	4698      	mov	r8, r3
 800783a:	4b76      	ldr	r3, [pc, #472]	; (8007a14 <_scanf_i+0x1e0>)
 800783c:	460c      	mov	r4, r1
 800783e:	4682      	mov	sl, r0
 8007840:	4616      	mov	r6, r2
 8007842:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007846:	b087      	sub	sp, #28
 8007848:	ab03      	add	r3, sp, #12
 800784a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800784e:	4b72      	ldr	r3, [pc, #456]	; (8007a18 <_scanf_i+0x1e4>)
 8007850:	69a1      	ldr	r1, [r4, #24]
 8007852:	4a72      	ldr	r2, [pc, #456]	; (8007a1c <_scanf_i+0x1e8>)
 8007854:	2903      	cmp	r1, #3
 8007856:	bf18      	it	ne
 8007858:	461a      	movne	r2, r3
 800785a:	68a3      	ldr	r3, [r4, #8]
 800785c:	9201      	str	r2, [sp, #4]
 800785e:	1e5a      	subs	r2, r3, #1
 8007860:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007864:	bf88      	it	hi
 8007866:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800786a:	4627      	mov	r7, r4
 800786c:	bf82      	ittt	hi
 800786e:	eb03 0905 	addhi.w	r9, r3, r5
 8007872:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007876:	60a3      	strhi	r3, [r4, #8]
 8007878:	f857 3b1c 	ldr.w	r3, [r7], #28
 800787c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007880:	bf98      	it	ls
 8007882:	f04f 0900 	movls.w	r9, #0
 8007886:	6023      	str	r3, [r4, #0]
 8007888:	463d      	mov	r5, r7
 800788a:	f04f 0b00 	mov.w	fp, #0
 800788e:	6831      	ldr	r1, [r6, #0]
 8007890:	ab03      	add	r3, sp, #12
 8007892:	7809      	ldrb	r1, [r1, #0]
 8007894:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007898:	2202      	movs	r2, #2
 800789a:	f7f8 fcb1 	bl	8000200 <memchr>
 800789e:	b328      	cbz	r0, 80078ec <_scanf_i+0xb8>
 80078a0:	f1bb 0f01 	cmp.w	fp, #1
 80078a4:	d159      	bne.n	800795a <_scanf_i+0x126>
 80078a6:	6862      	ldr	r2, [r4, #4]
 80078a8:	b92a      	cbnz	r2, 80078b6 <_scanf_i+0x82>
 80078aa:	6822      	ldr	r2, [r4, #0]
 80078ac:	2308      	movs	r3, #8
 80078ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078b2:	6063      	str	r3, [r4, #4]
 80078b4:	6022      	str	r2, [r4, #0]
 80078b6:	6822      	ldr	r2, [r4, #0]
 80078b8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80078bc:	6022      	str	r2, [r4, #0]
 80078be:	68a2      	ldr	r2, [r4, #8]
 80078c0:	1e51      	subs	r1, r2, #1
 80078c2:	60a1      	str	r1, [r4, #8]
 80078c4:	b192      	cbz	r2, 80078ec <_scanf_i+0xb8>
 80078c6:	6832      	ldr	r2, [r6, #0]
 80078c8:	1c51      	adds	r1, r2, #1
 80078ca:	6031      	str	r1, [r6, #0]
 80078cc:	7812      	ldrb	r2, [r2, #0]
 80078ce:	f805 2b01 	strb.w	r2, [r5], #1
 80078d2:	6872      	ldr	r2, [r6, #4]
 80078d4:	3a01      	subs	r2, #1
 80078d6:	2a00      	cmp	r2, #0
 80078d8:	6072      	str	r2, [r6, #4]
 80078da:	dc07      	bgt.n	80078ec <_scanf_i+0xb8>
 80078dc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80078e0:	4631      	mov	r1, r6
 80078e2:	4650      	mov	r0, sl
 80078e4:	4790      	blx	r2
 80078e6:	2800      	cmp	r0, #0
 80078e8:	f040 8085 	bne.w	80079f6 <_scanf_i+0x1c2>
 80078ec:	f10b 0b01 	add.w	fp, fp, #1
 80078f0:	f1bb 0f03 	cmp.w	fp, #3
 80078f4:	d1cb      	bne.n	800788e <_scanf_i+0x5a>
 80078f6:	6863      	ldr	r3, [r4, #4]
 80078f8:	b90b      	cbnz	r3, 80078fe <_scanf_i+0xca>
 80078fa:	230a      	movs	r3, #10
 80078fc:	6063      	str	r3, [r4, #4]
 80078fe:	6863      	ldr	r3, [r4, #4]
 8007900:	4947      	ldr	r1, [pc, #284]	; (8007a20 <_scanf_i+0x1ec>)
 8007902:	6960      	ldr	r0, [r4, #20]
 8007904:	1ac9      	subs	r1, r1, r3
 8007906:	f000 f8af 	bl	8007a68 <__sccl>
 800790a:	f04f 0b00 	mov.w	fp, #0
 800790e:	68a3      	ldr	r3, [r4, #8]
 8007910:	6822      	ldr	r2, [r4, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d03d      	beq.n	8007992 <_scanf_i+0x15e>
 8007916:	6831      	ldr	r1, [r6, #0]
 8007918:	6960      	ldr	r0, [r4, #20]
 800791a:	f891 c000 	ldrb.w	ip, [r1]
 800791e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007922:	2800      	cmp	r0, #0
 8007924:	d035      	beq.n	8007992 <_scanf_i+0x15e>
 8007926:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800792a:	d124      	bne.n	8007976 <_scanf_i+0x142>
 800792c:	0510      	lsls	r0, r2, #20
 800792e:	d522      	bpl.n	8007976 <_scanf_i+0x142>
 8007930:	f10b 0b01 	add.w	fp, fp, #1
 8007934:	f1b9 0f00 	cmp.w	r9, #0
 8007938:	d003      	beq.n	8007942 <_scanf_i+0x10e>
 800793a:	3301      	adds	r3, #1
 800793c:	f109 39ff 	add.w	r9, r9, #4294967295
 8007940:	60a3      	str	r3, [r4, #8]
 8007942:	6873      	ldr	r3, [r6, #4]
 8007944:	3b01      	subs	r3, #1
 8007946:	2b00      	cmp	r3, #0
 8007948:	6073      	str	r3, [r6, #4]
 800794a:	dd1b      	ble.n	8007984 <_scanf_i+0x150>
 800794c:	6833      	ldr	r3, [r6, #0]
 800794e:	3301      	adds	r3, #1
 8007950:	6033      	str	r3, [r6, #0]
 8007952:	68a3      	ldr	r3, [r4, #8]
 8007954:	3b01      	subs	r3, #1
 8007956:	60a3      	str	r3, [r4, #8]
 8007958:	e7d9      	b.n	800790e <_scanf_i+0xda>
 800795a:	f1bb 0f02 	cmp.w	fp, #2
 800795e:	d1ae      	bne.n	80078be <_scanf_i+0x8a>
 8007960:	6822      	ldr	r2, [r4, #0]
 8007962:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007966:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800796a:	d1bf      	bne.n	80078ec <_scanf_i+0xb8>
 800796c:	2310      	movs	r3, #16
 800796e:	6063      	str	r3, [r4, #4]
 8007970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007974:	e7a2      	b.n	80078bc <_scanf_i+0x88>
 8007976:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800797a:	6022      	str	r2, [r4, #0]
 800797c:	780b      	ldrb	r3, [r1, #0]
 800797e:	f805 3b01 	strb.w	r3, [r5], #1
 8007982:	e7de      	b.n	8007942 <_scanf_i+0x10e>
 8007984:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007988:	4631      	mov	r1, r6
 800798a:	4650      	mov	r0, sl
 800798c:	4798      	blx	r3
 800798e:	2800      	cmp	r0, #0
 8007990:	d0df      	beq.n	8007952 <_scanf_i+0x11e>
 8007992:	6823      	ldr	r3, [r4, #0]
 8007994:	05db      	lsls	r3, r3, #23
 8007996:	d50d      	bpl.n	80079b4 <_scanf_i+0x180>
 8007998:	42bd      	cmp	r5, r7
 800799a:	d909      	bls.n	80079b0 <_scanf_i+0x17c>
 800799c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80079a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079a4:	4632      	mov	r2, r6
 80079a6:	4650      	mov	r0, sl
 80079a8:	4798      	blx	r3
 80079aa:	f105 39ff 	add.w	r9, r5, #4294967295
 80079ae:	464d      	mov	r5, r9
 80079b0:	42bd      	cmp	r5, r7
 80079b2:	d02d      	beq.n	8007a10 <_scanf_i+0x1dc>
 80079b4:	6822      	ldr	r2, [r4, #0]
 80079b6:	f012 0210 	ands.w	r2, r2, #16
 80079ba:	d113      	bne.n	80079e4 <_scanf_i+0x1b0>
 80079bc:	702a      	strb	r2, [r5, #0]
 80079be:	6863      	ldr	r3, [r4, #4]
 80079c0:	9e01      	ldr	r6, [sp, #4]
 80079c2:	4639      	mov	r1, r7
 80079c4:	4650      	mov	r0, sl
 80079c6:	47b0      	blx	r6
 80079c8:	6821      	ldr	r1, [r4, #0]
 80079ca:	f8d8 3000 	ldr.w	r3, [r8]
 80079ce:	f011 0f20 	tst.w	r1, #32
 80079d2:	d013      	beq.n	80079fc <_scanf_i+0x1c8>
 80079d4:	1d1a      	adds	r2, r3, #4
 80079d6:	f8c8 2000 	str.w	r2, [r8]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	6018      	str	r0, [r3, #0]
 80079de:	68e3      	ldr	r3, [r4, #12]
 80079e0:	3301      	adds	r3, #1
 80079e2:	60e3      	str	r3, [r4, #12]
 80079e4:	1bed      	subs	r5, r5, r7
 80079e6:	44ab      	add	fp, r5
 80079e8:	6925      	ldr	r5, [r4, #16]
 80079ea:	445d      	add	r5, fp
 80079ec:	6125      	str	r5, [r4, #16]
 80079ee:	2000      	movs	r0, #0
 80079f0:	b007      	add	sp, #28
 80079f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f6:	f04f 0b00 	mov.w	fp, #0
 80079fa:	e7ca      	b.n	8007992 <_scanf_i+0x15e>
 80079fc:	1d1a      	adds	r2, r3, #4
 80079fe:	f8c8 2000 	str.w	r2, [r8]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f011 0f01 	tst.w	r1, #1
 8007a08:	bf14      	ite	ne
 8007a0a:	8018      	strhne	r0, [r3, #0]
 8007a0c:	6018      	streq	r0, [r3, #0]
 8007a0e:	e7e6      	b.n	80079de <_scanf_i+0x1aa>
 8007a10:	2001      	movs	r0, #1
 8007a12:	e7ed      	b.n	80079f0 <_scanf_i+0x1bc>
 8007a14:	08007f7c 	.word	0x08007f7c
 8007a18:	08007cc5 	.word	0x08007cc5
 8007a1c:	08007bdd 	.word	0x08007bdd
 8007a20:	08008058 	.word	0x08008058

08007a24 <_read_r>:
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	4d07      	ldr	r5, [pc, #28]	; (8007a44 <_read_r+0x20>)
 8007a28:	4604      	mov	r4, r0
 8007a2a:	4608      	mov	r0, r1
 8007a2c:	4611      	mov	r1, r2
 8007a2e:	2200      	movs	r2, #0
 8007a30:	602a      	str	r2, [r5, #0]
 8007a32:	461a      	mov	r2, r3
 8007a34:	f7f9 f966 	bl	8000d04 <_read>
 8007a38:	1c43      	adds	r3, r0, #1
 8007a3a:	d102      	bne.n	8007a42 <_read_r+0x1e>
 8007a3c:	682b      	ldr	r3, [r5, #0]
 8007a3e:	b103      	cbz	r3, 8007a42 <_read_r+0x1e>
 8007a40:	6023      	str	r3, [r4, #0]
 8007a42:	bd38      	pop	{r3, r4, r5, pc}
 8007a44:	200057a4 	.word	0x200057a4

08007a48 <_sbrk_r>:
 8007a48:	b538      	push	{r3, r4, r5, lr}
 8007a4a:	4d06      	ldr	r5, [pc, #24]	; (8007a64 <_sbrk_r+0x1c>)
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	4604      	mov	r4, r0
 8007a50:	4608      	mov	r0, r1
 8007a52:	602b      	str	r3, [r5, #0]
 8007a54:	f7f9 f9c4 	bl	8000de0 <_sbrk>
 8007a58:	1c43      	adds	r3, r0, #1
 8007a5a:	d102      	bne.n	8007a62 <_sbrk_r+0x1a>
 8007a5c:	682b      	ldr	r3, [r5, #0]
 8007a5e:	b103      	cbz	r3, 8007a62 <_sbrk_r+0x1a>
 8007a60:	6023      	str	r3, [r4, #0]
 8007a62:	bd38      	pop	{r3, r4, r5, pc}
 8007a64:	200057a4 	.word	0x200057a4

08007a68 <__sccl>:
 8007a68:	b570      	push	{r4, r5, r6, lr}
 8007a6a:	780b      	ldrb	r3, [r1, #0]
 8007a6c:	4604      	mov	r4, r0
 8007a6e:	2b5e      	cmp	r3, #94	; 0x5e
 8007a70:	bf0b      	itete	eq
 8007a72:	784b      	ldrbeq	r3, [r1, #1]
 8007a74:	1c48      	addne	r0, r1, #1
 8007a76:	1c88      	addeq	r0, r1, #2
 8007a78:	2200      	movne	r2, #0
 8007a7a:	bf08      	it	eq
 8007a7c:	2201      	moveq	r2, #1
 8007a7e:	1e61      	subs	r1, r4, #1
 8007a80:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007a84:	f801 2f01 	strb.w	r2, [r1, #1]!
 8007a88:	42a9      	cmp	r1, r5
 8007a8a:	d1fb      	bne.n	8007a84 <__sccl+0x1c>
 8007a8c:	b90b      	cbnz	r3, 8007a92 <__sccl+0x2a>
 8007a8e:	3801      	subs	r0, #1
 8007a90:	bd70      	pop	{r4, r5, r6, pc}
 8007a92:	f082 0201 	eor.w	r2, r2, #1
 8007a96:	54e2      	strb	r2, [r4, r3]
 8007a98:	4605      	mov	r5, r0
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007aa0:	292d      	cmp	r1, #45	; 0x2d
 8007aa2:	d006      	beq.n	8007ab2 <__sccl+0x4a>
 8007aa4:	295d      	cmp	r1, #93	; 0x5d
 8007aa6:	d0f3      	beq.n	8007a90 <__sccl+0x28>
 8007aa8:	b909      	cbnz	r1, 8007aae <__sccl+0x46>
 8007aaa:	4628      	mov	r0, r5
 8007aac:	e7f0      	b.n	8007a90 <__sccl+0x28>
 8007aae:	460b      	mov	r3, r1
 8007ab0:	e7f1      	b.n	8007a96 <__sccl+0x2e>
 8007ab2:	786e      	ldrb	r6, [r5, #1]
 8007ab4:	2e5d      	cmp	r6, #93	; 0x5d
 8007ab6:	d0fa      	beq.n	8007aae <__sccl+0x46>
 8007ab8:	42b3      	cmp	r3, r6
 8007aba:	dcf8      	bgt.n	8007aae <__sccl+0x46>
 8007abc:	3502      	adds	r5, #2
 8007abe:	4619      	mov	r1, r3
 8007ac0:	3101      	adds	r1, #1
 8007ac2:	428e      	cmp	r6, r1
 8007ac4:	5462      	strb	r2, [r4, r1]
 8007ac6:	dcfb      	bgt.n	8007ac0 <__sccl+0x58>
 8007ac8:	1af1      	subs	r1, r6, r3
 8007aca:	3901      	subs	r1, #1
 8007acc:	1c58      	adds	r0, r3, #1
 8007ace:	42b3      	cmp	r3, r6
 8007ad0:	bfa8      	it	ge
 8007ad2:	2100      	movge	r1, #0
 8007ad4:	1843      	adds	r3, r0, r1
 8007ad6:	e7e0      	b.n	8007a9a <__sccl+0x32>

08007ad8 <_strtol_l.constprop.0>:
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ade:	d001      	beq.n	8007ae4 <_strtol_l.constprop.0+0xc>
 8007ae0:	2b24      	cmp	r3, #36	; 0x24
 8007ae2:	d906      	bls.n	8007af2 <_strtol_l.constprop.0+0x1a>
 8007ae4:	f7fe fb8a 	bl	80061fc <__errno>
 8007ae8:	2316      	movs	r3, #22
 8007aea:	6003      	str	r3, [r0, #0]
 8007aec:	2000      	movs	r0, #0
 8007aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007af2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007bd8 <_strtol_l.constprop.0+0x100>
 8007af6:	460d      	mov	r5, r1
 8007af8:	462e      	mov	r6, r5
 8007afa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007afe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007b02:	f017 0708 	ands.w	r7, r7, #8
 8007b06:	d1f7      	bne.n	8007af8 <_strtol_l.constprop.0+0x20>
 8007b08:	2c2d      	cmp	r4, #45	; 0x2d
 8007b0a:	d132      	bne.n	8007b72 <_strtol_l.constprop.0+0x9a>
 8007b0c:	782c      	ldrb	r4, [r5, #0]
 8007b0e:	2701      	movs	r7, #1
 8007b10:	1cb5      	adds	r5, r6, #2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d05b      	beq.n	8007bce <_strtol_l.constprop.0+0xf6>
 8007b16:	2b10      	cmp	r3, #16
 8007b18:	d109      	bne.n	8007b2e <_strtol_l.constprop.0+0x56>
 8007b1a:	2c30      	cmp	r4, #48	; 0x30
 8007b1c:	d107      	bne.n	8007b2e <_strtol_l.constprop.0+0x56>
 8007b1e:	782c      	ldrb	r4, [r5, #0]
 8007b20:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007b24:	2c58      	cmp	r4, #88	; 0x58
 8007b26:	d14d      	bne.n	8007bc4 <_strtol_l.constprop.0+0xec>
 8007b28:	786c      	ldrb	r4, [r5, #1]
 8007b2a:	2310      	movs	r3, #16
 8007b2c:	3502      	adds	r5, #2
 8007b2e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007b32:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b36:	f04f 0c00 	mov.w	ip, #0
 8007b3a:	fbb8 f9f3 	udiv	r9, r8, r3
 8007b3e:	4666      	mov	r6, ip
 8007b40:	fb03 8a19 	mls	sl, r3, r9, r8
 8007b44:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007b48:	f1be 0f09 	cmp.w	lr, #9
 8007b4c:	d816      	bhi.n	8007b7c <_strtol_l.constprop.0+0xa4>
 8007b4e:	4674      	mov	r4, lr
 8007b50:	42a3      	cmp	r3, r4
 8007b52:	dd24      	ble.n	8007b9e <_strtol_l.constprop.0+0xc6>
 8007b54:	f1bc 0f00 	cmp.w	ip, #0
 8007b58:	db1e      	blt.n	8007b98 <_strtol_l.constprop.0+0xc0>
 8007b5a:	45b1      	cmp	r9, r6
 8007b5c:	d31c      	bcc.n	8007b98 <_strtol_l.constprop.0+0xc0>
 8007b5e:	d101      	bne.n	8007b64 <_strtol_l.constprop.0+0x8c>
 8007b60:	45a2      	cmp	sl, r4
 8007b62:	db19      	blt.n	8007b98 <_strtol_l.constprop.0+0xc0>
 8007b64:	fb06 4603 	mla	r6, r6, r3, r4
 8007b68:	f04f 0c01 	mov.w	ip, #1
 8007b6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b70:	e7e8      	b.n	8007b44 <_strtol_l.constprop.0+0x6c>
 8007b72:	2c2b      	cmp	r4, #43	; 0x2b
 8007b74:	bf04      	itt	eq
 8007b76:	782c      	ldrbeq	r4, [r5, #0]
 8007b78:	1cb5      	addeq	r5, r6, #2
 8007b7a:	e7ca      	b.n	8007b12 <_strtol_l.constprop.0+0x3a>
 8007b7c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007b80:	f1be 0f19 	cmp.w	lr, #25
 8007b84:	d801      	bhi.n	8007b8a <_strtol_l.constprop.0+0xb2>
 8007b86:	3c37      	subs	r4, #55	; 0x37
 8007b88:	e7e2      	b.n	8007b50 <_strtol_l.constprop.0+0x78>
 8007b8a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007b8e:	f1be 0f19 	cmp.w	lr, #25
 8007b92:	d804      	bhi.n	8007b9e <_strtol_l.constprop.0+0xc6>
 8007b94:	3c57      	subs	r4, #87	; 0x57
 8007b96:	e7db      	b.n	8007b50 <_strtol_l.constprop.0+0x78>
 8007b98:	f04f 3cff 	mov.w	ip, #4294967295
 8007b9c:	e7e6      	b.n	8007b6c <_strtol_l.constprop.0+0x94>
 8007b9e:	f1bc 0f00 	cmp.w	ip, #0
 8007ba2:	da05      	bge.n	8007bb0 <_strtol_l.constprop.0+0xd8>
 8007ba4:	2322      	movs	r3, #34	; 0x22
 8007ba6:	6003      	str	r3, [r0, #0]
 8007ba8:	4646      	mov	r6, r8
 8007baa:	b942      	cbnz	r2, 8007bbe <_strtol_l.constprop.0+0xe6>
 8007bac:	4630      	mov	r0, r6
 8007bae:	e79e      	b.n	8007aee <_strtol_l.constprop.0+0x16>
 8007bb0:	b107      	cbz	r7, 8007bb4 <_strtol_l.constprop.0+0xdc>
 8007bb2:	4276      	negs	r6, r6
 8007bb4:	2a00      	cmp	r2, #0
 8007bb6:	d0f9      	beq.n	8007bac <_strtol_l.constprop.0+0xd4>
 8007bb8:	f1bc 0f00 	cmp.w	ip, #0
 8007bbc:	d000      	beq.n	8007bc0 <_strtol_l.constprop.0+0xe8>
 8007bbe:	1e69      	subs	r1, r5, #1
 8007bc0:	6011      	str	r1, [r2, #0]
 8007bc2:	e7f3      	b.n	8007bac <_strtol_l.constprop.0+0xd4>
 8007bc4:	2430      	movs	r4, #48	; 0x30
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1b1      	bne.n	8007b2e <_strtol_l.constprop.0+0x56>
 8007bca:	2308      	movs	r3, #8
 8007bcc:	e7af      	b.n	8007b2e <_strtol_l.constprop.0+0x56>
 8007bce:	2c30      	cmp	r4, #48	; 0x30
 8007bd0:	d0a5      	beq.n	8007b1e <_strtol_l.constprop.0+0x46>
 8007bd2:	230a      	movs	r3, #10
 8007bd4:	e7ab      	b.n	8007b2e <_strtol_l.constprop.0+0x56>
 8007bd6:	bf00      	nop
 8007bd8:	0800805b 	.word	0x0800805b

08007bdc <_strtol_r>:
 8007bdc:	f7ff bf7c 	b.w	8007ad8 <_strtol_l.constprop.0>

08007be0 <_strtoul_l.constprop.0>:
 8007be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007be4:	4f36      	ldr	r7, [pc, #216]	; (8007cc0 <_strtoul_l.constprop.0+0xe0>)
 8007be6:	4686      	mov	lr, r0
 8007be8:	460d      	mov	r5, r1
 8007bea:	4628      	mov	r0, r5
 8007bec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007bf0:	5de6      	ldrb	r6, [r4, r7]
 8007bf2:	f016 0608 	ands.w	r6, r6, #8
 8007bf6:	d1f8      	bne.n	8007bea <_strtoul_l.constprop.0+0xa>
 8007bf8:	2c2d      	cmp	r4, #45	; 0x2d
 8007bfa:	d12f      	bne.n	8007c5c <_strtoul_l.constprop.0+0x7c>
 8007bfc:	782c      	ldrb	r4, [r5, #0]
 8007bfe:	2601      	movs	r6, #1
 8007c00:	1c85      	adds	r5, r0, #2
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d057      	beq.n	8007cb6 <_strtoul_l.constprop.0+0xd6>
 8007c06:	2b10      	cmp	r3, #16
 8007c08:	d109      	bne.n	8007c1e <_strtoul_l.constprop.0+0x3e>
 8007c0a:	2c30      	cmp	r4, #48	; 0x30
 8007c0c:	d107      	bne.n	8007c1e <_strtoul_l.constprop.0+0x3e>
 8007c0e:	7828      	ldrb	r0, [r5, #0]
 8007c10:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007c14:	2858      	cmp	r0, #88	; 0x58
 8007c16:	d149      	bne.n	8007cac <_strtoul_l.constprop.0+0xcc>
 8007c18:	786c      	ldrb	r4, [r5, #1]
 8007c1a:	2310      	movs	r3, #16
 8007c1c:	3502      	adds	r5, #2
 8007c1e:	f04f 38ff 	mov.w	r8, #4294967295
 8007c22:	2700      	movs	r7, #0
 8007c24:	fbb8 f8f3 	udiv	r8, r8, r3
 8007c28:	fb03 f908 	mul.w	r9, r3, r8
 8007c2c:	ea6f 0909 	mvn.w	r9, r9
 8007c30:	4638      	mov	r0, r7
 8007c32:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007c36:	f1bc 0f09 	cmp.w	ip, #9
 8007c3a:	d814      	bhi.n	8007c66 <_strtoul_l.constprop.0+0x86>
 8007c3c:	4664      	mov	r4, ip
 8007c3e:	42a3      	cmp	r3, r4
 8007c40:	dd22      	ble.n	8007c88 <_strtoul_l.constprop.0+0xa8>
 8007c42:	2f00      	cmp	r7, #0
 8007c44:	db1d      	blt.n	8007c82 <_strtoul_l.constprop.0+0xa2>
 8007c46:	4580      	cmp	r8, r0
 8007c48:	d31b      	bcc.n	8007c82 <_strtoul_l.constprop.0+0xa2>
 8007c4a:	d101      	bne.n	8007c50 <_strtoul_l.constprop.0+0x70>
 8007c4c:	45a1      	cmp	r9, r4
 8007c4e:	db18      	blt.n	8007c82 <_strtoul_l.constprop.0+0xa2>
 8007c50:	fb00 4003 	mla	r0, r0, r3, r4
 8007c54:	2701      	movs	r7, #1
 8007c56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c5a:	e7ea      	b.n	8007c32 <_strtoul_l.constprop.0+0x52>
 8007c5c:	2c2b      	cmp	r4, #43	; 0x2b
 8007c5e:	bf04      	itt	eq
 8007c60:	782c      	ldrbeq	r4, [r5, #0]
 8007c62:	1c85      	addeq	r5, r0, #2
 8007c64:	e7cd      	b.n	8007c02 <_strtoul_l.constprop.0+0x22>
 8007c66:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007c6a:	f1bc 0f19 	cmp.w	ip, #25
 8007c6e:	d801      	bhi.n	8007c74 <_strtoul_l.constprop.0+0x94>
 8007c70:	3c37      	subs	r4, #55	; 0x37
 8007c72:	e7e4      	b.n	8007c3e <_strtoul_l.constprop.0+0x5e>
 8007c74:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007c78:	f1bc 0f19 	cmp.w	ip, #25
 8007c7c:	d804      	bhi.n	8007c88 <_strtoul_l.constprop.0+0xa8>
 8007c7e:	3c57      	subs	r4, #87	; 0x57
 8007c80:	e7dd      	b.n	8007c3e <_strtoul_l.constprop.0+0x5e>
 8007c82:	f04f 37ff 	mov.w	r7, #4294967295
 8007c86:	e7e6      	b.n	8007c56 <_strtoul_l.constprop.0+0x76>
 8007c88:	2f00      	cmp	r7, #0
 8007c8a:	da07      	bge.n	8007c9c <_strtoul_l.constprop.0+0xbc>
 8007c8c:	2322      	movs	r3, #34	; 0x22
 8007c8e:	f8ce 3000 	str.w	r3, [lr]
 8007c92:	f04f 30ff 	mov.w	r0, #4294967295
 8007c96:	b932      	cbnz	r2, 8007ca6 <_strtoul_l.constprop.0+0xc6>
 8007c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c9c:	b106      	cbz	r6, 8007ca0 <_strtoul_l.constprop.0+0xc0>
 8007c9e:	4240      	negs	r0, r0
 8007ca0:	2a00      	cmp	r2, #0
 8007ca2:	d0f9      	beq.n	8007c98 <_strtoul_l.constprop.0+0xb8>
 8007ca4:	b107      	cbz	r7, 8007ca8 <_strtoul_l.constprop.0+0xc8>
 8007ca6:	1e69      	subs	r1, r5, #1
 8007ca8:	6011      	str	r1, [r2, #0]
 8007caa:	e7f5      	b.n	8007c98 <_strtoul_l.constprop.0+0xb8>
 8007cac:	2430      	movs	r4, #48	; 0x30
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1b5      	bne.n	8007c1e <_strtoul_l.constprop.0+0x3e>
 8007cb2:	2308      	movs	r3, #8
 8007cb4:	e7b3      	b.n	8007c1e <_strtoul_l.constprop.0+0x3e>
 8007cb6:	2c30      	cmp	r4, #48	; 0x30
 8007cb8:	d0a9      	beq.n	8007c0e <_strtoul_l.constprop.0+0x2e>
 8007cba:	230a      	movs	r3, #10
 8007cbc:	e7af      	b.n	8007c1e <_strtoul_l.constprop.0+0x3e>
 8007cbe:	bf00      	nop
 8007cc0:	0800805b 	.word	0x0800805b

08007cc4 <_strtoul_r>:
 8007cc4:	f7ff bf8c 	b.w	8007be0 <_strtoul_l.constprop.0>

08007cc8 <__submore>:
 8007cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ccc:	460c      	mov	r4, r1
 8007cce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007cd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cd4:	4299      	cmp	r1, r3
 8007cd6:	d11d      	bne.n	8007d14 <__submore+0x4c>
 8007cd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007cdc:	f7ff f81c 	bl	8006d18 <_malloc_r>
 8007ce0:	b918      	cbnz	r0, 8007cea <__submore+0x22>
 8007ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cee:	63a3      	str	r3, [r4, #56]	; 0x38
 8007cf0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007cf4:	6360      	str	r0, [r4, #52]	; 0x34
 8007cf6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007cfa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007cfe:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007d02:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007d06:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8007d0a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007d0e:	6020      	str	r0, [r4, #0]
 8007d10:	2000      	movs	r0, #0
 8007d12:	e7e8      	b.n	8007ce6 <__submore+0x1e>
 8007d14:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007d16:	0077      	lsls	r7, r6, #1
 8007d18:	463a      	mov	r2, r7
 8007d1a:	f000 f83d 	bl	8007d98 <_realloc_r>
 8007d1e:	4605      	mov	r5, r0
 8007d20:	2800      	cmp	r0, #0
 8007d22:	d0de      	beq.n	8007ce2 <__submore+0x1a>
 8007d24:	eb00 0806 	add.w	r8, r0, r6
 8007d28:	4601      	mov	r1, r0
 8007d2a:	4632      	mov	r2, r6
 8007d2c:	4640      	mov	r0, r8
 8007d2e:	f7fe fa8f 	bl	8006250 <memcpy>
 8007d32:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007d36:	f8c4 8000 	str.w	r8, [r4]
 8007d3a:	e7e9      	b.n	8007d10 <__submore+0x48>

08007d3c <_fstat_r>:
 8007d3c:	b538      	push	{r3, r4, r5, lr}
 8007d3e:	4d07      	ldr	r5, [pc, #28]	; (8007d5c <_fstat_r+0x20>)
 8007d40:	2300      	movs	r3, #0
 8007d42:	4604      	mov	r4, r0
 8007d44:	4608      	mov	r0, r1
 8007d46:	4611      	mov	r1, r2
 8007d48:	602b      	str	r3, [r5, #0]
 8007d4a:	f7f9 f820 	bl	8000d8e <_fstat>
 8007d4e:	1c43      	adds	r3, r0, #1
 8007d50:	d102      	bne.n	8007d58 <_fstat_r+0x1c>
 8007d52:	682b      	ldr	r3, [r5, #0]
 8007d54:	b103      	cbz	r3, 8007d58 <_fstat_r+0x1c>
 8007d56:	6023      	str	r3, [r4, #0]
 8007d58:	bd38      	pop	{r3, r4, r5, pc}
 8007d5a:	bf00      	nop
 8007d5c:	200057a4 	.word	0x200057a4

08007d60 <_isatty_r>:
 8007d60:	b538      	push	{r3, r4, r5, lr}
 8007d62:	4d06      	ldr	r5, [pc, #24]	; (8007d7c <_isatty_r+0x1c>)
 8007d64:	2300      	movs	r3, #0
 8007d66:	4604      	mov	r4, r0
 8007d68:	4608      	mov	r0, r1
 8007d6a:	602b      	str	r3, [r5, #0]
 8007d6c:	f7f9 f81f 	bl	8000dae <_isatty>
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d102      	bne.n	8007d7a <_isatty_r+0x1a>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	b103      	cbz	r3, 8007d7a <_isatty_r+0x1a>
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}
 8007d7c:	200057a4 	.word	0x200057a4

08007d80 <__malloc_lock>:
 8007d80:	4801      	ldr	r0, [pc, #4]	; (8007d88 <__malloc_lock+0x8>)
 8007d82:	f7fe bedb 	b.w	8006b3c <__retarget_lock_acquire_recursive>
 8007d86:	bf00      	nop
 8007d88:	20005798 	.word	0x20005798

08007d8c <__malloc_unlock>:
 8007d8c:	4801      	ldr	r0, [pc, #4]	; (8007d94 <__malloc_unlock+0x8>)
 8007d8e:	f7fe bed6 	b.w	8006b3e <__retarget_lock_release_recursive>
 8007d92:	bf00      	nop
 8007d94:	20005798 	.word	0x20005798

08007d98 <_realloc_r>:
 8007d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9c:	4680      	mov	r8, r0
 8007d9e:	4614      	mov	r4, r2
 8007da0:	460e      	mov	r6, r1
 8007da2:	b921      	cbnz	r1, 8007dae <_realloc_r+0x16>
 8007da4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007da8:	4611      	mov	r1, r2
 8007daa:	f7fe bfb5 	b.w	8006d18 <_malloc_r>
 8007dae:	b92a      	cbnz	r2, 8007dbc <_realloc_r+0x24>
 8007db0:	f7fe ff46 	bl	8006c40 <_free_r>
 8007db4:	4625      	mov	r5, r4
 8007db6:	4628      	mov	r0, r5
 8007db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dbc:	f000 f81b 	bl	8007df6 <_malloc_usable_size_r>
 8007dc0:	4284      	cmp	r4, r0
 8007dc2:	4607      	mov	r7, r0
 8007dc4:	d802      	bhi.n	8007dcc <_realloc_r+0x34>
 8007dc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007dca:	d812      	bhi.n	8007df2 <_realloc_r+0x5a>
 8007dcc:	4621      	mov	r1, r4
 8007dce:	4640      	mov	r0, r8
 8007dd0:	f7fe ffa2 	bl	8006d18 <_malloc_r>
 8007dd4:	4605      	mov	r5, r0
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d0ed      	beq.n	8007db6 <_realloc_r+0x1e>
 8007dda:	42bc      	cmp	r4, r7
 8007ddc:	4622      	mov	r2, r4
 8007dde:	4631      	mov	r1, r6
 8007de0:	bf28      	it	cs
 8007de2:	463a      	movcs	r2, r7
 8007de4:	f7fe fa34 	bl	8006250 <memcpy>
 8007de8:	4631      	mov	r1, r6
 8007dea:	4640      	mov	r0, r8
 8007dec:	f7fe ff28 	bl	8006c40 <_free_r>
 8007df0:	e7e1      	b.n	8007db6 <_realloc_r+0x1e>
 8007df2:	4635      	mov	r5, r6
 8007df4:	e7df      	b.n	8007db6 <_realloc_r+0x1e>

08007df6 <_malloc_usable_size_r>:
 8007df6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dfa:	1f18      	subs	r0, r3, #4
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	bfbc      	itt	lt
 8007e00:	580b      	ldrlt	r3, [r1, r0]
 8007e02:	18c0      	addlt	r0, r0, r3
 8007e04:	4770      	bx	lr
	...

08007e08 <_init>:
 8007e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e0a:	bf00      	nop
 8007e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e0e:	bc08      	pop	{r3}
 8007e10:	469e      	mov	lr, r3
 8007e12:	4770      	bx	lr

08007e14 <_fini>:
 8007e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e16:	bf00      	nop
 8007e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e1a:	bc08      	pop	{r3}
 8007e1c:	469e      	mov	lr, r3
 8007e1e:	4770      	bx	lr
